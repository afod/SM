
&НаКлиенте
Процедура ОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если НоваяСтрока И Не ОтменаРедактирования Тогда	
			//ТекДанные.ID = Новый УникальныйИдентификатор();
			Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
				Объект.Подразделение = впОбщиеПроцедурыДокументовТОИР.ЗаполнитьПодразделение(ТекДанные.ОбъектРемонта);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	РаспространятьНаПодчиненных = Элемент.ТекущиеДанные.РаспространятьНаПодчиненных;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если  Элемент.ТекущиеДанные.РаспространятьНаПодчиненных Тогда
		ОчиститьПодчиненныеНаСервере(Элемент.ТекущиеДанные.ОбъектРемонта);
		ЗаполнитьПодчиненныеНаСервере(Элемент.ТекущиеДанные.ОбъектРемонта);
	Иначе 
		Если РаспространятьНаПодчиненных Тогда
			ОчиститьПодчиненныеНаСервере(Элемент.ТекущиеДанные.ОбъектРемонта);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодчиненныеНаСервере(ОбъектРемонта)
	ТаблицаЗаполнения = впОбщиеПроцедурыДокументовТОИР.ПолучитьТаблицуПодчиненныхОР(ОбъектРемонта);
	Для Каждого стрТаб из ТаблицаЗаполнения Цикл
		СтрокаПодч = Объект.ПодчиненныеОбъекты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодч, стрТаб);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОчиститьПодчиненныеНаСервере(ОбъектРемонта)
	СтрокиДляУдаления = Объект.ПодчиненныеОбъекты.НайтиСтроки(Новый Структура("Объект", ОбъектРемонта));
	Для Каждого СтрокаДляУдаления из СтрокиДляУдаления Цикл
		Объект.ПодчиненныеОбъекты.Удалить(Объект.ПодчиненныеОбъекты.Индекс(СтрокаДляУдаления));
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Константы.впОсновнаяОрганизация.Получить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// ++ rarus makole 2021-02-09
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -- rarus makole 2021-02-09
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
