
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	// ++ rarus selmik 29.03.2021
	Если Не Отказ Тогда
		ОбъектыРемонтаСтрокой_ДоИзменения = ОбъектыРемонтаСтрокой;
		ОбъектыРемонтаСтрокой_НовоеЗначение = "";
		
		РемонтыОборудованияТЗ = СписокДефектов.Выгрузить(,"ОтказавшийЭлемент");
		РемонтыОборудованияТЗ.Свернуть("ОтказавшийЭлемент");
		
		Для Каждого	ЭлементОбъектРемонта Из РемонтыОборудованияТЗ Цикл
			Если ЗначениеЗаполнено(ЭлементОбъектРемонта.ОтказавшийЭлемент) Тогда
				
				Если Не ЗначениеЗаполнено(ОбъектыРемонтаСтрокой_НовоеЗначение) Тогда
					ОбъектыРемонтаСтрокой_НовоеЗначение = ЭлементОбъектРемонта.ОтказавшийЭлемент.Наименование;
				Иначе
					ОбъектыРемонтаСтрокой_НовоеЗначение = ОбъектыРемонтаСтрокой_НовоеЗначение + "; " + ЭлементОбъектРемонта.ОтказавшийЭлемент.Наименование;
				КонецЕсли;
				
			КонецЕсли;			
		КонецЦикла;
		
		Если ОбъектыРемонтаСтрокой_ДоИзменения <> ОбъектыРемонтаСтрокой_НовоеЗначение Тогда
			ОбъектыРемонтаСтрокой = ОбъектыРемонтаСтрокой_НовоеЗначение;	
		КонецЕсли;
	КонецЕсли;
	// -- rarus selmik 29.03.2021
		
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// ++ rarus selmik 21.12.2020 25003
	МассивКритичностей = СписокДефектов.ВыгрузитьКолонку("КритичностьДефекта");
	Если МассивКритичностей.Найти(Справочники.впКритичностьДефекта.Высокая) <> Неопределено Тогда
		ПроверкаНаличияФайла(Отказ);	
	КонецЕсли;
	// -- rarus selmik 21.12.2020 25003
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		Если ДанныеЗаполнения.Свойство("МассивСтрокТЧ") Тогда
			Для каждого Строка из ДанныеЗаполнения.МассивСтрокТЧ Цикл
				НоваяСтрока = СписокДефектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
		КонецЕсли;
			
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.впВнешнееОснованиеДляРабот") Тогда
		
		Дата = ДанныеЗаполнения.Дата;
		Подразделение = ДанныеЗаполнения.Подразделение;
		Организация = ДанныеЗаполнения.Организация;
		ДокументыОснования.Добавить().ДокументОснование = ДанныеЗаполнения;
		Для Каждого СтрТЧосн из  ДанныеЗаполнения.ОбследованноеОборудование Цикл
			СтрТЧ = СписокДефектов.Добавить();
			СтрТЧ.ID = СтрТЧосн.ID;
			СтрТЧ.ОтказавшийЭлемент = СтрТЧосн.ОбъектРемонта;
			СтрТЧ.ДефектОписание = СтрТЧосн.Описание;
			СтрТЧ.ДатаНачалаРемонта = СтрТЧосн.ПлановаяДатаРемонта;
			СтрТЧ.ДатаОкончанияРемонта = СтрТЧосн.ПлановаяДатаРемонта;
			СтрТЧ.ДокументИсточник = ДанныеЗаполнения;
			СтрТЧ.ЗакрываетПредписание = Истина;
		КонецЦикла;
		
	// ++ rarus selmik 21.12.2020 25003
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.впАктОВыполненииЭтапаРабот") Тогда
		
		Дата 					= ДанныеЗаполнения.Дата;
		ДатаУстраненияДефекта	= ДанныеЗаполнения.Дата;
		Подразделение 			= ДанныеЗаполнения.Подразделение;
		Организация 			= ДанныеЗаполнения.Организация;
		Ответственный 			= Пользователи.ТекущийПользователь();
		ДефектВыявленВПроцессе	= Справочники.впУсловияВыявленияДефекта.ПлановыйОсмотр;
		ДокументыОснования.Добавить().ДокументОснование = ДанныеЗаполнения;
				
		Для Каждого СтрокаТаблицы из ДанныеЗаполнения.РемонтыОборудования Цикл
			СтрокаДобавл = СписокДефектов.Добавить();
			СтрокаДобавл.ID 					= Новый УникальныйИдентификатор();
			СтрокаДобавл.ДатаНачалаРемонта 		= СтрокаТаблицы.ДатаНачала;
			СтрокаДобавл.ДатаОкончанияРемонта 	= СтрокаТаблицы.ДатаОкончания;
			СтрокаДобавл.ОтказавшийЭлемент 		= СтрокаТаблицы.ОбъектРемонта;
			СтрокаДобавл.КритичностьДефекта 	= СтрокаТаблицы.КритичностьДефекта;
			СтрокаДобавл.ДокументИсточник 		= ДанныеЗаполнения;
			СтрокаДобавл.ДефектОписание			= СтрокаТаблицы.ОписаниеРемонта;
			СтрокаДобавл.ЗакрываетПредписание 	= СтрокаТаблицы.ЗакрываетПредписание;
		КонецЦикла;			
			
	// -- rarus selmik 21.12.2020 25003
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли
Процедура ПриКопировании(ОбъектКопирования)
	
	Для каждого Строка Из СписокДефектов Цикл
        Строка.ДатаНачалаРемонта                      = Дата("00010101");
        Строка.ДатаОкончанияРемонта                   = Дата("00010101");
		Строка.ID = Новый УникальныйИдентификатор();
	КонецЦикла; 
	
КонецПроцедуры

// ++ rarus selmik 21.12.2020 25003
Процедура ПроверкаНаличияФайла(Отказ)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впВыявленныеДефектыПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.впВыявленныеДефектыПрисоединенныеФайлы КАК впВыявленныеДефектыПрисоединенныеФайлы
	|ГДЕ
	|	впВыявленныеДефектыПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ впВыявленныеДефектыПрисоединенныеФайлы.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Для высокой критичности дефекта, нужно обязательно добавить файл.");
	КонецЕсли;
	
	
КонецПроцедуры	// -- rarus selmik 21.12.2020 25003
