
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтнаяВедомостьПриИзменении(Элемент)
	
	Если НЕ Объект.РемонтнаяВедомость Тогда
		Оповещение = Новый ОписаниеОповещения("РемонтнаяВедомостьПриИзмененииЗавершение", ЭтотОбъект, Новый Структура());
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Все таблицы будут очищены. Снять признак ремонтной ведомости?'"), РежимДиалогаВопрос.ДаНет, 0);
	Иначе
		ЭтаФорма.Заголовок =  СтрЗаменить(ЭтаФорма.Заголовок, "Заявка на ремонт", "Ремонтная ведомость");
	
		// rarus evgenu 2020_11_23 ++ 
		ВидисмостьВидаРеммонтнойВедомости();
		ЗаполнитьПоРемонтнойВедомости();
		// rarus evgenu 2020_11_23 --
	КонецЕсли;
	// ++ rarus selmik 26.03.2021
	Элементы.рарусРемонтыОборудованияДобавитьГруппа.Видимость = Объект.РемонтнаяВедомость;
	// -- rarus selmik 26.03.2021
КонецПроцедуры

&НаКлиенте
Процедура РемонтнаяВедомостьПриИзмененииЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Объект.РемонтнаяВедомость = Истина;
		// ++ rarus selmik 26.03.2021
		Элементы.рарусРемонтыОборудованияДобавитьГруппа.Видимость = Объект.РемонтнаяВедомость;
		// -- rarus selmik 26.03.2021
		Возврат;
	КонецЕсли;
	
	ЭтаФорма.Заголовок =  СтрЗаменить(ЭтаФорма.Заголовок, "Ремонтная ведомость", "Заявка на ремонт");

	Объект.РемонтныеРаботы.Очистить();
	Объект.ИсполнителиПоРемонтам.Очистить();
	Объект.МатериальныеЗатраты.Очистить();
	Объект.Инструменты.Очистить();
	Объект.ТрудовыеЗатраты.Очистить();
	Объект.РемонтыОборудования.Очистить();
	Объект.ЗапчастиРемонта.Очистить();
	Объект.ДокументыОснования.Очистить();
	
	ЭлементыДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	// rarus evgenu 2020_11_23 ++ 
	ВидисмостьВидаРеммонтнойВедомости();
	// rarus evgenu 2020_11_23 --
	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

// Заполняет дерево ремонтных работ на форме документа.
// Параметры:
//		СтруктураДляЗаполнения - Структура - структура данных.
//		ЭлементыДерево - ДанныеФормыДерево - дерево, которое нужно заполнить.
//		Объект - ДокументОбъект, ДанныеФормыСтруктура - объект с формы.
//
&НаКлиенте
Процедура ЗаполнитьДеревоРемонтов(СтруктураДляЗаполнения, ЭлементыДерево,Объект) Экспорт
	
	ИмяТЧ                     = СтруктураДляЗаполнения.ИмяТЧ;
	Текущий_ID                = СтруктураДляЗаполнения.Текущий_ID;
	Наименование_Ремонты      = СтруктураДляЗаполнения.Наименование_Ремонты;
	Наименование_ПолеРодитель = СтруктураДляЗаполнения.Наименование_ПолеРодитель;
	Наименование_ПолеЭлемент  = СтруктураДляЗаполнения.Наименование_ПолеЭлемент;
	
	
	МассивСтрокРемонтныхРабот = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(Наименование_Ремонты,Текущий_ID));
	
	СоответствиеID = Новый Соответствие;
	
	Для каждого СтрокаМассива Из МассивСтрокРемонтныхРабот Цикл
		
		ID_Родителя = СтрокаМассива[Наименование_ПолеРодитель];
		
		НайдСоответствие = СоответствиеID.Получить(СтрокаМассива[Наименование_ПолеРодитель]);
		
		Если НайдСоответствие = Неопределено Тогда
			МассивСтрокСоответствия = Новый Массив;
			МассивСтрокСоответствия.Добавить(СтрокаМассива);
			СоответствиеID.Вставить(ID_Родителя, МассивСтрокСоответствия);
		Иначе
			МассивСтрокСоответствия = НайдСоответствие;
			МассивСтрокСоответствия.Добавить(СтрокаМассива);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЭлементыДерева = ЭлементыДерево.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	ЭлементДерева = ЭлементыДерева.Добавить();
	
	ЭлементДерева.РемонтнаяРабота = "Ремонтные работы";	
	ЭлементДерева.Картинка        = 4; 
	
	ЗаполнитьДерево(ЭлементДерева,СоответствиеID,"", Наименование_ПолеЭлемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДерево(ЭлементДерева, Соответствие, Родитель, Наименование_ПолеЭлемент, ЭтоЗаявка)
	
	МассивПодчиненныхСтрок = Соответствие.Получить(Родитель);
	
	Если Не МассивПодчиненныхСтрок = Неопределено
		И МассивПодчиненныхСтрок.Количество() > 0 Тогда
		
		ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		
		Если Не МассивПодчиненныхСтрок = Неопределено Тогда
			Для каждого Строка Из МассивПодчиненныхСтрок Цикл
				Элемент = ЭлементыДерева.Добавить();
				ЗаполнитьЗначенияСвойств(Элемент,Строка);
				Если ЭтоЗаявка Тогда
					Если ТипЗнч(Элемент.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты") Тогда
						Элемент.ЭтоТехКарта = Истина;
					Иначе
						Элемент.ЭтоТехКарта = Ложь;
					КонецЕсли; 
				КонецЕсли; 
				ЗаполнитьДерево(Элемент,Соответствие,Строка[Наименование_ПолеЭлемент], Наименование_ПолеЭлемент, ЭтоЗаявка);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	РемонтыОборудованияПередУдалениемСервер(Элементы.РемонтыОборудования.ТекущиеДанные.ID, Отказ);
	
	Если Отказ Тогда
		ПоказатьПредупреждение(, "По ремонту заведен акт. Строка не удалена.");
		Возврат;
	КонецЕсли;
	
	ЭлементыДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();

	УдалитьРРиЗатраты(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
	
КонецПроцедуры

&НаСервере
Процедура РемонтыОборудованияПередУдалениемСервер(ID, Отказ)
	
	Запись = РегистрыСведений.впПланГрафикППР.СоздатьМенеджерЗаписи();
	Запись.УникальныйИдентификатор = ID;
	Запись.Прочитать();
	Если Запись.Выбран() Тогда 
		Если Запись.ЕстьАкт Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Запись.ЕстьЗаявка = Ложь;
		Запись.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РемонтыОборудованияПослеУдаления(Элемент)

	мУдал = Новый Массив;
	Для Каждого СтрОсн из Объект.ДокументыОснования Цикл
		Если Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", СтрОсн.ДокументОснование)).Количество() = 0 Тогда
			мУдал.Добавить(СтрОсн);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрУдал из мУдал Цикл
		Объект.ДокументыОснования.Удалить(Объект.ДокументыОснования.Индекс(СтрУдал));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		Структура = Новый Структура();
		Структура.Вставить(	"ИмяТЧ"                    , "РемонтныеРаботы");
		Структура.Вставить(	"Текущий_ID"               , ТекущиеДанные.ID);
		Структура.Вставить(	"Наименование_Ремонты"     , "РемонтыОборудования_ID");
		Структура.Вставить(	"Наименование_ПолеРодитель", "Родитель_ID");
		Структура.Вставить(	"Наименование_ПолеЭлемент" , "ID");
		
		ЗаполнитьДеревоРемонтов(Структура, ДеревоРемонтныхРабот, Объект);
		
		УстановитьОтборыСвязанныхТаблицРемонты(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		Элементы.ДеревоРемонтныхРабот.АктивизироватьПоУмолчанию = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиНаСнабжение, "ID", ТекущиеДанные.ID);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиНаСнабжение, "ID", "");
	КонецЕсли;
	
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	//Если  ПустаяСтрока(Элементы.РемонтыОборудования.ТекущиеДанные.ID) Тогда
	//	Элементы.РемонтыОборудования.ТекущиеДанные.ID = Новый УникальныйИдентификатор();
	//	ЗаполнитьСвязТЧКлиент();
	//КонецЕсли;
	
	// ++ rarus selmik 01.02.2021
	ОтображениеИерархииИКодаИерархии();
	// -- rarus selmik 01.02.2021
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого СтрВыбр из ВыбранноеЗначение Цикл
		СтрДоб = Объект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДоб, СтрВыбр);
		ЗаполнитьСвязТЧКлиент(СтрДоб);
		Если Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", СтрВыбр.ДокументИсточник)).Количество() = 0 Тогда
			Объект.ДокументыОснования.Добавить().ДокументОснование = СтрВыбр.ДокументИсточник;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязТЧКлиент(СтрДоб)     
	
	ДобавитьИсполнителяСервер(СтрДоб.ID, СтрДоб.ОбъектРемонта);
	СтруктураТК =  впОбщиеПроцедурыДокументовТОИР.НайтиТехкартуОР(СтрДоб.ВидРемонтныхРабот, СтрДоб.ОбъектРемонта);
	Если НЕ СтруктураТК = Неопределено Тогда
		РемонтыОборудованияОбработкаВыбораЗавершение(СтрДоб, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураТК.Техкарта));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВидРемонтныхРаботПриИзменении(Элемент)
	
	//Если НЕ ПустаяСтрока(Элементы.РемонтыОборудования.ТекущиеДанные.ID) Тогда
	//	УдалитьРРиЗатраты(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
	//	ЗаполнитьСвязТЧКлиент();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбораЗавершение(СтрДоб, ВыбранноеЗначение)
	
	СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
	ИДВыбраннойСтроки = "";
	
	РемонтыОборудования_ID = "";
	ДатаНачалаРемонта      = Неопределено;       
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, ДатаНачалаРемонта"
	, СтрДоб.ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрДоб.ДатаНачала);
	
	РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	
КонецПроцедуры


&НаКлиенте
Процедура УдалитьРРиЗатраты(ID)
	
	МассивТЧ = Новый Массив;
	МассивТЧ.Добавить(Объект.РемонтныеРаботы);
	МассивТЧ.Добавить(Объект.Инструменты);
	МассивТЧ.Добавить(Объект.ИсполнителиПоРемонтам);
	МассивТЧ.Добавить(Объект.МатериальныеЗатраты);
	МассивТЧ.Добавить(Объект.ЗапчастиРемонта);
	МассивТЧ.Добавить(Объект.ТрудовыеЗатраты);
	
	Для Каждого ТЧ из МассивТЧ Цикл
		МассивУдал = ТЧ.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ID));
		Для Каждого СтрУдал из МассивУдал Цикл
			ТЧ.Удалить(ТЧ.Индекс(СтрУдал));
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьИсполнителяСервер(ID,ОбъектРемонта)
	
	СтрокаИсп = Объект.ИсполнителиПоРемонтам.Добавить();
	СтрокаИсп.РемонтыОборудования_ID = ID;
	СтрокаИсп.Исполнитель = ОбъектРемонта.ПодразделениеИсполнитель;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ОбъектРемонта.ПодразделениеИсполнитель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		УстановитьОтборСтрокПоЗатратам();
		
		Если ТекДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;			
		Иначе
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
	
	// ++ rarus selmik 07.02.2021	
	Если ТекДанные <> Неопределено И ТипЗнч(ТекДанные.РемонтнаяРабота) = Тип("СправочникСсылка.впТехнологическиеОперации") Тогда
		Элементы.ГруппаДанныеТехОпераций.Видимость = Истина;
	Иначе
		Элементы.ГруппаДанныеТехОпераций.Видимость = Ложь;
	КонецЕсли;
	// -- rarus selmik 07.02.2021
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;       
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.впТехКарты") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, ДатаНачалаРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;
	
КонецПроцедуры

// rarus evgenu 2020_12_03 ++ 
&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество <= 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		МассивСтрокДляПолученияКоэффициента = Новый Массив;
		СписокУпаковок = Новый СписокЗначений;
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		// Пересчет количества в строках, где упаковки не указаны, с одновременным заполением массива строк для заполнения количества по упаковкам.
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		// Пересчет количества в строках с упаковками
		Если МассивСтрокДляПолученияКоэффициента.Количество() > 0 Тогда
			СоответсвиеУпаковокИКоэффициентов = ПолучитьКоэффициентУпаковкиНаСервере(СписокУпаковок);	
			Для каждого Строка Из МассивСтрокДляПолученияКоэффициента Цикл
				Коэффициент = СоответсвиеУпаковокИКоэффициентов.Получить(Строка.ЕдиницаИзмерения);
				Если Коэффициент = Неопределено Тогда
					Коэффициент = 1;
				КонецЕсли; 
				Строка.КоличествоЕдиниц = Строка.Количество * Коэффициент;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // rarus evgenu 2020_12_03 --

// rarus evgenu 2020_12_03 ++ 
&НаКлиенте
Процедура ДеревоРемонтныхРаботОписаниеРемонтаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		СтрТЧ.ОписаниеРемонта = ТекСтрока.ОписаниеРемонта;
		
	КонецЕсли;
	
КонецПроцедуры // rarus evgenu 2020_12_03 --

// rarus evgenu 2020_12_04 ++ 
&НаКлиенте
Процедура ДеревоРемонтныхРаботПрисоединенныйФайлПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		СтрТЧ.ПрисоединенныйФайл = ТекСтрока.ПрисоединенныйФайл;
		
	КонецЕсли;
	
КонецПроцедуры // rarus evgenu 2020_12_03 --

//RARUS-NN EvgenU РАIT-0023394 2021_06_18 ++
&НаКлиенте
Процедура ДеревоРемонтныхРаботУпаковкаПриИзменении(Элемент)
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество <= 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		СтрТЧ.Упаковка = ТекСтрока.Упаковка;
	КонецЕсли;
	
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023394 2021_06_18 --

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Номенклатура",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Номенклатура)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная номенклатура уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструменты

&НаКлиенте
Процедура ИнструментыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.Инструменты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Инструмент",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Инструмент)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данный инструмент уже добавлен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиРемонта

&НаКлиенте
Процедура ЗапчастиРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать ремонт, для которого заполняется список запчастей!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.РемонтыОборудования.ТекущиеДанные;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("Номенклатура,РемонтыОборудования_ID",Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.РемонтыОборудования_ID)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная запчасть уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("СписокИД", Объект.РемонтыОборудования);

	
	ОткрытьФорму("Документ.впЗаявкаНаРемонт.Форма.ПодборРемонтов", 
				ПараметрыФормы, Элементы.РемонтыОборудования, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.впТехнологическиеОперации")  Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.впТехКарты.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательнаяМелочь

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРР(ДеревоРР)

	Для Каждого Строка Из ДеревоРР Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоРемонтныхРабот.Развернуть(ИдентификаторСтроки, Истина);
		РазвернутьДеревоРР(Строка.ПолучитьЭлементы());
	КонецЦикла;

КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеТЧОсновныхДокументов

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("Инструменты, МатериальныеЗатраты, ТрудовыеЗатраты");
	СтруктураТабличныхЧастейПоРемонтам = Новый Структура("ИсполнителиПоРемонтам, ЗапчастиРемонта");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
		
		Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
				Объект.РемонтныеРаботы.Очистить();
			КонецЕсли
		КонецЕсли;
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		
		Если Объект.РемонтныеРаботы.Количество() = 0 Тогда
			Объект.РемонтныеРаботы.Добавить();
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Объект.РемонтныеРаботы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
			Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
				СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID",Ремонт_ID));
				Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
					Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
		Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
			Объект.РемонтныеРаботы.Очистить();
		КонецЕсли
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРемонтныхРаботНаСервере(РемонтыОборудования_ID = Неопределено)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоСФормы.Строки.Очистить();
	
	КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";	
	КорневаяСтрока.Картинка = 4;
	
	Если Не РемонтыОборудования_ID = Неопределено Тогда
		ТЗРемонтныеРаботы = Объект.РемонтныеРаботы.Выгрузить(Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID)));
	Иначе
		ТЗРемонтныеРаботы = Неопределено;
	КонецЕсли;                                                       
	
	СоздатьВетвьДереваПоТЧ(КорневаяСтрока, ТЗРемонтныеРаботы);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВетвьДереваПоТЧ(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
	Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Для Каждого Элемент Из МассивСтрок Цикл
			
			// rarus evgenu 2020_12_11 ++ 
			Если ТипЗнч(Элемент.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты")
				И ЗначениеЗаполнено(Элемент.РемонтнаяРабота) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	впТехКарты.Родитель КАК Родитель,
				|	впТехКарты.Родитель.Родитель КАК РодительРодитель
				|ИЗ
				|	Справочник.впТехКарты КАК впТехКарты
				|ГДЕ
				|	впТехКарты.Ссылка = &Ссылка";
				Запрос.УстановитьПараметр("Ссылка", Элемент.РемонтнаяРабота);
				Выборка = Запрос.Выполнить().Выбрать();
				Выборка.Следующий();
				Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
					НовСтрокаДерева1 = СтрокаДерева.Строки.Найти(Выборка.Родитель,"РемонтнаяРабота", ИСТИНА);
					Если НовСтрокаДерева1 = Неопределено Тогда 
						Если ЗначениеЗаполнено(Выборка.РодительРодитель) Тогда
							НовСтрокаДерева2 = СтрокаДерева.Строки.Найти(Выборка.РодительРодитель,"РемонтнаяРабота", ИСТИНА);
							Если НовСтрокаДерева2 = Неопределено Тогда 
								НовСтрокаДерева2 = СтрокаДерева.Строки.Добавить();
								НовСтрокаДерева2.РемонтнаяРабота = Выборка.РодительРодитель;
								НовСтрокаДерева2.ЭтоТехКарта = Истина;
								НовСтрокаДерева2.рарусЭтоГруппа = Истина
							КонецЕсли;
							НовСтрокаДерева1 = НовСтрокаДерева2.Строки.Добавить();
						Иначе
							НовСтрокаДерева1 = СтрокаДерева.Строки.Добавить();
						КонецЕсли;
						НовСтрокаДерева1.РемонтнаяРабота = Выборка.Родитель;
						НовСтрокаДерева1.ЭтоТехКарта = Истина;
						НовСтрокаДерева1.рарусЭтоГруппа = Истина
					КонецЕсли;
					НовСтрокаДерева = НовСтрокаДерева1.Строки.Добавить();
				Иначе
					НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
				КонецЕсли;
			Иначе
				// rarus evgenu 2020_12_11 --
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
				// rarus evgenu 2020_12_11 ++ 
			КонецЕсли; 
			// rarus evgenu 2020_12_11 --
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ТипЗнч(НовСтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты") Тогда
				НовСтрокаДерева.ЭтоТехКарта = Истина;
			Иначе
				НовСтрокаДерева.ЭтоТехКарта = Ложь;
			КонецЕсли; 
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры 

// rarus evgenu 2020_12_14 ++ 
&НаСервере
Процедура СоздатьВетвьДереваПоТЧ_OLD(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
	Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		// rarus evgenu 2020_12_10 ++ 
		Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты")
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДерева.РемонтнаяРабота, "ЭтоГруппа") <> Истина
			Тогда
			ПараметрыОтбора.Вставить("РемонтыОборудования_ID", СтрокаДерева.РемонтыОборудования_ID);
		КонецЕсли;
		// rarus evgenu 2020_12_10 --
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		// rarus evgenu 2020_12_10 ++ 
		МассивПапокТехКарт = НОвый Соответствие;
		НовСтрокаДерева = Неопределено;
		Если СтрокаДерева.Строки.Количество() Тогда
			Для Каждого СтрокаДереваСтрока Из СтрокаДерева.Строки Цикл
			    Если ТипЗнч(СтрокаДереваСтрока.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДереваСтрока.РемонтнаяРабота, "ЭтоГруппа") = Истина
					Тогда
					МассивПапокТехКарт.Вставить(СтрокаДереваСтрока.РемонтнаяРабота, СтрокаДереваСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		// rarus evgenu 2020_12_10 --
		
		Для Каждого Элемент Из МассивСтрок Цикл
			
			// rarus evgenu 2020_12_09 ++ 
			ЭтоГруппа = Ложь;
			Если ТипЗнч(Элемент.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Элемент.РемонтнаяРабота, "ЭтоГруппа") = Истина
				Тогда
				ЭтоГруппа = Истина;
				НовСтрокаДерева = МассивПапокТехКарт.Получить(Элемент.РемонтнаяРабота); 
			Иначе
				НовСтрокаДерева = Неопределено;
			КонецЕсли;
			Если НовСтрокаДерева <> Неопределено
				 ТОгда 
				НовСтрокаДерева.Родитель_ID = Элемент.Родитель_ID;
			Иначе
				// rarus evgenu 2020_12_09 --
				
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ТипЗнч(НовСтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты") Тогда
				НовСтрокаДерева.ЭтоТехКарта = Истина;
			Иначе
				НовСтрокаДерева.ЭтоТехКарта = Ложь;
			КонецЕсли; 
			
				// rarus evgenu 2020_12_10 ++ 
				Если ЭтоГруппа Тогда
					МассивПапокТехКарт.Вставить(Элемент.РемонтнаяРабота, НовСтрокаДерева);
				КонецЕсли;
			КонецЕсли; 
			// rarus evgenu 2020_12_10 --
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры // rarus evgenu 2020_12_14 --

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты(ID)
	
	Элементы.ЗапчастиРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ID);
	Элементы.ИсполнителиПоРемонтам.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID);

КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов       = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если НЕ ТекСтрокаДереваРемонтов = Неопределено И НЕ ТекСтрокаРемонтовОборудования = Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		
		Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
			
			ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
			
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Трудовые затраты.
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// ++ rarus selmik 03.03.2021
			// Запчасти.
			Элементы.ЗапчастиРемонта.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			// -- rarus selmik 03.03.2021
			
		Иначе
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Трудовые затраты
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID", ID_Отбора);

			// ++ rarus selmik 03.03.2021
			// Запчасти.
			Элементы.ЗапчастиРемонта.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			// -- rarus selmik 03.03.2021

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)

	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
			
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
	
	// rarus evgenu 2021_01_11 ++ 
	Если ТекущиеЗначения.Родитель_ID <> "" Тогда
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.Родитель_ID);
		МассивТакихЖеСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
		Если МассивТакихЖеСтрок.Количество() = 0 Тогда
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
			ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.Родитель_ID);
			МассивРодительскихСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
			Для Каждого СтрДерева Из МассивРодительскихСтрок Цикл
				СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
				УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	// rarus evgenu 2021_01_11 --
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗапчастейДляОР(ОбъектРемонта)

	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впЗапчасти.Номенклатура
	|ИЗ
	|	РегистрСведений.впЗапчасти КАК впЗапчасти
	|ГДЕ
	|	впЗапчасти.ОбъектРемонта = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();

	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат МассивЗапчастей;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Константы.впОсновнаяОрганизация.Получить();
	КонецЕсли;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	// rarus evgenu 2020_12_09 ++ 
	//ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	//ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальные;
	//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма, ПараметрыРазмещения);
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		Элементы.ДеревоРемонтныхРаботПрисоединенныйФайл.Доступность = Ложь;
	КонецЕсли;
	// rarus evgenu 2020_12_09 --
	// ++ rarus makole 2021-02-09
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -- rarus makole 2021-02-09
	
	// ++ rarus selmik 01.03.2021
	ВидимостьОбъектыРемонта 	= Истина;
	ВидимостьРемонтныеРаботы 	= Истина;
	// -- rarus selmik 01.03.2021

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.Заголовок =  СтрШаблон("Заявка на ремонт %1 от %2", Объект.Номер, Объект.Дата);
	Если Объект.РемонтнаяВедомость Тогда
		ЭтаФорма.Заголовок =  СтрЗаменить(ЭтаФорма.Заголовок, "Заявка на ремонт", "Ремонтная ведомость");
	КонецЕсли;

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды 
	
	// rarus evgenu 2020_11_23 ++ 
	ВидисмостьВидаРеммонтнойВедомости();
	// rarus evgenu 2020_11_23 --
	
	// ++ rarus selmik 01.02.2021
	ОтображениеИерархииИКодаИерархии();
	Элементы.ГруппаДанныеТехОпераций.Видимость = Ложь;
	Элементы.рарусРемонтыОборудованияДобавитьГруппа.Видимость = Объект.РемонтнаяВедомость;
	// -- rarus selmik 01.02.2021
	
	// ++ rarus selmik 04.10.2021 РАIT-0023502
	Статус = ПолучитьСтатусДокумента(Объект.Ссылка);
	// -- rarus selmik 04.10.2021 РАIT-0023502
	
КонецПроцедуры

// ++ rarus selmik 04.10.2021 РАIT-0023502
&НаСервереБезКонтекста
Функция ПолучитьСтатусДокумента(ЗаявкаНаРемонт)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	рарусСтатусыЗаказовНаРемонт.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.рарусСтатусыЗаказовНаРемонт КАК рарусСтатусыЗаказовНаРемонт
	|ГДЕ
	|	рарусСтатусыЗаказовНаРемонт.ЗаявкаНаРемонт = &ЗаявкаНаРемонт";
	
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ЗаявкаНаРемонт);
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Статус;
	КонецЕсли;
	
	Возврат Перечисления.рарусСтатусыЗаявокНаРемонт.Сформирована;
	
КонецФункции // -- rarus selmik 04.10.2021 РАIT-0023502

// ++ rarus selmik 01.02.2021
&НаКлиенте
Процедура ОтображениеИерархииИКодаИерархии()
	Для Каждого СтрокаОбъектаРемонта Из Объект.РемонтыОборудования Цикл
		
		ИерархияИКодИерархии = ПолучитьИерархиюИКодИерархииОбъектаРемонта(СтрокаОбъектаРемонта.ОбъектРемонта);
		ЗаполнитьЗначенияСвойств(СтрокаОбъектаРемонта, ИерархияИКодИерархии);
		
	КонецЦикла;	
КонецПроцедуры  // -- rarus selmik 01.02.2021

// ++ rarus selmik 01.02.2021
&НаСервере
Функция ПолучитьИерархиюИКодИерархииОбъектаРемонта(пОбъектРемонта)
	КодИерархии = "";
	Иерархия	= "";
	
	МассивРодителей = Новый Массив;
	
	Если ЗначениеЗаполнено(пОбъектРемонта) Тогда
		КодИерархии = пОбъектРемонта.рарусКодИерархии;
		
		Если ЗначениеЗаполнено(пОбъектРемонта.Родитель.Родитель.Родитель.Родитель.Родитель) Тогда
			МассивРодителей.Добавить(пОбъектРемонта.Родитель.Родитель.Родитель.Родитель.Родитель.Наименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пОбъектРемонта.Родитель.Родитель.Родитель.Родитель) Тогда
			МассивРодителей.Добавить(пОбъектРемонта.Родитель.Родитель.Родитель.Родитель.Наименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пОбъектРемонта.Родитель.Родитель.Родитель) Тогда
			МассивРодителей.Добавить(пОбъектРемонта.Родитель.Родитель.Родитель.Наименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пОбъектРемонта.Родитель.Родитель) Тогда
			МассивРодителей.Добавить(пОбъектРемонта.Родитель.Родитель.Наименование);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(пОбъектРемонта.Родитель) Тогда
			МассивРодителей.Добавить(пОбъектРемонта.Родитель.Наименование);
		КонецЕсли;
	КонецЕсли;
	
	Счетчик = 0;
	Для Каждого ЭлементМассива Из МассивРодителей Цикл
		Если Счетчик < 2 Тогда
			Счетчик = Счетчик + 1;
			Продолжить;
		ИначеЕсли Счетчик = 2 Тогда
			Иерархия = ЭлементМассива;
		Иначе
			Иерархия = Иерархия + "->" + ЭлементМассива;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("КодИерархии", КодИерархии);
	СтруктураВозврата.Вставить("Иерархия"	, Иерархия);
	
	Возврат СтруктураВозврата;
	
КонецФункции // -- rarus selmik 01.02.2021

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// rarus evgenu 2020_12_10 ++ 
	Элементы.ДеревоРемонтныхРаботПрисоединенныйФайл.Доступность = Истина;
	// rarus evgenu 2020_12_10 --
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	Если Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);

		ПараметрыВыбораМассив = Новый Массив;
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивЗапчастей)));
		Элементы.ЗапчастиРемонтаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);		
		Элементы.ЗапчастиРемонтаНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗапчастей);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
		ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Запчасти можно указывать только для технологических операций!'");
	КонецЕсли;
	

	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);

		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты 
		И ЗначениеЗаполнено(ТекСтрокаДереваРемонтныхРабот.РемонтнаяРабота) Тогда
		
		МассивЗапчастей = ПолучитьМассивНоменклатурыДляТехОперации(ТекСтрокаДереваРемонтныхРабот.РемонтнаяРабота);
		
	ИначеЕсли Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);
	Иначе
		МассивЗапчастей = Новый Массив;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор инструментов и техники'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборНоменклатуры",						 МассивЗапчастей);
	
	ОткрытьФорму("Обработка.впПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

// ++ rarus selmik 05.03.2021
&НаСервереБезКонтекста
Функция ПолучитьМассивНоменклатурыДляТехОперации(ТехОперация)

	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехнологическиеОперацииМатериальныеЗатраты.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.впТехнологическиеОперации.МатериальныеЗатраты КАК впТехнологическиеОперацииМатериальныеЗатраты
	|ГДЕ
	|	впТехнологическиеОперацииМатериальныеЗатраты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();

	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат МассивЗапчастей;
	
КонецФункции // -- rarus selmik 05.03.2021

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.Имяформы = "Обработка.впПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекДанныеРемонты = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено ИЛИ ТекДанныеРемонты = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
			ИмяТЧ = "Инструменты";
			ИмяРеквизита = "Инструмент";
		Иначе
			ИмяТЧ = "ЗапчастиРемонта";
			ИмяРеквизита = "Номенклатура";
		КонецЕсли;
		
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемонты.ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" ИЛИ ИмяТЧ = "ЗапчастиРемонта" Тогда
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Номенклатура", РемонтыОборудования_ID, текСтрока.Номенклатура);
		Иначе
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Инструмент", РемонтыОборудования_ID, текСтрока.Номенклатура);
		КонецЕсли;
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска); 
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.Количество 					= текСтрока.Количество;
					
		
			нс.ID 							= ID;
			нс.РемонтыОборудования_ID 		= РемонтыОборудования_ID;
						
		Иначе
			
			нс = НайС[0];
			
			КоличествоЕдиниц = (нс.Количество + текСтрока.Количество);
			нс.Количество = КоличествоЕдиниц;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные; 
	
	// rarus evgenu 2021_01_11 ++ 
	Если ТекСтрокаДРР.рарусЭтоГруппа ТОгда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	// rarus evgenu 2021_01_11 --
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("МатериальныеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("Инструменты");
	СтруктураСвязанныхТЧ.Вставить("ТрудовыеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли; 
		КонецЦикла;
		
		
		Модифицированность = Истина;
		Отказ = Истина;
		
	КонецЕсли;      
	
	// rarus evgenu 2021_01_11 ++ 
	Если ДеревоОтрисованоЦеликом Тогда
		ЗаполнитьДерево1(Элемент);
	Иначе
		РемонтыОборудованияПриАктивизацииСтроки(Элемент); 
	КонецЕсли;
	// rarus evgenu 2021_01_11 --
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) и НЕ Объект.ПометкаУдаления Тогда
		Попытка
			ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Оповестить("ОбновитьЖурналДефектов");
	
	// ++ rarus selmik 04.10.2021 РАIT-0023502
	Статус = ПолучитьСтатусДокумента(Объект.Ссылка);
	// -- rarus selmik 04.10.2021 РАIT-0023502
КонецПроцедуры

&НаКлиенте
Процедура ЗнСр(Команда)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если НЕ ТекДанные = неопределено Тогда
		Если НЕ Объект.Проведен Тогда 
			
			ТекстСообщения = НСтр("ru = 'Заявку на снабжение можно формировать только на основании проведенной заявки!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
		
		Если Модифицированность Тогда 
			ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаявкуВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заявки необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		Иначе 
			ДобавитьЗаявкуПослеВопроса();	
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьЗаявкуВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
	Иначе
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЗаявкуПослеВопроса();	 
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте 
Процедура ДобавитьЗаявкуПослеВопроса()

	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(ТекущийРемонт.ID);
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказЗавершение", ЭтотОбъект, Новый Структура("ТекущийРемонт", ТекущийРемонт)), НСтр("ru = 'По ремонту отсутствуют материальные затраты или по всем материальным затратам
			|созданы заявки на снабжение. Ввести новую заявку на снабжение?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;	
		ДобавитьЗаказФрагмент(МассивСтрокНоменклатуры, ТекущийРемонт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивСтрокНоменклатуры = Новый Массив;
	Иначе
		Возврат;
	КонецЕсли;
	
		ТекущийРемонт = ДополнительныеПараметры.ТекущийРемонт;
		ДобавитьЗаказФрагмент(МассивСтрокНоменклатуры, ТекущийРемонт);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказФрагмент(Знач МассивСтрокНоменклатуры, Знач ТекущийРемонт)
	
	Перем ОписаниеОповещения, СтруктураПараметров, СтруктураПередаваемыхВОбработчикПараметров;
	
	СтруктураПараметров = Новый Структура();
	
	СтрокаКомментарий = НСтр(СтрШаблон("ru = 'Смета ремонта (Заявка на ремонт) %1 от %2 %3 %4 %5'",
																					Объект.Номер, Объект.Дата, ТекущийРемонт.ОбъектРемонта, ТекущийРемонт.ВидРемонтныхРабот,
																					Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'"))));
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры"	, МассивСтрокНоменклатуры);
	
	ТекДата = ТекущаяДата();
	Если НЕ ТекДата > ТекущийРемонт.ДатаНачала Тогда 
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки"				, ТекущийРемонт.ДатаНачала);
	КонецЕсли;
	
	ЗначенияЗаполнения.Вставить("Комментарий"				, СтрокаКомментарий);
	ЗначенияЗаполнения.Вставить("Организация"				, Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение"				, Объект.Подразделение);
	ЗначенияЗаполнения.Вставить("IDРемонта"				, ТекущийРемонт.ID);
	ЗначенияЗаполнения.Вставить("Основание"				, Объект.Ссылка);


	СтруктураПараметров.Вставить("ЗначенияЗаполнения"		, ЗначенияЗаполнения);
		
	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаОбъекта",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(ID)
	
	Если ТипЗнч(ID) = Тип("Массив") Тогда
		НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить();
		ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить();
	Иначе
		НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
		ЗапчастиКСписанию = Объект.ЗапчастиРемонта.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	КонецЕсли;	
	
	НоменклатураКСписанию.Свернуть("Номенклатура", "Количество, ID");
	
	УжеЗаказаннаяНоменклатура = ПолучитьТаблицуЗаказаннойНоменклатуры(ID);
	УжеЗаказаннаяНоменклатура = ДополнитьОстатками(УжеЗаказаннаяНоменклатура, НоменклатураКСписанию);
		
	Для Каждого СтрокаЗапчасти Из ЗапчастиКСписанию Цикл
		СтрокаНоменклатуры = НоменклатураКСписанию.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры, СтрокаЗапчасти);
		СтрокаНоменклатуры.Количество = СтрокаЗапчасти.Количество;
	КонецЦикла;
	
	ДополнитьДатойОтгрузки(НоменклатураКСписанию, ID);
	
	Товары = Новый Массив;
	Для каждого Строка Из НоменклатураКСписанию Цикл
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеЗаказаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеЗаказаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", Строка.Номенклатура));
			
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеЗаказаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.Количество > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Количество, ДатаОтгрузки",
			Строка.Номенклатура, 
			(Строка.Количество - КоличествоУжеЗаказаннойНоменклатуры), Строка.ДатаОтгрузки);
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Процедура ДополнитьДатойОтгрузки(НоменклатураКСписанию, IDремонта)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ID", IDремонта);
	Запрос.УстановитьПараметр("НоменклатураКСписанию", НоменклатураКСписанию);
	
	 Запрос.Текст = "ВЫБРАТЬ
	                 |	НоменклатураКСписанию.Номенклатура КАК Номенклатура,
	                 |	НоменклатураКСписанию.Количество КАК Количество,
	                 |	НоменклатураКСписанию.ID КАК ID,
	                 |	&Ссылка КАК Ссылка
	                 |ПОМЕСТИТЬ НоменклатураКСписанию
	                 |ИЗ
	                 |	&НоменклатураКСписанию КАК НоменклатураКСписанию
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	НоменклатураКСписанию.Номенклатура КАК Номенклатура,
	                 |	МИНИМУМ(впЗаявкаНаРемонтРемонтыОборудования.ДатаНачала) КАК ДатаОтгрузки
	                 |ПОМЕСТИТЬ ДатыОтгрузки
	                 |ИЗ
	                 |	НоменклатураКСписанию КАК НоменклатураКСписанию
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаРемонт.РемонтыОборудования КАК впЗаявкаНаРемонтРемонтыОборудования
	                 |		ПО НоменклатураКСписанию.Ссылка = впЗаявкаНаРемонтРемонтыОборудования.Ссылка
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаРемонт.ЗапчастиРемонта КАК впЗаявкаНаРемонтЗапчастиРемонта
	                 |		ПО впЗаявкаНаРемонтРемонтыОборудования.ID = впЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID
	                 |			И НоменклатураКСписанию.Номенклатура = впЗаявкаНаРемонтЗапчастиРемонта.Номенклатура
	                 |%УсловиеID% 
	                 |
	                 |СГРУППИРОВАТЬ ПО
	                 |	НоменклатураКСписанию.Номенклатура
	                 |;
	                 |
	                 |////////////////////////////////////////////////////////////////////////////////
	                 |ВЫБРАТЬ
	                 |	НоменклатураКСписанию.Номенклатура КАК Номенклатура,
	                 |	НоменклатураКСписанию.Количество КАК Количество,
	                 |	НоменклатураКСписанию.ID КАК ID,
	                 |	ДатыОтгрузки.ДатаОтгрузки КАК ДатаОтгрузки
	                 |ИЗ
	                 |	НоменклатураКСписанию КАК НоменклатураКСписанию
	                 |		ЛЕВОЕ СОЕДИНЕНИЕ ДатыОтгрузки КАК ДатыОтгрузки
	                 |		ПО НоменклатураКСписанию.Номенклатура = ДатыОтгрузки.Номенклатура";
	  
	  Если ТипЗнч(IDремонта) = Тип("Массив") Тогда
		  Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеID%", "");
	  Иначе
		  Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеID%", " ГДЕ впЗаявкаНаРемонтРемонтыОборудования.ID = &ID ");
	  КонецЕсли;
	  
	  НоменклатураКСписанию = Запрос.Выполнить().Выгрузить();
	  
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуЗаказаннойНоменклатуры(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впИнтеграцияДокументов.ДокументЕРП КАК ДокументЕРП
	|ПОМЕСТИТЬ втДокументыНаОсновании
	|ИЗ
	|	РегистрСведений.впИнтеграцияДокументов КАК впИнтеграцияДокументов
	|ГДЕ
	|	впИнтеграцияДокументов.ID в (&ID)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впЗаявкиНаСнабжение.Номенклатура КАК Номенклатура,
	|	СУММА(впЗаявкиНаСнабжение.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.впЗаявкиНаСнабжение КАК впЗаявкиНаСнабжение
	|ГДЕ
	|	впЗаявкиНаСнабжение.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	|			ИЗ
	|				втДокументыНаОсновании КАК втДокументыНаОсновании)
	|
	|СГРУППИРОВАТЬ ПО
	|	впЗаявкиНаСнабжение.Номенклатура";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаСервере
Функция ДополнитьОстатками(Заказано, КСписанию)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КСписанию.Номенклатура КАК Номенклатура,
	|	КСписанию.Количество КАК Количество
	|ПОМЕСТИТЬ КСписанию
	|ИЗ
	|	&КСписанию КАК КСписанию
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заказано.Номенклатура КАК Номенклатура,
	|	Заказано.Количество КАК Количество
	|ПОМЕСТИТЬ Заказано
	|ИЗ
	|	&Заказано КАК Заказано
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КСписанию.Номенклатура КАК Номенклатура,
	// ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
	|	ЕСТЬNULL(Заказано.Количество, 0) + ВЫБОР
	|		КОГДА &ИспользоватьИмущественныйУчет
	|			ТОГДА ЕСТЬNULL(рарусИмуществоНаСудахОстатки.КоличествоОстаток, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество
	//|	ЕСТЬNULL(Заказано.Количество, 0) + ЕСТЬNULL(впТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Количество
	// -- rarus atyutyakin 28.02.2021
	|ИЗ
	|	КСписанию КАК КСписанию
	|		ЛЕВОЕ СОЕДИНЕНИЕ Заказано КАК Заказано
	|		ПО КСписанию.Номенклатура = Заказано.Номенклатура
	// ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.рарусИмуществоНаСудах.Остатки(&ДатаДокумента,
	|				&ИспользоватьИмущественныйУчет
	|				И Склад = &СкладСудна
	|				И Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе),
	|					ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ))) КАК рарусИмуществоНаСудахОстатки
	|		ПО КСписанию.Номенклатура = рарусИмуществоНаСудахОстатки.Номенклатура";
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыНаСкладах.Остатки(&ДатаДокумента, Судно = &Судно) КАК впТоварыНаСкладахОстатки
	//|		ПО КСписанию.Номенклатура = впТоварыНаСкладахОстатки.Номенклатура";
	// -- rarus atyutyakin 28.02.2021
	
	Запрос.УстановитьПараметр("Заказано", Заказано);
	Запрос.УстановитьПараметр("КСписанию", КСписанию);
	Запрос.УстановитьПараметр("ДатаДокумента", Новый Граница(Объект.Дата, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Судно", Объект.Подразделение);
	// ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
	Запрос.УстановитьПараметр("СкладСудна", рарусОбщегоНазначенияСервер.СкладСудна(Объект.Подразделение));
	
	ПараметрыФО = Новый Структура("Период, Судно", Объект.Дата, Объект.Подразделение);
	Запрос.УстановитьПараметр("ИспользоватьИмущественныйУчет", 
		рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчет(ПараметрыФО));
	// -- rarus atyutyakin 28.02.2021
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура ЗнСсвод(Команда)
	
	Если НЕ Объект.Проведен Тогда 
		ТекстСообщения = НСтр("ru = 'Заявку на снабжение можно формировать только на основании проведенной заявки!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;		
	Если Модифицированность Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСводЗаявкуВопрос", ЭтотОбъект), НСтр("ru = 'Для формирования заявки необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе 
		ДобавитьСводЗаявкуПослеВопроса();	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСводЗаявкуВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Записать();
		ДобавитьСводЗаявкуПослеВопроса();	 
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте 
Процедура ДобавитьСводЗаявкуПослеВопроса() 
	
	МассивID = Новый Массив;
	СтрокаКомментария = Строка(Объект.Ссылка);
	
	Для Каждого ТекущийРемонт Из Объект.РемонтыОборудования Цикл
		
		СтрокаКомментария = СтрокаКомментария + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		ТекущийРемонт.ВидРемонтныхРабот + " " + Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'")) + " - " + 
		Формат(ТекущийРемонт.ДатаОкончания, НСтр("ru = 'ДФ=dd.MM.yyyy'"));
		
		МассивID.Добавить(ТекущийРемонт.ID);
		
	КонецЦикла;
	
	МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(МассивID);
	Если МассивСтрокНоменклатуры = Неопределено Тогда
		
		// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказЗавершение", ЭтотОбъект, Новый Структура("МассивID, СтрокаКомментария", МассивID, СтрокаКомментария)), НСтр("ru = 'По ремонту отсутствуют материальные затраты или по всем материальным затратам
		|созданы заявки на снабжение. Ввести новую заявку на снабжение?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ДобавитьЗаявкуСвод(МассивСтрокНоменклатуры, МассивID, СтрокаКомментария);
	
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьЗаявкуСвод (МассивСтрокНоменклатуры, МассивID, СтрокаКомментария)
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры"	, МассивСтрокНоменклатуры);
	ЗначенияЗаполнения.Вставить("Основание"					, Объект.Ссылка);
	ЗначенияЗаполнения.Вставить("Комментарий"				, СтрокаКомментария);
	ЗначенияЗаполнения.Вставить("Организация"				, Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение"				, Объект.Подразделение);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения"		, ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаОбъекта",СтруктураПараметров,ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаявку(Команда)
	ТекущиеДанные = Элементы.ЗаявкиНаСнабжение.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказСсылка",ТекущиеДанные.Заявка);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПометитьЗаказНаСервере(ДополнительныеПараметры);
		Элементы.ЗаявкиНаСнабжение.Обновить();	
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПометитьЗаказНаСервере(СтруктураПараметров)
//{{MRG[ <-> ]
//	НачатьТранзакцию();
//}}MRG[ <-> ]
	Попытка
//{{MRG[ <-> ]
//		// ++ rarus selmik 06.05.2021		
//		Блокировка = Новый БлокировкаДанных;
//		ЭлементБлокировки = Блокировка.Добавить("Документ.впЗаявкаНаСнабжение");
//		ЭлементБлокировки.УстановитьЗначение("Ссылка", СтруктураПараметров.ЗаказСсылка);
//		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
//		Блокировка.Заблокировать();
//		// -- rarus selmik 06.05.2021
//}}MRG[ <-> ]
		
		ОбъектЗаказ = СтруктураПараметров.ЗаказСсылка.ПолучитьОбъект();
		
		Если ОбъектЗаказ.Проведен Тогда
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектЗаказ.ПометкаУдаления = Истина;
		ОбъектЗаказ.Записать();
		
	Исключение
		
		ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
		
	КонецПопытки; 
//{{MRG[ <-> ]
//	ЗафиксироватьТранзакцию();
//}}MRG[ <-> ]
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Элементы.ЗаявкиНаСнабжение.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаСнабжениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаОбъекта", Новый Структура("Ключ", Элемент.ТекущиеДанные.Заявка));
КонецПроцедуры

#КонецОбласти

// rarus evgenu 2020_11_23 ++ 
&НаКлиенте
Процедура ВидисмостьВидаРеммонтнойВедомости()
	Элементы.ВидРемонтнойВедомости.Видимость = Объект.РемонтнаяВедомость;
	
КонецПроцедуры // rarus evgenu 2020_11_23 --

// rarus evgenu 2020_11_24 ++ 
&НаКлиенте
Процедура ВидРемонтнойВедомостиПриИзменении(Элемент)
	
	ЗаполнитьПоРемонтнойВедомости();

КонецПроцедуры // rarus evgenu 2020_11_24 --

// rarus evgenu 2020_11_24 ++ 
&НаСервере
Процедура ЗаполнитьПоРемонтнойВедомости()
	
	//RARUS-NN EvgenU РАIT-0023394 2021_06_18 ++
	//Ульянов: внесены изменения
	//RARUS-NN EvgenU РАIT-0023394 2021_06_18 --
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Судно",Объект.Подразделение);
	Запрос.УстановитьПараметр("Ссылка",Объект.ВидРемонтнойВедомости);
	//Запрос.УстановитьПараметр("РемонтыОборудования_ID", Строка(Новый УникальныйИдентификатор()));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тч.НомерСтроки КАК НомерСтроки1,
	|	тч.ТехнологическаяКарта КАК ИдентификаторТехКарты,
	|	тч.ВидРемонта КАК ВидРемонта,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК РемонтыОборудования_ID,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК ID,
	|	впТехКарты.Ссылка КАК ТехКарта
	|ИЗ
	|	Справочник.рарусВидыРемонтныхВедомостей.ТехнологическиеКарты КАК тч
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты КАК впТехКарты
	|		ПО тч.ТехнологическаяКарта = впТехКарты.ИдентификаторТехКарты
	|ГДЕ
	|	тч.Ссылка = &Ссылка";
	вр0 = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из вр0 Цикл
		СтрокаТаблицы.РемонтыОборудования_ID = Строка(Новый УникальныйИдентификатор());
			ID = Строка(Новый УникальныйИдентификатор());
		СтрокаТаблицы.ID = ID;
	КонецЦикла;
	Запрос.УстановитьПараметр("вр0",вр0);
		
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	вр0.НомерСтроки1 КАК НомерСтроки1,
	|	вр0.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	|	вр0.ВидРемонта КАК ВидРемонта,
	|	вр0.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	вр0.ID КАК ID,
	|	вр0.ТехКарта КАК ТехКарта
	|ПОМЕСТИТЬ вр1
	|ИЗ
	|	&вр0 КАК вр0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	впОбъектыРемонта.Ссылка КАК ОбъектРемонта
	|ПОМЕСТИТЬ вр2
	|ИЗ
	|	Справочник.впОбъектыРемонта КАК впОбъектыРемонта
	|ГДЕ
	|	впОбъектыРемонта.ПодразделениеИсполнитель = &Судно
	|	И впОбъектыРемонта.Родитель = ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПУстаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вр1.НомерСтроки1 КАК НомерСтроки1,
	|	вр2.ОбъектРемонта КАК ОбъектРемонта,
	|	вр1.ВидРемонта КАК ВидРемонтныхРабот,
	|	вр1.РемонтыОборудования_ID КАК ID,
	|	ИСТИНА КАК ПропуститьПроверкуОснований
	|ИЗ
	|	вр1 КАК вр1,
	|	вр2 КАК вр2
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр1.НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вр.НомерСтроки1 КАК НомерСтроки1,
	|	0 КАК НомерСтроки2,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	вр.ТехКарта КАК РемонтнаяРабота,
	|	ТехКарты.БазоваяЕдиницаИзмерения КАК Упаковка,
	|	1 КАК Количество,
	|	вр.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	|	вр.ID КАК ID,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК Родитель_ID,
	|	ИСТИНА КАК ПропуститьПроверкуОснований
	|ИЗ
	|	вр1 КАК вр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.впТехКарты КАК ТехКарты
	|		ПО вр.ТехКарта = ТехКарты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вр.НомерСтроки1,
	|	тчСписокОпераций.НомерСтроки,
	|	вр.РемонтыОборудования_ID,
	|	ЕСТЬNULL(впТехКарты.Ссылка, тчСписокОпераций.Операция),
	|	ТехнологическиеОперации.БазоваяЕдиницаИзмерения,
	|	тчСписокОпераций.Количество,
	|	вр.ИдентификаторТехКарты,
	|	тчСписокОпераций.ID,
	|	вр.ID,
	|	ИСТИНА
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.СписокОпераций КАК тчСписокОпераций
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.впТехКарты КАК впТехКарты
	|			ПО тчСписокОпераций.Операция = впТехКарты.ИдентификаторТехКарты
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.впТехнологическиеОперации КАК ТехнологическиеОперации
	|			ПО тчСписокОпераций.Операция = ТехнологическиеОперации.Ссылка
	|		ПО вр.ТехКарта = тчСписокОпераций.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки1,
	|	НомерСтроки2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериальныеЗатраты.ID КАК ID,
	|	МатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МатериальныеЗатраты.Количество КАК Количество,
	|	МатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	МатериальныеЗатраты.Операция КАК Операция,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.МатериальныеЗатраты КАК МатериальныеЗатраты
	|		ПО вр.ТехКарта = МатериальныеЗатраты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр.НомерСтроки1,
	|	МатериальныеЗатраты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрудовыеЗатраты.ID КАК ID,
	|	ТрудовыеЗатраты.Количество КАК Количество,
	|	ТрудовыеЗатраты.Операция КАК Операция,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ТрудовыеЗатраты.Квалификация КАК Квалификация
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ТрудовыеЗатраты КАК ТрудовыеЗатраты
	|		ПО вр.ТехКарта = ТрудовыеЗатраты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр.НомерСтроки1,
	|	ТрудовыеЗатраты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструментыИТехника.ID КАК ID,
	|	ИнструментыИТехника.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИнструментыИТехника.Количество КАК Количество,
	|	ИнструментыИТехника.Операция КАК Операция,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ИнструментыИТехника.Инструмент КАК Инструмент
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ИнструментыИТехника КАК ИнструментыИТехника
	|		ПО вр.ТехКарта = ИнструментыИТехника.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр.НомерСтроки1,
	|	ИнструментыИТехника.НомерСтроки";
	Результат = Запрос.ВыполнитьПакет();
	
	РезКрайний = Результат.Количество() - 1;
	Объект.РемонтыОборудования.Загрузить(Результат[РезКрайний - 4].Выгрузить());
	Объект.РемонтныеРаботы.Загрузить(Результат[РезКрайний - 3].Выгрузить());
	Объект.МатериальныеЗатраты.Загрузить(Результат[РезКрайний - 2].Выгрузить());
	Объект.ТрудовыеЗатраты.Загрузить(Результат[РезКрайний - 1].Выгрузить());
	Объект.Инструменты.Загрузить(Результат[РезКрайний].Выгрузить());
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
	
	
КонецПроцедуры // rarus evgenu 2020_11_24 --

// rarus evgenu 2020_12_03 ++ 
&НаКлиенте
Процедура ЗаполнитьДерево1(Команда)

	ЗаполнитьДеревоРемонтныхРаботНаСервере();
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		Элементы.ДеревоРемонтныхРабот.АктивизироватьПоУмолчанию = Истина;
		
	Элементы.ЗапчастиРемонта.ОтборСтрок = Неопределено;
	Элементы.ИсполнителиПоРемонтам.ОтборСтрок = Неопределено;
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаявкиНаСнабжение, "ID", "");
	
	УстановитьПараметрыВыбораНоменклатуры();

КонецПроцедуры // rarus evgenu 2020_12_03 --

// rarus evgenu 2020_12_03 ++ 
&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		
		//Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
		//	
		//	МассивСтрокДляПолученияКоэффициента.Добавить(СтрокаТЧ);
		//	
		//	Если СписокУпаковок.НайтиПоЗначению(СтрокаТЧ.ЕдиницаИзмерения) = Неопределено Тогда
		//		СписокУпаковок.Добавить(СтрокаТЧ.ЕдиницаИзмерения);
		//	КонецЕсли;
		//	
		//Иначе
		//	
		//	СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.Количество * 1;
		//	
		//КонецЕсли;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		
		СтрокаТЧ.Количество      = СтрокаТЧ.Количество * Коэффициент;
		//СтрокаТЧ.ВремяРаботы      = СтрокаТЧ.ВремяРаботы * Коэффициент;
		//СтрокаТЧ.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(СтрокаТЧ.ВремяРаботы);
		//СтрокаТЧ.ВремяРаботыТекст = СформироватьЗаголовокПоПродолжительности(СтрокаТЧ.ВремяРаботы);
	КонецЦикла;
	
	
КонецПроцедуры // rarus evgenu 2020_12_03 --

//// rarus evgenu 2020_12_03 ++ 
//&НаКлиенте
//// Функция формирует строку в формате ч. мин. с. по продолжительности в секундах.
//// Есть возможность задания произвольного представления для нуля.
////
//// Параметры:
////		ПродолжительностьВСекундах - Число - продолжительность в секундах.
////		ПредставлениеНуля - Строка - представление нулевого значения.
////
//// Возвращаемое значение:
////		Строка - строковое представление времени.
//Функция СформироватьЗаголовокПоПродолжительности(ПродолжительностьВСекундах,ПредставлениеНуля = Неопределено) Экспорт
//	
//	Если ПродолжительностьВСекундах = null Тогда
//		
//		Возврат "";
//	
//	ИначеЕсли ПродолжительностьВСекундах = 0 Тогда
//		
//		Если ПредставлениеНуля = Неопределено Тогда
//			Возврат НСтр("ru = 'Ввести продолжительность'");
//		Иначе
//			Возврат ПредставлениеНуля;
//		КонецЕсли;
//		
//	Иначе
//		
//		Часы    = Цел(ПродолжительностьВСекундах / 3600);
//		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
//		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
//		
//		Возврат СтрШаблон(НСтр("ru = '%1 ч. %2 мин. %3 с.'"),Часы,Минуты,Секунды);
//		
//	КонецЕсли;
//		
//КонецФункции // rarus evgenu 2020_12_03 --

// rarus evgenu 2020_12_03 ++ 
&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент , МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
	КонецЦикла; 
	
КонецПроцедуры // rarus evgenu 2020_12_03 --

// rarus evgenu 2020_12_03 ++ 
&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	Если ТипЗнч(Упаковка) = Тип("СписокЗначений") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Ключ,
		|	УпаковкиНоменклатуры.Числитель КАК Значение
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", Упаковка);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			СоответствиеДляВозврата = Новый Соответствие;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствиеДляВозврата.Вставить(Выборка.Ключ,Выборка.Значение);
			КонецЦикла; 
			Возврат СоответствиеДляВозврата;
		КонецЕсли;
		Возврат Новый Соответствие;
	Иначе
		Возврат Упаковка.Числитель;
	КонецЕсли; 
	
КонецФункции // rarus evgenu 2020_12_03 --

// rarus evgenu 2020_12_02 ++ 
&НаКлиенте
Процедура рарусДобавитьИзДругойЗаявки(Команда)
	
	ОписаниеОповщения = Новый ОписаниеОповещения(
		"рарусДобавитьИзДругойЗаявкиЗавершение",
		ЭтотОбъект,
		Новый Структура);
		
	ПараметрыОткрытия = Новый Структура;
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытия.Вставить("Отбор", СтруктураОтбора);
	ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
		
	ОткрытьФорму("Документ.впЗаявкаНаРемонт.ФормаВыбора",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповщения,
		);
		
	КонецПроцедуры // rarus evgenu 2020_12_02 --
	

// rarus evgenu 2020_12_02 ++ 
&НаКлиенте
Процедура рарусДобавитьИзДругойЗаявкиЗавершение(Документ_ЗаявкаНаРемонт, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Документ_ЗаявкаНаРемонт) Тогда
		рарусДобавитьИзДругойЗаявкиНаСервере(Документ_ЗаявкаНаРемонт);
	КонецЕсли;
КонецПроцедуры // rarus evgenu 2020_12_02 --

// rarus evgenu 2020_12_02 ++ 
&НаСервере
Процедура рарусДобавитьИзДругойЗаявкиНаСервере(Документ_ЗаявкаНаРемонт)
	дрОбъект = Документ_ЗаявкаНаРемонт.ПолучитьОбъект();
	
	// ++ rarus selmik 04.10.2021 РАIT-0023502
	ЗавершенныеРемонты = новый Массив;
	ЗавершенныеРемонты = ПолучитьЗавершенныеРемонты(Документ_ЗаявкаНаРемонт);
	// -- rarus selmik 04.10.2021 РАIT-0023502
	
	для КАждого СтрокаТЧ Из дрОбъект.РемонтыОборудования Цикл
		// ++ rarus selmik 04.10.2021 РАIT-0023502
		Если ЗавершенныеРемонты.Найти(СтрокаТЧ.ID) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// -- rarus selmik 04.10.2021 РАIT-0023502
		
		нСтрока = Объект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
		нСтрока.ПропуститьПроверкуОснований = Истина;
	КонецЦикла;
	
	для КАждого СтрокаТЧ Из дрОбъект.РемонтныеРаботы Цикл
		// ++ rarus selmik 04.10.2021 РАIT-0023502
		Если ЗавершенныеРемонты.Найти(СтрокаТЧ.РемонтыОборудования_ID) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// -- rarus selmik 04.10.2021 РАIT-0023502
		
		нСтрока = Объект.РемонтныеРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
		нСтрока.ПропуститьПроверкуОснований = Истина;
	КонецЦикла;
	
	для КАждого СтрокаТЧ Из дрОбъект.МатериальныеЗатраты Цикл
		// ++ rarus selmik 04.10.2021 РАIT-0023502
		Если ЗавершенныеРемонты.Найти(СтрокаТЧ.РемонтыОборудования_ID) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// -- rarus selmik 04.10.2021 РАIT-0023502
		
		нСтрока = Объект.МатериальныеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	
	для КАждого СтрокаТЧ Из дрОбъект.ТрудовыеЗатраты Цикл
		// ++ rarus selmik 04.10.2021 РАIT-0023502
		Если ЗавершенныеРемонты.Найти(СтрокаТЧ.РемонтыОборудования_ID) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// -- rarus selmik 04.10.2021 РАIT-0023502
		
		нСтрока = Объект.ТрудовыеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	
	для КАждого СтрокаТЧ Из дрОбъект.Инструменты Цикл
		// ++ rarus selmik 04.10.2021 РАIT-0023502
		Если ЗавершенныеРемонты.Найти(СтрокаТЧ.РемонтыОборудования_ID) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		// -- rarus selmik 04.10.2021 РАIT-0023502
		
		нСтрока = Объект.Инструменты.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;

	ЗаполнитьДеревоРемонтныхРаботНаСервере();
	
КонецПроцедуры // rarus evgenu 2020_12_02 --

// ++ rarus selmik 04.10.2021 РАIT-0023502
Функция ПолучитьЗавершенныеРемонты(Документ_ЗаявкаНаРемонт)
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК ЗаявкаНаРемонт,
	|	впЗаявкаНаРемонтРемонтыОборудования.ID КАК IDРемонта,
	|	впАктОВыполненииЭтапаРаботДокументыОснования.Ссылка КАК Акт
	|ПОМЕСТИТЬ Вт_ЗаявкиСАктами
	|ИЗ
	|	Документ.впЗаявкаНаРемонт.РемонтыОборудования КАК впЗаявкаНаРемонтРемонтыОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот.ДокументыОснования КАК впАктОВыполненииЭтапаРаботДокументыОснования
	|		ПО впЗаявкаНаРемонтРемонтыОборудования.Ссылка = впАктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование
	|			И (впАктОВыполненииЭтапаРаботДокументыОснования.Ссылка.Проведен)
	|ГДЕ
	|	впЗаявкаНаРемонтРемонтыОборудования.Ссылка = &ЗаявкаНаРемонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ЗаявкиСАктами.IDРемонта КАК IDРемонта
	|ИЗ
	|	Вт_ЗаявкиСАктами КАК Вт_ЗаявкиСАктами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот.РемонтыОборудования КАК впАктОВыполненииЭтапаРаботРемонтыОборудования
	|		ПО Вт_ЗаявкиСАктами.Акт = впАктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка
	|			И (впАктОВыполненииЭтапаРаботРемонтыОборудования.Выполнено)
	|			И Вт_ЗаявкиСАктами.IDРемонта = впАктОВыполненииЭтапаРаботРемонтыОборудования.ID";
	
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", Документ_ЗаявкаНаРемонт);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	Иначе 
		Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("IDРемонта");
	КонецЕсли;
	
КонецФункции // -- rarus selmik 04.10.2021 РАIT-0023502

// rarus evgenu 2020_12_02 ++ 
&НаКлиенте
Процедура рарусДобавитьПроизвольные(Команда)
	
	ОписаниеОповщения = Новый ОписаниеОповещения(
		"рарусДобавитьПроизвольныеЗавершение",
		ЭтотОбъект,
		НОвый Структура);
		
	ПараметрыОткрытия = Новый Структура;
	СтруктураОтбора = Новый Структура;
	ПараметрыОткрытия.Вставить("Подразделение", Объект.Подразделение);
	//Если ТекСтрока <> Неопределено Тогда
	//	ПараметрыОткрытия.Вставить("ОбъектРемонта", ТекСтрока.ОбъектРемонта);
	//	ПараметрыОткрытия.Вставить("ВидРемонтныхРабот", ТекСтрока.ОбъектРемонта);
	//	
	//КонецЕсли;
	
	ОткрытьФорму("Документ.впЗаявкаНаРемонт.Форма.ПроизвольныйРемонт",
		ПараметрыОткрытия,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповщения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // rarus evgenu 2020_12_02 --

// rarus evgenu 2020_12_02 ++ 
&НаКлиенте
Процедура рарусДобавитьПроизвольныеЗавершение(СтруктураДанных, ДопПараметры) Экспорт
	Если ТипЗнч(СтруктураДанных) = Тип("Структура") Тогда
		рарусДобавитьПроизвольныеНаСервере(СтруктураДанных);
	КонецЕсли;
КонецПроцедуры // rarus evgenu 2020_12_02 --

// rarus evgenu 2020_12_02 ++ 
&НаСервере
Процедура рарусДобавитьПроизвольныеНаСервере(СтруктураДанных)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК НомерСтроки1,
	|	&ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	|	&ВидРемонта КАК ВидРемонта,
	|	&РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	&ID КАК ID,
	|	&ТехКарта КАК ТехКарта
	|ПОМЕСТИТЬ вр1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	&ОбъектРемонта КАК ОбъектРемонта
	|ПОМЕСТИТЬ вр2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вр1.НомерСтроки1 КАК НомерСтроки1,
	|	вр2.ОбъектРемонта КАК ОбъектРемонта,
	|	вр1.ВидРемонта КАК ВидРемонтныхРабот,
	|	вр1.РемонтыОборудования_ID КАК ID,
	|	ИСТИНА КАК ПропуститьПроверкуОснований
	|ИЗ
	|	вр1 КАК вр1,
	|	вр2 КАК вр2
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр1.НомерСтроки1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вр.НомерСтроки1 КАК НомерСтроки1,
	|	0 КАК НомерСтроки2,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	вр.ТехКарта КАК РемонтнаяРабота,
	|	ТехКарты.БазоваяЕдиницаИзмерения КАК Упаковка,
	|	1 КАК Количество,
	|	вр.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
	|	вр.ID КАК ID,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК Родитель_ID,
	|	ИСТИНА КАК ПропуститьПроверкуОснований
	|ИЗ
	|	вр1 КАК вр
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.впТехКарты КАК ТехКарты
	|		ПО вр.ТехКарта = ТехКарты.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	вр.НомерСтроки1,
	|	тчСписокОпераций.НомерСтроки,
	|	вр.РемонтыОборудования_ID,
	|	тчСписокОпераций.Операция,
	|	ТехнологическиеОперации.БазоваяЕдиницаИзмерения,
	|	тчСписокОпераций.Количество,
	|	вр.ИдентификаторТехКарты,
	|	тчСписокОпераций.ID,
	|	вр.ID,
	|	ИСТИНА
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.СписокОпераций КАК тчСписокОпераций
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.впТехнологическиеОперации КАК ТехнологическиеОперации
	|			ПО тчСписокОпераций.Операция = ТехнологическиеОперации.Ссылка
	|		ПО вр.ТехКарта = тчСписокОпераций.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки1,
	|	НомерСтроки2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериальныеЗатраты.ID КАК ID,
	|	МатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МатериальныеЗатраты.Количество КАК Количество,
	|	МатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	МатериальныеЗатраты.Операция КАК Операция,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.МатериальныеЗатраты КАК МатериальныеЗатраты
	|		ПО вр.ТехКарта = МатериальныеЗатраты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр.НомерСтроки1,
	|	МатериальныеЗатраты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрудовыеЗатраты.ID КАК ID,
	|	ТрудовыеЗатраты.Количество КАК Количество,
	|	ТрудовыеЗатраты.Операция КАК Операция,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ТрудовыеЗатраты.Квалификация КАК Квалификация
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ТрудовыеЗатраты КАК ТрудовыеЗатраты
	|		ПО вр.ТехКарта = ТрудовыеЗатраты.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр.НомерСтроки1,
	|	ТрудовыеЗатраты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнструментыИТехника.ID КАК ID,
	|	ИнструментыИТехника.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ИнструментыИТехника.Количество КАК Количество,
	|	ИнструментыИТехника.Операция КАК Операция,
	|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ИнструментыИТехника.Инструмент КАК Инструмент
	|ИЗ
	|	вр1 КАК вр
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ИнструментыИТехника КАК ИнструментыИТехника
	|		ПО вр.ТехКарта = ИнструментыИТехника.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	вр.НомерСтроки1,
	|	ИнструментыИТехника.НомерСтроки";
	Запрос.УстановитьПараметр("ОбъектРемонта",СтруктураДанных.ОбъектРемонта);
	Запрос.УстановитьПараметр("ИдентификаторТехКарты",СтруктураДанных.ИдентификаторТехКарты);
	Запрос.УстановитьПараметр("ТехКарта",СтруктураДанных.ТехКарта);
	Запрос.УстановитьПараметр("ВидРемонта",СтруктураДанных.ВидРемонта);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", Строка(Новый УникальныйИдентификатор()));
	Запрос.УстановитьПараметр("ID", Строка(Новый УникальныйИдентификатор()));
	Результат = Запрос.ВыполнитьПакет();
	
	РезКрайний = Результат.Количество() - 1;
	//Объект.РемонтыОборудования.Загрузить(Результат[РезКрайний - 4].Выгрузить());
	для КАждого СтрокаТЧ Из Результат[РезКрайний - 4].Выгрузить() Цикл
		нСтрока = Объект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	
	//Объект.РемонтныеРаботы.Загрузить(Результат[РезКрайний - 3].Выгрузить());
	для КАждого СтрокаТЧ Из Результат[РезКрайний - 3].Выгрузить() Цикл
		нСтрока = Объект.РемонтныеРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	
	//Объект.МатериальныеЗатраты.Загрузить(Результат[РезКрайний - 2].Выгрузить());
	для КАждого СтрокаТЧ Из Результат[РезКрайний - 2].Выгрузить() Цикл
		нСтрока = Объект.МатериальныеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	
	//Объект.ТрудовыеЗатраты.Загрузить(Результат[РезКрайний - 1].Выгрузить());
	для КАждого СтрокаТЧ Из Результат[РезКрайний - 1].Выгрузить() Цикл
		нСтрока = Объект.ТрудовыеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	
	//Объект.Инструменты.Загрузить(Результат[РезКрайний].Выгрузить());
	для КАждого СтрокаТЧ Из Результат[РезКрайний].Выгрузить()Цикл
		нСтрока = Объект.Инструменты.Добавить();
		ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
	КонецЦикла;
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
	
КонецПроцедуры // rarus evgenu 2020_12_02 --

// rarus evgenu 2021_01_11 ++ 
&НаКлиенте
Процедура рарусУказатьДатуНачала(Команда)
	Описание = Новый ОписаниеОповещения("рарусУказатьДату",
		ЭтотОбъект,
		"ДатаНачала");
	ПоказатьВводДаты(Описание, , "Дата начала для выделенных строк", ЧастиДаты.Дата);
КонецПроцедуры // rarus evgenu 2021_01_11 --

// rarus evgenu 2021_01_11 ++ 
&НаКлиенте
Процедура рарусУказатьДатуОкончания(Команда)
	Описание = Новый ОписаниеОповещения("рарусУказатьДату",
		ЭтотОбъект,
		"ДатаОкончания");
	ПоказатьВводДаты(Описание, , "Дата окончания для выделенных строк", ЧастиДаты.Дата);
КонецПроцедуры // rarus evgenu 2021_01_11 --

// rarus evgenu 2021_01_11 ++ 
&НаКлиенте
Процедура рарусУказатьДату(НоваяДата, ИмяПоля) Экспорт
	Если ТипЗнч(НоваяДата) = Тип("Дата") Тогда
		Для Каждого ВыдСтрока Из Элементы.РемонтыОборудования.ВыделенныеСтроки Цикл
			ТекСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(ВыдСтрока);
			ТекСтрока[ИмяПоля] = НоваяДата;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры // rarus evgenu 2021_01_11 --

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ИсполнителиПоРемонтамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 07.02.2021
&НаКлиенте
Процедура ДеревоРемонтныхРаботДанныеТехОперацийПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		ЗаполнитьЗначенияСвойств(СтрТЧ, ТекСтрока,"МестоРемонта, ИнструкцииПоТБ, РаботыНаВысоте, ОгневыеРаботы, ДопВентиляция, ДопОсвещение, ЗакрытоеПомещение, РаботаЗаБортом,
		| БарьерБезопасности, Изоляция, ПодводныеРаботы, ОбъектРемонтаПодДавлением, ПодъемныеРаботы, ИзолированиеОборудованияОбеспеченияБезопасности,
		| НеобходимоСнятьДляПодхода, ТрубыДавление, ТрубыТемпература, ТрубыМатериал, ТрубыВнутреннийДиаметр, ТрубыКолено, ТрубыФланцы, ТрубыОтветвления,
		| ТрубыПереходы, КлапанаТип, КлапанаДавление, КлапанаТемпература, КлапанаМатериал, КлапанаНоминальныйРазмер, КлапанаФланцы");
	КонецЕсли;

КонецПроцедуры // -- rarus selmik 07.02.2021

// ++ rarus selmik 01.03.2021
&НаКлиенте
Процедура ВидимостьОбъектыРемонтаПриИзменении(Элемент)
	Элементы.ГоризонтальнаяГруппа.Видимость = ВидимостьОбъектыРемонта;
КонецПроцедуры // -- rarus selmik 01.03.2021

// ++ rarus selmik 01.03.2021
&НаКлиенте
Процедура ВидимостьРемонтныеРаботыПриИзменении(Элемент)
	Элементы.Подвал.Видимость = ВидимостьРемонтныеРаботы;
КонецПроцедуры // -- rarus selmik 01.03.2021

#Область Штрихкодирование
// ++ rarus yukuzi 25.02.2021   // ФТ.СНБ.02. Задача_Штрихкодирование
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 рарусШтрихкодированиеКлиент.ВыполнитьКомандуШтрихкодирование(ЭтаФорма, ПолучитьИмяРеквизита(Команда.ИспользуемаяТаблица.Имя), Команда);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьИмяРеквизита(ТаблицаФормыИмя)
Возврат рарусШтрихкодирование.ПолучитьИмяРеквизита(Элементы[ТаблицаФормыИмя].ПутьКДанным);
КонецФункции 
// -- rarus yukuzi 25.02.2021
#КонецОбласти

