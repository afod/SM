
// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт	
	
	Результат = Новый Массив;
	Результат.Добавить("Судно");
	Результат.Добавить("Дата");
	Результат.Добавить("ФИОКапитана");
	Результат.Добавить("Судно");
	Результат.Добавить("ОтветКомпании");
	Результат.Добавить("Ответственный");
	Результат.Добавить("ПериодИсполненияОбязанностейС");
	Результат.Добавить("ПериодИсполненияОбязанностейПо");
	Результат.Добавить("ОбщаяЭффективностьСудовойСУБ");
	Результат.Добавить("Ответственный");
	Результат.Добавить("ОбщаяЭффективность");
	Результат.Добавить("КомментарийЭффективностьСудовойСУБ");
	Результат.Добавить("Капитан");
	Результат.Добавить("Предложение");	
	Результат.Добавить("НетПредложения");
	Результат.Добавить("ПериодИсполненияОбязанностейС");
	Результат.Добавить("ПериодИсполненияОбязанностейПо");	
	Результат.Добавить("Предложения ; Предложение, НетПредложения");
	Возврат Результат;
	
КонецФункции
	
Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если ИспользоватьФункционалСУБ Тогда 
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаДокументаСУБ";		
			
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		
		Если ИспользоватьФункционалСУБ Тогда 
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаСпискаСУБ";
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#Область СозданиеНаОсновании
// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
		
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
		
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, 
//												представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АнализСУБ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"АнализСУБ", НСтр("ru = 'АнализСУБ'"),
		ПечатьСообщения(МассивОбъектов, ОбъектыПечати), ,
		"ПФ_MXL_АнализСУБ");
	КонецЕсли;
	
КонецПроцедуры
	
Функция ПечатьСообщения(МассивОбъектов, ОбъектыПечати,ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	ИспользоватьФкнкционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");
	
	Если ИспользоватьФкнкционалСУБ Тогда		
		МакетПечатнойФормы  = УправлениеПечатью.МакетПечатнойФормы("Документ.vftАнализСУБ.ПФ_MXL_АнализСУБ_new");		
	Иначе
		МакетПечатнойФормы = УправлениеПечатью.МакетПечатнойФормы("Документ.vftАнализСУБ.ПФ_MXL_АнализСУБ");		
	КонецЕсли;
	
	Макет = МакетПечатнойФормы;
	
	ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрока 	= Макет.ПолучитьОбласть("СтрокаТаблицы");
	ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
	
	ДокументыСообщения = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыАнализСУБ(МассивОбъектов);
	
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Для каждого Документ из ДокументыСообщения Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ОбластьШапка.Параметры.Заполнить(Документ.Шапка);
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
		Для Каждого Предложение из Документ.Предложения Цикл
			
			ОбластьСтрока.Параметры.Заполнить(Предложение);
			// +++ rarus plotks 16.12.2016 
			Если Предложение.НетПредложения Тогда
				
				ОбластьСтрока.Параметры.Предложение = "НЕТ";
				
			КонецЕсли; 
			
			Если ИспользоватьФкнкционалСУБ Тогда
				ОбластьСтрока.Параметры.СУБ =  Предложение.Суб.НомерДокументаСУБ;
			КонецЕсли;
			// --- rarus plotks 16.12.2016 
			ТабличныйДокумент.Вывести(ОбластьСтрока); 			
		КонецЦикла;
		
		// +++ rarus plotks 19.12.2016 
		// Общая эффективностьСудовой Суб
		
		ОбластьСтрока.Параметры.СУБ = "<>";
		ОбластьСтрока.Параметры.СУБНаименование	= "ОБЩАЯ ЭФФЕКТИВНОСТЬ СУДОВОЙ СУБ";
		ОбластьСтрока.Параметры.Предложение		= Формат(Документ.Шапка.ОбщаяЭффективностьСудовойСУБ,"БЛ='НЕ УДОВЛЕТВОРИТЕЛЬНО'; БИ=УДОВЛЕТВОРИТЕЛЬНО") + "
		|Комментарий: " + ?(ПустаяСтрока(Документ.Шапка.КомментарийЭффективностьСудовойСУБ),"НЕТ",Документ.Шапка.КомментарийЭффективностьСудовойСУБ);
		ТабличныйДокумент.Вывести(ОбластьСтрока); 
		// --- rarus plotks 19.12.2016 
		
		ДатаПодписи = Формат(Документ.ДатаПодписи, "ДЛФ=DD; ДП=");
		
		ОбластьПодвал.Параметры.Заполнить(Документ.Шапка);
		ОбластьПодвал.Параметры.ДатаПодписи = ДатаПодписи;
		ТабличныйДокумент.Вывести(ОбластьПодвал);

		
		Если ВставлятьРазрывВКонцеМакета Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Шапка.Ссылка);	
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область РегистрацияОбмена

Процедура ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО) Экспорт
	
	рарусОбменСУБСервер.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);
	
КонецПроцедуры	

Процедура ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели) Экспорт

КонецПроцедуры

#КонецОбласти

