
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроведениеДокументов.ОбработкаПроведенияДокумента(ЭтотОбъект, Отказ);
	
	// ++ rarus PleA 04.12.2020 
	// переведено на типовой механизм проведения
	// оставлено на случай отладки и сравнения
	// + откл 
	//Движения.впЗаявкиНаСнабжение.Записывать = Истина;
	//
	//Запрос = Новый Запрос;
	//Запрос.УстановитьПараметр("Основания", ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	//Запрос.УстановитьПараметр("ЗнС", Ссылка);
	//Запрос.УстановитьПараметр("Судно", Подразделение);
	//Запрос.УстановитьПараметр("ДатаЗаявки", Новый Граница(Дата, ВидГраницы.Включая));
	//Запрос.УстановитьПараметр("ID", IDремонта);

	//Для Каждого стрМат из МатериалыИРаботы Цикл
	//	Движение = Движения.впЗаявкиНаСнабжение.Добавить();
	//	ЗаполнитьЗначенияСвойств(Движение, стрМат);
	//	Движение.Период = МоментВремени().Дата;
	//	Если НЕ ДокументыОснования.Количество() = 0 Тогда
	//		Движение.ЗаявкаНаРемонт = ДокументыОснования[0].ДокументОснование;
	//	КонецЕсли;
	//	Если НЕ ПустаяСтрока(IDремонта) Тогда
	//		Движение.IDремонта = IDремонта;
	//	КонецЕсли;

	//КонецЦикла;
	//
	//Если ОбменДанными.Загрузка Тогда
	//	Возврат;
	//КонецЕсли;
	//	
	//НачатьТранзакцию();	
	//
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	впЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	//               |	впЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК ДокументТОИР,
	//               |	&ЗнС КАК ДокументЕРП
	//               |ИЗ
	//               |	Документ.впЗаявкаНаРемонт.РемонтыОборудования КАК впЗаявкаНаРемонтРемонтыОборудования
	//               |ГДЕ
	//               |	впЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&Основания) " + ?(НЕ ПустаяСтрока(IDремонта), "
	//               |	И впЗаявкаНаРемонтРемонтыОборудования.ID = &ID", "");
	//
	//  	Попытка
	//	
	//	БлокировкаДанных = Новый БлокировкаДанных;
	//	ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.впИнтеграцияДокументов");
	//	ЭлементБлокировкиДанных.УстановитьЗначение("ДокументЕРП", Ссылка);
	//	ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
	//	БлокировкаДанных.Заблокировать();
	//	
	//	НаборЗаписей = РегистрыСведений.впИнтеграцияДокументов.СоздатьНаборЗаписей();
	//	НаборЗаписей.Отбор.ДокументЕРП.Установить(Ссылка);
	//	НаборЗаписей.Прочитать();
	//	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	//	НаборЗаписей.Записать();
	//	ЗафиксироватьТранзакцию();
	//	
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	ЗаписьЖурналаРегистрации(НСтр("ru = 'впИнтеграцияДокументов'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	//	ВызватьИсключение;
	//	
	//КонецПопытки;
	//
	// - откл
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(ЭтотОбъект, Отказ);
		
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.впИнтеграцияДокументов");
		ЭлементБлокировкиДанных.УстановитьЗначение("ДокументЕРП", Ссылка);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.впИнтеграцияДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументЕРП.Установить(Ссылка);
		НаборЗаписей.Записать();
		
	Исключение
				
		ЗаписьЖурналаРегистрации(НСтр("ru = 'впИнтеграцияДокументов'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	// - откл
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
		
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.впЗаявкаНаРемонт") Тогда
		//Если НЕ ДанныеЗаполнения.Проведен Тогда
		//	ВызватьИсключение(НСтр("ru = 'Заказ не внутреннее потребление можно формировать только на основании проведенной заявки!'"));
		//КонецЕсли;
		//
		//Дата = ТекущаяДата();
		//Подразделение = ДанныеЗаполнения.Подразделение;
		//Организация = ДанныеЗаполнения.Организация;
		//Ответственный = Пользователи.ТекущийПользователь();
		//
		//ДокументыОснования.Добавить().ДокументОснование = ДанныеЗаполнения;
		//
		//
		//Для Каждого СтрокаТаблицы из ДанныеЗаполнения.МатериальныеЗатраты Цикл
		//	СтрокаДобавл = МатериалыИРаботы.Добавить();
		//	ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
		//	СтрокаДобавл.ID = СтрокаТаблицы.ID
		//КонецЦикла;	
		//
		//Для Каждого СтрокаТаблицы из ДанныеЗаполнения.ЗапчастиРемонта Цикл
		//	СтрокаДобавл = МатериалыИРаботы.Добавить();
		//	ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
		//	СтрокаДобавл.ID = СтрокаТаблицы.ID
		//КонецЦикла;	
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("МассивСтрокНоменклатуры") 
		Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		Для каждого Строка Из ДанныеЗаполнения.МассивСтрокНоменклатуры Цикл
			НС = МатериалыИРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
			Если ПустаяСтрока(НС.ID) Тогда
				НС.ID = Новый УникальныйИдентификатор();
			КонецЕсли;
		КонецЦикла; 
		// ++ rarus yukuzi 25.12.2020   // Снабжение ТОИР 2 Приоритет
		//ДокументыОснования.Добавить().ДокументОснование = ДанныеЗаполнения.Основание;
		Если ДанныеЗаполнения.Свойство("Основание") тогда
			ДокументыОснования.Добавить().ДокументОснование = ДанныеЗаполнения.Основание;
		КонецЕсли;	
		// -- rarus yukuzi 25.12.2020

	КонецЕсли;
	
	ИнициализироватьЗначенияПоУмолчанию();
	
КонецПроцедуры

Процедура ИнициализироватьЗначенияПоУмолчанию()
	
	Подразделение = рарусЗаявкаНаСнабжениеСервер.ОсновноеСудно();
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = рарусЗаявкаНаСнабжениеСервер.ОсновнаяОрганизация();
	КонецЕсли;
	
КонецПроцедуры	

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьДоступностьРедактированияОбъекта(Отказ);
	
	рарусЗаказыСервер.УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "МатериалыИРаботы");
	
	рарусЗаявкаНаСнабжениеСервер.УстановитьСтатусСогласованияПередЗаписью(ЭтотОбъект);
	
	рарусЗаявкаНаСнабжениеСервер.УстановитьОбластьСозданияДляНовогоОбъекта(ЭтотОбъект);
	
	//ПАН+
	Если ПолучитьФункциональнуюОпцию("рарусИспользуетсяСхемаСогласованияПоАналогам") Тогда
		рарусУчетАналогов.ОбновитьЗаписиРегистраЖурналИзмененийНоменклатурыПоАналогам(ЭтотОбъект);
		рарусУчетАналогов.ОбновитьСтрокиДокументаПоСтатусамСогласованияАналогов(ЭтотОбъект);		
	КонецЕсли;
	//ПАН-
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);
	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);
	
	// ++ rarus PleA 26.10.2020 [ФТ.СНБ.01.01]
	//МатериалыИРаботы.Свернуть("Номенклатура, ДатаОтгрузки, ВариантОбеспечения, КодСтроки, Упаковка", "ID, Количество, КоличествоУпаковок");
	// -- rarus PleA
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Ответственный = Пользователи.ТекущийПользователь();
	
	ОбластьРедактирования = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();
	
	ОбластьСоздания = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();
	
	СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНачальный();	
	
	НомерСудовойЗаявки = "";
	
	ДатаРегистрацииСудовойЗаявки = Дата(1,1,1);
	
	ОтветственныйБереговойСлужбы = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	Для Каждого Строка Из МатериалыИРаботы цикл
		Строка.Доработать = Ложь;
		Строка.ПричинаДоработки = "";
		Строка.Отменено = Ложь;
	КонецЦикла;	
	
	// РаботаСФайламиСтрок
	рарусРаботаСФайламиСтрокСерверПереопределяемый.ПриКопировании(ЭтотОбъект);
	// Конец РаботаСФайламиСтрок
	
	рарусХранениеВерсий.ОчиститьРеквизитыВерсий(ЭтотОбъект);
	
	//ПАН+
	рарусУчетАналогов.ОчисткаУстановкаРеквизитовУчетаАналоговПриКопировании(ЭтотОбъект);
	//ПАН-
КонецПроцедуры

Процедура ПроверитьДоступностьРедактированияОбъекта(Отказ)
	
	Если Не рарусСостоянияРедактированияОбъектов.ОбъектДоступенДляРедактирования(Ссылка) тогда
		Отказ = Истина;
	КонецЕсли;	
	
	Если Отказ тогда
		ОбщегоНазначения.СообщитьПользователю("Объект не доступен для редактирования");
	КонецЕсли;	

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// ++ rarus makole 2021-05-11 [РАIT-0023284]
	
	// ++ rarus makole 2021-07-28 [ВПIT-0028068]
	// В Судовом модуле,  в документе Заявка на снабжение при указании вида потребности Продукты питания  
	// и Навигационные карты (в случае учета навигационных карт как услуга) необходимо убрать  поля Береговая служба и Заголовок
	
	//Если ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦЗаСчетСобственныхСредств() Тогда
		//ПроверяемыеРеквизиты.Удалить("БереговаяСлужба");
		//ПроверяемыеРеквизиты.Удалить("Заголовок");
		
	ЭтоЗаказПродуктов = ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиПродуктыПитания();
	ЭтоЗаказКартНавигации = (ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиНавигационныеКарты()) И ПолучитьФункциональнуюОпцию("рарусУчетКартНавигацииКакУслуги");
	ЭтоЗаказЗаСчетСобственныхСредств = ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦЗаСчетСобственныхСредств();
	
	УдалитьБСИЗаголовок = ЭтоЗаказПродуктов ИЛИ ЭтоЗаказКартНавигации ИЛИ ЭтоЗаказЗаСчетСобственныхСредств;
	
	Если УдалитьБСИЗаголовок Тогда
		МассивНепроверяемыхРеквизитов = Новый Массив ;
		МассивНепроверяемыхРеквизитов.Добавить("БереговаяСлужба");
		МассивНепроверяемыхРеквизитов.Добавить("Заголовок");
		
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	// -- rarus makole 2021-07-28 [ВПIT-0028068]
	КонецЕсли;
	// -- rarus makole 2021-05-11 [РАIT-0023284]
КонецПроцедуры

#КонецЕсли
Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ПриЗаписиДокумента(ЭтотОбъект, Отказ);

КонецПроцедуры

