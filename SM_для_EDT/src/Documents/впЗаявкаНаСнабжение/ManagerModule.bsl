#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ОбъектДоступенДляРедактирования(Ссылка) Экспорт

	Возврат рарусЗаявкаНаСнабжениеСервер.ЕстьПравоРедактированияПоСтатусу(Ссылка); 	

КонецФункции 

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	МеханизмыДокумента.Добавить("ЗаявкаНаСнабжение");	
	// ++ rarus yukuzi 30.12.2020   // Снабжение ТОИР 2 Приоритет
	МеханизмыДокумента.Добавить("рарусТоварыЗаявокНаСнабжение");
	// -- rarus yukuzi 30.12.2020

КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("Период", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Дата"));
	Запрос.УстановитьПараметр("Основания", Документ.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"));
	
	IDРемонта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "IDремонта");
	Запрос.УстановитьПараметр("ID", IDРемонта);
	Запрос.УстановитьПараметр("ПустойID", ПустаяСтрока(IDРемонта));
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаЗаявкиНаСнабжение(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаИнтеграцияДокументов(Запрос, ТекстыЗапроса, Регистры);
	// ++ rarus yukuzi 30.12.2020   // Снабжение ТОИР 2 Приоритет
	ТекстЗапросаТаблицарарусТоварыЗаявокНаСнабжение(Запрос, ТекстыЗапроса, Регистры);
	// -- rarus yukuzi 30.12.2020

	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	
	Возврат ПроведениеДокументов.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса);
	
КонецФункции

#КонецОбласти

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	рарусЗаявкаНаСнабжениеСервер.ДобавитьКомандуСоздатьПриходТМЦНаОснованииЗаявкаНаСнабжение(КомандыСозданияНаОсновании);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Проведение

Функция ТекстЗапросаТаблицаЗаявкиНаСнабжение(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "впЗаявкиНаСнабжение";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура КАК Номенклатура,
	|	впЗаявкаНаСнабжениеДокументыОснования.ДокументОснование КАК ЗаявкаНаРемонт,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.ДатаОтгрузки КАК ДатаОтгрузки,
	|	СУММА(впЗаявкаНаСнабжениеМатериалыИРаботы.Количество) КАК Количество,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка.IDремонта КАК IDремонта,
	|	&Период КАК Период
	|ИЗ
	|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК впЗаявкаНаСнабжениеМатериалыИРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаСнабжение.ДокументыОснования КАК впЗаявкаНаСнабжениеДокументыОснования
	|		ПО впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка = впЗаявкаНаСнабжениеДокументыОснования.Ссылка
	|			И (впЗаявкаНаСнабжениеДокументыОснования.НомерСтроки = 1)
	|ГДЕ
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка = &Ссылка
	|	И НЕ впЗаявкаНаСнабжениеМатериалыИРаботы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	впЗаявкаНаСнабжениеДокументыОснования.ДокументОснование,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка.IDремонта,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.ДатаОтгрузки,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаИнтеграцияДокументов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "впИнтеграцияДокументов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	впЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	|	впЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК ДокументТОИР,
	|	&Ссылка КАК ДокументЕРП
	|ИЗ
	|	Документ.впЗаявкаНаРемонт.РемонтыОборудования КАК впЗаявкаНаРемонтРемонтыОборудования
	|ГДЕ
	|	впЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&Основания)
	|	И ВЫБОР
	|			КОГДА &ПустойID
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ впЗаявкаНаРемонтРемонтыОборудования.ID = &ID
	|		КОНЕЦ";
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// ++ rarus yukuzi 30.12.2020   // Снабжение ТОИР 2 Приоритет
Функция ТекстЗапросаТаблицарарусТоварыЗаявокНаСнабжение(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "рарусТоварыЗаявокНаСнабжение";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура КАК Номенклатура,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка КАК Заявка,
	|	СУММА(впЗаявкаНаСнабжениеМатериалыИРаботы.Количество) КАК Заказано,
	|	&Период КАК Период
	|ИЗ
	|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК впЗаявкаНаСнабжениеМатериалыИРаботы
	|ГДЕ
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка = &Ссылка
	|	И НЕ впЗаявкаНаСнабжениеМатериалыИРаботы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
// -- rarus yukuzi 30.12.2020

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Судовая заявка
	КомандаПечати = КомандыПечати.Добавить();	
	КомандаПечати.Идентификатор = "СудоваяЗаявка";
	КомандаПечати.Представление = НСтр("ru = 'Судовая заявка';
										|en = 'Ship order'");	
	
КонецПроцедуры

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СудоваяЗаявка") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"СудоваяЗаявка",
			 НСтр("ru = 'Судовая заявка';
			 		|en = 'Ship order'"),
			рарусЗаявкаНаСнабжениеПечать.СформироватьПечатнуюФормуЗаявкиНаСудно(МассивОбъектов, ОбъектыПечати)
			,
			,
			"Документ.впЗаявкаНаСнабжение.ПФ_MXL_СудоваяЗаявка"
			);
			
	КонецЕсли;		    		
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти


#Область Состояния

Функция ПолучитьЗаявкиНаСнабжение(Ссылка) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Ссылка);
	Возврат Массив;	
	
КонецФункции	

#КонецОбласти 

#Область РегистрацияОбмена

Процедура ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО) Экспорт
	
	рарусЗаявкаНаСнабжениеОбмен.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);	
	
КонецПроцедуры	

Процедура ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели) Экспорт
	
	рарусЗаявкаНаСнабжениеОбмен.ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели);	
	
КонецПроцедуры

#КонецОбласти 
	
#КонецЕсли 