&НаКлиенте
Перем КэшированныеЗначения; //используется механизмом обработки изменения реквизитов ТЧ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаГлобальные;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды	
	// ++ rarus makole 2020-12-24
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -- rarus makole 2020-12-24 
	ПриСозданииНаСервереУстановитьДоступностьВидимость();
	// ++ rarus yukuzi 23.12.2020   // Снабжение ТОИР 2 Приоритет
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Период", Объект.Дата);
	ПараметрыФО.Вставить("Судно", Объект.Подразделение);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	ПрочитатьМаксЦены();
	// -- rarus yukuzi 23.12.2020
	
	// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
	ЗаполнитьСписокВыбораВидовПотребностей();
	
	Если Объект.Ссылка.Пустая() Тогда
		ПолучитьОстаткиНоменклатурыНаСкладе();
	КонецЕсли;
	// -- rarus atyutyakin 28.01.2021
	
	// ++ rarus makole 2021-04-26 [РАIT-0023284]
	ЗаполнитьСписокБереговыхСлужб();
	// -- rarus makole 2021-04-26 [РАIT-0023284]
	
	// ++ rarus makole 2021-04-13 [РАIT-0023340]
	ОбновитьТаблицуСтатусов();
	// -- rarus makole 2021-04-13 [РАIT-0023340]
	
	//ПАН+ ФТ.АН.01.29
	ПриЧтенииСозданииНаСервере();
	//ПАН-
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// ++ rarus PleA 21.12.2020 [26103]
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыКоличествоУпаковок.Имя);
	ПолеЭлемента.Использование = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ВидПотребности");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиУслуги();
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериалыИРаботы.КоличествоУпаковок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// -- rarus PleA
	
	// ++ rarus PleA 21.12.2020 [27925 ]
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыПричинаДоработки.Имя);
	ПолеЭлемента.Использование = Истина;
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбластьРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаБерегу();
	ОтборЭлемента.Использование = Истина;		
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыДоработать.Имя);
	ПолеЭлемента.Использование = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ОбластьРедактирования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаБерегу();
	ОтборЭлемента.Использование = Истина;		
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// -- rarus PleA
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсий.УстановитьУсловноеОформление(ЭтотОбъект);
	// -- rarus PleA
	
КонецПроцедуры
// -- rarus makole 2021-04-26 [РАIT-0023284]

&НаСервере
Процедура ПриСозданииНаСервереУстановитьДоступностьВидимость()
	
	рарусЗаявкаНаСнабжениеСервер.УстановитьВидимостьДоступностьЭлементовСогласования(ЭтаФорма);
	
	рарусЗаявкаНаСнабжениеСервер.ЗаполнитьПредставлениеСтатусаСогласования(ЭтаФорма);		
	
	УстановитьВидимостьДоступностьРеквизитов();

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьРеквизитов()
	
	УстановитьДоступностьДаты();
	
	Элементы.Подразделение.Видимость = Пользователи.ЭтоПолноправныйПользователь() ИЛИ Не ЗначениеЗаполнено(Объект.Подразделение);
	
	Элементы.ОтветственныйБереговойСлужбы.Видимость = ЗначениеЗаполнено(Объект.ОтветственныйБереговойСлужбы);
	
	УстановитьЗаголовокСтраницыТоваров();
	
	Элементы.МатериальныеЗатратыОтменено.Видимость = ЗначениеЗаполнено(Объект.НомерСудовойЗаявки);
	
	// ++ rarus makole 2021-05-11 [РАIT-0023284]
	// ++ rarus makole 2021-07-28 [ВПIT-0028068]
	// В Судовом модуле,  в документе Заявка на снабжение при указании вида потребности Продукты питания  
	// и Навигационные карты (в случае учета навигационных карт как услуга) необходимо убрать  поля Береговая служба и Заголовок
	
	//ВидПотребностиЗаСчетСобственныхСредств = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦЗаСчетСобственныхСредств();
	//Элементы.БереговаяСлужба.Видимость = НЕ (Объект.ВидПотребности = ВидПотребностиЗаСчетСобственныхСредств);
	//Элементы.Заголовок.Видимость = НЕ (Объект.ВидПотребности = ВидПотребностиЗаСчетСобственныхСредств);
	//Элементы.ЖелаемаяДатаОтгрузки.Видимость = НЕ (Объект.ВидПотребности = ВидПотребностиЗаСчетСобственныхСредств);
	//Элементы.Декорация1.Видимость = НЕ (Объект.ВидПотребности = ВидПотребностиЗаСчетСобственныхСредств);
	//Элементы.Декорация2.Видимость = НЕ (Объект.ВидПотребности = ВидПотребностиЗаСчетСобственныхСредств);
	
	ЭтоЗаказПродуктов = Объект.ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиПродуктыПитания();
	ЭтоЗаказКартНавигации = (Объект.ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиНавигационныеКарты()) И ПолучитьФункциональнуюОпцию("рарусУчетКартНавигацииКакУслуги");
	ЭтоЗаказЗаСчетСобственныхСредств = Объект.ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦЗаСчетСобственныхСредств();
	
	ВидимостьРеквизитов = НЕ (ЭтоЗаказПродуктов ИЛИ ЭтоЗаказКартНавигации ИЛИ ЭтоЗаказЗаСчетСобственныхСредств);
	
	Элементы.БереговаяСлужба.Видимость 		= ВидимостьРеквизитов;
	Элементы.Заголовок.Видимость 			= ВидимостьРеквизитов;
	Элементы.ЖелаемаяДатаОтгрузки.Видимость = ВидимостьРеквизитов;
	Элементы.Декорация1.Видимость 			= ВидимостьРеквизитов;
	Элементы.Декорация2.Видимость 			= ВидимостьРеквизитов;
	// -- rarus makole 2021-07-28 [ВПIT-0028068]
	// -- rarus makole 2021-05-11 [РАIT-0023284]

КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыТоваров()
	
	Перем ЗаголовокСтраницы;
	
	ЗаголовокСтраницы = "ТМЦ";
	Если ЭтоВидПотребностиУслуги(Объект.ВидПотребности) тогда
		ЗаголовокСтраницы = "Услуги";
	КонецЕсли;
	
	Элементы.ГруппаМатериальныеЗатраты.Заголовок = ЗаголовокСтраницы;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьДаты()
	
	Элементы.Дата.ТолькоПросмотр = Истина;
	
КонецПроцедуры	

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	рарусЗаявкаНаСнабжениеСервер.УстановитьВозможностьИзменения(ЭтотОбъект, ТекущийОбъект);
	
	ЗаполнитьЗависимыеРеквизитыФормы();
	// ++ rarus yukuzi 23.12.2020   // Снабжение ТОИР 2 Приоритет
	ПрочитатьМаксЦены();
	// -- rarus yukuzi 23.12.2020
	
	// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
	ПолучитьОстаткиНоменклатурыНаСкладе();
	// -- rarus atyutyakin 28.01.2021

	// ++ rarus makole 2021-04-13 [РАIT-0023340]
	ОбновитьТаблицуСтатусов();
	// -- rarus makole 2021-04-13 [РАIT-0023340]
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсий.ОбновитьИсходныеДанные(Объект, ЭтотОбъект);
	// -- rarus PleA
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	//Элементы.МатериальныеЗатратыНоменклатура.ТолькоПросмотр = Объект.ДокументыОснования.Количество() > 0;
	
	// ++ rarus makole 2021-04-13 [РАIT-0023340]
	ЗаполнитьСтатусыСтрокПоТаблице();
	// -- rarus makole 2021-04-13 [РАIT-0023340]
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	рарусЗаявкаНаСнабжениеНапоминания.ДобавитьНапоминаниеПриСменеСтатуса(ТекущийОбъект);
	
	ЗаполнитьЗависимыеРеквизитыФормы();
	
	// ++ rarus atyutyakin 03.02.2021  [ФТ.ИМ.02.01]
	ПолучитьОстаткиНоменклатурыНаСкладе();
	// -- rarus atyutyakin 03.02.2021
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсий.ОбновитьИсходныеДанные(Объект, ЭтотОбъект);	
	// -- rarus PleA
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимыеРеквизитыФормы()
	
	ЗаполнитьОписаниеНоменклатурыПоСтрокам();
	
	ЗаполнитьСостоянияПозицийЗаявки();
	
	ЗаполнитьДокументОприходывания();
	
	// РаботаСФайламиСтрок
	ЗаполнитьФайлыСтрок();
	// Конец РаботаСФайламиСтрок
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументОприходывания()
	
	Если Не Объект.Ссылка.Пустая() тогда
		ДокументПриходаТМЦ.ЗагрузитьЗначения(рарусЗаявкаНаСнабжениеСервер.НайтиПриходыТМЦПоЗаявке(Объект.Ссылка));
	КонецЕсли;
	
	ОбновитьНадписьДокументОприходования();

КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьДокументОприходования()
	
	ДокументПриходаТМЦНадпись = "";
	Если ДокументПриходаТМЦ.Количество() тогда
		ДокументПриходаТМЦНадпись = СтрШаблон("Всего приходов ТМЦ: %1", ДокументПриходаТМЦ.Количество());		
	КонецЕсли;	

КонецПроцедуры
 

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		Элемент.ТекущиеДанные.ID = Новый УникальныйИдентификатор();
		Элемент.ТекущиеДанные.ВариантОбеспечения = ПредопределенноеЗначение("Перечисление.ВариантыОбеспечения.НеТребуется");
	КонецЕсли;
	
	// ++ rarus PleA 21.12.2020 [26103]
	Если Не ОтменаРедактирования И Элемент.ТекущиеДанные <> Неопределено тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		УстановитьКоличествоУслугФиксированноПоСтроке(ТекущиеДанные);
	КонецЕсли;	
	// -- rarus PleA
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоУслугФиксированноПоСтроке(ТекущаяСтрока)
	
	Если ЭтоВидПотребностиУслуги(Объект.ВидПотребности) тогда
		СтруктураСтроки = ДанныеСтрокиУслугФиксированно();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьКоличествоУслугФиксированно()
	
	Если ЭтоВидПотребностиУслуги(Объект.ВидПотребности) тогда
		Для Каждого ТекущаяСтрока Из Объект.МатериалыИРаботы цикл
			СтруктураСтроки = ДанныеСтрокиУслугФиксированно();
			ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураСтроки);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСтрокиУслугФиксированно()
	
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("КоличествоУпаковок", 1);
	СтруктураСтроки.Вставить("Количество", 1);
	
	Возврат СтруктураСтроки;
	
КонецФункции

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверитьВозможностьДобавленияСтроки(Отказ);
	
	//ПАН+ ФТ.АН.01.21
	ПроверитьВозможностьДобавленияСтрокПоАналогам(Отказ);
	//ПАН=
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьДобавленияСтроки(Отказ)
	
	Если ЭтоВидПотребностиУслуги(Объект.ВидПотребности) И Объект.МатериалыИРаботы.Количество()>0 тогда		
		Отказ = Истина;
		ПоказатьПредупреждение(,"Для услуг разрешается вводить только одну строку в табличной части");		
	КонецЕсли;	
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ЭтоВидПотребностиУслуги(ВидПотребности)
	
	Возврат ВидПотребности = рарусЗаявкаНаСнабжениеСервер.ВидПотребностиУслуги();
	
КонецФункции
  	 
&НаКлиенте
Процедура МатериальныеЗатратыПередУдалением(Элемент, Отказ)
	Если Объект.ДокументыОснования.Количество() > 0 тогда
		Отказ = Истина;
	КонецЕсли;
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсийКлиент.ПередУдалением(ЭтотОбъект, Элемент, Отказ);
	// -- rarus PleA
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("ЗаписьЗнС");
	Оповестить("Запись_НапоминанияПользователя");
	// ++ rarus makole 2021-04-13 [РАIT-0023340]
	ЗаполнитьСтатусыСтрокПоТаблице();
	// -- rarus makole 2021-04-13 [РАIT-0023340]
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФормуВыбораНоменклатурыСОтбором(Элемент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораНоменклатурыСОтбором(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипНоменклатуры", ПолучитьТипНоменклатурыПоВидуПотребности(объект.ВидПотребности));
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", Отбор);
	// ++ rarus PleA 09.03.2021 [27787 ]
	ПараметрыОткрытияФормы.Вставить("КонтролироватьВыборЗаблокированных", Истина);
	// -- rarus PleA
	//rarus_AfoD 10.09.2021 < 
	ПараметрыОткрытияФормы.Вставить("ТекущаяСтрока", Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
	//rarus_AfoD 10.09.2021 > 
	
	// ++ rarus ilshil 15.07.2021 № 29823  	
	//ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытияФормы, Элемент);
	ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаВыбораДляЗаявки", ПараметрыОткрытияФормы, Элемент,,,,);
	// -- rarus ilshil 15.07.2021
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипНоменклатурыПоВидуПотребности(ВидПотребности)
	
	Если ВидПотребности = Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.Услуги тогда
		Возврат Перечисления.ТипыНоменклатуры.Услуга;
	КонецЕсли;
	
	Возврат Перечисления.ТипыНоменклатуры.Товар;
	
КонецФункции

&НаКлиенте
Процедура ВидПотребностиПриИзменении(Элемент)
	
	ВидПотребностиПриИзмененииНачать();		
	
КонецПроцедуры

&НаКлиенте
Процедура ВидПотребностиПриИзмененииНачать()
	
	ВидПотребностиприИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ВидПотребностиприИзмененииНаСервере()
	
	ОчиститьПозицииНеСоответствующиеВидуПотребности();
	
	УдалитьЛишниеСтрокиДляВидаПотребностиУслуги();
	
	УстановитьКоличествоУслугФиксированно();
	
	ПриСозданииНаСервереУстановитьДоступностьВидимость();
	
	ПриЧтенииСозданииНаСервере();
	
КонецПроцедуры
 
&НаСервере
Процедура ОчиститьПозицииНеСоответствующиеВидуПотребности()
	
	МассивУдаления = Новый Массив;
	// ++ rarus makole 2021-05-11 [ИМУЩ]
	ИспользуетсяИмущественныйУчет = рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчетДляДокумента(Объект);
	// -- rarus makole 2021-05-11 [ИМУЩ]
	
	Для Каждого СтрокаТаблицы Из Объект.МатериалыИРаботы цикл
		
		// ++ rarus makole 2021-05-11 [ИМУЩ]
		//Если Не ПроверитьСтрокаСоответствуетВидуПотребности(СтрокаТаблицы, Объект.ВидПотребности) тогда
		Если Не ПроверитьСтрокаСоответствуетВидуПотребности(СтрокаТаблицы, Объект.ВидПотребности, ИспользуетсяИмущественныйУчет) Тогда
		// -- rarus makole 2021-05-11 [ИМУЩ]
			МассивУдаления.Добавить(СтрокаТаблицы);
		КонецЕсли;	
		
	КонецЦикла;	
	
	УдалитьСтрокиТаблицыМатериалыИРаботы(МассивУдаления);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЛишниеСтрокиДляВидаПотребностиУслуги()
	
	Если ЭтоВидПотребностиУслуги(Объект.ВидПотребности) тогда
				
		Если Объект.МатериалыИРаботы.Количество() >1 тогда						
			
			Индекс = Объект.МатериалыИРаботы.Количество() - 1;
			
			Пока Индекс > 0 цикл
				
				Объект.МатериалыИРаботы.Удалить(Индекс);
				
				Индекс = Индекс - 1;
				
			КонецЦикла;	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры
 
&НаКлиентеНаСервереБезКонтекста
// ++ rarus makole 2021-05-11 [ИМУЩ]
//Функция ПроверитьСтрокаСоответствуетВидуПотребности(СтрокаТаблицы, ВидПотребности)
Функция ПроверитьСтрокаСоответствуетВидуПотребности(СтрокаТаблицы, ВидПотребности, ИспользуетсяИмущественныйУчет)
// -- rarus makole 2021-05-11 [ИМУЩ]
	
	Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОжидаемыйТипНоменклатуры = ПолучитьТипНоменклатурыПоВидуПотребности(ВидПотребности);
	
	СтрокаТипНоменклатуры = ТипНоменклатурыПолучить(СтрокаТаблицы.Номенклатура);
	
	// ++ rarus makole 2021-05-11 [ИМУЩ]
	//Возврат СтрокаТипНоменклатуры = ОжидаемыйТипНоменклатуры
	Если ИспользуетсяИмущественныйУчет
		И СтрокаТипНоменклатуры = ОжидаемыйТипНоменклатуры
		И КатегорияСоответствуетВидуПотребности(СтрокаТаблицы.Номенклатура, ВидПотребности) Тогда
		Возврат Истина
	ИначеЕсли НЕ ИспользуетсяИмущественныйУчет Тогда
		Возврат СтрокаТипНоменклатуры = ОжидаемыйТипНоменклатуры
	Иначе
		Возврат Ложь
	КонецЕсли;
	// -- rarus makole 2021-05-11 [ИМУЩ]
	
КонецФункции

// ++ rarus makole 2021-05-11 [ИМУЩ]
&НаСервереБезКонтекста
Функция КатегорияСоответствуетВидуПотребности(Номенклатура, ВидПотребности)
	
	Категория = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "Категория");
	Если ВидПотребности = Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.НавигационныеКарты
		И рарусИмущественныйУчетСерверПовтИсп.ВедетсяУчетКартНавигацииКакУслуги()
		И Категория <> Справочники.рарусКатегорииНоменклатуры.КартыИПубликации Тогда
		Возврат Ложь
	ИначеЕсли Категория = Справочники.рарусКатегорииНоменклатуры.КартыИПубликации
		И рарусИмущественныйУчетСерверПовтИсп.ВедетсяУчетКартНавигацииКакУслуги()
		И ВидПотребности <> Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.НавигационныеКарты Тогда
		Возврат Ложь
	ИначеЕсли ВидПотребности = Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.ПродуктыПитания
		И Категория <> Справочники.рарусКатегорииНоменклатуры.Колпит Тогда
		Возврат Ложь
	ИначеЕсли Категория = Справочники.рарусКатегорииНоменклатуры.Колпит
		И ВидПотребности <> Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.ПродуктыПитания Тогда
		Возврат Ложь
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции
// -- rarus makole 2021-05-11 [ИМУЩ]

&НаСервереБезКонтекста
Функция ТипНоменклатурыПолучить(Номенклатура)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ТипНоменклатуры");

КонецФункции
 
&НаСервере
Процедура УдалитьСтрокиТаблицыМатериалыИРаботы(МассивУдаления)
	
	Для Каждого СтрокаУдаления Из МассивУдаления цикл
		Объект.МатериалыИРаботы.Удалить(СтрокаУдаления);
	КонецЦикла;

КонецПроцедуры
 
&НаКлиенте
Процедура ВидПотребностиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ПроверитьСоответствиеПозицийВидуПотребности(ВыбранноеЗначение) тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВидПотребностиОбработкаВыбораЗавершение", ЭтотОбъект, ВыбранноеЗначение);
		
		ПоказатьВопрос(ОписаниеОповещения, 
			СтрШаблон("Указан вид потребности %1. Позиции документа будут очищены. Продолжить?", ВыбранноеЗначение),
			РежимДиалогаВопрос.ДаНет
			);	
			
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьСоответствиеПозицийВидуПотребности(ВидПотребности)
		
	// ++ rarus makole 2021-05-11 [ИМУЩ]
	ИспользуетсяИмущественныйУчет = рарусИмущественныйУчетВызовСервера.ИспользоватьИмущественныйУчетДляДокумента(Объект);
	// -- rarus makole 2021-05-11 [ИМУЩ]
	Для Каждого Строкатаблицы Из Объект.МатериалыИРаботы цикл
		
		// ++ rarus makole 2021-05-11 [ИМУЩ]
		//Если Не ПроверитьСтрокаСоответствуетВидуПотребности(Строкатаблицы, ВидПотребности) тогда
		Если Не ПроверитьСтрокаСоответствуетВидуПотребности(Строкатаблицы, ВидПотребности, ИспользуетсяИмущественныйУчет) тогда
		// -- rarus makole 2021-05-11 [ИМУЩ]
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции
 
&НаКлиенте
Процедура ВидПотребностиОбработкаВыбораЗавершение(РезультатВопроса, ВыбранноеЗначение) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
					
		Объект.ВидПотребности = ВыбранноеЗначение;
		
		ВидПотребностиПриИзмененииНачать();
				
	КонецЕсли; 
	
КонецПроцедуры	

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	рарусОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	
	рарусОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий)
	
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаСогласованиеКапитану(Команда)
	
	СтатусСогласования = СтатусСогласованияНаСогласованииКапитаном();
	ТекстВопроса = "Заявка будет записана и передана на согласование капитану. Продолжить?";
	УстановитьСтатусСогласованияИЗакрыть(СтатусСогласования, ТекстВопроса);		
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаДоработку(Команда)
	
	Если Не ПроверитьВозможностьПередачиНаДоработку() тогда
		ПоказатьПредупреждение(, "Не заполнены обязательные реквизиты для передачи на доработку инициатору");
		Возврат;
	КонецЕсли;	
		
	СтатусСогласования = СтатусСогласованияНаДоработку();
	ТекстВопроса = "Заявка будет записана и передана на доработку инициатору. Продолжить?";
	УстановитьСтатусСогласованияИЗакрыть(СтатусСогласования, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьНаБерег(Команда)
	
	Если ПроверитьВозможностьОтправкиНаБерег() тогда
		
		СтатусСогласования = СтатусСогласованияСогласована();
		ТекстВопроса = "Заявка будет записана и зарегистрирована к отправке в береговую систему. Продолжить?";
		УстановитьСтатусСогласованияИЗакрыть(СтатусСогласования, ТекстВопроса);
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласованияИЗакрыть(СтатусСогласования, ТекстВопроса)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусСогласованияЗавершение", ЭтотОбъект, СтатусСогласования);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьСтатусСогласованияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		//ПАН+
		Если ВключенаСхемаАналогов    
			И Объект.ОбластьСоздания <> ПредопределенноеЗначение("Перечисление.рарусОбластиРедактирования.Берег") 
				И ДополнительныеПараметры = СтатусСогласованияСогласована() Тогда
				
			ЗаполнитьИсходнуюНоменклатуруУчетаАналоговНаСервере();
	
		КонецЕсли;
		//ПАН-
		
		УстановитьСтатусСогласованияЗаписатьИЗакрыть(ДополнительныеПараметры);
	//Иначе
	//	УстановитьДополнительныеСвойстваОбъектаПоЗавершениюСогласованияАналогов(Ложь);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсходнуюНоменклатуруУчетаАналоговНаСервере()
	
	СоздаватьКомментарий = (НЕ ЗначениеЗаполнено(Объект.ОбластьСоздания) 
							ИЛИ Объект.ОбластьСоздания = ПредопределенноеЗначение("Перечисление.рарусОбластиРедактирования.Судно"));
	ШаблонСтрокиКомментария = "Стр. №%1: %2 - %3%4";
	МассивСтрокКомментария = Новый Массив;
	НачальныйКомментарий = "";
	
	Для Каждого Стр ИЗ Объект.МатериалыИРаботы Цикл
		Если Не ЗначениеЗаполнено(Стр.ИсходнаяНоменклатура) Тогда
			Стр.ИсходнаяНоменклатура = Стр.Номенклатура;
			Если СоздаватьКомментарий Тогда
				МассивСтрокКомментария.Добавить(СтрШаблон(ШаблонСтрокиКомментария,
													Стр.НомерСтроки,
													Стр.Номенклатура,
													Стр.Количество,
													ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Стр.Номенклатура,"ЕдиницаИзмерения")));
	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Если МассивСтрокКомментария.Количество() Тогда
		НачальныйКомментарий = СтрСоединить(МассивСтрокКомментария,Символы.ПС + Символы.Таб);
		Если ПустаяСтрока(Объект.Комментарий) Тогда
			Объект.Комментарий = Строка(ТекущаяДата())+ " Зарегистрирована к отправке на берег заявка на снабжение:" + 
					Символы.ПС + Символы.Таб + НачальныйКомментарий; 
		Иначе
			Объект.Комментарий = Объект.Комментарий + Символы.ПС + "-------------" + Символы.ПС;
			Объект.Комментарий = Объект.Комментарий + Строка(ТекущаяДата())+ " Зарегистрирована к отправке на берег заявка на снабжение:" + 
					Символы.ПС + Символы.Таб + НачальныйКомментарий;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусСогласованияЗаписатьИЗакрыть(СтатусСогласования)
	
	Перем ОбновитьЗаписиЖурналаИзмененийПоАналогам;
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("СтатусСогласованияУстановить", СтатусСогласования);
	
	//ПАН+
	Если ИспользуетсяСхемаСогласованияАналогов Тогда
		ОбновитьЗаписиЖурналаИзмененийПоАналогам = 
				 ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы,"ЗавершитьСогласование","Пометка");
				 
		Если ОбновитьЗаписиЖурналаИзмененийПоАналогам <> Неопределено 
					И ОбновитьЗаписиЖурналаИзмененийПоАналогам = Истина Тогда
			ПараметрыЗаписи.Вставить("ОбновитьЖурналИзмененийПоАналогам", Истина);	
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗавершитьСогласование","Пометка",Ложь);
		КонецЕсли;
	КонецЕсли;
	//ПАН-

	Если Записать(ПараметрыЗаписи) тогда
		Закрыть();
	КонецЕсли;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусСогласованияНаСогласованииКапитаном()
	Возврат рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаСогласованииКапитаном(); 
КонецФункции

&НаСервереБезКонтекста
Функция СтатусСогласованияНаДоработку()
	Возврат рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработку(); 
КонецФункции

&НаСервереБезКонтекста
Функция СтатусСогласованияСогласована()
	Возврат рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияСогласована(); 
КонецФункции

#Область ПередЗаписьюНаСервере

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъекта(ТекущийОбъект, ПараметрыЗаписи);
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсий.ЗаписатьКомментарииВИсторию(Объект, ТекущийОбъект, ПараметрыЗаписи);
	// -- rarus PleA

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъекта(ТекущийОбъект, ПараметрыЗаписи)
		
	ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъектаПоСогласованию(ПараметрыЗаписи, ТекущийОбъект);

	ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъектаПоОприходыванию(ПараметрыЗаписи, ТекущийОбъект);
	
	//ПАН+
	ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъектаПоАналогам(ПараметрыЗаписи, ТекущийОбъект);
	//ПАН-
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъектаПоАналогам(Знач ПараметрыЗаписи, Знач ТекущийОбъект)
	
	
	ОбновитьЖурналИзмененийПоАналогам = Неопределено;
	
	ПараметрыЗаписи.Свойство("ОбновитьЖурналИзмененийПоАналогам", ОбновитьЖурналИзмененийПоАналогам);
	
	Если ОбновитьЖурналИзмененийПоАналогам <> Неопределено Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьЖурналИзмененийПоАналогам", Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъектаПоСогласованию(Знач ПараметрыЗаписи, Знач ТекущийОбъект)
	
	Перем СтатусСогласованияУстановить;
	
	СтатусСогласованияУстановить = Неопределено;
	ПараметрыЗаписи.Свойство("СтатусСогласованияУстановить", СтатусСогласованияУстановить);
	
	Если ЗначениеЗаполнено(СтатусСогласованияУстановить) тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусСогласованияУстановить", СтатусСогласованияУстановить);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервереЗаполнитьДополнительныеСвойстваОбъектаПоОприходыванию(Знач ПараметрыЗаписи, Знач ТекущийОбъект)
	
	Перем СтатусОприходыванияУстановить;
	
	СтатусСогласованияУстановить = Неопределено;
	ПараметрыЗаписи.Свойство("СтатусОприходыванияУстановить", СтатусОприходыванияУстановить);
	
	Если ЗначениеЗаполнено(СтатусОприходыванияУстановить) тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусОприходыванияУстановить", Истина);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 

&НаКлиенте
Функция ПроверитьВозможностьПередачиНаДоработку()
	
	возврат ПроверитьЗаполнениеРеквизитовДоработки();
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеРеквизитовДоработки(ТекстОшибки = "")
	
	СтрокиНаДоработку = СтрокиНаДоработкуПолучить(Объект);
	
	Если СтрокиНаДоработку.Количество() = 0 тогда
		ТекстОшибки = "Не отмечено не одной строки на доработку";
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"МатериалыИРаботы","Объект");
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьОшибка = Ложь;
	
	МассивСтрокОшибок = Новый Массив;
	Для каждого СтрокаДоработки Из СтрокиНаДоработку Цикл
	
		Если ПустаяСтрока(СтрокаДоработки.ПричинаДоработки) тогда
			ЕстьОшибка = Истина;
			ТекстОшибкиПоСтроке = СтрШаблон("В строке №%1 не указана причина доработки", СтрокаДоработки.НомерСтроки);
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибкиПоСтроке,,СтрШаблон("МатериалыИРаботы[%1].ПричинаДоработки", СтрокаДоработки.НомерСтроки-1), "Объект");
		КонецЕсли;	
	
	КонецЦикла; 
	
	Возврат НЕ ЕстьОшибка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокиНаДоработкуПолучить(Объект)
	
	Возврат Объект.МатериалыИРаботы.НайтиСтроки(Новый Структура("Доработать", Истина));	
	
КонецФункции 

&НаКлиенте
Функция ПроверитьВозможностьОтправкиНаБерег()
	
	// TODO
	
	//ПАН+
	Если ИспользуетсяСхемаСогласованияАналогов Тогда
		
		Флаг = Ложь;
		
		Для Каждого Стр ИЗ Объект.МатериалыИРаботы Цикл
			Если Стр.СтатусСогласования = ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.ОтправитьНаСудно") Тогда
				Флаг = Истина;
				ПоказатьПредупреждение(,"Необходимо обработать строки, требующие согласования по аналогам");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Объект.СогласованиеАналоговНеЗавершено = Флаг;
					
		Возврат НЕ Флаг;
		
	КонецЕсли;
	
	//ПАН-
	
	возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСостоянияПозицийЗаявки()
	
	рарусЗаявкаНаСнабжениеСервер.ЗаполнитьСостоянияСтрокЗаявки(ЭтаФорма)
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ПриИзмененииНоменклатурыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииНоменклатурыНаСервере()
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено тогда
		Возврат;
	КонецЕсли;	
	СтрокаТовара = Объект.МатериалыИРаботы.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ЗаполнитьОписаниеНоменклатурыПоСтроке(СтрокаТовара);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписаниеНоменклатурыПоСтрокам()
	
	СписокНоменклатуры = Объект.МатериалыИРаботы.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	
	СоответствиеНоменклатураСтрока = рарусЗаявкаНаСнабжениеСервер.ОписаниеДополнительныхРеквизитовПоСпикуНоменклатуры(СписокНоменклатуры);
	
	Для Каждого СтрокаТовара Из Объект.МатериалыИРаботы цикл
		
		СтрокаТовара.ОписаниеДополнительныхРеквизитовНоменклатуры = СоответствиеНоменклатураСтрока[СтрокаТовара.Номенклатура];
		
	КонецЦикла;	
	
КонецПроцедуры
 
&НаСервере
Процедура ЗаполнитьОписаниеНоменклатурыПоСтроке(СтрокаТовара)
	
	СтрокаТовара.ОписаниеДополнительныхРеквизитовНоменклатуры = рарусЗаявкаНаСнабжениеСервер.ОписаниеДополнительныхРеквизитовНоменклатуры(СтрокаТовара.Номенклатура);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	//ПАН+ ФТ.АН.01.08,19
	Если ВключенаСхемаАналогов Тогда
		//РаботаСТабличнымиЧастямиКлиент.КэшироватьТекущуюСтроку(Элементы.Товары, ЭтотОбъект);
		
		ТекущиеДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
			
		Если НоваяСтрока Тогда
			ТекущиеДанные.IDДинамический = Строка(Новый УникальныйИдентификатор);
			
			ТекущиеДанные.IDПервоначальный = ТекущиеДанные.IDДинамический;
		КонецЕсли;
				
		//Если НоваяСтрока И Не Копирование Тогда
		//	ТекущиеДанные.IDПервоначальный = ТекущиеДанные.IDДинамический;
		//КонецЕсли;
	КонецЕсли;
	//ПАН-	

	Если НоваяСтрока Тогда
		
		Элементы.МатериальныеЗатраты.ТекущиеДанные.КодСтроки = 0;
		Элементы.МатериальныеЗатраты.ТекущиеДанные.ИдентификаторФайлов = ОбщегоНазначенияКлиентСервер.ПустойУникальныйИдентификатор();
		ЗаполнитьПредставлениеФайлаСтроки(Элементы.МатериальныеЗатраты.ТекущиеДанные);
		
	КонецЕсли;
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсийКлиент.ПриНачалеРедактирования(ЭтотОбъект, Элемент, НоваяСтрока, Копирование);
	// -- rarus PleA
	
КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьИЗакрыть(Команда)
	
	Если Не ПроверитьВозможностьОприходывания() тогда
		Возврат;
	КонецЕсли;
	
	СтатусСогласования = СтатусСогласованияНаДоработку();
	ТекстВопроса = "По заявке будет выполнено оприходование указанных ТМЦ. Продолжить?";
	УстановитьСтатусОприходыванияиЗакрыть(СтатусСогласования, ТекстВопроса);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьОприходывания()
	
	Если Объект.МатериалыИРаботы.Количество() = 0 тогда
		ТекстОшибки = "В документе не заполнены ТМЦ для оприходывания";		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки,,"МатериалыИРаботы","Объект");
		Возврат Ложь;
	КонецЕсли;	
	
	Если ЕстьПриходТМЦПоЗаявке(Объект.Ссылка) тогда
		ТекстОшибки = "По данной заявке уже сформирован приход ТМЦ";
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции
  
&НаСервереБезКонтекста
Функция ЕстьПриходТМЦПоЗаявке(Заявка)
	
	Возврат рарусЗаявкаНаСнабжениеСервер.ЕстьПриходТМЦПоЗаявке(Заявка);
	
КонецФункции
 
&НаКлиенте
Процедура УстановитьСтатусОприходыванияиЗакрыть(СтатусСогласования, ТекстВопроса)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьСтатусОприходыванияЗавершение", ЭтотОбъект, СтатусСогласования);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОприходыванияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		УстановитьСтатусОприходыванияЗаписатьИЗакрыть(ДополнительныеПараметры);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОприходыванияЗаписатьИЗакрыть(Статус)
		
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	ПараметрыЗаписи.Вставить("СтатусОприходыванияУстановить", Статус);
	Записать(ПараметрыЗаписи);
	Закрыть();

КонецПроцедуры

&НаКлиенте
Процедура ДокументПриходаТМЦНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("СписокПрихода", ДокументПриходаТМЦ.ВыгрузитьЗначения());
	
	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.Форма.ДокументыПрихода", ПараметрыОткрытия, Элемент, Ложь, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// ++ rarus yukuzi 23.12.2020   // Снабжение ТОИР 2 Приоритет
&НаСервере
Процедура ПрочитатьМаксЦены()
	Если ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалТОИРСнабжение2Приоритет") тогда
		
		КоллекцияТЧ=Объект.МатериалыИРаботы;
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	тзИзТЧ.НомерСтроки КАК НомерСтроки,
		//|	тзИзТЧ.Номенклатура КАК Номенклатура,
		//|	тзИзТЧ.КоличествоУпаковок КАК Количество
		//|ПОМЕСТИТЬ втДанныеТЧ
		//|ИЗ
		//|	&тзИзТЧ КАК тзИзТЧ
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Номенклатура
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	рарусЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		//|	МАКСИМУМ(рарусЦеныНоменклатуры.Цена) КАК Цена
		//|ПОМЕСТИТЬ втЦены
		//|ИЗ
		//|	РегистрСведений.рарусЦеныНоменклатуры КАК рарусЦеныНоменклатуры
		//|ГДЕ
		//|	рарусЦеныНоменклатуры.Период <= &ДатаДока
		//|	И рарусЦеныНоменклатуры.Номенклатура В
		//|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		//|				втДанныеТЧ.Номенклатура КАК Номенклатура
		//|			ИЗ
		//|				втДанныеТЧ КАК втДанныеТЧ)
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	рарусЦеныНоменклатуры.Номенклатура
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Номенклатура
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		//|	втДанныеТЧ.НомерСтроки КАК НомерСтроки,
		//|	ЕСТЬNULL(втЦены.Цена, 0) КАК Цена,
		//|	втДанныеТЧ.Количество * ЕСТЬNULL(втЦены.Цена, 0) КАК Сумма
		//|ИЗ
		//|	втДанныеТЧ КАК втДанныеТЧ
		//|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
		//|		ПО втДанныеТЧ.Номенклатура = втЦены.Номенклатура";
		//
		
		"ВЫБРАТЬ
		|	тзИзТЧ.НомерСтроки КАК НомерСтроки,
		|	тзИзТЧ.Номенклатура КАК Номенклатура,
		|	тзИзТЧ.КоличествоУпаковок КАК Количество
		|ПОМЕСТИТЬ втДанныеТЧ
		|ИЗ
		|	&тзИзТЧ КАК тзИзТЧ
		// ++ rarus yukuzi 15.07.2021   //
		|ГДЕ
		|	НЕ тзИзТЧ.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
		// -- rarus yukuzi 15.07.2021
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	рарусЦеныНоменклатуры.Номенклатура КАК Номенклатура,
		|	МАКСИМУМ(рарусЦеныНоменклатуры.Цена) КАК Цена
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	РегистрСведений.рарусЦеныНоменклатуры КАК рарусЦеныНоменклатуры
		|ГДЕ
		|	рарусЦеныНоменклатуры.Период <= &ДатаДока
		|	И рарусЦеныНоменклатуры.Номенклатура В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				втДанныеТЧ.Номенклатура КАК Номенклатура
		|			ИЗ
		|				втДанныеТЧ КАК втДанныеТЧ)
		|
		|СГРУППИРОВАТЬ ПО
		|	рарусЦеныНоменклатуры.Номенклатура
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втДанныеТЧ.НомерСтроки КАК НомерСтроки,
		|	ЕСТЬNULL(втЦены.Цена, 0) КАК Цена,
		|	втДанныеТЧ.Количество * ЕСТЬNULL(втЦены.Цена, 0) КАК Сумма
		|ИЗ
		|	втДанныеТЧ КАК втДанныеТЧ
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦены КАК втЦены
		|		ПО втДанныеТЧ.Номенклатура = втЦены.Номенклатура";

		
		Запрос.УстановитьПараметр("ДатаДока", Объект.Дата);
		Запрос.УстановитьПараметр("тзИзТЧ", КоллекцияТЧ.Выгрузить());
		
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КоллекцияТЧ[ВыборкаДетальныеЗаписи.НомерСтроки-1].МаксимальнаяЦена= ВыборкаДетальныеЗаписи.Цена;
			КоллекцияТЧ[ВыборкаДетальныеЗаписи.НомерСтроки-1].Сумма= ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;
		СуммаОценки=КоллекцияТЧ.Выгрузить().Итог("Сумма");
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	    
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриИзменении(Элемент)
 
	МатериальныеЗатратыПриИзмененииНаСервере();
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсийКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	// -- rarus PleA

КонецПроцедуры

&НаСервере
Процедура МатериальныеЗатратыПриИзмененииНаСервере()
	
	ПрочитатьМаксЦены();
	
	// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
	ПолучитьОстаткиНоменклатурыНаСкладе();
	// -- rarus atyutyakin 28.01.2021

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Период", Объект.Дата);
	ПараметрыФО.Вставить("Судно", Объект.Подразделение);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);
	
	// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
	ЗаполнитьСписокВыбораВидовПотребностей();
	// -- rarus atyutyakin 28.01.2021
	
КонецПроцедуры

// -- rarus yukuzi 23.12.2020

// ++ rarus PleA 11.01.2021 [26397]

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// РаботаСФайламиСтрок
	Если ИмяСобытия = "Запись_Файл" тогда
		
		ВыбраннаяСтрока = Неопределено;
		
		Если Параметр.Свойство("ВыбраннаяСтрока", ВыбраннаяСтрока) тогда
			
			ИмяТаблицы = Неопределено;
			Параметр.Свойство("ИмяТаблицы", ИмяТаблицы);
			
			СтрокаДанных = Объект[ИмяТаблицы].НайтиПоИдентификатору(ВыбраннаяСтрока);
			
			рарусРаботаСФайламиСтрокКлиентСервер.ЗаполнитьПредставлениеФайлаСтроки(СтрокаДанных, Объект.ПрисоединенныеФайлыСтрок);	
			
		КонецЕсли;	
		
	КонецЕсли;	
	// Конец РаботаСФайламиСтрок

	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.МатериальныеЗатратыФайлСтрокой тогда
		
		СтандартнаяОбработка = Ложь;
		
		// РаботаСФайламиСтрок
		ПараметрыДобавленияФайла = ПараметрыДобавленияФайла(ВыбраннаяСтрока);
	
		рарусРаботаСФайламиСтрокКлиент.ОткрытьВыбратьФайлПоСтрокеНачать(ПараметрыДобавленияФайла);
		// Конец РаботаСФайламиСтрок
		
	ИначеЕсли Поле = Элементы.МатериальныеЗатратыФайлУдалить тогда
		
		СтандартнаяОбработка = Ложь;
		
		// РаботаСФайламиСтрок
		ПараметрыДобавленияФайла = ПараметрыДобавленияФайла(ВыбраннаяСтрока);
		
		рарусРаботаСФайламиСтрокКлиент.УдалитьФайлПоСтрокеНачать(ПараметрыДобавленияФайла);
	    // Конец РаботаСФайламиСтрок
	КонецЕсли;
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсийКлиент.Выбор(ЭтотОбъект, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);	
	// -- rarus PleA
	
КонецПроцедуры

// РаботаСФайламиСтрок
&НаКлиенте
Функция ПараметрыДобавленияФайла(ВыбраннаяСтрока)
		
	Возврат рарусРаботаСФайламиСтрокКлиент.ПараметрыДобавленияФайла(
		ВыбраннаяСтрока, 
		ЭтотОбъект, 
		"МатериалыИРаботы", 
		"ПрисоединенныеФайлыСтрок"
		);
		
КонецФункции

// РаботаСФайламиСтрок
&НаСервере
Процедура ЗаполнитьФайлыСтрок() 
	
	рарусРаботаСФайламиСтрокСерверПереопределяемый.ЗаполнитьФайлыСтрок(Объект);	
	
КонецПроцедуры

// РаботаСФайламиСтрок
&НаКлиенте
Функция ЗаполнитьПредставлениеФайлаСтроки(ТекущиеДанные)
	
	рарусРаботаСФайламиСтрокКлиентСервер.ЗаполнитьПредставлениеФайлаСтроки(ТекущиеДанные, Объект.ПрисоединенныеФайлыСтрок);	
	
КонецФункции
 
// -- rarus PleA

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаКлиенте
Процедура СоздатьПриходТМЦ(Команда)
	
	Если НЕ МожноВвестиНаОснованииДокументыПриходаТМЦ(Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ОписаниеОповещенияОЗаписи = Новый ОписаниеОповещения("ОбработатьОтветОЗаписиДокумента", ЭтаФорма, "СоздатьПриходТМЦ");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Записать и продолжить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		ПоказатьВопрос(ОписаниеОповещенияОЗаписи, "Для продолжения необходимо записать документ", Кнопки,, КодВозвратаДиалога.Нет, "Сохранение документа");
	Иначе
		СоздатьДокументПриходаТМЦ();
	КонецЕсли;
	
КонецПроцедуры // -- rarus atyutyakin 28.01.2021

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаКлиенте
Процедура ОбработатьОтветОЗаписиДокумента(Ответ, Команда) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Записать();
		Если Команда = "СоздатьПриходТМЦ" Тогда
			СоздатьДокументПриходаТМЦ();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // -- rarus atyutyakin 28.01.2021

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаКлиенте 
Функция МожноВвестиНаОснованииДокументыПриходаТМЦ(ВывестиПредупреждениеПользователю = Ложь)
	
	ВидыПотребностейТМЦУслуги = Новый Массив;
	ВидыПотребностейТМЦУслуги.Добавить(ПредопределенноеЗначение("Перечисление.рарусВидыПотребностиЗаявкиНаСнабжение.ТМЦ"));
	ВидыПотребностейТМЦУслуги.Добавить(ПредопределенноеЗначение("Перечисление.рарусВидыПотребностиЗаявкиНаСнабжение.Услуги"));
	ДопустимыеВидыПотребностей = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		Элементы.ВидПотребности.СписокВыбора.ВыгрузитьЗначения(), ВидыПотребностейТМЦУслуги);
		
	МожноВвестиПриходТМЦ = (ДопустимыеВидыПотребностей.Найти(Объект.ВидПотребности) <> Неопределено);
	Если НЕ МожноВвестиПриходТМЦ И ВывестиПредупреждениеПользователю Тогда
		ТекстСообщения = СтрШаблон(
			"Создать документ ""Приход ТМЦ"" можно только по видам потребности %1.",
			СтрСоединить(ДопустимыеВидыПотребностей, ", "));
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	Возврат МожноВвестиПриходТМЦ;
	
КонецФункции // -- rarus atyutyakin 28.01.2021

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаКлиенте 
Процедура СоздатьДокументПриходаТМЦ()
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	
	ФормаНовогоДокументаПрихода = ПолучитьФорму("Документ.впПриходТМЦ.Форма.ФормаДокумента", ПараметрыФормы, ЭтаФорма, Истина);
	ДанныеФормы = ФормаНовогоДокументаПрихода.Объект;
	ЗаполнитьДокументПриходаНаСервере(ДанныеФормы, Объект.Ссылка);
	КопироватьДанныеФормы(ДанныеФормы, ФормаНовогоДокументаПрихода.Объект);
	ФормаНовогоДокументаПрихода.Открыть();
	
КонецПроцедуры // -- rarus atyutyakin 28.01.2021

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаСервереБезКонтекста
Процедура ЗаполнитьДокументПриходаНаСервере(ДанныеФормы, ДанныеНовогоДокумента)
	
	НовыйДокументПрихода = Документы.впПриходТМЦ.СоздатьДокумент();
	НовыйДокументПрихода.Заполнить(ДанныеНовогоДокумента);
	ЗначениеВДанныеФормы(НовыйДокументПрихода, ДанныеФормы);
	
КонецПроцедуры // -- rarus atyutyakin 28.01.2021

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаСервере
Процедура ПолучитьОстаткиНоменклатурыНаСкладе()
	
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Период", Объект.Дата);
	ПараметрыФО.Вставить("Судно", Объект.Подразделение);
	Если рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчет(ПараметрыФО) Тогда
		
		НоменклатураДокумента = Объект.МатериалыИРаботы.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Объект.Дата);
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураДокумента);
		Запрос.УстановитьПараметр("Склад", рарусОбщегоНазначенияСервер.СкладСудна(Объект.Подразделение));
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	рарусИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
		|	рарусИмуществоНаСудахОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
		|			&Дата,
		|			Номенклатура В (&Номенклатура)
		|				И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ))
		|				И Склад = &Склад) КАК рарусИмуществоНаСудахОстатки";
		
		УстановитьПривилегированныйРежим(Истина);
		Остатки = Запрос.Выполнить().Выгрузить();
		Остатки.Индексы.Добавить("Номенклатура");
		УстановитьПривилегированныйРежим(Ложь);
		
		ОтборПоНоменклатуре = Новый Структура("Номенклатура");
		Для Каждого СтрокаТЧ Из Объект.МатериалыИРаботы Цикл
			ЗаполнитьЗначенияСвойств(ОтборПоНоменклатуре, СтрокаТЧ);
			СтрокиОстатков = Остатки.НайтиСтроки(ОтборПоНоменклатуре);
			Если СтрокиОстатков.Количество() > 0 Тогда
				ОстатокНаСкладе = СтрокиОстатков[0].КоличествоОстаток;
			Иначе
				ОстатокНаСкладе = 0;
			КонецЕсли; 
			СтрокаТЧ.ОстатокНаСкладе = ОстатокНаСкладе;
		КонецЦикла; 
	
	КонецЕсли; 
	
КонецПроцедуры // -- rarus atyutyakin 28.01.2021

// ++ rarus atyutyakin 28.01.2021  [ФТ.ИМ.02.01]
&НаСервере
Процедура ЗаполнитьСписокВыбораВидовПотребностей();
	
	ВидыПотребностей = Новый Массив;
	
	ВидыПотребностей.Добавить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦ());
	ВидыПотребностей.Добавить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиУслуги());
	ВидыПотребностей.Добавить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦЗаСчетСобственныхСредств());
	
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Период", Объект.Дата);
	ПараметрыФО.Вставить("Судно", Объект.Подразделение);
	Если рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчет(ПараметрыФО) Тогда
		ВидыПотребностей.Добавить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиПродуктыПитания());
		// ++ rarus makole 2021-04-21 [РАIT-0023257]
		//ВидыПотребностей.Добавить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиНавигационныеКарты());
		Если ПолучитьФункциональнуюОпцию("рарусУчетКартНавигацииКакУслуги") Тогда
			ВидыПотребностей.Добавить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиНавигационныеКарты());
		КонецЕсли;
		// -- rarus makole 2021-04-21 [РАIT-0023257]
	КонецЕсли; 
	
	Элементы.ВидПотребности.СписокВыбора.ЗагрузитьЗначения(ВидыПотребностей);
	Элементы.ВидПотребности.РежимВыбораИзСписка = Истина;
	
КонецПроцедуры // -- rarus atyutyakin 28.01.2021

// ++ rarus PleA 09.03.2021 [27787 ]
&НаКлиенте
Процедура МатериальныеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоЗаблокированнаяНоменклатура(ВыбранноеЗначение) тогда
		
		рарусНоменклатураКлиент.ВыборЗаблокированнойНоменклатуры(Неопределено, ВыбранноеЗначение, СтандартнаяОбработка);
	// ++ rarus makole 2021-05-11 [ИМУЩ]
	ИначеЕсли рарусИмущественныйУчетВызовСервера.ИспользоватьИмущественныйУчетДляДокумента(Объект)
	   	И НЕ ПроверитьСтрокаСоответствуетВидуПотребности(Новый Структура("Номенклатура", ВыбранноеЗначение), 
														Объект.ВидПотребности, 
														ИСТИНА) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(,"Номенклатура не соответствует указанному виду потребности",,"Внимание!");
	// -- rarus makole 2021-05-11 [ИМУЩ]
	КонецЕсли;
	
	// ++ rarus yukuzi 30.07.2021   //
	Если ЭтоНоменклатураБезMDG(ВыбранноеЗначение) тогда
		рарусНоменклатураКлиент.ВыборНоменклатурыБезMDG(Неопределено, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	// -- rarus yukuzi 30.07.2021
	
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЭтоЗаблокированнаяНоменклатура(ВыбраннаяСтрока)
	
	Возврат рарусНоменклатураСервер.ЭтоЗаблокированнаяНоменклатура(ВыбраннаяСтрока);
	
КонецФункции
// -- rarus PleA

// ++ rarus yukuzi 30.07.2021   //
&НаСервереБезКонтекста
Функция ЭтоНоменклатураБезMDG(Номенклатура)
	
	Возврат не ЗначениеЗаполнено(Номенклатура.рспбКодMDG);
	
КонецФункции
// -- rarus yukuzi 30.07.2021

// ++ rarus makole 2021-04-13 [РАIT-0023340]
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтрокиПоКодуСтроки(Объект, КодСтроки)
	
	Возврат Объект.МатериалыИРаботы.НайтиСтроки(Новый Структура("КодСтроки",  КодСтроки));	
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтатусыСтрокПоТаблице()
	
	Для Каждого СтрСтатуса из ЭтотОбъект.ТаблицаСтатусовСтрок Цикл
		
		СтрокиТоваровПоСтатусу = ПолучитьСтрокиПоКодуСтроки(Объект, СтрСтатуса.КодСтроки);
		Если СтрокиТоваровПоСтатусу.Количество() > 0 Тогда
			СтрТоваров = СтрокиТоваровПоСтатусу[0];
			СтрТоваров.Состояние = СтрСтатуса.Состояние;
			СтрТоваров.КомментарийСтроки = СтрСтатуса.ПримечаниеКСостоянию;
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСтатусовСтрок(Ссылка)
	
	НаборСтатусы = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.СоздатьНаборЗаписей();
	НаборСтатусы.Отбор.Заказ.Установить(Ссылка);
	НаборСтатусы.Прочитать();
	Если  НаборСтатусы.Количество() = 0 Тогда
		Возврат неопределено;
	Иначе
		Возврат НаборСтатусы;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОбновитьТаблицуСтатусов()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда

		НаборСтатусы = МассивСтатусовСтрок(Объект.Ссылка);
		Если НЕ НаборСтатусы = Неопределено Тогда
			ЭтотОбъект.ТаблицаСтатусовСтрок.Загрузить(НаборСтатусы.Выгрузить());
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры
// -- rarus makole 2021-04-13 [РАIT-0023340]

// ++ rarus PleA 19.04.2021 [РАIT-0023282]
&НаКлиенте
Процедура ПодобратьТовары(Команда)
	
	ПараметрыФормыЗаголовок =  НСтр("ru = 'Подбор товаров'");
	ОтборПоТипуНоменклатуры = рарусНоменклатураКлиентСервер.ОтборПоТовару();
	Если ЭтоВидПотребностиУслуги(Объект.ВидПотребности) тогда
		ПараметрыФормыЗаголовок = НСтр("ru = 'Подбор услуг'");
		ОтборПоТипуНоменклатуры = рарусНоменклатураКлиентСервер.ОтборПоУслугам();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("Заголовок",                                 ПараметрыФормыЗаголовок);
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",                   Новый ФиксированныйМассив(ОтборПоТипуНоменклатуры));
	ПараметрыФормы.Вставить("Судно",                   					 Объект.Подразделение);
	
	// ++ rarus yukuzi 15.07.2021   //
	//ОткрытьФорму("Обработка.впПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);	
	ФормаПодбора=ОткрытьФорму("Обработка.впПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаПодбора.СписокНоменклатура,
		"Номенклатура.рспбКодMDG",
		"",
		ВидСравненияКомпоновкиДанных.НеРавно
		,"Только с MDG", 
		Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		//Истина);

	// -- rarus yukuzi 15.07.202
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.Имяформы = "Обработка.впПодборНоменклатуры.Форма.Форма" Тогда
		
		ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораПодборНаКлиенте(ВыбранноеЗначение)
	
	ОбработкаВыбораПодборНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПодборНаСервере(АдресТоваровВХранилище)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(АдресТоваровВХранилище);
	
	СтруктураДействий = Новый Структура;
	ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
	// ++ rarus makole 2021-05-11 [ИМУЩ]
	ИспользуетсяИмущественныйУчет = рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчетДляДокумента(Объект);
	// -- rarus makole 2021-05-11 [ИМУЩ]
	Для каждого СтрокаТовара Из ТаблицаТоваров Цикл
		
		// ++ rarus makole 2021-05-11 [ИМУЩ]
		Если ИспользуетсяИмущественныйУчет
			И НЕ ПроверитьСтрокаСоответствуетВидуПотребности(СтрокаТовара, Объект.ВидПотребности, Истина) Тогда
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Номенклатура %1 пропущена, т.к. не соответствует выбранному виду потребности", СтрокаТовара.Номенклатура));
			Продолжить;
		КонецЕсли;
		// -- rarus makole 2021-05-11 [ИМУЩ]
		
		ТекущаяСтрока = Объект.МатериалыИРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрокаТовара, "Номенклатура");
		
		ТекущаяСтрока.КоличествоУпаковок = СтрокаТовара.Количество;	
		
		КэшированныеЗначения = рарусОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
			
		рарусОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
		ЗаполнитьОписаниеНоменклатурыПоСтроке(ТекущаяСтрока);
		
		рарусРаботаСФайламиСтрокКлиентСервер.ЗаполнитьПредставлениеФайлаСтроки(ТекущаяСтрока, Объект.ПрисоединенныеФайлыСтрок);
		
	КонецЦикла;
	
	МатериальныеЗатратыПриИзмененииНаСервере();
	
КонецПроцедуры	

// -- rarus PleA
#Область Штрихкодирование
// ++ rarus yukuzi 25.02.2021   // ФТ.СНБ.02. Задача_Штрихкодирование
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 рарусШтрихкодированиеКлиент.ВыполнитьКомандуШтрихкодирование(ЭтаФорма, ПолучитьИмяРеквизита(Команда.ИспользуемаяТаблица.Имя), Команда);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьИмяРеквизита(ТаблицаФормыИмя)
Возврат рарусШтрихкодирование.ПолучитьИмяРеквизита(Элементы[ТаблицаФормыИмя].ПутьКДанным);
КонецФункции 
// -- rarus yukuzi 25.02.2021
#КонецОбласти

// ++ rarus makole 2021-04-26 [РАIT-0023284]
// Добавление дополнительных реквизитов в заявки, позволяющих группировать/отбирать их более детально. 
&НаСервере
Процедура ЗаполнитьСписокБереговыхСлужб()
	
	ЗапросПоБС = Новый Запрос("ВЫБРАТЬ
          |	рарусБереговыеСлужбы.Ссылка КАК Ссылка
          |ИЗ
          |	Справочник.рарусБереговыеСлужбы КАК рарусБереговыеСлужбы
          |ГДЕ
          |	рарусБереговыеСлужбы.ПометкаУдаления = ЛОЖЬ
          |
          |УПОРЯДОЧИТЬ ПО
          |	Ссылка
          |АВТОУПОРЯДОЧИВАНИЕ");
	
	СписокВыбора = ЗапросПоБС.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Элементы.БереговаяСлужба.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения) Экспорт // ++ rarus makole 2021-02-09
	МодульПодключаемыеКоманды = ОбщегоНазначения.ОбщийМодуль("ПодключаемыеКоманды");
	МодульПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсийКлиент.ПриОкончанииРедактированияСтроки(ЭтотОбъект, Элемент, НоваяСтрока, ОтменаРедактирования);	
	// -- rarus PleA
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсий.ОбработкаПроверкиЗаполнения(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	// -- rarus PleA
	
КонецПроцедуры

//ПАН+ ФТ.АН.01.27,28,29
&НаСервере
Процедура ПриЧтенииСозданииНаСервере();
			
	рарусУчетАналогов.УстановитьНаФормеЗначенияОбщихРеквизитовУчетаАналогов(ЭтаФорма);

	Если ИспользуетсяСхемаСогласованияАналогов Тогда
		Для Каждого Стр ИЗ Объект.МатериалыИРаботы Цикл
			ВозвращенНаСогласование = СтрокаВозвращенаДляСогласования(Стр.СтатусСогласования);
			Если ВозвращенНаСогласование Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.СогласованиеАналоговНеЗавершено = Ложь;	
	КонецЕсли;
	
	УстановитьВидимостьДоступностьЭлементовУчетаАналогов();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовУчетаАналогов()
	
	Если НЕ ВключенаСхемаАналогов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПоказатьРеквизитыУчетаАналогов","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонокАналоги","Видимость",Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Видимость",Ложь);
		Возврат;
	Иначе //Если нет строк для согласования, то и не показываем реквизиты по аналогам
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПоказатьРеквизитыУчетаАналогов", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонокАналоги","Видимость",НЕ ПроверитьНеПустыеСтатусыСтрокНаСервере()); //Устанавливаем обратную видимость, чтобы через команду установился заголовок 
		ПоказатьСкрытьРеквизитыУчетаАналогов();
	КонецЕсли;
	
	Если ИспользуетсяЦелеваяСхемаУчетаАналогов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"МатериальныеЗатратыПризнакАналог","Видимость",Ложь);
	КонецЕсли;
	
	ОбновитьНадписьПоАналогам();	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПоАналогам()
	
	Если ИспользуетсяСхемаСогласованияАналогов Тогда
		ТекстЗаголовка = "";
		СогласованиеПрошло = Ложь;
		МассивСтрокТребующихСогласования = Новый Массив;
		Для Каждого Стр ИЗ Объект.МатериалыИРаботы Цикл
						
			Если НЕ СогласованиеПрошло Тогда
				СогласованиеПрошло = СтрокаСогласованаПоАналогам(Стр.СтатусСогласования);
			КонецЕсли;
			
			СтрокаВозвращенНаСогласование = СтрокаВозвращенаДляСогласования(Стр.СтатусСогласования);
			Если СтрокаВозвращенНаСогласование Тогда
				МассивСтрокТребующихСогласования.Добавить(Стр.НомерСтроки);		
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСтрокТребующихСогласования.Количество() Тогда
			ТекстЗаголовка = "Требуется согласовать строки: " + СтрСоединить(МассивСтрокТребующихСогласования,","); 
		
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Заголовок",ТекстЗаголовка);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Видимость",Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗавершитьСогласование","Видимость",Истина);
			//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ФормаОтправитьНаБерег","Доступность",Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ФормаОтправитьНаБерег","Видимость",Ложь);

		ИначеЕсли Объект.СогласованиеАналоговНеЗавершено И СогласованиеПрошло Тогда
			ТекстЗаголовка = "Требуется завершить согласование";
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Заголовок",ТекстЗаголовка);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Видимость",Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗавершитьСогласование","Видимость",Истина);
			//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ФормаОтправитьНаБерег","Доступность",Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ФормаОтправитьНаБерег","Видимость",Ложь);
			
		Иначе
			ТекстЗаголовка = "";
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Заголовок",ТекстЗаголовка);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"НадписьСогласование","Видимость",Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗавершитьСогласование","Видимость",Ложь);
			//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ФормаОтправитьНаБерег","Доступность",Истина);
			//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ФормаОтправитьНаБерег","Видимость",Истина);
			
		КонецЕсли;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВозможностьДобавленияСтрокПоАналогам(Отказ)
	Если ПроверитьНеПустыеСтатусыСтрок() Тогда
		ПоказатьПредупреждение(,"Документ возвращен на согласование аналогов. Запрещено добавление/копирование строк.");
		Отказ = Истина;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьНеПустыеСтатусыСтрок()
	Флаг = Ложь;
	
	Для Каждого Стр ИЗ Объект.МатериалыИРаботы Цикл
		Если ЗначениеЗаполнено(Стр.СтатусСогласования) Тогда
			Флаг = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флаг;
КонецФункции

&НаСервере
Функция ПроверитьНеПустыеСтатусыСтрокНаСервере()
	Флаг = Ложь;
	
	Для Каждого Стр ИЗ Объект.МатериалыИРаботы Цикл
		Если ЗначениеЗаполнено(Стр.СтатусСогласования) Тогда
			Флаг = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флаг;
КонецФункции


&НаКлиенте
Процедура МатериальныеЗатратыПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ДоступностьЭлементовУчетаАналоговПоСтроке(ТекДанные);
КонецПроцедуры
	
&НаКлиенте
Процедура ДоступностьЭлементовУчетаАналоговПоСтроке(ТекДанные)
	Если Не ВключенаСхемаАналогов Тогда
		Возврат;	
	КонецЕсли;
	
	Если ИспользуетсяСхемаСогласованияАналогов Тогда
		
		СтрокаВозвращенаДляСогласования = (ТекДанные.СтатусСогласования = ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.ОтправитьНаСудно"));
		
		Если НЕ ЗначениеЗаполнено(ТекДанные.ИсходнаяНоменклатура) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонокАналоги","ТолькоПросмотр",Истина);	
		КонецЕсли;
					
		Если СтрокаВозвращенаДляСогласования Тогда
			
			Если ТолькоПросмотр Тогда
				ТолькоПросмотр = Ложь;
				//ЗаблокироватьФормуЧастично();
			КонецЕсли;
			
			УправлениеБлокировкойТекущейСтрокиОтИзменений("МатериальныеЗатраты","ГруппаКолонокАналоги",Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"МатериальныеЗатратыКомментарийСогласующего","ТолькоПросмотр",НЕ СтрокаВозвращенаДляСогласования);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"МатериальныеЗатратыСтатусСогласования","ТолькоПросмотр",НЕ СтрокаВозвращенаДляСогласования);
			
			//ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"МатериальныеЗатратыСтатусСогласования","АвтоОтметкаНезаполненного",СтрокаВозвращенаДляСогласования);
			СписокВыбораСтатусов = Элементы.МатериальныеЗатратыСтатусСогласования.СписокВыбора;
			Если СписокВыбораСтатусов <> Неопределено Тогда
				СписокВыбораСтатусов.Очистить();
				СписокВыбораСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.Согласовать"));
				СписокВыбораСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.Отклонить"));
			КонецЕсли;
		Иначе
			Если НЕ Объект.СогласованиеАналоговНеЗавершено Тогда //Согласование капитаном аналогов завершено и отправлено на берег				
				Если ВозвращенНаСогласование Тогда
					УправлениеБлокировкойТекущейСтрокиОтИзменений("МатериальныеЗатраты",,Истина);
				КонецЕсли;
			Иначе
				Если ЕстьПравоРедактированияПоСтатусу(Объект.СтатусСогласования) И ЗначениеЗаполнено(ТекДанные.СтатусСогласования) Тогда
					УправлениеБлокировкойТекущейСтрокиОтИзменений("МатериальныеЗатраты",,ЛОжь);
				Иначе
					УправлениеБлокировкойТекущейСтрокиОтИзменений("МатериальныеЗатраты",,Истина);
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПравоРедактированияПоСтатусу(ТекущийСтатус)
			
	ЕстьПравоОтправкиНаБерег = рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег();
	
	ЕстьПравоРедактирования = Ложь;
	
	Если ТекущийСтатус = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияСозданаНаБерегу() тогда
		
		ЕстьПравоРедактирования = Ложь;
		
	ИначеЕсли ТекущийСтатус = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНачальный() тогда
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработку() Тогда 
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаСогласованииКапитаном()
		И ЕстьПравоОтправкиНаБерег Тогда 
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработкуКапитаном() 
		И ЕстьПравоОтправкиНаБерег Тогда 	
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияСогласована() 		
		И ЕстьПравоОтправкиНаБерег Тогда 	
		
		ЕстьПравоРедактирования = Истина;	
		
	КонецЕсли;
	
	Возврат ЕстьПравоРедактирования;
	
КонецФункции
	
&НаКлиенте 
Процедура УправлениеБлокировкойТекущейСтрокиОтИзменений(ИмяТЧ = "",СтрокаИсключений = "",ФлагБлокировки = Ложь)
	Если ПустаяСтрока(ИмяТЧ) Тогда
		Возврат;	
	КонецЕсли;
	КоллекцияЭлементовТЧ = Элементы[ИмяТЧ].ПодчиненныеЭлементы;
	
	Для Каждого Эл Из КоллекцияЭлементовТЧ Цикл
		Если СтрНайти(СтрокаИсключений,Эл.Имя) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,Эл.Имя,"ТолькоПросмотр",НЕ ФлагБлокировки);
		Иначе	
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,Эл.Имя,"ТолькоПросмотр",ФлагБлокировки);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаВозвращенаДляСогласования(СтатусСогласования)
	Если Не ПолучитьФункциональнуюОпцию("рарусИспользуетсяСхемаСогласованияПоАналогам") Тогда
		Возврат Ложь;
	Иначе
		Возврат	(СтатусСогласования = ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.ОтправитьНаСудно"));
	КонецЕсли;		
КонецФункции

&НаСервереБезКонтекста
Функция СтрокаСогласованаПоАналогам(СтатусСогласования)
	Если Не ПолучитьФункциональнуюОпцию("рарусИспользуетсяСхемаСогласованияПоАналогам") Тогда
		Возврат Ложь;
	Иначе
		Возврат	(СтатусСогласования = ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.Отклонить")
		           ИЛИ СтатусСогласования = ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.Согласовать"));
	КонецЕсли;		
КонецФункции

&НаКлиенте
Процедура ЗавершитьСогласование(Команда)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ЗавершитьСогласование","Пометка",Истина);
	
	ОтправитьНаБерег(Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРеквизитыУчетаАналогов(Команда)
	ПоказатьСкрытьРеквизитыУчетаАналогов();	
КонецПроцедуры

&НаСервере
Процедура ПоказатьСкрытьРеквизитыУчетаАналогов()
	
	Если Не ВключенаСхемаАналогов Тогда
		Возврат;	
	КонецЕсли;

	ВидимостьГруппы = ОбщегоНазначенияКлиентСервер.ЗначениеСвойстваЭлементаФормы(Элементы,"ГруппаКолонокАналоги","Видимость");
	
	Если ВидимостьГруппы Тогда
		ЗаголовокКоманды = "Показать реквизиты учета аналогов";	
		ВидимостьГруппы = Ложь;		
	Иначе
		ЗаголовокКоманды = "Скрыть реквизиты учета аналогов";
		ВидимостьГруппы = Истина;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ГруппаКолонокАналоги","Видимость",ВидимостьГруппы);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы,"ПоказатьРеквизитыУчетаАналогов", "Заголовок", ЗаголовокКоманды);
	
КонецПроцедуры

//ПАН-