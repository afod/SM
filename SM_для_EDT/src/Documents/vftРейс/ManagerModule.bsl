#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ПечатьЖурнала(МассивОбъектов, ОбъектыПечати) Экспорт
		
	ТекстЗапроса = "ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК НомерРейса,
	|	Документы.Дата КАК Дата,
	|	Документы.Судно КАК Судно
	|ИЗ
	|	Документ.vftРейс КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();
	
	
	//ТД - Таблица движений
	ТекстЗапросаТД = "ВЫБРАТЬ
	|	vftРейс.Дата КАК Период,
	|	vftРейс.Судно КАК Судно,
	|	vftРейс.Ссылка КАК Рейс,
	|	vftРейсПункты.Пункт КАК Пункт,
	|	vftРейсПункты.ПричинаСтоянки КАК ВидОперации,
	|	vftРейсПункты.Координаты КАК Координаты,
	|	vftРейсПункты.Приход КАК Начало,
	|	vftРейсПункты.Отход КАК Окончание,
	|	vftРейсПункты.Примечание КАК Примечание,
	|	vftРейсПункты.РасстояниеПлан КАК ПройденноеРасстояниеНорма,
	|	vftРейсПункты.РасстояниеФакт КАК ПройденноеРасстояниеФакт,
	|	vftРейсПункты.ХодовоеВремя КАК ХодовоеВремяФакт,
	|	vftРейсПункты.ХодовоеВремяПлан КАК ХодовоеВремяНорма,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &Маневрирование
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Маневрирование,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &НахождениеВПорту
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НахождениеВПорту,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &ОжиданиеШлюзования
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОжиданиеШлюзования,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &Шлюзование
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Шлюзование,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &КОФ
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КОФ,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &МетеорологическиеПричины
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК МетеорологическиеПричины,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &РемонтныеРаботы
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РемонтныеРаботы,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &ОжиданиеРазводкиМостов
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОжиданиеРазводкиМостов,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &РаботаКомиссииКПП
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РаботаКомиссииКПП,
	|	ВЫБОР
	|		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	|				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &Прочие
	|			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Прочие
	|ИЗ
	|	Документ.vftРейс.Пункты КАК vftРейсПункты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.vftРейс КАК vftРейс
	|		ПО vftРейсПункты.Ссылка = vftРейс.Ссылка
	|ГДЕ
	|	vftРейс.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Рейс,
	|	Период";

	
	ЗапросТД = Новый Запрос(ТекстЗапросаТД);
	ЗапросТД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросТД.УстановитьПараметр("Маневрирование", Перечисления.vftГруппыСтоянокПутевогоЖурнала.МаневровыйРежим);
	ЗапросТД.УстановитьПараметр("НахождениеВПорту", Перечисления.vftГруппыСтоянокПутевогоЖурнала.НахождениеВПорту);
	ЗапросТД.УстановитьПараметр("ОжиданиеШлюзования", Перечисления.vftГруппыСтоянокПутевогоЖурнала.ОжиданиеШлюзования);
	ЗапросТД.УстановитьПараметр("Шлюзование", Перечисления.vftГруппыСтоянокПутевогоЖурнала.Шлюзование);
	ЗапросТД.УстановитьПараметр("КОФ", Перечисления.vftГруппыСтоянокПутевогоЖурнала.КОФ);
	ЗапросТД.УстановитьПараметр("МетеорологическиеПричины", Перечисления.vftГруппыСтоянокПутевогоЖурнала.МетеорологическиеПричины);
	ЗапросТД.УстановитьПараметр("РемонтныеРаботы", Перечисления.vftГруппыСтоянокПутевогоЖурнала.РемонтныеРаботы);
	ЗапросТД.УстановитьПараметр("ОжиданиеРазводкиМостов", Перечисления.vftГруппыСтоянокПутевогоЖурнала.ОжиданиеРазводкиМостов);
	ЗапросТД.УстановитьПараметр("РаботаКомиссииКПП", Перечисления.vftГруппыСтоянокПутевогоЖурнала.РаботаКомиссииКПП);
	ЗапросТД.УстановитьПараметр("Прочие", Перечисления.vftГруппыСтоянокПутевогоЖурнала.Прочие);
	
	ТД = ЗапросТД.Выполнить().Выгрузить();
	
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "Рейс_ПутевойЖурналННФ";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.vftРейс.ПФ_MXL_ПутевойЖурналННФ");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура("Рейс", Шапка.Ссылка); 
		ТаблицаПунктов = ТД.Скопировать(СтруктураОтбора);
		
		ТаблицаПримечаний = Новый ТаблицаЗначений;
		ТаблицаПримечаний.Колонки.Добавить("НомерПримечания");
		ТаблицаПримечаний.Колонки.Добавить("ТекстПримечания");
		
		ТаблицаПримечанийГр = Новый ТаблицаЗначений;
		ТаблицаПримечанийГр.Колонки.Добавить("НомерПримечания");
		ТаблицаПримечанийГр.Колонки.Добавить("ТекстПримечания");
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ПараметрыЧисла = Новый КвалификаторыЧисла(2,0);

		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , ,ПараметрыЧисла);

		ТаблицаПунктов.Колонки.Добавить("Порядок",ДопустимыеТипы);
		ТаблицаПунктов.Колонки.Добавить("Груз", ДопустимыеТипы);
		
		ТекПункт = Справочники.vftПунктыСледования.ПустаяСсылка();
		ТекКоординаты = "";
		Порядок = 0;
		Груз = 0;
		МассивПортовПорожний = Новый Массив;
		МассивПортовГРуженый = Новый Массив;
		Для каждого Строка Из ТаблицаПунктов Цикл
			Если ТекПункт<>Строка.Пункт ИЛИ ТекКоординаты<> Строка.Координаты Тогда
				Порядок = Порядок+1;
				Строка.Порядок = Порядок;
				ТекПункт = Строка.Пункт;
				ТекКоординаты = Строка.Координаты;
			Иначе
				Строка.Порядок = Порядок;
			КонецЕсли;
			
			Если Строка.ВидОперации.ЧистыеГрузовыеОперации И Груз=0 Тогда
				Груз=1;
				МассивПортовПорожний.Добавить(Строка.Пункт);
			КонецЕсли;
			Строка.Груз = Груз;
			Если Не Строка.Груз Тогда
				Если Строка = ТаблицаПунктов[0] Тогда
					МассивПортовПорожний.Добавить(Строка.Пункт);
				ИначеЕсли Строка.ВидОперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.НахождениеВПорту Тогда
					МассивПортовПорожний.Добавить(Строка.Пункт);
				КонецЕсли; 
			ИначеЕсли Строка.Груз Тогда 
				Если Строка.ВидОперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.НахождениеВПорту Тогда
					МассивПортовГРуженый.Добавить(Строка.Пункт);
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		
		
		
		ЗапросТЗ = Новый Запрос;
		ЗапросТЗ.УстановитьПараметр("Таблица", ТаблицаПунктов);
		ЗапросТЗ.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросТЗ.Текст = "ВЫБРАТЬ
		                 |	Таблица.Период КАК Период,
		                 |	Таблица.Судно,
		                 |	Таблица.Рейс КАК Рейс,
		                 |	Таблица.Пункт,
		                 |	Таблица.ВидОперации,
		                 |	Таблица.Координаты,
		                 |	Таблица.Начало КАК Начало,
		                 |	Таблица.Окончание КАК Окончание,
		                 |	Таблица.Примечание,
		                 |	Таблица.ПройденноеРасстояниеНорма КАК ПройденноеРасстояниеНорма,
		                 |	Таблица.ПройденноеРасстояниеФакт КАК ПройденноеРасстояниеФакт,
		                 |	Таблица.ХодовоеВремяНорма КАК ХодовоеВремяНорма,
		                 |	Таблица.ХодовоеВремяФакт КАК ХодовоеВремяФакт,
		                 |	Таблица.Маневрирование КАК Маневрирование,
		                 |	Таблица.НахождениеВПорту КАК НахождениеВПорту,
		                 |	Таблица.ОжиданиеШлюзования КАК ОжиданиеШлюзования,
		                 |	Таблица.Шлюзование КАК Шлюзование,
		                 |	Таблица.КОФ КАК КОФ,
		                 |	Таблица.МетеорологическиеПричины КАК МетеорологическиеПричины,
		                 |	Таблица.РемонтныеРаботы КАК РемонтныеРаботы,
		                 |	Таблица.ОжиданиеРазводкиМостов КАК ОжиданиеРазводкиМостов,
		                 |	Таблица.РаботаКомиссииКПП КАК РаботаКомиссииКПП,
		                 |	Таблица.Прочие КАК Прочие,
		                 |	Таблица.Груз,
		                 |	Таблица.Порядок
		                 |ПОМЕСТИТЬ ТаблицаВр
		                 |ИЗ
		                 |	&Таблица КАК Таблица
		                 |;
		                 |
		                 |////////////////////////////////////////////////////////////////////////////////
		                 |ВЫБРАТЬ
		                 |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаВр.Период) КАК Период,
		                 |	ТаблицаВр.Судно,
		                 |	ТаблицаВр.Рейс,
		                 |	МИНИМУМ(ТаблицаВр.Пункт) КАК Пункт,
		                 |	ТаблицаВр.Координаты,
		                 |	МИНИМУМ(ТаблицаВр.Начало) КАК Начало,
		                 |	МАКСИМУМ(ТаблицаВр.Окончание) КАК Окончание,
		                 |	СУММА(ТаблицаВр.ПройденноеРасстояниеНорма) КАК ПройденноеРасстояниеНорма,
		                 |	СУММА(ТаблицаВр.ПройденноеРасстояниеФакт) КАК ПройденноеРасстояниеФакт,
		                 |	СУММА(ТаблицаВр.ХодовоеВремяНорма) КАК ХодовоеВремяНорма,
		                 |	СУММА(ТаблицаВр.ХодовоеВремяФакт) КАК ХодовоеВремяФакт,
		                 |	СУММА(ТаблицаВр.Маневрирование) КАК Маневрирование,
		                 |	СУММА(ТаблицаВр.НахождениеВПорту) КАК НахождениеВПорту,
		                 |	СУММА(ТаблицаВр.ОжиданиеШлюзования) КАК ОжиданиеШлюзования,
		                 |	СУММА(ТаблицаВр.Шлюзование) КАК Шлюзование,
		                 |	СУММА(ТаблицаВр.КОФ) КАК КОФ,
		                 |	СУММА(ТаблицаВр.МетеорологическиеПричины) КАК МетеорологическиеПричины,
		                 |	СУММА(ТаблицаВр.РемонтныеРаботы) КАК РемонтныеРаботы,
		                 |	СУММА(ТаблицаВр.ОжиданиеРазводкиМостов) КАК ОжиданиеРазводкиМостов,
		                 |	СУММА(ТаблицаВр.РаботаКомиссииКПП) КАК РаботаКомиссииКПП,
		                 |	СУММА(ТаблицаВр.Прочие) КАК Прочие,
		                 |	ТаблицаВр.Порядок КАК Порядок,
		                 |	ТаблицаВр.Груз
		                 |ИЗ
		                 |	ТаблицаВр КАК ТаблицаВр
		                 |
		                 |СГРУППИРОВАТЬ ПО
		                 |	ТаблицаВр.Судно,
		                 |	ТаблицаВр.Рейс,
		                 |	ТаблицаВр.Координаты,
		                 |	ТаблицаВр.Порядок,
		                 |	ТаблицаВр.Груз
		                 |
		                 |УПОРЯДОЧИТЬ ПО
		                 |	Порядок,
		                 |	Начало";
						 
		ТаблицаВФорму = ЗапросТЗ.Выполнить().Выгрузить();

		ТаблицаВФорму.Колонки.Добавить("МаневрированиеВывод");
		ТаблицаВФорму.Колонки.Добавить("ХодовоеВремяФактВывод");
		ТаблицаВФорму.Колонки.Добавить("ХодовоеВремяНормаВывод");
		ТаблицаВФорму.Колонки.Добавить("НахождениеВПортуВывод");
		ТаблицаВФорму.Колонки.Добавить("ОжиданиеШлюзованияВывод");
		ТаблицаВФорму.Колонки.Добавить("ШлюзованиеВывод");
		ТаблицаВФорму.Колонки.Добавить("КОФВывод");
		ТаблицаВФорму.Колонки.Добавить("МетеорологическиеПричиныВывод");
		ТаблицаВФорму.Колонки.Добавить("РемонтныеРаботыВывод");
		ТаблицаВФорму.Колонки.Добавить("ОжиданиеРазводкиМостовВывод");
		ТаблицаВФорму.Колонки.Добавить("РаботаКомиссииКППВывод");
		ТаблицаВФорму.Колонки.Добавить("ПрочиеВывод");
		ТаблицаВФорму.Колонки.Добавить("ВсегоВремя");
		ТаблицаВФорму.Колонки.Добавить("ОтклонениеВывод");
		ТаблицаВФорму.Колонки.Добавить("НомерПримечания");
		ТаблицаВФорму.Колонки.Добавить("Примечание");
		
		vftОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПортовПорожний);
		vftОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивПортовПорожний);
		
		vftОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПортовГРуженый);
		vftОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивПортовГРуженый);
		
		СтрокаПорожнийПорт = "";
		СтрокаГруженыйПорт = "";
		Для каждого ЭлементПорт Из МассивПортовПорожний Цикл
			СтрокаПорожнийПорт = СтрокаПорожнийПорт+ЭлементПорт.Наименование+"-";	
		КонецЦикла;
		Для каждого ЭлементПорт Из МассивПортовГРуженый Цикл
			СтрокаГруженыйПорт = СтрокаГруженыйПорт+ЭлементПорт.Наименование+"-";	
		КонецЦикла;

		ИтогоПройденноеРасстояниеНорма = 0;
		ИтогоПройденноеРасстояниеФакт = 0;
		ИтогоХодовоеВремяНорма = 0;
		ИтогоХодовоеВремяФакт = 0;
		ИтогоМаневрирование = 0;
		ИтогоВПорту = 0;
		ИтогоОжиданиеШлюзования = 0;
		ИтогоШлюзование = 0;
		ИтогоКОФ = 0;
		ИтогоМетеорологическиеПричины = 0;
		ИтогоРемонтныеРаботы = 0;
		ИтогоОжиданиеРазводкиМостов = 0;
		ИтогоРаботаКомиссииКПП = 0;
		ИтогоПрочие = 0;
		ИтогоОтклонение = 0;
		ИтогоВсегоВремя = 0;
		
		ИтогоПройденноеРасстояниеНормаГр = 0;
		ИтогоПройденноеРасстояниеФактГр = 0;
		ИтогоХодовоеВремяНормаГр = 0;
		ИтогоХодовоеВремяФактГр = 0;
		ИтогоМаневрированиеГр = 0;
		ИтогоВПортуГр = 0;
		ИтогоОжиданиеШлюзованияГр = 0;
		ИтогоШлюзованиеГр = 0;
		ИтогоКОФГр = 0;
		ИтогоМетеорологическиеПричиныГр = 0;
		ИтогоРемонтныеРаботыГр = 0;
		ИтогоОжиданиеРазводкиМостовГр = 0;
		ИтогоРаботаКомиссииКППГр = 0;
		ИтогоПрочиеГр = 0;
		ИтогоОтклонениеГр = 0;
		ИтогоВсегоВремяГр = 0;
		
		Для каждого Строка Из ТаблицаВФорму Цикл
			Строка.МаневрированиеВывод = ?(Строка.Маневрирование=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.Маневрирование));
			Строка.НахождениеВПортуВывод = ?(Строка.НахождениеВПорту=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.НахождениеВПорту));
			//Строка.ХодовоеВремяФактВывод = ?(Строка.ХодовоеВремяФакт=0, "", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Строка.ХодовоеВремяФакт));
			//Строка.ХодовоеВремяНормаВывод = ?(Строка.ХодовоеВремяНорма=0, "", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Строка.ХодовоеВремяНорма));
			Строка.ХодовоеВремяФактВывод = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.ХодовоеВремяФакт);
			Строка.ХодовоеВремяНормаВывод = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.ХодовоеВремяНорма);

			Строка.ОжиданиеШлюзованияВывод = ?(Строка.ОжиданиеШлюзования=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.ОжиданиеШлюзования));
			Строка.ШлюзованиеВывод = ?(Строка.Шлюзование=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.Шлюзование));
			Строка.КОФВывод = ?(Строка.КОФ=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.КОФ));
			Строка.МетеорологическиеПричиныВывод = ?(Строка.МетеорологическиеПричины=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.МетеорологическиеПричины));
			Строка.РемонтныеРаботыВывод = ?(Строка.РемонтныеРаботы=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.РемонтныеРаботы));
			Строка.ОжиданиеРазводкиМостовВывод = ?(Строка.ОжиданиеРазводкиМостов=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.ОжиданиеРазводкиМостов));
			Строка.РаботаКомиссииКППВывод = ?(Строка.РаботаКомиссииКПП=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.РаботаКомиссииКПП));
			Строка.ПрочиеВывод = ?(Строка.Прочие=0, "", рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Строка.Прочие));
			ОбщееВремя = Строка.ХодовоеВремяФакт+Строка.Маневрирование+Строка.ОжиданиеШлюзования
			+Строка.Шлюзование+Строка.КОФ+Строка.МетеорологическиеПричины+Строка.РемонтныеРаботы
			+Строка.ОжиданиеРазводкиМостов+Строка.РаботаКомиссииКПП+Строка.Прочие+Строка.НахождениеВПорту;
			Строка.ВсегоВремя = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ОбщееВремя);
			
			Отклонение = Строка.ХодовоеВремяФакт - Строка.ХодовоеВремяНорма;
			Строка.ОтклонениеВывод = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(Отклонение);
			
			Если Строка.Груз Тогда
				ИтогоПройденноеРасстояниеНормаГр = ИтогоПройденноеРасстояниеНормаГр+Строка.ПройденноеРасстояниеНорма;
				ИтогоПройденноеРасстояниеФактГр = ИтогоПройденноеРасстояниеФактГр+Строка.ПройденноеРасстояниеФакт;
				ИтогоХодовоеВремяНормаГр = ИтогоХодовоеВремяНормаГр+Строка.ХодовоеВремяНорма;
				ИтогоХодовоеВремяФактГр = ИтогоХодовоеВремяФактГр+Строка.ХодовоеВремяФакт;
				ИтогоМаневрированиеГр = ИтогоМаневрированиеГр+Строка.Маневрирование;
				ИтогоВПортуГр = ИтогоВПортуГр+Строка.НахождениеВПорту;
				ИтогоОжиданиеШлюзованияГр = ИтогоОжиданиеШлюзованияГр+Строка.ОжиданиеШлюзования;
				ИтогоШлюзованиеГр = ИтогоШлюзованиеГр+ Строка.Шлюзование;
				ИтогоКОФГр = ИтогоКОФГр+Строка.КОФ;
				ИтогоМетеорологическиеПричиныГр = ИтогоМетеорологическиеПричиныГр+Строка.МетеорологическиеПричины;
				ИтогоРемонтныеРаботыГр = ИтогоРемонтныеРаботыГр+Строка.РемонтныеРаботы;
				ИтогоОжиданиеРазводкиМостовГр = ИтогоОжиданиеРазводкиМостовГр+Строка.ОжиданиеРазводкиМостов;
				ИтогоРаботаКомиссииКППГр = ИтогоРаботаКомиссииКППГр+Строка.РаботаКомиссииКПП;
				ИтогоПрочиеГр = ИтогоПрочиеГр+Строка.Прочие;
				ИтогоВсегоВремяГр = ИтогоВсегоВремяГр+ОбщееВремя;
				ИтогоОтклонениеГр = ИтогоОтклонениеГр+Отклонение;
			Иначе
				ИтогоПройденноеРасстояниеНорма = ИтогоПройденноеРасстояниеНорма+Строка.ПройденноеРасстояниеНорма;
				ИтогоПройденноеРасстояниеФакт = ИтогоПройденноеРасстояниеФакт+Строка.ПройденноеРасстояниеФакт;
				ИтогоХодовоеВремяНорма = ИтогоХодовоеВремяНорма+Строка.ХодовоеВремяНорма;
				ИтогоХодовоеВремяФакт = ИтогоХодовоеВремяФакт+Строка.ХодовоеВремяФакт;
				ИтогоМаневрирование = ИтогоМаневрирование+Строка.Маневрирование;
				ИтогоВПорту = ИтогоВПорту+Строка.НахождениеВПорту;
				ИтогоОжиданиеШлюзования = ИтогоОжиданиеШлюзования+Строка.ОжиданиеШлюзования;
				ИтогоШлюзование =ИтогоШлюзование+ Строка.Шлюзование;
				ИтогоКОФ = ИтогоКОФ+Строка.КОФ;
				ИтогоМетеорологическиеПричины = ИтогоМетеорологическиеПричины+Строка.МетеорологическиеПричины;
				ИтогоРемонтныеРаботы = ИтогоРемонтныеРаботы+Строка.РемонтныеРаботы;
				ИтогоОжиданиеРазводкиМостов = ИтогоОжиданиеРазводкиМостов+Строка.ОжиданиеРазводкиМостов;
				ИтогоРаботаКомиссииКПП = ИтогоРаботаКомиссииКПП+Строка.РаботаКомиссииКПП;
				ИтогоПрочие =ИтогоПрочие+Строка.Прочие;
				
				ИтогоВсегоВремя = ИтогоВсегоВремя+ОбщееВремя;
				ИтогоОтклонение = ИтогоОтклонение+Отклонение;
			КонецЕсли; 
			
			
			//Обработаем примечания
			СтруктураОтбор = Новый Структура;
			СтруктураОтбор.Вставить("Порядок", Строка.Порядок);
			ВрТаблицаПримечаний = ТаблицаПунктов.Скопировать(СтруктураОтбор,"Примечание");
			Примечания = ВрТаблицаПримечаний.ВыгрузитьКолонку("примечание");
			vftОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(Примечания);
			Если Примечания.Количество() Тогда
				Если НЕ Строка.Груз Тогда
					НовоеПримечание = ТаблицаПримечаний.Добавить();
					НовоеПримечание.НомерПримечания = ТаблицаПримечаний.Индекс(НовоеПримечание)+1;
				Иначе
					НовоеПримечание = ТаблицаПримечанийГр.Добавить();
					НовоеПримечание.НомерПримечания = ТаблицаПримечанийГр.Индекс(НовоеПримечание)+1;
				КонецЕсли; 
				
				Строка.НомерПримечания = НовоеПримечание.НомерПримечания;
				Строка.Примечание = "см.прим."+Строка.НомерПримечания;
				НовоеПримечание.ТекстПримечания = "";
				Для каждого Примеч Из Примечания Цикл
					НовоеПримечание.ТекстПримечания = НовоеПримечание.ТекстПримечания+Примеч+"/";
				КонецЦикла; 
			КонецЕсли; 
		КонецЦикла; 
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ДанныеПечати = Новый Структура;
		
		ДанныеИтого = Новый Структура;
		
		ДанныеИтого.Вставить("ИтогоПройденноеРасстояниеНорма", ИтогоПройденноеРасстояниеНорма);
		ДанныеИтого.Вставить("ИтогоПройденноеРасстояниеФакт",ИтогоПройденноеРасстояниеФакт);
		ДанныеИтого.Вставить("ИтогоХодовоеВремяНорма",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоХодовоеВремяНорма));
		ДанныеИтого.Вставить("ИтогоХодовоеВремяФакт",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоХодовоеВремяФакт));
		ДанныеИтого.Вставить("ИтогоМаневрирование",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоМаневрирование));
		ДанныеИтого.Вставить("ИтогоВПорту",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоВПорту));
		ДанныеИтого.Вставить("ИтогоХодовоеВремяФакт",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоХодовоеВремяФакт));
		ДанныеИтого.Вставить("ИтогоОжиданиеШлюзования",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоОжиданиеШлюзования));
		ДанныеИтого.Вставить("ИтогоШлюзование",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоШлюзование));
		ДанныеИтого.Вставить("ИтогоКОФ",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоКОФ));
		ДанныеИтого.Вставить("ИтогоМетеорологическиеПричины",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоМетеорологическиеПричины));
		ДанныеИтого.Вставить("ИтогоРемонтныеРаботы",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоРемонтныеРаботы));
		ДанныеИтого.Вставить("ИтогоОжиданиеРазводкиМостов",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоОжиданиеРазводкиМостов));
		ДанныеИтого.Вставить("ИтогоРаботаКомиссииКПП",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоРаботаКомиссииКПП));
		ДанныеИтого.Вставить("ИтогоПрочие",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоПрочие));
		ДанныеИтого.Вставить("ИтогоВсегоВремя",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоВсегоВремя));
		ДанныеИтого.Вставить("ИтогоОтклонение",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоОтклонение));


		
		//НомерНаПечать = Шапка.НомерРейса;
		//СтандартнаяОбработка = Истина;
		//СтандартныеПодсистемыКлиентСерверПереопределяемый.ПолучитьНомерНаПечать(НомерНаПечать, СтандартнаяОбработка);
		
		ДанныеПечати.Вставить("Судно", Шапка.Судно);
		// ++ rarus Чернавин Г.К 18.06.2020 № 22279
		НомерРейса = Документы.vftРейс.НомерБезПрефикса(Шапка.НомерРейса);
		ДанныеПечати.Вставить("НомерРейса", НомерРейса);
		// -- rarus Чернавин Г.К 18.06.2020
		ДанныеПечати.Вставить("ПереходЗаголовок","порожний");
		ДанныеИтого.Вставить("Переход","порожний");
		ДанныеПечати.Вставить("Порты", СтрокаПорожнийПорт);
		
		
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакетаГр = Новый Массив;
		
		//Заполним порожний Рейс
		МассивОбластейМакета.Добавить("Заголовок");
		МассивОбластейМакета.Добавить("Строка");
		МассивОбластейМакета.Добавить("Итого");
		МассивОбластейМакета.Добавить("ПояснениеЗаголовок");
		МассивОбластейМакета.Добавить("ПояснениеСтрока");
		
		
		
		
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" И ИмяОбласти<>"Итого" И ИмяОбласти<>"ПояснениеСтрока" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти="Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаВФорму Цикл
					Если НЕ СтрокаТаблицы.Груз Тогда
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);	
					КонецЕсли; 
					
				КонецЦикла;
			ИначеЕсли ИмяОбласти = "Итого" Тогда
				ОбластьМакета.Параметры.Заполнить(ДанныеИтого);
						ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти="ПояснениеСтрока" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаПримечаний Цикл
						ОбластьМакета.Параметры.ПояснениеСтрока = Строка(СтрокаТаблицы.Номерпримечания)+"/"+СтрокаТаблицы.ТекстПримечания;
						ТабличныйДокумент.Вывести(ОбластьМакета);	
					 
					
				КонецЦикла;		
			КонецЕсли;
		КонецЦикла;
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		//Заполним груженый рейс
		ДанныеПечати.Вставить("ПереходЗаголовок","груженый");
		ДанныеИтого.Вставить("Переход","груженый");
		ДанныеПечати.Вставить("Порты", СтрокаГруженыйПорт);
		
		ДанныеИтого.Вставить("ИтогоПройденноеРасстояниеНорма",ИтогоПройденноеРасстояниеНормаГр);
		ДанныеИтого.Вставить("ИтогоПройденноеРасстояниеФакт",ИтогоПройденноеРасстояниеФактГр);
		ДанныеИтого.Вставить("ИтогоХодовоеВремяНорма",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоХодовоеВремяНормаГр));
		ДанныеИтого.Вставить("ИтогоХодовоеВремяФакт",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоХодовоеВремяФактГр));
		ДанныеИтого.Вставить("ИтогоМаневрирование",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоМаневрированиеГр));
		ДанныеИтого.Вставить("ИтогоВПорту",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоВПортуГр));
		ДанныеИтого.Вставить("ИтогоОжиданиеШлюзования",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоОжиданиеШлюзованияГр));
		ДанныеИтого.Вставить("ИтогоШлюзование",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоШлюзованиеГр));
		ДанныеИтого.Вставить("ИтогоКОФ",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоКОФГр));
		ДанныеИтого.Вставить("ИтогоМетеорологическиеПричины",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоМетеорологическиеПричиныГр));
		ДанныеИтого.Вставить("ИтогоРемонтныеРаботы",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоРемонтныеРаботыГр));
		ДанныеИтого.Вставить("ИтогоОжиданиеРазводкиМостов",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоОжиданиеРазводкиМостовГр));
		ДанныеИтого.Вставить("ИтогоРаботаКомиссииКПП",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоРаботаКомиссииКППГр));
		ДанныеИтого.Вставить("ИтогоПрочие",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоПрочиеГр));
		ДанныеИтого.Вставить("ИтогоВсегоВремя",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоВсегоВремяГр));
		ДанныеИтого.Вставить("ИтогоОтклонение",рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(ИтогоОтклонениеГр));
		
		
		МассивОбластейМакетаГр.Добавить("Заголовок");
		МассивОбластейМакетаГр.Добавить("Строка");
		МассивОбластейМакетаГр.Добавить("Итого");
		МассивОбластейМакетаГр.Добавить("ПояснениеЗаголовок");
		МассивОбластейМакетаГр.Добавить("ПояснениеСтрока");
		Для Каждого ИмяОбласти Из МассивОбластейМакетаГр Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" И ИмяОбласти<>"Итого" И ИмяОбласти<>"ПояснениеСтрока" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти = "Строка" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаВФорму Цикл
					Если СтрокаТаблицы.Груз Тогда
						ОбластьМакета.Параметры.Заполнить(СтрокаТаблицы);
						ТабличныйДокумент.Вывести(ОбластьМакета);	
					КонецЕсли; 
					
				КонецЦикла;
			ИначеЕсли ИмяОбласти = "Итого" Тогда
				ОбластьМакета.Параметры.Заполнить(ДанныеИтого);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			ИначеЕсли ИмяОбласти="ПояснениеСтрока" Тогда 
				Для Каждого СтрокаТаблицы Из ТаблицаПримечанийГр Цикл
						ОбластьМакета.Параметры.ПояснениеСтрока = Строка(СтрокаТаблицы.Номерпримечания)+"/"+СтрокаТаблицы.ТекстПримечания;
						ТабличныйДокумент.Вывести(ОбластьМакета);	
					 
					
				КонецЦикла;		
				
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
		
КонецФункции


// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, 
//												представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПутевойЖурналННФ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ПутевойЖурналННФ", НСтр("ru = 'Путевой журнал ННФ'"),
		ПечатьЖурнала(МассивОбъектов, ОбъектыПечати), ,
		"Документ.vftРейс.ПФ_MXL_ПутевойЖурналННФ");
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РейсовыйОтчет") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"РейсовыйОтчет", НСтр("ru = 'Рейсовый отчет'"),
		ПечатьОтчета(МассивОбъектов, ОбъектыПечати), ,
		"Документ.vftРейс.ПФ_MXL_РейсовыйОтчет");
	КонецЕсли;
	
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетЗаказ2") Тогда
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
	//					КоллекцияПечатныхФорм,
	//					"СчетЗаказ2", НСтр("ru = 'Заказ'"),
	//					ПечатьСчетаЗаказ(МассивОбъектов, ОбъектыПечати), ,
	//					"Документ._ДемоСчетНаОплатуПокупателю.ПФ_MXL_СчетЗаказ");
	//КонецЕсли;

КонецПроцедуры


Функция ПечатьОтчета(МассивОбъектов, ОбъектыПечати) Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Документы.Ссылка КАК Ссылка,
	|	Документы.Номер КАК НомерРейса,
	|	Документы.Дата КАК Дата,
	|	Документы.Судно КАК Судно,
	|	Документы.ПортПогрузки КАК ПортПогрузки,
	|	Документы.ПортВыгрузки КАК ПортВыгрузки,
	|	Документы.Груз КАК Груз,
	|	Документы.ПортОтправления КАК ПортОтправления,
	|	Документы.Осадка КАК Осадка,
	|	Документы.Загрузка КАК Загрузка,
	|	Документы.ВремяМаневровВМоре КАК ВремяМаневровВМоре,
	|	Документы.Капитан КАК Капитан,
	|	Документы.Механик КАК Механик,
	|	Документы.ВремяНаПодогрев КАК ВремяНаПодогрев,
	|	Документы.ВремяРаботыКотла КАК ВремяРаботыКотла,
	|	Документы.ВремяРаботыДГ1 КАК ВремяРаботыДГ1,
	|	Документы.ВремяРаботыДГ2 КАК ВремяРаботыДГ2,
	|	Документы.ВремяРаботыДГ3 КАК ВремяРаботыДГ3
	|ИЗ
	|	Документ.vftРейс КАК Документы
	|ГДЕ
	|	Документы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Шапка = Запрос.Выполнить().Выбрать();	
	
	
	//ТД - Таблица движений
	ТекстЗапросаТД = "ВЫБРАТЬ
	                 |	vftРейс.Дата КАК Период,
	                 |	vftРейс.Судно КАК Судно,
	                 |	vftРейс.Ссылка КАК Рейс,
	                 |	vftРейсПункты.Пункт КАК Пункт,
	                 |	vftРейсПункты.ПричинаСтоянки КАК ВидОперации,
	                 |	vftРейсПункты.Координаты КАК Координаты,
	                 |	vftРейсПункты.Приход КАК Начало,
	                 |	vftРейсПункты.Отход КАК Окончание,
	                 |	vftРейсПункты.Примечание КАК Примечание,
	                 |	vftРейсПункты.РасстояниеПлан КАК ПройденноеРасстояниеНорма,
	                 |	vftРейсПункты.РасстояниеФакт КАК ПройденноеРасстояниеФакт,
	                 |	vftРейсПункты.ХодовоеВремя + ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки = ЗНАЧЕНИЕ(Справочник.vftТиповыеОперации.Погрузка)
	                 |			ТОГДА vftРейсПункты.ХодовоеВремяНаСтоянке
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК ХодовоеВремяФакт,
	                 |	vftРейсПункты.ХодовоеВремяПлан КАК ХодовоеВремяНорма,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &Маневрирование
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК Маневрирование,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &НахождениеВПорту
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК НахождениеВПорту,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &ОжиданиеШлюзования
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК ОжиданиеШлюзования,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &Шлюзование
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК Шлюзование,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &КОФ
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК КОФ,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &МетеорологическиеПричины
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК МетеорологическиеПричины,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &РемонтныеРаботы
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК РемонтныеРаботы,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &ОжиданиеРазводкиМостов
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК ОжиданиеРазводкиМостов,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &РаботаКомиссииКПП
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК РаботаКомиссииКПП,
	                 |	ВЫБОР
	                 |		КОГДА vftРейсПункты.ПричинаСтоянки.Стоянка
	                 |				И vftРейсПункты.ПричинаСтоянки.ГруппаОтчета = &Прочие
	                 |			ТОГДА РАЗНОСТЬДАТ(vftРейсПункты.Приход, vftРейсПункты.Отход, СЕКУНДА)
	                 |		ИНАЧЕ 0
	                 |	КОНЕЦ КАК Прочие,
	                 |	vftРейсПункты.ГруженыйРейс КАК ГруженыйРейс
	                 |ИЗ
	                 |	Документ.vftРейс.Пункты КАК vftРейсПункты
	                 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.vftРейс КАК vftРейс
	                 |		ПО vftРейсПункты.Ссылка = vftРейс.Ссылка
	                 |ГДЕ
	                 |	vftРейс.Ссылка В(&МассивОбъектов)
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	Рейс,
	                 |	Период";
		
	ЗапросТД = Новый Запрос(ТекстЗапросаТД);
	ЗапросТД.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	ЗапросТД.УстановитьПараметр("Маневрирование", Перечисления.vftГруппыСтоянокПутевогоЖурнала.МаневровыйРежим);
	ЗапросТД.УстановитьПараметр("НахождениеВПорту", Перечисления.vftГруппыСтоянокПутевогоЖурнала.НахождениеВПорту);
	ЗапросТД.УстановитьПараметр("ОжиданиеШлюзования", Перечисления.vftГруппыСтоянокПутевогоЖурнала.ОжиданиеШлюзования);
	ЗапросТД.УстановитьПараметр("Шлюзование", Перечисления.vftГруппыСтоянокПутевогоЖурнала.Шлюзование);
	ЗапросТД.УстановитьПараметр("КОФ", Перечисления.vftГруппыСтоянокПутевогоЖурнала.КОФ);
	ЗапросТД.УстановитьПараметр("МетеорологическиеПричины", Перечисления.vftГруппыСтоянокПутевогоЖурнала.МетеорологическиеПричины);
	ЗапросТД.УстановитьПараметр("РемонтныеРаботы", Перечисления.vftГруппыСтоянокПутевогоЖурнала.РемонтныеРаботы);
	ЗапросТД.УстановитьПараметр("ОжиданиеРазводкиМостов", Перечисления.vftГруппыСтоянокПутевогоЖурнала.ОжиданиеРазводкиМостов);
	ЗапросТД.УстановитьПараметр("РаботаКомиссииКПП", Перечисления.vftГруппыСтоянокПутевогоЖурнала.РаботаКомиссииКПП);
	ЗапросТД.УстановитьПараметр("Прочие", Перечисления.vftГруппыСтоянокПутевогоЖурнала.Прочие);
	
	ТД = ЗапросТД.Выполнить().Выгрузить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "Рейс_РейсовыйОтчет";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.vftРейс.ПФ_MXL_РейсовыйОтчет");
	
	Пока Шапка.Следующий() Цикл
		Если ТабличныйДокумент.ВысотаТаблицы > 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ДанныеПечати = Новый Структура;
		
		СтруктураОтбора = Новый Структура("Рейс", Шапка.Ссылка); 
		ТаблицаПунктов = ТД.Скопировать(СтруктураОтбора);
		
		ТаблицаПунктов.Сортировать("Период");
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		ПараметрыЧисла = Новый КвалификаторыЧисла(2,0);

		ДопустимыеТипы = Новый ОписаниеТипов(МассивТипов, , ,ПараметрыЧисла);

		ТаблицаПунктов.Колонки.Добавить("Порядок",ДопустимыеТипы);
		ТаблицаПунктов.Колонки.Добавить("Груз", ДопустимыеТипы);
		
		ТекПункт = Справочники.vftПунктыСледования.ПустаяСсылка();
		ТекКоординаты = "";
		Порядок = 0;
		Груз = 0;
		
		ВремяВПортуПогрузки = 0;
		ВремяВПортуВыгрузки = 0;
		Погрузка = Ложь;
		Выгрузка = ложь;
		
		ПустаяДата = Дата(1,1,1);
		НачалоПогрузки = Константы.vftНачалоПогрузки.Получить();
		НачалоВыгрузки = Константы.vftНачалоВыгрузки.Получить();
		ОкончаниеПогрузки = Константы.vftОкончаниеПогрузки.Получить();
		ОкончаниеВыгрузки = Константы.vftОкончаниеВыгрузки.Получить();
		
		ПогрузкаВремя = 0;
		ВыгрузкаВремя = 0;
		
		ВремяСтоянок = 0;
        ВремяШлюзования = 0;
		ВремяКОФ = 0;
		ВремяПрочихСтоянок = 0;
		
		МаневрыВЗонеКонтрольныхВыбросов = Ложь;
		ВремяМаневров = 0;
		
		Для каждого Строка Из ТаблицаПунктов Цикл
			Если ТекПункт<>Строка.Пункт ИЛИ ТекКоординаты<> Строка.Координаты Тогда
				Порядок = Порядок+1;
				Строка.Порядок = Порядок;
				ТекПункт = Строка.Пункт;
				ТекКоординаты = Строка.Координаты;
			Иначе
				Строка.Порядок = Порядок;
			КонецЕсли;
			
			
			//++ rarus isaeva 13.11.2020
			//Если Строка.ВидОперации.ЧистыеГрузовыеОперации И Груз=0 Тогда
			//	Груз=1;
			//	//МассивПортовПорожний.Добавить(Строка.Пункт);
			//КонецЕсли;
			//-- rarus isaeva 13.11.2020

			Если Строка.ГруженыйРейс И Груз=0 Тогда
				Груз=1;
				//МассивПортовПорожний.Добавить(Строка.Пункт);
			КонецЕсли;
			
			Строка.Груз = Груз;
			
			//Если Не Строка.Груз Тогда
			//	Если Строка = ТаблицаПунктов[0] Тогда
			//		МассивПортовПорожний.Добавить(Строка.Пункт);
			//	ИначеЕсли Строка.ВидОперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.НахождениеВПорту Тогда
			//		МассивПортовПорожний.Добавить(Строка.Пункт);
			//	КонецЕсли; 
			//ИначеЕсли Строка.Груз Тогда 
			//	Если Строка.ВидОперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.НахождениеВПорту Тогда
			//		МассивПортовГРуженый.Добавить(Строка.Пункт);
			//	КонецЕсли;
			//КонецЕсли;
			
			
			

			Если Строка.Видоперации = НачалоПогрузки Тогда
				Погрузка = Истина;
			КонецЕсли;
			Если Строка.Видоперации = ОкончаниеПогрузки Тогда
				Погрузка = Ложь;
			КонецЕсли;
			Если Строка.Видоперации = НачалоВыгрузки Тогда
				Выгрузка = Истина;
				//++ rarus isaeva 01.12.2020 
				Погрузка = Ложь;
				//-- rarus isaeva 01.12.2020
			КонецЕсли;
			Если Строка.Видоперации = ОкончаниеВыгрузки Тогда
				Выгрузка = Ложь;
			КонецЕсли;
			
			
			Если Погрузка 
				// ++ rarus Чернавин Г.К 11.02.2021 № 27175		
				Или Строка.Видоперации = ОкончаниеПогрузки Тогда
				// -- rarus Чернавин Г.К 11.02.2021
				ПогрузкаВремя = ПогрузкаВремя+ОКр((Строка.Окончание-Строка.Начало)/60,1);	
			КонецЕсли; 
			
			Если Выгрузка 
				// ++ rarus Чернавин Г.К 11.02.2021 № 27175
				Или Строка.Видоперации = ОкончаниеВыгрузки Тогда
				// -- rarus Чернавин Г.К 11.02.2021
				ВыгрузкаВремя = ВыгрузкаВремя+Окр((Строка.Окончание-Строка.Начало)/60,1);
			КонецЕсли;
			
			
//++ rarus isaeva 13.11.2020
			//Возможный вариант получения времени		
			//Если Строка.ВидОперации = Справочники.vftТиповыеОперации.Погрузка Тогда
			//	ПогрузкаВремя = ПогрузкаВремя+ОКр((Строка.Окончание-Строка.Начало)/60,1);	
			//КонецЕсли; 
			//
			//Если Строка.ВидОперации = Справочники.vftТиповыеОперации.Выгрузка Тогда
			//	ВыгрузкаВремя = ВыгрузкаВремя+Окр((Строка.Окончание-Строка.Начало)/60,1);
			//КонецЕсли;
//-- rarus isaeva 13.11.2020

				
			Если Строка.ПУнкт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO Тогда
				МаневрыВЗонеКонтрольныхВыбросов = Истина;
			КонецЕсли; 
			
			Если Строка.ПУнкт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO Тогда
				МаневрыВЗонеКонтрольныхВыбросов = Ложь;
			КонецЕсли;
			
			Если МаневрыВЗонеКонтрольныхВыбросов Тогда
				ВремяМаневров = ВремяМаневров+Окр((Строка.Окончание-Строка.Начало)/60,1);
			КонецЕсли; 
			
			Если Строка.ВидОперации.Стоянка И Не Погрузка И Не Выгрузка Тогда
				Если Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.ОжиданиеШлюзования 
					ИЛИ Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.Шлюзование Тогда
					ВремяШлюзования = ВремяШлюзования+Окр((Строка.Окончание-Строка.Начало)/60,1);
				ИначеЕсли Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.КОФ Тогда 
					ВремяКОФ = ВремяКОФ+Окр((Строка.Окончание-Строка.Начало)/60,1);
				ИначеЕсли Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.МетеорологическиеПричины
					ИЛИ Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.РемонтныеРаботы
					ИЛИ Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.ОжиданиеРазводкиМостов 
					ИЛИ Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.РаботаКомиссииКПП
					ИЛИ Строка.Видоперации.ГруппаОтчета = Перечисления.vftГруппыСтоянокПутевогоЖурнала.Прочие Тогда 
					ВремяПрочихСтоянок =ВремяПрочихСтоянок+Окр((Строка.Окончание-Строка.Начало)/60,1);
				КонецЕсли;
				
			КонецЕсли;
			
			
 
		КонецЦикла;
		
		ВремяСтоянок = ВремяШлюзования+ВремяКОФ+ВремяПрочихСтоянок;
		
		Если ТаблицаПунктов.Количество() Тогда
			ДанныеПечати.Вставить("НачалоРейса", ТаблицаПунктов[0].Начало);
	        ДанныеПечати.Вставить("ОкончаниеРейса", ТаблицаПунктов[ТаблицаПунктов.Количество()-1].Окончание);
		КонецЕсли; 
				
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		ДанныеПечати.Вставить("Судно", Шапка.Судно);
		// ++ rarus Чернавин Г.К 18.06.2020 № 22279
		НомерРейса = Документы.vftРейс.НомерБезПрефикса(Шапка.НомерРейса);
		ДанныеПечати.Вставить("НомерРейса", НомерРейса);
		// -- rarus Чернавин Г.К 18.06.2020
		// ++ rarus Камаев П.В. 06.04.2020 Задача № 20799
		Порты = рарусОбщегоНазначенияКлиентСервер.ПолучитьПортыРейса(Шапка.Ссылка.ПунктыСледования);
		ДанныеПечати.Вставить("ПортОтправления", Порты.ПортОтправления);
		ДанныеПечати.Вставить("ПортПогрузки", Порты.ПортПогрузки);
		ДанныеПечати.Вставить("ПортВыгрузки", Порты.ПортВыгрузки);
		//ДанныеПечати.Вставить("ПортОтправления", Шапка.ПортОтправления);
		//ДанныеПечати.Вставить("ПортПогрузки", Шапка.ПортПогрузки);
		//ДанныеПечати.Вставить("ПортВыгрузки", Шапка.ПортВыгрузки);
		// -- rarus Камаев П.В. 06.04.2020
		
		ДанныеПечати.Вставить("Груз", Шапка.Груз);
		ДанныеПечати.Вставить("Осадка", Шапка.Осадка);

		ДанныеПечати.Вставить("Загрузка", Шапка.Загрузка);

		ТаблицаБалласт = ТаблицаПунктов.Скопировать(Новый Структура("Груз",0));
		ТаблицаГруз = ТаблицаПунктов.Скопировать(Новый Структура("Груз",1));
		
		ДанныеПечати.Вставить("РасстояниеВБалласте", ТаблицаБалласт.Итог("ПройденноеРасстояниеФакт"));
		ДанныеПечати.Вставить("РасстояниеВГрузу", ТаблицаГруз.Итог("ПройденноеРасстояниеФакт"));
		
		//++ rarus isaeva 13.11.2020
		//ВремяВБалласте = ТаблицаБалласт.Итог("ХодовоеВремяФакт");
		//ВремяВГрузу = ТаблицаГруз.Итог("ХодовоеВремяФакт");
		
		ВремяВБалласте = ТаблицаБалласт.Итог("ХодовоеВремяФакт")/60;
		ВремяВГрузу = ТаблицаГруз.Итог("ХодовоеВремяФакт")/60;
		//-- rarus isaeva 13.11.2020

		ДанныеПечати.Вставить("ВремяВБалласте", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяВБалласте));
		ДанныеПечати.Вставить("ВремяВГрузу", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяВГРузу));
		
		ДанныеПечати.Вставить("ОбщееВремяПогрузки", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ПогрузкаВремя));
		ДанныеПечати.Вставить("ОбщееВремяВыгрузки", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВыгрузкаВремя));
		
		ДанныеПечати.Вставить("МаневрыКонтр", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяМаневров));
		ДанныеПечати.Вставить("ВремяМаневровВМоре", Шапка.ВремяМаневровВМоре);
		
		ДанныеПечати.Вставить("ВремяНаПодогрев", Шапка.ВремяНаПодогрев);
		ДанныеПечати.Вставить("ВремяРаботыКотла", Шапка.ВремяРаботыКотла);
		ДанныеПечати.Вставить("ВремяРаботыДГ1", Шапка.ВремяРаботыДГ1);
		ДанныеПечати.Вставить("ВремяРаботыДГ2", Шапка.ВремяРаботыДГ2);
		ДанныеПечати.Вставить("ВремяРаботыДГ3", Шапка.ВремяРаботыДГ3);
		ДанныеПечати.Вставить("Капитан", vftОбщегоНазначенияВызовСервера.ФамилияИнициалыФизЛица(Шапка.Капитан));
		ДанныеПечати.Вставить("Механик", vftОбщегоНазначенияВызовСервера.ФамилияИнициалыФизЛица(Шапка.Механик));
		
		ДанныеПечати.Вставить("ВремяСтоянок", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяСтоянок));
		ДанныеПечати.Вставить("Шлюзование", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяШлюзования));
		ДанныеПечати.Вставить("КОФ", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяКОФ));
		ДанныеПечати.Вставить("Прочие", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяПрочихСтоянок));
		
		ВремяМорскихМаневров = Час(Шапка.ВремяМаневровВМоре)*60+Минута(Шапка.ВремяМаневровВМоре);
		
		
		ВремяРейса = ВремяВБалласте+ВремяВГрузу+ПогрузкаВремя+ВыгрузкаВремя+ВремяСтоянок+ВремяМорскихМаневров;
		
		ДанныеПечати.Вставить("ВремяРейса", vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ВремяРейса));
		
		МассивОбластейМакета = Новый Массив;
		МассивОбластейМакета.Добавить("Заголовок");
		Для Каждого ИмяОбласти Из МассивОбластейМакета Цикл
			ОбластьМакета = Макет.ПолучитьОбласть(ИмяОбласти);
			Если ИмяОбласти <> "Строка" Тогда
				ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			Иначе
				
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Шапка.Ссылка);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;

	
КонецФункции

// ++ rarus Чернавин Г.К 05.06.2020 № 22139
Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	//Если ПланыОбмена.Полный.ЭтотУзел().Суда.Количество() = 1 Тогда
		НомерНаПечать = НомерБезПрефикса(Данные.Номер);
	//Иначе
	//	НомерНаПечать = Данные.Номер;
	//КонецЕсли;
	Представление = "Рейс № "+НомерНаПечать; 
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Функция НомерБезПрефикса(Номер) Экспорт
	НомерВозврат = Номер;
	Разделитель = "-";
	ПозицияРазделителя = СтрНайти(НомерВозврат, Разделитель, НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя <> 0 Тогда
		НомерВозврат = Сред(НомерВозврат, ПозицияРазделителя+1);
		НомерВозврат = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерВозврат);
	КонецЕсли;
	Возврат НомерВозврат;
	
КонецФункции
// -- rarus Чернавин Г.К 05.06.2020

// ++ rarus Камаев П.В. 27.10.2020 Задача № 24973
// Сообщение об обязательности заполнения ТЧ ПрохождениеУчастковСЛоцманом
Процедура ОбязательностьЗаполненияПрохождениеУчастковСЛоцманом(Объект) Экспорт
	
	Если Объект.Судно.Проект.Толкач Тогда
		СписокПортов = Справочники.рарусСправочникСсылок.ПолучитьМассивЗначений("Документы.Рейс","СписокПунктовСЗДляПрохожденияТолкачаСЛоцманом");
		ЕстьПунктыСЗ = Ложь;
		Для каждого Стр Из Объект.Пункты Цикл
			Если СписокПортов.Найти(Стр.Пункт) <> Неопределено Тогда
				ЕстьПунктыСЗ = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьПунктыСЗ Тогда
			МинКоличествоСтрокЛоцман = ПредопределенноеЗначение("Справочник.рарусСправочникСсылок.МинКоличествоСтрокЛоцман");
			МинКоличествоСтрок = рарусОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(МинКоличествоСтрокЛоцман, "Значение");
			Если ТипЗнч(МинКоличествоСтрок) <> Тип("Число") Тогда
				МинКоличествоСтрок = 0;
			КонецЕсли;
			Если Объект.ПрохождениеУчастковСЛоцманом.Количество() < МинКоличествоСтрок 
				И Объект.СтатусРейса = ПредопределенноеЗначение("Перечисление.рарусСтатусыПутевогоЖурнала.Завершен") Тогда
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Необходимо заполнить данные по прохождению участков с лоцманом (минимум %1 стр.)!'"), МинКоличествоСтрок);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры
// -- rarus Камаев П.В. 27.10.2020
#КонецЕсли