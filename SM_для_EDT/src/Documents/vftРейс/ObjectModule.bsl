#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПриУстановкеНовогоНомера(СтандартнаяОбработка, Префикс)
	
	// ++ rarus Камаев П.В. 30.03.2020 Задача № 20647 
	//Префикс = Судно.КодБыстрогоВвода+"-"+Формат(Год(Дата), "ЧГ=0")+"-";
	Префикс = СформироватьПрефиксНомераДокумента();
	// -- rarus Камаев П.В. 30.03.2020
	
КонецПроцедуры

// ++ rarus Камаев П.В. 30.03.2020 Задача № 20647 
Функция СформироватьПрефиксНомераДокумента() Экспорт
	
	Префикс = "";
	
	Префикс = Префикс + ?(Судно <> Справочники.vftСуда.ПустаяСсылка(), Судно.КодБыстрогоВвода, "      ");
	Префикс = Префикс + "-";
	Префикс = Префикс + ?(Дата = Дата("00010101000000"), "  ", Прав(Формат(Дата, "ДФ=yyyy"), 2));
	Префикс = Префикс + "-";
	
	Возврат Префикс;
	
КонецФункции

Процедура УстановитьНомерПоФормату(НомерБезПрефикса)
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Номер) ТОгда
		Префикс = СформироватьПрефиксНомераДокумента();
		ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(ЭтотОбъект, Истина, Префикс);
		
		УстановитьПривилегированныйРежим(Истина);
		ОбновитьНумерациюОбъектов(Метаданные.Документы.vftРейс); 
		УстановитьПривилегированныйРежим(Ложь);
		
		ЭтотОбъект.УстановитьНовыйНомер(Префикс);
		
		ДлинаПрефикса = СтрДлина(Префикс);
		Номер = ЭтотОбъект.Номер;
		НомерРейса = Сред(Номер, ДлинаПрефикса+1); 
		НомерРейса = СтрЗаменить(НомерРейса, " ","");
		ДлинаНомераРейса = СтрДлина(НомерРейса);
		Пока ДлинаНомераРейса > 3 Цикл
			Если Лев(НомерРейса, 1) = "0" Тогда
				НомерРейса = Сред(НомерРейса, 2);
				ДлинаНомераРейса = ДлинаНомераРейса - 1;
			ИНаче
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ЭтотОбъект.Номер = Префикс + НомерРейса;
		
		// ++ rarus Чернавин Г.К 20.07.2020
		Если ЗначениеЗаполнено(НомерБезПрефикса) Тогда
			
		КонецЕсли;
		// -- rarus Чернавин Г.К 20.07.2020
	КонецЕсли;
	
КонецПроцедуры
// -- rarus Камаев П.В. 30.03.2020

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	// ++ rarus Камаев П.В. 02.04.2020 Задача № 20769 
	//в ТЧ должна быть только одна строка с Тип = ПортОтправления (пункт не обязательно заполнен)
	//Должны быть строки с Тип = ПортПогрузки и с Тип = ПортВыгрузкия (пункты не обязательно заполнен)
	// В СМ предусмотреть проверку: если в рейсе не установлен флажок "Работа по распоряжению диспетчера" и 
	//rarus_AfoD 16.09.2020 < 
	// Капитан устанавливает статус рейса "Завершен", программа должна проверять, что ТЧ "Пункты следования" заполнена. 
	// В ТЧ "Пункты следования" должны быть заполнены все три реквизита - Порт отправления, Порт погрузки и Порт выгрузки. 
	// Если одно из этих полей не заполнено, нужно выдавать предупреждение - "В табличной части "Пункты следования" не заполнено поле ...(название соответствующего поля)". 
	Если (НЕ РаботаПоРаспоряжению) И (СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Завершен) Тогда
		//rarus_AfoD 16.09.2020 > 
		
		КоличествоПортОтправления	= 0;
		КоличествоПортПогрузки		= 0;
		КоличествоПортВыгрузки		= 0;
		Для каждого Строка Из ПунктыСледования Цикл
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортОтправления Тогда
				КоличествоПортОтправления = КоличествоПортОтправления + 1;
			КонецЕсли;
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортПогрузки Тогда
				КоличествоПортПогрузки = КоличествоПортПогрузки + 1;
			КонецЕсли;
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортВыгрузки Тогда
				КоличествоПортВыгрузки = КоличествоПортВыгрузки + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоПортОтправления <> 1 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'В рейсе может быть только один порт отправления. Пожалуйста, внесите изменения.'"),);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"Объект.ПунктыСледования",
			ТекстОшибки,
			Неопределено);
		КонецЕсли;
		Если КоличествоПортПогрузки = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'В рейсе должен быть хотя бы один порт погрузки. Пожалуйста, внесите изменения.'"),);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"Объект.ПунктыСледования",
			ТекстОшибки,
			Неопределено);
		КонецЕсли;
		Если КоличествоПортВыгрузки = 0 Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'В рейсе должен быть хотя бы один порт выгрузки. Пожалуйста, внесите изменения.'"),);
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"Объект.ПунктыСледования",
			ТекстОшибки,
			Неопределено);
		КонецЕсли;
		// -- rarus Камаев П.В. 02.04.2020
		
		//rarus_AfoD 16.09.2020 < 
		//ЭтоГлавныйУзел = ПланыОбмена.ГлавныйУзел() = Неопределено;
		//Если Не ЭтоГлавныйУзел или РаботаПоРаспоряжению или СтатусРейса <> Перечисления.рарусСтатусыПутевогоЖурнала.Завершен Тогда
		//	// ++ rarus Камаев П.В. 02.04.2020 Задача № 20769
		//	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
		//	// -- rarus Камаев П.В. 02.04.2020
		//	Возврат;
		//КонецЕсли;
		//rarus_AfoD 16.09.2020 > 		
		
		// ++ rarus Камаев П.В. 02.04.2020 Задача № 20769 
		//rarus_AfoD 16.09.2020 < 
		Для каждого Строка Из ПунктыСледования Цикл
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортОтправления И НЕ ЗначениеЗаполнено(Строка.Пункт) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПунктыСледования[%1].Пункт",
				НСтр("ru = 'В табличной части <Пункты следования> не заполнено поле <Порт отправления>'"),,Строка.НомерСтроки-1);
			КонецЕсли;
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортПогрузки И НЕ ЗначениеЗаполнено(Строка.Пункт) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПунктыСледования[%1].Пункт",
				НСтр("ru = 'В табличной части <Пункты следования> не заполнено поле <Порт погрузки>'"),,Строка.НомерСтроки-1);
			КонецЕсли;
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортВыгрузки И НЕ ЗначениеЗаполнено(Строка.Пункт) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ПунктыСледования[%1].Пункт",
				НСтр("ru = 'В табличной части <Пункты следования> не заполнено поле <Порт выгрузки>'"),,Строка.НомерСтроки-1);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//rarus_AfoD 16.09.2020 > 
	// -- rarus Камаев П.В. 02.04.2020
	
	//++ rarus isaeva 30.03.2021
	//Проверка должна срабатывать только для заверешенных рейсов
	
	Если НЕ Этотобъект.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Незавершен Тогда	
		// ++ rarus Чернавин Г.К 05.06.2020 № 22179
		// ++ rarus Камаев П.В. 25.09.2020 Задача № 24417
		Если Этотобъект.Судно.Проект.Толкач Тогда
			// ++ rarus Камаев П.В. 27.10.2020 Задача № 24973
			// СписокПортов = Справочники.рарусСправочникСсылок.ПолучитьМассивЗначений("Документы.Рейс","СписокПунктовСЗДляПрохожденияТолкачаСЛоцманом");
			//ЕстьПунктыСЗ = Ложь;
			//Для каждого Стр Из Пункты Цикл
			//	Если СписокПортов.Найти(Стр.Пункт) <> Неопределено Тогда
			//		ЕстьПунктыСЗ = Истина;
			//		Прервать;
			//	КонецЕсли;
			//КонецЦикла;
			//Если ЕстьПунктыСЗ Тогда
			//	МинКоличествоСтрок = Справочники.рарусСправочникСсылок.МинКоличествоСтрокЛоцман.Значение;
			//	Если ТипЗнч(МинКоличествоСтрок) <> Тип("Число") Тогда
			//		МинКоличествоСтрок = 0;
			//	КонецЕсли;
			//	Если ПрохождениеУчастковСЛоцманом.Количество() < МинКоличествоСтрок 
			//		// ++ rarus Камаев П.В. 05.10.2020 Задача № 24553
			//		И СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Завершен Тогда
			//		// -- rarus Камаев П.В. 05.10.2020
			//		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Перед закрытием рейса необходимо заполнить данные по прохождению участков с лоцманом (минимум %1 стр.)!'"), МинКоличествоСтрок);
			//		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			//		"Объект.ПрохождениеУчастковСЛоцманом",
			//		ТекстОшибки,
			//		Неопределено);
			//	КонецЕсли;
			//КонецЕсли;
			//// -- rarus Камаев П.В. 25.09.2020
			Документы.vftРейс.ОбязательностьЗаполненияПрохождениеУчастковСЛоцманом(ЭтотОбъект);
			// -- rarus Камаев П.В. 27.10.2020
		Иначе
			СписокПортов = Справочники.рарусСправочникСсылок.ПолучитьМассивЗначений("Документы.Рейс","СписокПунктовКонтрольКЕК");
			Если СписокПортов.Найти(ПортВыгрузки) <> Неопределено Тогда
				МинКоличествоСтрок = Справочники.рарусСправочникСсылок.МинКоличествоСтрокКЕК.Значение;
				КоличествоСтрок = ПрохождениеУчастковСОЛП.НайтиСтроки(Новый Структура("Участок", ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.КерчьЕникальскийКанал")));
				Если КоличествоСтрок.Количество() < МинКоличествоСтрок Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Перед закрытием рейса необходимо заполнить данные по прохождению КЕК (минимум %1 стр.)!'"), МинКоличествоСтрок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ПрохождениеУчастковСОЛП",
					ТекстОшибки,
					Неопределено);
				КонецЕсли;
			КонецЕсли;
			//
			//// Проверка заполнения ТЧ "ПрохождениеРостов"
			////-------------------------------------------
			
			СписокПортов = Справочники.рарусСправочникСсылок.ПолучитьМассивЗначений("Документы.Рейс","СписокПунктовКонтрольРостов");
			Если СписокПортов.Найти(ПортПогрузки) <> Неопределено Тогда
				МинКоличествоСтрок = Справочники.рарусСправочникСсылок.МинКоличествоСтрокРостов.Значение;
				КоличествоСтрок = ПрохождениеУчастковСОЛП.НайтиСтроки(Новый Структура("Участок", ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.РостовНаДону")));
				Если КоличествоСтрок.Количество() < МинКоличествоСтрок Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Перед закрытием рейса необходимо заполнить данные по прохождению Ростова (минимум %1 стр.)!'"), МинКоличествоСтрок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ПрохождениеУчастковСОЛП",
					ТекстОшибки,
					Неопределено);
				КонецЕсли;
				
				МинКоличествоСтрок = Справочники.рарусСправочникСсылок.МинКоличествоСтрокАзов.Значение;
				КоличествоСтрок = ПрохождениеУчастковСОЛП.НайтиСтроки(Новый Структура("Участок", ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.Азов")));
				Если КоличествоСтрок.Количество() < МинКоличествоСтрок Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Перед закрытием рейса необходимо заполнить данные по прохождению Азова (минимум %1 стр.)!'"), МинКоличествоСтрок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ПрохождениеУчастковСОЛП",
					ТекстОшибки,
					Неопределено);
				КонецЕсли;
			КонецЕсли;
			
			СписокПортов = Справочники.рарусСправочникСсылок.ПолучитьМассивЗначений("Документы.Рейс","СписокПунктовКонтрольАзов");
			Если СписокПортов.Найти(ПортПогрузки) <> Неопределено Тогда
				МинКоличествоСтрок = Справочники.рарусСправочникСсылок.МинКоличествоСтрокАзов.Значение;
				КоличествоСтрок = ПрохождениеУчастковСОЛП.НайтиСтроки(Новый Структура("Участок", ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.Азов")));
				Если КоличествоСтрок.Количество() < МинКоличествоСтрок Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Перед закрытием рейса необходимо заполнить данные по прохождению Азова (минимум %1 стр.)!'"), МинКоличествоСтрок);
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ПрохождениеУчастковСОЛП",
					ТекстОшибки,
					Неопределено);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		// -- rarus Чернавин Г.К 05.06.2020
	КонецЕсли;
	//-- rarus isaeva 30.03.2021
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ++ rarus Камаев П.В. 14.07.2020 Задача № 22723
	ЗаполнитьДанныеПоОбмену(Отказ);
	// -- rarus Камаев П.В. 14.07.2020
	
	// ++ rarus Камаев П.В. 10.11.2020 Задача № 25267
	// Перенес из Дислокации
	ДатаПоследнегоИзменения = ТекущаяДата();
	// -- rarus Камаев П.В. 10.11.2020
	
	Если Пункты.Количество() = 0 или Пункты[Пункты.Количество()-1].Отход = Дата(1,1,1) Тогда
		ДатаОкончание = Дата;
	Иначе
		ДатаОкончание = Пункты[Пункты.Количество()-1].Отход;
	КонецЕсли;
	
	// ++ rarus Камаев П.В. 20.04.2020 Задача № 21039
	ДатаНачала = Дата;
	// -- rarus Камаев П.В. 20.04.2020
	
	Для Каждого Строка Из ПрохождениеУчастковСОЛП Цикл
		Строка.Организация = Строка.Лоцман.Владелец;
	КонецЦикла;
	
	Для Каждого Строка Из ПрохождениеУчастковСЛоцманом Цикл
		Строка.Организация = Строка.Лоцман.Владелец;
	КонецЦикла;
	
	// ++ rarus Камаев П.В. 15.12.2020 Задача № 25913
	ЗаполнитьОбщееНаименованиеГрузаИВесаГруза();
	// -- rarus Камаев П.В. 15.12.2020
		
	// ++ rarus Камаев П.В. 30.03.2020 Задача № 20647
	// ++ rarus Чернавин Г.К 20.07.2020 № 22865
	НомерБезПрефикса = "";
	Если ДополнительныеСвойства.Свойство("НомерБезПрефикса") Тогда
		НомерБезПрефикса = ДополнительныеСвойства.НомерБезПрефикса;
	КонецЕсли;
	// -- rarus Чернавин Г.К 20.07.2020
	УстановитьНомерПоФормату(НомерБезПрефикса);
	// -- rarus Камаев П.В. 30.03.2020
	
	// ++ rarus Камаев П.В. 14.04.2020 Задача № 20997
	ПортОтправления = Справочники.vftПунктыСледования.ПустаяСсылка();
	ПортПогрузки = Справочники.vftПунктыСледования.ПустаяСсылка();
	ПортВыгрузки = Справочники.vftПунктыСледования.ПустаяСсылка();
	Для каждого Строка Из ПунктыСледования Цикл
		Если ЗначениеЗаполнено(Строка.Пункт) Тогда
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортОтправления И ЗначениеЗаполнено(Строка.Пункт) Тогда
				ПортОтправления = Строка.Пункт;
			КонецЕсли;
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортПогрузки И НЕ ЗначениеЗаполнено(ПортПогрузки) Тогда
				ПортПогрузки = Строка.Пункт;
			КонецЕсли;
			Если Строка.ТипПункта = Перечисления.рарусТипыПунктов.ПортВыгрузки И ЗначениеЗаполнено(Строка.Пункт) Тогда
				ПортВыгрузки = Строка.Пункт;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// -- rarus Камаев П.В. 07.08.2020
	
КонецПроцедуры

// ++ rarus Камаев П.В. 14.07.2020 Задача № 22723
Процедура ЗаполнитьДанныеПоОбмену(Отказ)
	
	//Возврат;
	Если ОбменДанными.Загрузка = Истина Тогда
		ОбъектНайден= ЗначениеЗаполнено(ЭтотОбъект.Ссылка);
		
		Если ЗначениеЗаполнено(ОбменДанными.Отправитель) И ТипЗнч(ОбменДанными.Отправитель) = Тип("ПланОбменаСсылка.Полный") Тогда
			
			ГлавныйУзел = ПланыОбмена.ГлавныйУзел() = Неопределено;
					
			Если ОбъектНайден Тогда
				Если ГлавныйУзел Тогда
					ЗаполнитьДанныеПоОбменуГлавныйУзел(Отказ);
				Иначе
					ЗаполнитьДанныеПоОбменуПериферийныйУзел(Отказ);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОбменДанными.Отправитель)
			И ОбъектНайден
			И (ТипЗнч(ОбменДанными.Отправитель) = Тип("ПланОбменаСсылка.рарусОбменУправлениеПредприятиемСудовойМодуль")
			ИЛИ ТипЗнч(ОбменДанными.Отправитель) = Тип("ПланОбменаСсылка.Полный")) Тогда
			ИзменениеЗарегистрировано = ПланыОбмена.ИзменениеЗарегистрировано(ОбменДанными.Отправитель, Ссылка);	
			Если ИзменениеЗарегистрировано Тогда
				ДополнительныеСвойства.Вставить("РегистрироватьИзменения", Истина);
				ДополнительныеСвойства.Вставить("РегистрироватьОбъектНаУзлеОтправителе", Истина);
				ДополнительныеСвойства.Вставить("Отправитель", ОбменДанными.Отправитель);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеПоОбменуГлавныйУзел(Отказ)
	
	//++ rarus isaeva 07.07.2021
	//Документ со статусом "Проверен" является приоритетным. В обмене РИБ в ЦБ такие документы Не должны заменяться
	Если Ссылка.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Проверен Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Ссылка);
		
		ЭтотОбъект.Пункты.Загрузить(Ссылка.Пункты.Выгрузить());
		ЭтотОбъект.Баржи.Загрузить(Ссылка.Баржи.Выгрузить());
		ЭтотОбъект.ПрочиеПричиныСтоянки.Загрузить(Ссылка.ПрочиеПричиныСтоянки.Выгрузить());
		ЭтотОбъект.Буксировки.Загрузить(Ссылка.Буксировки.Выгрузить());
		ЭтотОбъект.ПрохождениеУчастковСОЛП.Загрузить(Ссылка.ПрохождениеУчастковСОЛП.Выгрузить());
		ЭтотОбъект.ПрохождениеУчастковСЛоцманом.Загрузить(Ссылка.ПрохождениеУчастковСЛоцманом.Выгрузить());
		ЭтотОбъект.Бункеровки.Загрузить(Ссылка.Бункеровки.Выгрузить());
		ЭтотОбъект.ПунктыСледования.Загрузить(Ссылка.ПунктыСледования.Выгрузить());

	КонецЕсли;
	//-- rarus isaeva 07.07.2021

	// ++ rarus Камаев П.В. 20.08.2020 Задача № 23379
	
	//ВсеПунктыПроверены = Истина;
	//Для Каждого Пункт Из Ссылка.Пункты Цикл
	//	Если Не Пункт.ПровереноМенеджером Тогда
	//		ВсеПунктыПроверены = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//
	////Если все проверено, то полная загрузка
	//Если Ссылка.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Проверен И ВсеПунктыПроверены Тогда
	//	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Ссылка);
	//	
	//	ЭтотОбъект.Пункты.Загрузить(Ссылка.Пункты.Выгрузить());
	//	ЭтотОбъект.Баржи.Загрузить(Ссылка.Баржи.Выгрузить());
	//	ЭтотОбъект.ПрочиеПричиныСтоянки.Загрузить(Ссылка.ПрочиеПричиныСтоянки.Выгрузить());
	//	ЭтотОбъект.Буксировки.Загрузить(Ссылка.Буксировки.Выгрузить());
	//	ЭтотОбъект.ПрохождениеУчастковСОЛП.Загрузить(Ссылка.ПрохождениеУчастковСОЛП.Выгрузить());
	//	ЭтотОбъект.ПрохождениеУчастковСЛоцманом.Загрузить(Ссылка.ПрохождениеУчастковСЛоцманом.Выгрузить());
	//	ЭтотОбъект.Бункеровки.Загрузить(Ссылка.Бункеровки.Выгрузить());
	//	ЭтотОбъект.ПунктыСледования.Загрузить(Ссылка.ПунктыСледования.Выгрузить());
	//Иначе
	//	
	//	Для Каждого СтрокаОбъектаБД Из Ссылка.Пункты Цикл
	//		
	//		Если СтрокаОбъектаБД.ПровереноМенеджером И ЭтотОбъект.Пункты.Количество() >= СтрокаОбъектаБД.НомерСтроки Тогда
	//			
	//			СтрокаЗагружаемогоОбъекта = ЭтотОбъект.Пункты[СтрокаОбъектаБД.НомерСтроки-1];
	//			ЗаполнитьЗначенияСвойств(СтрокаЗагружаемогоОбъекта, СтрокаОбъектаБД);
	//			
	//			ИДСтроки = СтрокаОбъектаБД.ИД;
	//			Отбор = новый Структура("ИД", ИДСтроки);
	//			
	//			//Если проверено менеджером, то очищаем загруженное и заполняем старое
	//			//Баржи
	//			СтрокиОбъектаБаржи	= ЭтотОбъект.Баржи.НайтиСтроки(Отбор);
	//			Для каждого СтрокаОбъектаБаржи ИЗ СтрокиОбъектаБаржи Цикл
	//				ЭтотОбъект.Баржи.Удалить(СтрокаОбъектаБаржи);
	//			КонецЦикла;
	//			СтрокиСсылкаБаржи	= Ссылка.Баржи.НайтиСтроки(Отбор);
	//			Для каждого СтрокаСсылкаБаржи ИЗ СтрокиСсылкаБаржи Цикл
	//				СтрокаОбъектаБаржи = ЭтотОбъект.Баржи.Добавить();
	//				ЗаполнитьЗначенияСвойств(СтрокаОбъектаБаржи, СтрокаСсылкаБаржи);
	//			КонецЦикла;
	//			
	//			//Если проверено менеджером, то очищаем загруженное и заполняем старое
	//			//Причины стоянки
	//			СтрокиОбъектаПрочиеПричиныСтоянки = ЭтотОбъект.ПрочиеПричиныСтоянки.НайтиСтроки(Отбор);
	//			Для каждого СтрокаОбъектаПрочиеПричиныСтоянки ИЗ СтрокиОбъектаПрочиеПричиныСтоянки Цикл
	//				ЭтотОбъект.ПрочиеПричиныСтоянки.Удалить(СтрокаОбъектаПрочиеПричиныСтоянки);
	//			КонецЦикла;
	//			СтрокиСсылкаПрочиеПричиныСтоянки = Ссылка.ПрочиеПричиныСтоянки.НайтиСтроки(Отбор);
	//			Для каждого СтрокаСсылкаПрочиеПричиныСтоянки ИЗ СтрокиСсылкаПрочиеПричиныСтоянки Цикл
	//				СтрокаОбъектаПрочиеПричиныСтоянки = ЭтотОбъект.ПрочиеПричиныСтоянки.Добавить();
	//				ЗаполнитьЗначенияСвойств(СтрокаОбъектаПрочиеПричиныСтоянки, СтрокаСсылкаПрочиеПричиныСтоянки);
	//			КонецЦикла;							
	//		КонецЕсли;
	//		
	//	КонецЦикла;
	//	
	//	Если Ссылка.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.ЗавершенСОшибками Тогда
	//		ЭтотОбъект.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.ЗавершенСОшибками;
	//	КонецЕсли;
	//КонецЕсли;
	// -- rarus Камаев П.В. 20.08.2020
КонецПроцедуры

Процедура ЗаполнитьДанныеПоОбменуПериферийныйУзел(Отказ)
	
	// ++ rarus Камаев П.В. 20.08.2020 Задача № 23379
	
	//ВсеПунктыПроверены = Истина;
	//Для Каждого Пункт Из ЭтотОбъект.Пункты Цикл
	//	Если Не Пункт.ПровереноМенеджером Тогда
	//		ВсеПунктыПроверены = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//
	////Если статус = Проверен и все пункты проверены, то полная загрузка
	//Если ЭтотОбъект.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Проверен И ВсеПунктыПроверены Тогда
	//	
	//	//Если завершен с ошибками, меняем только статус
	//ИначеЕсли ЭтотОбъект.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.ЗавершенСОшибками Тогда
	//	
	//	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Ссылка, , "СтатусРейса");
	//	
	//	ЭтотОбъект.Пункты.Загрузить(Ссылка.Пункты.Выгрузить());
	//	ЭтотОбъект.Баржи.Загрузить(Ссылка.Баржи.Выгрузить());
	//	ЭтотОбъект.ПрочиеПричиныСтоянки.Загрузить(Ссылка.ПрочиеПричиныСтоянки.Выгрузить());
	//	ЭтотОбъект.Буксировки.Загрузить(Ссылка.Буксировки.Выгрузить());
	//	ЭтотОбъект.ПрохождениеУчастковСОЛП.Загрузить(Ссылка.ПрохождениеУчастковСОЛП.Выгрузить());
	//	ЭтотОбъект.ПрохождениеУчастковСЛоцманом.Загрузить(Ссылка.ПрохождениеУчастковСЛоцманом.Выгрузить());
	//	ЭтотОбъект.Бункеровки.Загрузить(Ссылка.Бункеровки.Выгрузить());
	//	ЭтотОбъект.ПунктыСледования.Загрузить(Ссылка.ПунктыСледования.Выгрузить());
	//	
	//Иначе
	//	//Если ПЖ еще не проверен или не все пунткы проверены, то загружаем только проверенные пункты
	//	СтрокиКУдалению = новый Массив;
	//	Для Каждого СтрокаЗагружаемогоОбъекта Из ЭтотОбъект.Пункты Цикл
	//		
	//		Если Не СтрокаЗагружаемогоОбъекта.ПровереноМенеджером Тогда
	//			
	//			Если СтрокаЗагружаемогоОбъекта.НомерСтроки > Ссылка.Пункты.Количество() Тогда
	//				СтрокиКУдалению.Добавить(СтрокаЗагружаемогоОбъекта);
	//				Продолжить;
	//			КонецЕсли;
	//			
	//			ИДСтроки = СтрокаЗагружаемогоОбъекта.ИД;
	//			Отбор = новый Структура("ИД", ИДСтроки);
	//			
	//			СтрокаОбъектаБД = Ссылка.Пункты[СтрокаЗагружаемогоОбъекта.НомерСтроки - 1];
	//			ЗаполнитьЗначенияСвойств(СтрокаЗагружаемогоОбъекта, СтрокаОбъектаБД);
	//			
	//			//Если проверено менеджером, то очищаем загруженное и заполняем старое
	//			//Баржи
	//			СтрокиОбъектаБаржи	= ЭтотОбъект.Баржи.НайтиСтроки(Отбор);
	//			Для каждого СтрокаОбъектаБаржи ИЗ СтрокиОбъектаБаржи Цикл
	//				ЭтотОбъект.Баржи.Удалить(СтрокаОбъектаБаржи);
	//			КонецЦикла;
	//			СтрокиСсылкаБаржи	= Ссылка.Баржи.НайтиСтроки(Отбор);
	//			Для каждого СтрокаСсылкаБаржи ИЗ СтрокиСсылкаБаржи Цикл
	//				СтрокаОбъектаБаржи = ЭтотОбъект.Баржи.Добавить();
	//				ЗаполнитьЗначенияСвойств(СтрокаОбъектаБаржи, СтрокаСсылкаБаржи);
	//			КонецЦикла;
	//			
	//			//Если проверено менеджером, то очищаем загруженное и заполняем старое
	//			//Причины стоянки
	//			СтрокиОбъектаПрочиеПричиныСтоянки = ЭтотОбъект.ПрочиеПричиныСтоянки.НайтиСтроки(Отбор);
	//			Для каждого СтрокаОбъектаПрочиеПричиныСтоянки ИЗ СтрокиОбъектаПрочиеПричиныСтоянки Цикл
	//				ЭтотОбъект.ПрочиеПричиныСтоянки.Удалить(СтрокаОбъектаПрочиеПричиныСтоянки);
	//			КонецЦикла;
	//			СтрокиСсылкаПрочиеПричиныСтоянки = Ссылка.ПрочиеПричиныСтоянки.НайтиСтроки(Отбор);
	//			Для каждого СтрокаСсылкаПрочиеПричиныСтоянки ИЗ СтрокиСсылкаПрочиеПричиныСтоянки Цикл
	//				СтрокаОбъектаПрочиеПричиныСтоянки = ЭтотОбъект.ПрочиеПричиныСтоянки.Добавить();
	//				ЗаполнитьЗначенияСвойств(СтрокаОбъектаПрочиеПричиныСтоянки, СтрокаСсылкаПрочиеПричиныСтоянки);
	//			КонецЦикла;
	//			
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	//удаляем непроверенные строки полученные из СМ ЦБ, сверх количества (если например в СМ ЦБ кол строк 7, а в СМ 5, то удалятся 2 строки)
	//	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
	//		ЭтотОбъект.Пункты.Удалить(СтрокаКУдалению);		
	//	КонецЦикла;
	//	
	//	//Дополняем строки
	//	Для Каждого СсылкаСтрокаПункт Из Ссылка.Пункты Цикл
	//		Если СсылкаСтрокаПункт.НомерСтроки <= ЭтотОбъект.Пункты.Количество() Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ИДСтроки = СсылкаСтрокаПункт.ИД;
	//		Отбор = новый Структура("ИД", ИДСтроки);
	//		
	//		СтрокаОбъектаБД = ЭтотОбъект.Пункты.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаОбъектаБД, СсылкаСтрокаПункт);
	//		
	//		СтрокиСсылкаБаржи = Ссылка.Баржи.НайтиСтроки(Отбор);
	//		Для каждого СтрокаСсылкаБаржи ИЗ СтрокиСсылкаБаржи Цикл
	//			СтрокаОбъектаБаржи = ЭтотОбъект.Баржи.Добавить();
	//			ЗаполнитьЗначенияСвойств(СтрокаОбъектаБаржи, СтрокаСсылкаБаржи);
	//		КонецЦикла;
	//		
	//		СтрокиСсылкаПрочиеПричиныСтоянки = Ссылка.ПрочиеПричиныСтоянки.НайтиСтроки(Отбор);
	//		Для каждого СтрокаСсылкаПрочиеПричиныСтоянки ИЗ СтрокиСсылкаПрочиеПричиныСтоянки Цикл
	//			СтрокаОбъектаПрочиеПричиныСтоянки = ЭтотОбъект.ПрочиеПричиныСтоянки.Добавить();
	//			ЗаполнитьЗначенияСвойств(СтрокаОбъектаПрочиеПричиныСтоянки, СтрокаСсылкаПрочиеПричиныСтоянки);
	//		КонецЦикла;	
	//	КонецЦикла;
	//	
	//	Если ЭтотОбъект.СтатусРейса <> Перечисления.рарусСтатусыПутевогоЖурнала.Проверен Или Не ВсеПунктыПроверены Тогда
	//		
	//		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Ссылка, , "СтатусРейса");
	//		ЭтотОбъект.Буксировки.Загрузить(Ссылка.Буксировки.Выгрузить());
	//		ЭтотОбъект.ПрохождениеУчастковСОЛП.Загрузить(Ссылка.ПрохождениеУчастковСОЛП.Выгрузить());
	//		ЭтотОбъект.ПрохождениеУчастковСЛоцманом.Загрузить(Ссылка.ПрохождениеУчастковСЛоцманом.Выгрузить());
	//		ЭтотОбъект.Бункеровки.Загрузить(Ссылка.Бункеровки.Выгрузить());
	//		ЭтотОбъект.ПунктыСледования.Загрузить(Ссылка.ПунктыСледования.Выгрузить());
	//		
	//	КонецЕсли;
	//КонецЕсли;
	// -- rarus Камаев П.В. 20.08.2020
	
КонецПроцедуры
// -- rarus Камаев П.В. 14.07.2020

Функция ПолучитьТаблицуГрузов() Экспорт
	
	Перем СписокПричин;
	Перем СписокИД;
	Перем ТЗ,СтрБ,СтрП;
	
	// Причины, у которых возможно получение груза
	//--------------------------------------------
	СписокПричин=Новый Массив;
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.НачалоРейса);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.ФормированиеСостава);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.Маневры);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.МаневрыНаПереходе);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.Погрузка);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.Перевалка);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.ОжиданиеВыгрузки);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.ОжиданиеДогрузки);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.ОжиданиеПаузки);
	СписокПричин.Добавить(Справочники.vftТиповыеОперации.ОжиданиеПогрузки);
	
	// Строки ТЧ "Пункты" с указанными причинами
	//------------------------------------------
	СписокИД = Новый Массив;
	
	Для Каждого СтрП из Пункты Цикл
		Если СписокПричин.Найти(СтрП.ПричинаСтоянки)<>Неопределено Тогда
			СписокИД.Добавить(СтрП.ИД);
		КонецЕсли;
	КонецЦикла;
	
	// Отбираем строки из ТЧ "Баржи"
	//------------------------------
	ТЗ = Баржи.ВыгрузитьКолонки("БаржаПриход,Груз,ВесГруза,ДатаВыпускаКоносамента");
	
	Для Каждого СтрБ из Баржи Цикл
		Если СтрБ.ВесГруза<>0 и не СтрБ.ВесГрузаМетка и СписокИД.Найти(СтрБ.ИД)<>Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(),СтрБ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

// ++ rarus Камаев П.В. 14.12.2020 Задача № 25913
Функция ЗаполнитьОбщееНаименованиеГрузаИВесаГруза() Экспорт
	
	//1. Заполняем как из Дислокации
	//2. Если была догрузка, то перезаполняем по новому алгоритму
	
	//1.
	// Заполнение данных по грузам
	//----------------------------
	ТЗ = ПолучитьТаблицуГрузов();
	ТЗ.Свернуть("Груз","ВесГруза");
	ТЗ.Сортировать("Груз");

	ОбщийВесГруза= ТЗ.Итог("ВесГруза");

	//++ rarus isaeva 06.04.2021
	//выводить всегда с точностью до 3-ех знаков
	//ОбщееНаименованиеВесаГруза = Строка(ОбщийВесГруза);
	ОбщееНаименованиеВесаГруза = Строка(Формат(ОбщийВесГруза, "ЧДЦ=3"));
	//-- rarus isaeva 06.04.2021

	Если ТЗ.Количество() = 0 Тогда
		ОбщееНаименованиеГруза = "";
	ИначеЕсли ТЗ.Количество() = 1 Тогда
		ОбщееНаименованиеГруза = СокрЛП(ТЗ[0].Груз);
	Иначе
		// ++ rarus Камаев П.В. 14.12.2020 Задача № 25913 
		ОбщееНаименованиеГруза = "";
		// -- rarus Камаев П.В. 14.12.2020
		Для Каждого СтрТЗ из ТЗ Цикл
			ОбщееНаименованиеГруза = ОбщееНаименованиеГруза+?(ПустаяСтрока(ОбщееНаименованиеГруза),"",", ")+СокрЛП(СтрТЗ.Груз)+" ("+СтрТЗ.ВесГруза+")";
		КонецЦикла;
	КонецЕсли;
	
	//2.
	// Строки ТЧ "Пункты" с указанными причинами
	СписокПричинПогрузки=Новый Массив;
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.НачалоРейса);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.ФормированиеСостава);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.Маневры);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.МаневрыНаПереходе);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.Погрузка);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.Перевалка);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.ОжиданиеВыгрузки);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.ОжиданиеДогрузки);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.ОжиданиеПаузки);
	СписокПричинПогрузки.Добавить(Справочники.vftТиповыеОперации.ОжиданиеПогрузки);
	
	СписокПричинДогрузки=Новый Массив;
	СписокПричинДогрузки.Добавить(Справочники.vftТиповыеОперации.ПаузкаДогрузка);
	
	СписокИДПогрузка = Новый Массив;
	СписокИДДогрузка = Новый Массив;
	
	Для Каждого СтрП из Пункты Цикл
		Если СписокПричинПогрузки.Найти(СтрП.ПричинаСтоянки) <> Неопределено Тогда
			СписокИДПогрузка.Добавить(СтрП.ИД);
		ИначеЕсли СписокПричинДогрузки.Найти(СтрП.ПричинаСтоянки) <> Неопределено Тогда
			СписокИДДогрузка.Добавить(СтрП.ИД);			
		КонецЕсли;
	КонецЦикла;
	
	// Отбираем строки из ТЧ "Баржи"
	ТЗ = Баржи.ВыгрузитьКолонки("Груз");
	ТЗ.Колонки.Добавить("ВесГрузаПогружено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	ТЗ.Колонки.Добавить("ВесГрузаДогружено", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	
	Для Каждого СтрБ из Баржи Цикл
		Если СтрБ.ВесГруза <> 0 и НЕ СтрБ.ВесГрузаМетка Тогда
			Если СписокИДПогрузка.Найти(СтрБ.ИД) <> Неопределено Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Груз				= СтрБ.Груз;
				НоваяСтрока.ВесГрузаПогружено	= СтрБ.ВесГруза;
				
			ИначеЕсли СписокИДДогрузка.Найти(СтрБ.ИД) <> Неопределено Тогда
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Груз				= СтрБ.Груз;
				НоваяСтрока.ВесГрузаДогружено	= СтрБ.ВесГруза;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	ТЗГруз = ТЗ.Скопировать(,"Груз");
	ТЗГруз.Свернуть("Груз");
	
	ТЗВес = ТЗ.Скопировать(,"ВесГрузаПогружено, ВесГрузаДогружено");
	ТЗВес.Свернуть(,"ВесГрузаПогружено, ВесГрузаДогружено");
	
	Если ТЗВес.Итог("ВесГрузаДогружено") <> 0 Тогда
		
		ОбщееНаименованиеГруза = "";
		Для каждого Стр Из ТЗГруз Цикл
			ОбщееНаименованиеГруза = ОбщееНаименованиеГруза + ?(ЗначениеЗаполнено(ОбщееНаименованиеГруза), "/", "") + Стр.Груз;
		КонецЦикла;
		
		ОбщееНаименованиеВесаГруза = "";
		//1 итерация
		Для каждого Стр Из ТЗВес Цикл
			//++ rarus isaeva 06.04.2021
			//выводить всегда с точностью до 3-ех знаков
			//ОбщееНаименованиеВесаГруза = ОбщееНаименованиеВесаГруза + Стр.ВесГрузаПогружено + ?(ЗначениеЗаполнено(Стр.ВесГрузаДогружено), "/" + Стр.ВесГрузаДогружено, "");
			ОбщееНаименованиеВесаГруза = ОбщееНаименованиеВесаГруза + Формат(Стр.ВесГрузаПогружено, "ЧДЦ=3") + ?(ЗначениеЗаполнено(Стр.ВесГрузаДогружено), "/" +  Формат(Стр.ВесГрузаДогружено, "ЧДЦ=3"), "");
			//-- rarus isaeva 06.04.2021
	  	КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции
// -- rarus Камаев П.В. 15.12.2020

// ++ rarus Камаев П.В. 06.04.2020 Задача № 20771
//++ rarus isaeva 25.02.2020
Функция ЗаполнитьМаршрутНаСервере_НовыйАлгоритм() Экспорт
		
	
	//Строим маршрут и помещаем результат в ТЗ
	ВременныйНовыйМаршрут = Новый ТаблицаЗначений;
	ВременныйНовыйМаршрут.Колонки.Добавить("Пункт");
	ВременныйНовыйМаршрут.Колонки.Добавить("ПризнакДвиженияПоТечению");
	ВременныйНовыйМаршрут.Колонки.Добавить("Участок");
	ВременныйНовыйМаршрут.Колонки.Добавить("НС");
	ВременныйНовыйМаршрут.Колонки.Добавить("КлючСвязиГрузоперевозки");
	ВременныйНовыйМаршрут.Колонки.Добавить("КлючСвязи");
	ВременныйНовыйМаршрут.Колонки.Добавить("ТипСостава");
	ВременныйНовыйМаршрут.Колонки.Добавить("ЛимитированныйУчасток");
	ВременныйНовыйМаршрут.Колонки.Добавить("Порядок");
	
	МаршрутПостроен = РассчитатьМаршрут_НовыйАлгоритм(ВременныйНовыйМаршрут); 
	
	Если МаршрутПостроен Тогда 
		//Сравниваем Результат построения с ТЧ Маршрут по Пройденным пунктам
		РезультатСравнения = СравнитьПостроенныйИНовыйМаршруты(ВременныйНовыйМаршрут);
		Если РезультатСравнения < 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МаршрутПостроен;
	
КонецФункции

Функция РассчитатьМаршрут_НовыйАлгоритм(ВременныйНовыйМаршрут)
	ТЗПунктов = Новый ТаблицаЗначений;
	ТЗПунктов.Колонки.Добавить("ПунктОтправления");
	ТЗПунктов.Колонки.Добавить("ПунктСледования");
	ТЗПунктов.Колонки.Добавить("КлючСвязиПунктаСледования");
	ТЗПунктов.Колонки.Добавить("КлючСвязиПунктаОтправления"); 
	ТЗПунктов.Колонки.Добавить("ТипСостава");
		
	КоличествоОпорныхПунктов = ПунктыСледования.Количество();
	НомерСтроки = 1; 
	ПрошлыйТипСостава = Судно.Проект;
	
	Пока НомерСтроки < КоличествоОпорныхПунктов Цикл
		Если ПунктыСледования[НомерСтроки-1].Пункт = ПунктыСледования[НомерСтроки].Пункт Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = ТЗПунктов.Добавить();
		НоваяСтрока.ПунктОтправления = ПунктыСледования[НомерСтроки-1].Пункт;
		НоваяСтрока.ПунктСледования = ПунктыСледования[НомерСтроки].Пункт;
		//НоваяСтрока.КлючСвязиПунктаОтправления = ПунктыСледования[НомерСтроки-1].КлючСвязи;
		//НоваяСтрока.КлючСвязиПунктаСледования = ПунктыСледования[НомерСтроки].КлючСвязи;
		//Если ЗначениеЗаполнено(ПунктыСледования[НомерСтроки - 1].ТипСостава) Тогда
		//	ТипСостава = ПунктыСледования[НомерСтроки - 1].ТипСостава;
		//	ПрошлыйТипСостава = ТипСостава;
		//Иначе
		//	ТипСостава = ПрошлыйТипСостава;
		//КонецЕсли;
		//НоваяСтрока.ТипСостава = ТипСостава;
		
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	МаршрутПостроен = Истина;
	
	Для каждого СтрокаТЗ Из ТЗПунктов Цикл
		Если МаршрутПостроен Тогда
			МаршрутПостроен = ЗаполнитьМаршрут_НовыйАлгоритм(СтрокаТЗ, ВременныйНовыйМаршрут);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаршрутПостроен;
	
КонецФункции

Функция ЗаполнитьМаршрут_НовыйАлгоритм(СтрокаТЗ, ВременныйНовыйМаршрут)
	
	Обработка = Обработки.рарусПостроениеМаршрутаПоАлгоритмуДейкстры.Создать();
	Обработка.ПунктОтправления = СтрокаТЗ.ПунктОтправления;
	Обработка.ПунктСледования = СтрокаТЗ.ПунктСледования;
	Обработка.Судно = Судно;
	Обработка.Дата = Дата;
	Обработка.ТипСостава = СтрокаТЗ.ТипСостава;

	Обработка.АлгоритмПостроенияНаСервере(СтрокаТЗ.ПунктОтправления, СтрокаТЗ.ПунктСледования, Судно, СтрокаТЗ.ТипСостава, Дата);
	
	Если Обработка.ПунктыПрохождения.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Строка Из Обработка.ПунктыПрохождения Цикл
		Если ВременныйНовыйМаршрут.Количество() И Строка.Пункт = ВременныйНовыйМаршрут[ВременныйНовыйМаршрут.Количество()-1].Пункт Тогда
			Продолжить;
		КонецЕсли;
		
		НеИспользуетсяПриПостроенииМаршрута = рарусОбщегоНазначенияВызовСервера.НеИспользуетсяПриПостроенииМаршрута(Этотобъект.Судно.Проект, Строка.Пункт);
		
		Если НеИспользуетсяПриПостроенииМаршрута Тогда
			НеИспользуетсяПриПостроенииМаршрута = рарусОбщегоНазначенияВызовСервера.ПроверитьНаНаличиеПунктаВТЧПунктыСледования(Этотобъект.ПунктыСледования, Строка.Пункт);
		КонецЕсли;
			
		Если НЕ НеИспользуетсяПриПостроенииМаршрута ТОгда
			КлючСвязи = СоздатьНовыйКлючСвязи(ВременныйНовыйМаршрут);
			НовыйПункт = ВременныйНовыйМаршрут.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйПункт, Строка);
			НовыйПункт.КлючСвязи = КлючСвязи;
			Если НовыйПункт.Пункт = Обработка.ПунктОтправления Тогда
				НовыйПункт.КлючСвязиГрузоперевозки = СтрокаТЗ.КлючСвязиПунктаОтправления;		
			Иначе
				НовыйПункт.КлючСвязиГрузоперевозки = СтрокаТЗ.КлючСвязиПунктаСледования;	
			КонецЕсли;
 
			Если Этотобъект.Судно.Проект.Толкач Тогда
				Если ЗначениеЗаполнено(Обработка.ТипСостава) Тогда
					ТипСостава = Обработка.ТипСостава;
				Иначе
					ТипСостава = Обработка.Судно.Проект;
				КонецЕсли;
			КонецЕсли;
			
			НовыйПункт.ТипСостава = ТипСостава;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//Возвращает максимальное количество секций, которое может пройти на участке
Функция ПолучитьМаксКоличествоСекцийНаУчастке(ВодныйУчасток, НачальныйПункт, КонечныйПункт)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ВодныйУчасток",	ВодныйУчасток);
	Запрос.УстановитьПараметр("НачальныйПункт", НачальныйПункт);
	Запрос.УстановитьПараметр("КонечныйПункт",	КонечныйПункт);
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусЛимитированныеВодныеУчастки.ТипСостава КАК ТипСостава,
	|	МИНИМУМ(ЕСТЬNULL(рарусТипыСоставов.КоличествоНосовыхСекций, 0) + ЕСТЬNULL(рарусТипыСоставов.КоличествоКормовыхСекций, 0) - 1) КАК КоличествоСекций
	|ИЗ
	|	РегистрСведений.рарусЛимитированныеВодныеУчастки КАК рарусЛимитированныеВодныеУчастки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.рарусТипыСоставов КАК рарусТипыСоставов
	|		ПО рарусЛимитированныеВодныеУчастки.ТипСостава = рарусТипыСоставов.Ссылка
	|ГДЕ
	|	рарусЛимитированныеВодныеУчастки.ВодныйУчасток = &ВодныйУчасток
	|	И рарусЛимитированныеВодныеУчастки.НачальныйПункт = &НачальныйПункт
	|	И рарусЛимитированныеВодныеУчастки.КонечныйПункт = &КонечныйПункт
	|
	|СГРУППИРОВАТЬ ПО
	|	рарусЛимитированныеВодныеУчастки.ТипСостава";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.КоличествоСекций
	Иначе
		//ограничений нет
		Возврат 100
	КонецЕсли;
	
КонецФункции

//Возвращает количество секций типа состава
Функция ПолучитьТекущееКоличествоСекцийНаУчастке(ТипСостава)
	
	КоличествоСекций = ТипСостава.КоличествоНосовыхСекций + ТипСостава.КоличествоКормовыхСекций;
	Возврат КоличествоСекций
	
КонецФункции

//Возвращает таблицу значений количество секций типов состава
Функция ПолучитьТаблицуТипыСоставаКолСекций(ПроектТолкача)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ПроектТолкача", ПроектТолкача);
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусТипыСоставовПроектыТолкачей.Ссылка КАК ТипСостава,
	|	рарусТипыСоставовПроектыТолкачей.Ссылка.КоличествоНосовыхСекций + рарусТипыСоставовПроектыТолкачей.Ссылка.КоличествоКормовыхСекций КАК КоличествоСекций
	|ИЗ
	|	Справочник.рарусТипыСоставов.ПроектыТолкачей КАК рарусТипыСоставовПроектыТолкачей
	|ГДЕ
	|	рарусТипыСоставовПроектыТолкачей.ПроектТолкача = &ПроектТолкача";
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Возврат ТЗ
	
КонецФункции

Функция СравнитьПостроенныйИНовыйМаршруты(ВременныйНовыйМаршрут)
	
	Если ЭтотОбъект.Пункты.Количество() = 0 Тогда
		ЭтотОбъект.Пункты.Загрузить(ВременныйНовыйМаршрут);
		Возврат 0;
	Иначе
		//Сравниваем пройденные пункты
		сч = 0;
		Для каждого Строка Из ЭтотОбъект.Пункты Цикл
			Если ЗначениеЗаполнено(Строка.Приход) Тогда
				Если Строка.Пункт = ВременныйНовыйМаршрут[сч].Пункт Тогда
					сч = сч + 1;
				Иначе
					//Пункты не совпали
					НомерСтроки = сч+1;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выявлены расхождения по пройденным пунктам при построении маршрута. Номер строки в маршруте: "+ НомерСтроки+" ("+Строка.Пункт+")",,,"Объект.Пункт");
					Возврат -1;
				КонецЕсли;
				
			Иначе
				//Все пройденные пункты проверены. Считаем, что в маршруте признак Пройден устанавливается поочередно 
				ЗагрузитьНовыйМаршурутВТЧ(ВременныйНовыйМаршрут, сч);
				Возврат сч;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат -2; //Все пункты пройдены и совпали
КонецФункции

Процедура ЗагрузитьНовыйМаршурутВТЧ(ВременныйНовыйМаршрут, Знач НомерСтрокиДляНачалаЗагрузки) 

    //Удаляем все строки без признака Пройден
	КоличествоСтрокВМаршруте = ЭтотОбъект.Пункты.Количество();
	Пока КоличествоСтрокВМаршруте > НомерСтрокиДляНачалаЗагрузки Цикл
		 ЭтотОбъект.Пункты.Удалить(КоличествоСтрокВМаршруте-1);
		 КоличествоСтрокВМаршруте = КоличествоСтрокВМаршруте - 1;
	КонецЦикла;
	
	//Загружаем новые значения
	КоличествоСтрокВоВременномМаршруте = ВременныйНовыйМаршрут.Количество(); 
	
	Пока НомерСтрокиДляНачалаЗагрузки < КоличествоСтрокВоВременномМаршруте Цикл
		НоваяСтрокаМаршрута = ЭтотОбъект.Пункты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаМаршрута, ВременныйНовыйМаршрут[НомерСтрокиДляНачалаЗагрузки]);
		НомерСтрокиДляНачалаЗагрузки = НомерСтрокиДляНачалаЗагрузки + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьНовыйКлючСвязи(ТабличнаяЧасть)
	СписокЗначений = Новый СписокЗначений;
	Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        СписокЗначений.Добавить(СтрокаТЧ.КлючСвязи);
	КонецЦикла;

    Если СписокЗначений.Количество() = 0 Тогда
		КлючСвязи = 1;
	Иначе
		СписокЗначений.СортироватьПоЗначению();
		КлючСвязи = СписокЗначений.Получить(СписокЗначений.Количество() - 1).Значение + 1;
	КонецЕсли;

	Возврат КлючСвязи;		
КонецФункции
// -- rarus Камаев П.В. 06.04.2020

// ++ rarus Чернавин Г.К 06.04.2020
Процедура ПриЗаписи(Отказ)
	
	// ++ rarus Камаев П.В. 25.11.2020 Задача № 25501
	Если ОбменДанными.Загрузка И НЕ ДополнительныеСвойства.Свойство("ЭтоЗагрузкаИзДислокации") Тогда
		СформироватьЗаписиРСРегистрацияПриемаДанных(Отказ);
	КонецЕсли;
	// -- rarus Камаев П.В. 25.11.2020
	
	Если Не ПометкаУдаления И Не ДополнительныеСвойства.Свойство("ЗаписьИзРДО") И рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Судно) Тогда
		Для Каждого Строка Из Пункты Цикл       
			Если Не Строка.ПровереноМенеджером Тогда	
				МенеджерДляЗаписи = РегистрыСведений.рарусОтправленныеРейсыРДО.СоздатьМенеджерЗаписи();				
				МенеджерДляЗаписи.Рейс = Ссылка;
				МенеджерДляЗаписи.Судно = Судно;
				МенеджерДляЗаписи.ИДСтрокиРейса = Строка.ИД;
				МенеджерДляЗаписи.Отправлено = Ложь;
				МенеджерДляЗаписи.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// ++ rarus Камаев П.В. 14.04.2020 Задача № 20997
	НаборЗаписей = РегистрыСведений.рарусПрохождениеУчастковСОЛП.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	Если НЕ ПометкаУдаления Тогда
		Для Каждого Строка Из ПрохождениеУчастковСОЛП Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Строка);
			Запись.Период			= Дата;
			Запись.ПортОтправления	= ПортОтправления;
			Запись.ПортПогрузки		= ПортПогрузки;
			Запись.ПортВыгрузки		= ПортВыгрузки;
			Запись.ДатаНачала		= ДатаНачала;
			Запись.ДатаОкончание	= ДатаОкончание;
			Запись.НомерСтрокиВТЧ	= Строка.НомерСтроки;
			Запись.Судно			= Судно;
		КонецЦикла;
	КонецЕсли;
	НаборЗаписей.Записать();
	// -- rarus Камаев П.В. 14.04.2020
	
	// ++ rarus Камаев П.В. 14.07.2020 Задача № 22723
		Если ДополнительныеСвойства.Свойство("РегистрироватьИзменения") Тогда
			//ПланыОбмена.ЗарегистрироватьИзменения(ДополнительныеСвойства.Отправитель, ЭтотОбъект);	
		КонецЕсли;
		// -- rarus Камаев П.В. 14.07.2020
КонецПроцедуры
// -- rarus Чернавин Г.К 06.04.2020

// ++ rarus Камаев П.В. 25.11.2020 Задача № 25501
Процедура СформироватьЗаписиРСРегистрацияПриемаДанных(Отказ)
	УстановитьПривилегированныйРежим(Истина);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.РарусРегистрацияПриемаДанных.СоздатьНаборЗаписей();
	Набор.Отбор.Ссылка.Установить(Ссылка);
	Запись = Набор.Добавить();
	Запись.Ссылка = Ссылка;
	Запись.ДатаПриема = ТекущаяДата();
	Набор.Записать();
	
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры
// -- rarus Камаев П.В. 25.11.2020
#КонецЕсли
