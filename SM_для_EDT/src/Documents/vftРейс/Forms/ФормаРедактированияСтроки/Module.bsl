// ++ rarus Чернавин Г.К 10.03.2020
&НаСервере
Перем СтрокаПредыдущая;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Редактирование
	Заголовок = Параметры.Заголовок;
	
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
	Если Параметры.Свойство("Судно") Тогда
		Судно = Параметры.Судно;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.04.2020

	// ++ rarus Камаев П.В. 03.04.2020 20785 
	Если Параметры.Свойство("ПредыдущийПункт") Тогда
		ПредыдущийПункт = Параметры.ПредыдущийПункт;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.04.2020

	Если Параметры.Свойство("РедактированиеСтроки") Тогда
		РедактированиеСтроки = Истина;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ТекущиеДанные);	
		Для Каждого СтрокаТаблицаППС Из Параметры.ТаблицаППС Цикл
			НоваяСтрока = ППС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаППС);
		КонецЦикла;
		Для Каждого СтрокаТаблицаБаржи Из Параметры.ТаблицаБаржи Цикл
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаБаржи);
		КонецЦикла;
	ИначеЕсли Параметры.Свойство("ДобавлениеСтроки") Тогда
		ДобавлениеСтроки = Истина;
	ИначеЕсли Параметры.Свойство("ВставкаСтроки") Тогда
		ВставкаСтроки = Истина;
		ИндексНовойСтроки = Параметры.ИндексНовойСтроки;
	ИначеЕсли Параметры.Свойство("КопированиеСтроки") Тогда
		КопированиеСтроки = Истина;
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры.ТекущиеДанные);
		Для Каждого СтрокаТаблицаППС Из Параметры.ТаблицаППС Цикл
			НоваяСтрока = ППС.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаППС);
		КонецЦикла;
		Для Каждого СтрокаТаблицаБаржи Из Параметры.ТаблицаБаржи Цикл
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицаБаржи);
		КонецЦикла;
		// ++ rarus Камаев П.В. 09.04.2020 20785 
		ПроверкаВыранногоЗначенияПройдена = ПроверитьВыбранноеЗначение(Пункт);
		Если НЕ ПроверкаВыранногоЗначенияПройдена 
			И рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Судно) 
			И рарусОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("рарусИспользоватьКонтрольВыбораПунктов") = Истина Тогда
			Пункт = Справочники.vftПунктыСледования.ПустаяСсылка();
			ХодовоеВремяПлан				= 0;
			ХодовоеВремяПлан_Представление 	= рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП(ХодовоеВремяПлан);
			РасстояниеПлан					= 0;
		КонецЕсли;
		// -- rarus Камаев П.В. 09.04.2020
	КонецЕсли;
	
	Если Параметры.Свойство("ЭтоБуксир") Тогда
		ЭтоБуксир = Параметры.ЭтоБуксир;
		Если Не ЭтоБуксир Тогда
			Элементы.МаневрыВПункте.Видимость=Ложь;
		КонецЕсли;
		Элементы.ГруппаШапкаНиз.Заголовок = ?(ЭтоБуксир,"Баржи","Грузы");
	КонецЕсли;
		
	Если Параметры.Свойство("АдресПредыдущейСтроки") Тогда
		АдресПредыдущейСтроки = Параметры.АдресПредыдущейСтроки;
		СтрокаПредыдущая		= ПолучитьИзВременногоХранилища(Параметры.АдресПредыдущейСтроки);	
		СтрокаПредыдущаяОтход	= СтрокаПредыдущая.Отход;
	КонецЕсли;
			
	Если Не РедактированиеСтроки Тогда
		Если СтрокаПредыдущая = Неопределено Тогда
			ПричинаСтоянки = Справочники.vftТиповыеОперации.НачалоРейса;
			Пункт = Параметры.ПортОтправления;
		Иначе
			 //Если было выбрано копирование данных
			//-------------------------------------
			ЗаполнитьТЗИзПредыдущейСтроки();
			
			 //Установка реквизита "ГруженыйРейс"
			//-----------------------------------
			Если СтрокаПредыдущая.ПричинаСтоянки = Справочники.vftТиповыеОперации.Погрузка Тогда
				ГруженыйРейс = Истина;
			ИначеЕсли СтрокаПредыдущая.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Тогда
				ГруженыйРейс = Ложь;
			ИначеЕсли СтрокаПредыдущая.ГруженыйРейс Тогда
				ГруженыйРейс = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.Свойство("ТолькоПросмотр", ТолькоПросмотр);
	
	ТекПричинаСтоянки = ПричинаСтоянки;
	НастройкаВидаФормы();
	
	УстановитьУсловноеОФормление();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТЗПриПолученииДанных();
	РасчитатьПредставлениеВремени();
	ПронумероватьСтрокиТЧ();
	Если ТипЗнч(Пункт) = Тип("Строка") Тогда
		ПунктСтрокой = Истина;
		Элементы.Пункт.ОграничениеТипа = РарусОбщегоНазначенияКлиент.ПолучитьОписаниеТиповСтроки(80);
		Элементы.ПунктСтрокой.Видимость = Истина;
	Иначе
		Элементы.Пункт.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.vftПунктыСледования");
	КонецЕсли;
	ПредставлениеПричиныСтоянки();
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементов


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ТЗБаржаПриходНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	//Отбор = Новый Структура;
	////Отбор.Вставить("Отбор", Новый Структура("Партнер, Организация", Объект.Исполнитель, Объект.Организация));
	//Форма = ОткрытьФорму("Справочник.vftСуда.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//Форма.Список,
	//"Проект.ТипХода",
	//1,
	//ВидСравненияКомпоновкиДанных.Равно
	//,, 
	//Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	//

	Поле = "ТЗБаржаПриход";
	НачалоВыбораСудна(Поле);	
	// -- rarus Камаев П.В. 26.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьСтрокуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	ПереносПричинСтоянки = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПереносПричинСтоянки = Истина;	
	КонецЕсли;
	
	
	ПараметрыЗакрытия = Новый Структура;
	
	// Формирование представления прочих причин стоянки
	//-------------------------------------------------
	
	Если ПереносПричинСтоянки Тогда
		МассивСтрокПереноса = Новый Массив;
		МассивСтрокУдаления = Новый Массив;
		Для Каждого Строка Из ППС Цикл
			СтруктураСтрокиППС = Новый Структура("ИД,ПричинаСтоянки,НачДата,КонДата,ВремяСтоянки,Комментарий,Аналитика");
			Если Строка.КонДата > Отход Тогда
				Если Строка.НачДата > Отход Тогда
					МассивСтрокУдаления.Добавить(Строка);
					ЗаполнитьЗначенияСвойств(СтруктураСтрокиППС, Строка);
					МассивСтрокПереноса.Добавить(СтруктураСтрокиППС);				
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураСтрокиППС, Строка);
					Строка.КонДата = Отход;
					СтруктураСтрокиППС.НачДата = Отход;
					МассивСтрокПереноса.Добавить(СтруктураСтрокиППС);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ПараметрыЗакрытия.Вставить("ТаблицаПереноса", МассивСтрокПереноса);	
		
		Для Каждого Строка Из МассивСтрокУдаления Цикл
			ППС.Удалить(Строка);
		КонецЦикла;
		РасчитатьПредставлениеВремени();
	КонецЕсли;

	ПредставлениеПрочихПричинСтоянки="";
	Для Каждого Стр из ППС Цикл
		ПредставлениеПрочихПричинСтоянки = ПредставлениеПрочихПричинСтоянки + Стр.ПричинаСтоянки+" - " + РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(Стр.ВремяСтоянки,0) + Символы.ПС;
	КонецЦикла;
	
	Если МаневрыВПункте <> 0 Тогда
		ПредставлениеПрочихПричинСтоянки = ПредставлениеПрочихПричинСтоянки + ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Маневры") + " - " + РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(МаневрыВПункте,0);
	КонецЕсли;
	ПредставлениеПрочихПричинСтоянки = СокрЛП(ПредставлениеПрочихПричинСтоянки);
	// Формирование представления причины стоянки
	//-------------------------------------------
	ПредставлениеПричиныСтоянки="";
	
	Если ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаВыгрузка") Тогда
		ПредставлениеПричиныСтоянки="Паузка: "+Формат(ТЗ.Итог("ВесГруза"),"ЧН=; ЧГ=0");
		
	ИначеЕсли ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаДогрузка") Тогда
		ПредставлениеПричиныСтоянки = "Догрузка: "+Формат(ТЗ.Итог("ВесГруза"),"ЧН=; ЧГ=0");		
		
	ИначеЕсли ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Погрузка") или
		ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Выгрузка") или
		ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Перевалка") Тогда
		СформироватьПредставлениеПричиныСтоянки_ПогрузкаВыгрузка();
		СформироватьПредставлениеПричиныСтоянки_Маневры();		
		
	ИначеЕсли МанервыИлиОжидание(ПричинаСтоянки) Тогда
		СформироватьПредставлениеПричиныСтоянки_Маневры();		
	КонецЕсли;
	
	
	//++ rarus isaeva 14.11.2020
	//ПараметрыТекущаяСтрока = Новый Структура("ИД,Пункт,ПунктКомментарий,Приход,Отход,
	//|ХодовоеВремя,ХодовоеВремяНаСтоянке,ХодовоеВремяПлан,МаневрыВПункте,ГруженыйРейс,ВремяСтоянки,ПричинаСтоянки,ПредставлениеПричиныСтоянки
	//|,ПредставлениеПрочихПричинСтоянки,РасстояниеПлан,РасстояниеФакт,Примечание,Аналитика,Координаты");
	
	СформироватьКоординатыСтрокой();

	ПараметрыТекущаяСтрока = Новый Структура("ИД,Пункт,ПунктКомментарий,Приход,Отход,
	|ХодовоеВремя,ХодовоеВремяНаСтоянке,ХодовоеВремяПлан,МаневрыВПункте,ГруженыйРейс,ВремяСтоянки,ПричинаСтоянки,ПредставлениеПричиныСтоянки
	|,ПредставлениеПрочихПричинСтоянки,РасстояниеПлан,РасстояниеФакт,Примечание,Аналитика,Координаты, КоординатыN, КоординатыE, ПараметрNS, ПараметрWE");
	//-- rarus isaeva 14.11.2020

	ЗаполнитьЗначенияСвойств(ПараметрыТекущаяСтрока, ЭтаФорма);
	ПараметрыЗакрытия.Вставить("ПараметрыТекущаяСтрока", ПараметрыТекущаяСтрока);
	Если РедактированиеСтроки Тогда
		ПараметрыЗакрытия.Вставить("РедактированиеСтроки", Истина);
	ИначеЕсли ДобавлениеСтроки Тогда
		ПараметрыЗакрытия.Вставить("ДобавлениеСтроки", Истина);
	ИначеЕсли ВставкаСтроки Тогда
		ПараметрыЗакрытия.Вставить("ВставкаСтроки", Истина);	
		ПараметрыЗакрытия.Вставить("ИндексНовойСтроки", ИндексНовойСтроки);
	ИначеЕсли КопированиеСтроки Тогда
		ПараметрыЗакрытия.Вставить("КопированиеСтроки", Истина);
	КонецЕсли;
	
	ПараметрыЗакрытия.Вставить("Модифицированность", Модифицированность);
	ПараметрыЗакрытия.Вставить("ТаблицаППС", ППС.НайтиСтроки(Новый Структура));
	ПараметрыЗакрытия.Вставить("ТаблицаБаржи", ТЗ.НайтиСтроки(Новый Структура));	
		
	Закрыть(ПараметрыЗакрытия);		
	
КонецПроцедуры
&НаКлиенте
Процедура ЗаписатьСтроку(Команда)
	//№21773 убрать перенос стоянок
	//ЗадатьВопрос = Ложь;
	//Для Каждого Строка Из ППС Цикл
	//	Если Строка.КонДата > Отход Тогда
	//		ЗадатьВопрос = Истина;
	//	КонецЕсли;
	//КонецЦикла;
	
	//Если ЗадатьВопрос Тогда
	//	Оповещение = Новый ОписаниеОповещения("ЗаписатьСтрокуЗавершение", ЭтотОбъект);
	//	ПоказатьВопрос(Оповещение, НСтр("ru = 'Время дополнительной стоянки превышает время основной стоянки! Перенести время превышения в следующую строку?'"),РежимДиалогаВопрос.ДаНетОтмена,,,НСтр("ru = 'Перенос времени прочих причин стоянки'"));
	//Иначе
		ЗаписатьСтрокуЗавершение(КодВозвратаДиалога.Нет, Неопределено);	
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзПредыдущейСтроки(Команда)
	ЗаполнитьТЗИзПредыдущейСтроки();
	// ++ rarus Камаев П.В. 07.10.2020 Задача № 24609 
	Для каждого Строка Из ТЗ Цикл
		РассчитатьКоличествоВТЧБаржи(Строка);
	КонецЦикла;
	// -- rarus Камаев П.В. 07.10.2020
КонецПроцедуры


&НаКлиенте
Процедура ОчиститьТЗ(Команда)
	Если ТЗ.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВопрос = Новый ОписаниеОповещения("ВопросОчиститьТЗЗавершение", ЭтотОбъект);
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Очистить таблицу %1? Вы уверены?'"), ?(ЭтоБуксир,"барж","грузов"));
	ПоказатьВопрос(ОповещениеВопрос, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,"Внимание!");
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтроки = ТекущиеДанные.НомерСтроки - 1;
	Если ИндексСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	ППС.Сдвинуть(ИндексСтроки, -1);
	ПронумероватьСтрокиТЧ();	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтроки = ТекущиеДанные.НомерСтроки - 1;
	Если ИндексСтроки = ППС.Количество()-1 Тогда
		Возврат;
	КонецЕсли;
	ППС.Сдвинуть(ИндексСтроки, 1);
	ПронумероватьСтрокиТЧ();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВопросОчиститьТЗЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТЗ.Очистить();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура РасчитатьПредставлениеВремени()
	

	ППСВремяСтоянкиВсего = 0;
	ВремяСтоянки = рарусОбщегоНазначенияКлиент.РазницаДат(Приход, Отход);
	Для Каждого Строка Из ППС Цикл
		Строка.ВремяСтоянки = рарусОбщегоНазначенияКлиент.РазницаДат(Строка.НачДата,Строка.КонДата);
		Строка.ВремяСтоянки_Представление = рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(Строка.ВремяСтоянки,0);
		ППСВремяСтоянкиВсего = ППСВремяСтоянкиВсего + Строка.ВремяСтоянки;
	КонецЦикла;
	Элементы.ППСВремяСтоянки_Представление.ТекстПодвала = рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(ППСВремяСтоянкиВсего);
	
	ХодовоеВремя_Представление =			рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ХодовоеВремя);
	ВремяСтоянки_Представление =			рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ВремяСтоянки);
	ХодовоеВремяНаСтоянке_Представление =	рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ХодовоеВремяНаСтоянке);
	ХодовоеВремяПлан_Представление =	рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ХодовоеВремяПлан);
	МаневрыВПункте_Представление =			рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(МаневрыВПункте);
КонецПроцедуры

&НаКлиенте
Процедура ПриходНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Приход, "Приход");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок="Дата прихода";
КонецПроцедуры

&НаКлиенте
Процедура ОтходНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Отход, "Отход");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок="Дата отхода";
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатыЗавершение(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗакрытия <> Неопределено И ПараметрыЗакрытия.Свойство("ИмяЭлемента") Тогда
		Если ПараметрыЗакрытия.ИмяЭлемента = "Приход" Тогда
			Приход = ПараметрыЗакрытия.Результат;
			ПриходПриИзменении(Элементы.Приход);
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "Отход" Тогда
			Отход = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ППСНачДата" Тогда
			ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
			ТекущиеДанные.НачДата = ПараметрыЗакрытия.Результат;
			ППСНачДатаПриИзменении(Элементы.ППСНачДата);
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ППСКонДата" Тогда
			ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
			ТекущиеДанные.КонДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ДатаПодачиНотиса" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ДатаПодачиНотиса = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "НачалоОперации" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.НачалоОперации = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "КонецОперации" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ОкончаниеОперации = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "НачалоОперации2" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.НачалоОперации2 = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "КонецОперации2" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ОкончаниеОперации2 = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ДокументыНаБортуНачДата" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ДокументыНаБортуНачДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ДокументыНаБортуКонДата" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ДокументыНаБортуКонДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ДатаПриемаСекции" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ДатаПриемаСекции = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ДатаПередачиСекции" Тогда
			ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
			ТекущиеДанные.ДатаПередачиСекции = ПараметрыЗакрытия.Результат;
		КонецЕсли;
	КонецЕсли;
	РасчитатьПредставлениеВремени();
КонецПроцедуры

&НаКлиенте
Процедура ПриходПриИзменении(Элемент)
	
	// ++ rarus Камаев П.В. 25.12.2020 Задача № 26209
	Если ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.НачалоРейса") Или
		ПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПромежуточныйПункт") Или
		Отход = Дата(1,1,1) Или	Отход < Приход Тогда
		
		Отход = Приход;
	КонецЕсли;
	// -- rarus Камаев П.В. 25.12.2020
	
	ХодовоеВремя = ?(Не ЗначениеЗаполнено(СтрокаПредыдущаяОтход), 0, РарусОбщегоНазначенияКлиент.РазницаДат(СтрокаПредыдущаяОтход, Приход));
	РасчитатьПредставлениеВремени();
	
КонецПроцедуры

&НаКлиенте
Процедура ППСНачДатаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	
	Если ТекущиеДанные.КонДата = Дата(1,1,1) Тогда
		ТекущиеДанные.КонДата = ТекущиеДанные.НачДата;
	КонецЕсли;
	
	ПроверкаППСНачДата();	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаППСНачДата()
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	Если ТекущиеДанные.НачДата < Приход Тогда
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'В строке № %1 прочих причин стоянок, дата начала меньше даты прихода!'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ТекущиеДанные.НомерСтроки);
		Сообщение.Текст = ТекстСообщения;
		ПолеСообщения = "ППС[%1].НачДата";
		ПолеСообщения = СтрЗаменить(ПолеСообщения, "%1", ТекущиеДанные.НомерСтроки-1);
		Сообщение.Поле = ПолеСообщения;
		Сообщение.Сообщить();	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ППСНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", ТекущиеДанные.НачДата, "ППСНачДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок="Начало стоянки";
КонецПроцедуры

&НаКлиенте
Процедура ППСКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", ТекущиеДанные.КонДата, "ППСКонДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок="Окончание стоянки";
КонецПроцедуры

&НаКлиенте
Процедура ППСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПронумероватьСтрокиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ППСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Или Копирование Тогда
		ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
		ТекущиеДанные.НомерСтроки = ППС.Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ППСПослеУдаления(Элемент)
	ПронумероватьСтрокиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ТЗПослеУдаления(Элемент)
	ПронумероватьСтрокиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ТЗПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТЗ.ТекущиеДанные;
	Если НоваяСтрока Или Копирование Тогда
		ТекущиеДанные.НомерСтроки = ТЗ.Количество();
	КонецЕсли;
	Если ТекущиеДанные.БаржаПриход = Неопределено Тогда
		ТекущиеДанные.БаржаПриход = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка");
	КонецЕсли;
	Если ТекущиеДанные.СудноПередавшее = Неопределено Тогда
		ТекущиеДанные.СудноПередавшее = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка");
	КонецЕсли;
	Если ТекущиеДанные.СудноПринявшее = Неопределено Тогда
		ТекущиеДанные.СудноПринявшее = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтходПриИзменении(Элемент)
	РасчитатьПредставлениеВремени();
КонецПроцедуры

&НаСервере
Процедура НастройкаВидаФормы()
		
	// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247 
	ЭтоСудноННФ =  рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Судно);
	// -- rarus Камаев П.В. 11.11.2020
	
	// Настройки по причине простоя
	//-----------------------------
	// ++ rarus Камаев П.В. 28.04.2020 Задача № 21293 
	Элементы.ТЗВесГрузаВыгружено.Видимость=			Ложь;
	// -- rarus Камаев П.В. 28.04.2020
	Если ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка Тогда
		Элементы.ТЗ.ТолькоПросмотр=						Ложь;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				ЭтоБуксир;
		Элементы.ТЗСудноПередавшее.Видимость=			ЭтоБуксир;
		Элементы.ТЗСудноПринявшее.Видимость=			ЭтоБуксир;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Ложь;
		Элементы.ТЗДатаПриемаСекции.Видимость=			ЭтоБуксир;
		Элементы.ТЗДатаПередачиСекции.Видимость=		ЭтоБуксир;
		Элементы.ТЗВесГруза.Видимость=					Истина;
		// ++ rarus Камаев П.В. 28.04.2020 Задача № 21293 
		Элементы.ТЗВесГрузаВыгружено.Видимость=			Истина;
		// -- rarus Камаев П.В. 28.04.2020
		Элементы.ТЗВесГрузаМетка.Видимость=				ЭтоБуксир;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Ложь;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Ложь;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Истина;
		Элементы.ТЗДатаПодачиНотиса.Видимость=			Истина;
		Элементы.ТЗНачалоОперации.Видимость=			Истина;
		Элементы.ТЗОкончаниеОперации.Видимость=			Истина;
		Элементы.ТЗНачалоОперации2.Видимость=			Истина;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Истина;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	Истина;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	Истина;
		
		Элементы.ТЗСудноПередавшее.Заголовок=			"Судно, передавшее секцию";
		Элементы.ТЗСудноПринявшее.Заголовок=			"Судно, принявшее секцию";
		Элементы.ТЗВесГруза.Заголовок=					"Погружено, т";
		Элементы.ТЗНачалоОперации.Заголовок=			"Начало"+Символы.ПС+"погрузки";
		Элементы.ТЗОкончаниеОперации.Заголовок=			"Окончание погрузки";
		Элементы.ТЗНачалоОперации2.Заголовок=			"Начало"+Символы.ПС+"выгрузки";
		Элементы.ТЗОкончаниеОперации2.Заголовок=		"Окончание выгрузки";
		
	ИначеЕсли ПричинаСтоянки = Справочники.vftТиповыеОперации.Погрузка Тогда
		Элементы.ТЗ.ТолькоПросмотр=						Ложь;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				ЭтоБуксир;
		Элементы.ТЗСудноПередавшее.Видимость=			ЭтоБуксир;
		Элементы.ТЗСудноПринявшее.Видимость=			ЭтоБуксир;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Ложь;
		Элементы.ТЗДатаПриемаСекции.Видимость=			ЭтоБуксир;
		Элементы.ТЗДатаПередачиСекции.Видимость=		ЭтоБуксир;
		Элементы.ТЗВесГруза.Видимость=					Истина;
		Элементы.ТЗВесГрузаМетка.Видимость=				ЭтоБуксир;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Ложь;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Ложь;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Истина;
		
		// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247 
		Элементы.ТЗДатаПодачиНотиса.Видимость=			НЕ ЭтоСудноННФ;
		Элементы.ТЗНачалоОперации.Видимость=			НЕ ЭтоСудноННФ;
		Элементы.ТЗОкончаниеОперации.Видимость=			НЕ ЭтоСудноННФ;
		Элементы.ТЗНачалоОперации2.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Ложь;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	НЕ ЭтоСудноННФ;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	НЕ ЭтоСудноННФ;
		// -- rarus Камаев П.В. 11.11.2020
		
		Элементы.ТЗСудноПередавшее.Заголовок=			"Судно, передавшее секцию";
		Элементы.ТЗСудноПринявшее.Заголовок=			"Судно, принявшее секцию";
		Элементы.ТЗВесГруза.Заголовок=					"Погружено, т";
		Элементы.ТЗНачалоОперации.Заголовок=			"Начало"+Символы.ПС+"погрузки";
		Элементы.ТЗОкончаниеОперации.Заголовок=			"Окончание погрузки";
					
	ИначеЕсли ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Тогда
		Элементы.ТЗ.ТолькоПросмотр=						Ложь;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				ЭтоБуксир;
		Элементы.ТЗСудноПередавшее.Видимость=			ЭтоБуксир;
		Элементы.ТЗСудноПринявшее.Видимость=			ЭтоБуксир;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Ложь;
		Элементы.ТЗДатаПриемаСекции.Видимость=			ЭтоБуксир;
		Элементы.ТЗДатаПередачиСекции.Видимость=		ЭтоБуксир;
		Элементы.ТЗВесГруза.Видимость=					Истина;
		Элементы.ТЗВесГрузаМетка.Видимость=				Ложь;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Ложь;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Ложь;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Ложь;
		
		// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247 
		Элементы.ТЗДатаПодачиНотиса.Видимость=			НЕ ЭтоСудноННФ;
		Элементы.ТЗНачалоОперации.Видимость=			НЕ ЭтоСудноННФ;
		Элементы.ТЗОкончаниеОперации.Видимость=			НЕ ЭтоСудноННФ;
		Элементы.ТЗНачалоОперации2.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Ложь;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	НЕ ЭтоСудноННФ;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	НЕ ЭтоСудноННФ;
		// -- rarus Камаев П.В. 11.11.2020
		                                            	
		Элементы.ТЗСудноПередавшее.Заголовок=			"Судно, передавшее секцию";
		Элементы.ТЗСудноПринявшее.Заголовок=			"Судно, принявшее секцию";
		Элементы.ТЗВесГруза.Заголовок=					"Выгружено, т";
		Элементы.ТЗНачалоОперации.Заголовок=			"Начало"+Символы.ПС+"выгрузки";
		Элементы.ТЗОкончаниеОперации.Заголовок=			"Окончание выгрузки";
		
	ИначеЕсли ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
		Элементы.ТЗ.ТолькоПросмотр=						Ложь;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				Ложь;
		Элементы.ТЗСудноПередавшее.Видимость=			Истина;
		Элементы.ТЗСудноПринявшее.Видимость=			Истина;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Истина;
		Элементы.ТЗДатаПриемаСекции.Видимость=			Ложь;
		Элементы.ТЗДатаПередачиСекции.Видимость=		Ложь;
		Элементы.ТЗВесГруза.Видимость=					Истина;
		Элементы.ТЗВесГрузаМетка.Видимость=				Ложь;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Истина;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Истина;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Ложь;
		Элементы.ТЗДатаПодачиНотиса.Видимость=			Ложь;
		Элементы.ТЗНачалоОперации.Видимость=			Истина;
		Элементы.ТЗОкончаниеОперации.Видимость=			Истина;
		Элементы.ТЗНачалоОперации2.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Ложь;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	Ложь;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	Ложь;
		
		Элементы.ТЗВесГруза.Заголовок=					"Выгружено, т";
		Элементы.ТЗСудноПередавшее.Заголовок=			"Судно, производившее выгрузку";
		Элементы.ТЗСудноПринявшее.Заголовок=			"Судно, принявшее груз";
		Элементы.ТЗГруппа11.Заголовок=					"Итого кол-во груза в прин. секции, т";
		//Элементы.ТЗИтогоКолПринСекция.Заголовок=		"Итого кол-во груза в прин. секции, т";
		Элементы.ТЗНачалоОперации.Заголовок=			"Начало"+Символы.ПС+"паузки";
		Элементы.ТЗОкончаниеОперации.Заголовок=			"Окончание"+Символы.ПС+"паузки";
		
	ИначеЕсли ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		Элементы.ТЗ.ТолькоПросмотр=						Ложь;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				Ложь;
		Элементы.ТЗСудноПередавшее.Видимость=			Истина;
		Элементы.ТЗСудноПринявшее.Видимость=			Истина;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Истина;
		Элементы.ТЗДатаПриемаСекции.Видимость=			Ложь;
		Элементы.ТЗДатаПередачиСекции.Видимость=		Ложь;
		Элементы.ТЗВесГруза.Видимость=					Истина;
		Элементы.ТЗВесГрузаМетка.Видимость=				Ложь;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Истина;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Истина;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Ложь;
		Элементы.ТЗДатаПодачиНотиса.Видимость=			Ложь;
		Элементы.ТЗНачалоОперации.Видимость=			Истина;
		Элементы.ТЗОкончаниеОперации.Видимость=			Истина;
		Элементы.ТЗНачалоОперации2.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Ложь;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	Ложь;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	Ложь;
		
		Элементы.ТЗВесГруза.Заголовок=					"Догружено, т";
		Элементы.ТЗСудноПередавшее.Заголовок=			"Судно, производившее догрузку";
		Элементы.ТЗСудноПринявшее.Заголовок=			"Судно, передавшее груз";
		Элементы.ТЗГруппа11.Заголовок=					"Итого кол-во груза в перед. секции, т";
		//Элементы.ТЗИтогоКолПринСекция.Заголовок=		"Итого кол-во груза в перед. секции, т";
		Элементы.ТЗНачалоОперации.Заголовок=			"Начало"+Символы.ПС+"догрузки";
		Элементы.ТЗОкончаниеОперации.Заголовок=			"Окончание"+Символы.ПС+"догрузки";
		
	ИначеЕсли ЭтоБуксир и Справочники.vftТиповыеОперации.МанервыИлиОжидание(ПричинаСтоянки) Тогда
		Элементы.ТЗ.ТолькоПросмотр =					Ложь;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				Истина;
		Элементы.ТЗСудноПередавшее.Видимость=			Истина;
		Элементы.ТЗСудноПринявшее.Видимость=			Истина;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Ложь;
		Элементы.ТЗДатаПриемаСекции.Видимость=			Истина;
		Элементы.ТЗДатаПередачиСекции.Видимость=		Истина;
		Элементы.ТЗВесГруза.Видимость=					Истина;
		Элементы.ТЗВесГрузаМетка.Видимость=				Истина;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Ложь;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Ложь;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Истина;
		Элементы.ТЗДатаПодачиНотиса.Видимость=			Ложь;
		Элементы.ТЗНачалоОперации.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации.Видимость=			Ложь;
		Элементы.ТЗНачалоОперации2.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Ложь;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	Ложь;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	Ложь;
		
		Элементы.ТЗВесГруза.Заголовок=					"Принято, т";
		Элементы.ТЗСудноПередавшее.Заголовок=			"Судно, передавщее секцию";
		Элементы.ТЗСудноПринявшее.Заголовок=			"Судно, принявшее секцию";
		
	Иначе
		Элементы.ТЗ.ТолькоПросмотр =					Истина;
		Элементы.ТЗБаржаПриход.Видимость=				ЭтоБуксир;
		Элементы.ТЗБаржаОперация.Видимость=				Ложь;
		Элементы.ТЗСудноПередавшее.Видимость=			Ложь;
		Элементы.ТЗСудноПринявшее.Видимость=			Ложь;
		Элементы.ТЗПаузкаНачальныйВесГруза.Видимость=	Ложь;
		Элементы.ТЗДатаПриемаСекции.Видимость=			Ложь;
		Элементы.ТЗДатаПередачиСекции.Видимость=		Ложь;
		Элементы.ТЗВесГруза.Видимость=					Ложь;
		Элементы.ТЗВесГрузаМетка.Видимость=				Ложь;
		Элементы.ТЗИтогоКолТекСекция.Видимость=			Ложь;
		Элементы.ТЗИтогоКолПринСекция.Видимость=		Ложь;
		Элементы.ТЗДатаВыпускаКоносамента.Видимость=	Ложь;
		Элементы.ТЗДатаПодачиНотиса.Видимость=			Ложь;
		Элементы.ТЗНачалоОперации.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации.Видимость=			Ложь;
		Элементы.ТЗНачалоОперации2.Видимость=			Ложь;
		Элементы.ТЗОкончаниеОперации2.Видимость=		Ложь;
		Элементы.ТЗДокументыНаБортуНачДата.Видимость=	Ложь;
		Элементы.ТЗДокументыНаБортуКонДата.Видимость=	Ложь;
	КонецЕсли;
	ВесГрузаВидимость = Элементы.ТЗВесГруза.Видимость;
	БаржаОперацияВидимость = Элементы.ТЗБаржаОперация.Видимость;
	
	// ++ rarus Чернавин Г.К 09.04.2020
	Элементы.ДислокацияОсобая.Видимость = ЭтоСудноННФ;
	//++ rarus isaeva 14.11.2020
	//Если ЭтоСудноННФ И ЗначениеЗаполнено(Координаты) Тогда
	Если ЭтоСудноННФ И (ЗначениеЗаполнено(КоординатыN) ИЛИ ЗначениеЗаполнено(КоординатыE)) Тогда
	//-- rarus isaeva 14.11.2020

		ДислокацияОсобая = Истина;
		//++ rarus isaeva 14.11.2020
		//Элементы.Координаты.Видимость = Истина;
		Элементы.ГруппаКоординаты.Видимость = Истина;
		//-- rarus isaeva 14.11.2020
	КонецЕсли;
	// -- rarus Чернавин Г.К 09.04.2020
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
	Элементы.Группа4.Видимость = ЭтоСудноННФ;
	// -- rarus Камаев П.В. 03.04.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ДислокацияОсобаяПриИзменении(Элемент)
	//++ rarus isaeva 14.11.2020
	//Элементы.Координаты.Видимость = ДислокацияОсобая;
	Элементы.ГруппаКоординаты.Видимость = ДислокацияОсобая;
	//-- rarus isaeva 14.11.2020

КонецПроцедуры


&НаСервере
Процедура ЗаполнитьТЗИзПредыдущейСтроки()
	
	Если Не ЗначениеЗаполнено(АдресПредыдущейСтроки) Тогда
		Возврат;
	КонецЕсли;
	СтрокаПредыдущая = ПолучитьИзВременногоХранилища(АдресПредыдущейСтроки);
	Если ЭтоБуксир Тогда
		СтруктураПоиска=Новый Структура("БаржаПриход");
	Иначе
		СтруктураПоиска=Новый Структура("Груз");
	КонецЕсли;
	
	Для Каждого Эл из СтрокаПредыдущая.Баржи Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Эл);
		НайденныеСтроки=ТЗ.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество()=0 Тогда
			ЗаполнитьЗначенияСвойств(ТЗ.Добавить(),Эл);
		Иначе
			ЗаполнитьЗначенияСвойств(НайденныеСтроки[0],Эл,"Груз,НачальныйВесГруза");
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры


&НаКлиенте
Процедура ПричинаСтоянкиПриИзменении(Элемент)
	ПричинаСтоянкиПриИзмененииСервер();
	ТекПричинаСтоянки = ПричинаСтоянки;
	ПредставлениеПричиныСтоянки();
КонецПроцедуры

&НаСервере
Процедура ПричинаСтоянкиПриИзмененииСервер()
	Если Не (Справочники.vftТиповыеОперации.МанервыИлиОжидание(ТекПричинаСтоянки) и Справочники.vftТиповыеОперации.МанервыИлиОжидание(ПричинаСтоянки)) Тогда
		ТЗ.Очистить();
		ЗаполнитьТЗИзПредыдущейСтроки();
		НастройкаВидаФормы();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ХодовоеВремяНаСтоянкеПриИзменении(Элемент)
	
	ХодовоеВремяНаСтоянке = РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ПЗ(ХодовоеВремяНаСтоянке_Представление);
	ХодовоеВремяНаСтоянке_Представление = РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ХодовоеВремяНаСтоянке);
	
КонецПроцедуры

&НаКлиенте
Процедура МаневрыВПунктеПриИзменении(Элемент)
	
	МаневрыВПункте = РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ПЗ(МаневрыВПункте_Представление);
	МаневрыВПункте_Представление = РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(МаневрыВПункте);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеПричиныСтоянки_ПогрузкаВыгрузка()
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Если СтрТЗ.ВесГруза=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(ПредставлениеПричиныСтоянки) Тогда
			ПредставлениеПричиныСтоянки = "" + ПричинаСтоянки+ ": ";
		КонецЕсли;
		
		ПредставлениеПричиныСтоянки = ПредставлениеПричиныСтоянки + СтрТЗ.БаржаПриход+" / "+СтрТЗ.Груз+" / "+Формат(СтрТЗ.ВесГруза,"ЧН=; ЧГ=0")+", ";
	КонецЦикла;
	
	Если Не ПустаяСтрока(ПредставлениеПричиныСтоянки) Тогда
		ПредставлениеПричиныСтоянки = Лев(ПредставлениеПричиныСтоянки,СтрДлина(ПредставлениеПричиныСтоянки)-2)+".";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПредставлениеПричиныСтоянки_Маневры()
	
	// Имеет смысл только для буксиров
	//--------------------------------
	Если Не ЭтоБуксир Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Если СтрТЗ.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Прием") или СтрТЗ.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.ПриемПередача") Тогда
			ПредставлениеПричиныСтоянки=ПредставлениеПричиныСтоянки+?(ПустаяСтрока(ПредставлениеПричиныСтоянки),"",Символы.ПС)+"Прием "+СтрТЗ.БаржаПриход+?(Не ЗначениеЗаполнено(СтрТЗ.СудноПередавшее),""," от "+СтрТЗ.СудноПередавшее)+".";
		КонецЕсли;
		
		Если СтрТЗ.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Передача") или СтрТЗ.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.ПриемПередача") Тогда
			ПредставлениеПричиныСтоянки=ПредставлениеПричиныСтоянки+?(ПустаяСтрока(ПредставлениеПричиныСтоянки),"",Символы.ПС)+"Передача "+СтрТЗ.БаржаПриход+?(Не ЗначениеЗаполнено(СтрТЗ.СудноПринявшее),""," судну "+СтрТЗ.СудноПринявшее)+".";
		КонецЕсли;
		
		Если СтрТЗ.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.ОжиданиеБуксира") Тогда
			ПредставлениеПричиныСтоянки=ПредставлениеПричиныСтоянки+?(ПустаяСтрока(ПредставлениеПричиныСтоянки),"",Символы.ПС)+"Ожидание буксира "+СтрТЗ.БаржаПриход+".";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция МанервыИлиОжидание(Параметр) Экспорт
	
	Если Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Маневры") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.МаневрыНаПереходе") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ФормированиеСостава") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ОжиданиеПогрузки") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ОжиданиеВыгрузки") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ОжиданиеПаузки") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ОжиданиеДогрузки") Тогда
		Возврат Истина;
	ИначеЕсли Параметр = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.НачалоРейса") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ТЗПриПолученииДанных()
		
	// ++ rarus Камаев П.В. 07.10.2020 Задача № 24609
	//ФлагОперации = Элементы.ТЗБаржаОперация.Видимость;
	//
	//ДанныеПаузки = ПолучитьДанныеПаузкиСтруктура(ПричинаСтоянки, ТЗ);
	//
	//НомерСтроки = 1;
	//Для Каждого Стр из ТЗ Цикл
	//	ТекДанные = Стр;
	//	Стр.НомерСтроки = НомерСтроки;
	//	НомерСтроки = НомерСтроки + 1;
	//	Если ПричинаСтоянки  = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаВыгрузка") Тогда
	//		Стр.ИтогоКолТекСекция = Формат(ТекДанные.НачальныйВесГруза - ТекДанные.ВесГруза,"ЧДЦ=3");
	//		СтрДП = НайтиВМассиве(ДанныеПаузки, ТекДанные.СудноПринявшее,"Баржа");
	//		Если СтрДП<>Неопределено Тогда
	//			Стр.ИтогоКолПринСекция = Формат(СтрДП.ПаузкаНачальныйВесГруза+СтрДП.ПаузкаКонечныйВесГруза,"ЧДЦ=3");
	//		КонецЕсли;
	//	ИначеЕсли ПричинаСтоянки= ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаДогрузка") Тогда
	//		Стр.ИтогоКолТекСекция = Формат(ТекДанные.НачальныйВесГруза + ТекДанные.ВесГруза,"ЧДЦ=3");
	//		СтрДП = НайтиВМассиве(ДанныеПаузки, ТекДанные.СудноПринявшее,"Баржа");
	//		Если СтрДП <> Неопределено Тогда
	//			Стр.ИтогоКолПринСекция = Формат(СтрДП.ПаузкаНачальныйВесГруза-СтрДП.ПаузкаКонечныйВесГруза,"ЧДЦ=3");
	//		КонецЕсли;
	//	КонецЕсли;
	//	
	//	////Если ТекДанные.НачальныйВесГруза <> 0 Или не Элементы.ТЗВесГруза.Видимость Тогда
	//	////	Стр.Ячейки.Груз.ЦветФона=ЦветаСтиля.ЦветФонаКнопки;
	//	////КонецЕсли;
	//	////
	//	////Если не Элемент.Колонки.БаржаОперация.Видимость Тогда
	//	////	Стр.Ячейки.БаржаПриход.ЦветФона=ЦветаСтиля.ЦветФонаКнопки;
	//	////КонецЕсли;
	//	//
	//	//Если ФлагОперации Тогда
	//	//	ПолучитьФлагиДоступностиСудов(Стр.ТЗБаржаОперация, ФлагПриема, ФлагПередачи);
	//	//	
	//	//	Если не ФлагПриема Тогда
	//	//		Стр.Ячейки.СудноПередавшее.ЦветФона=ЦветаСтиля.ЦветФонаКнопки;
	//	//		Стр.Ячейки.ДатаПриемаСекции.ЦветФона=ЦветаСтиля.ЦветФонаКнопки;
	//	//	КонецЕсли;
	//	//	
	//	//	Если не ФлагПередачи Тогда
	//	//		Стр.Ячейки.СудноПринявшее.ЦветФона=ЦветаСтиля.ЦветФонаКнопки;
	//	//		Стр.Ячейки.ДатаПередачиСекции.ЦветФона=ЦветаСтиля.ЦветФонаКнопки;
	//	//	КонецЕсли;
	//	//КонецЕсли;
	//КонецЦикла;
	// -- rarus Камаев П.В. 07.10.2020
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДанныеПаузкиСтруктура(ТекПричинаСтоянки,ТЗ) Экспорт
		
	ДанныеПаузки = Новый Массив;
	
	Если ТекПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаВыгрузка") или
		ТекПричинаСтоянки = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаДогрузка") Тогда
		Для Каждого СтрТЗ из ТЗ Цикл
			Если Не ЗначениеЗаполнено(СтрТЗ.СудноПринявшее) Тогда
				Продолжить;
			КонецЕсли;
			СтрДП = Неопределено;
			Для Каждого СтрокаДанныеПаузки Из ДанныеПаузки Цикл
				Если СтрокаДанныеПаузки.Баржа = СтрТЗ.СудноПринявшее Тогда
					СтрДП = СтрокаДанныеПаузки;
					Прервать;
				КонецЕсли;
			КонецЦикла;			
			Если СтрДП = Неопределено Тогда
				СтрДП = Новый Структура("Баржа,Груз,ПаузкаНачальныйВесГруза,ПаузкаКонечныйВесГруза");
				СтрДП.Баржа=СтрТЗ.СудноПринявшее;
				СтрДП.Груз=СтрТЗ.Груз;
				СтрДП.ПаузкаНачальныйВесГруза = 0;
				СтрДП.ПаузкаКонечныйВесГруза = 0;
				ДанныеПаузки.Добавить(СтрДП);
			КонецЕсли;
			СтрДП.ПаузкаНачальныйВесГруза= Макс(СтрДП.ПаузкаНачальныйВесГруза,СтрТЗ.ПаузкаНачальныйВесГруза);
			СтрДП.ПаузкаКонечныйВесГруза=СтрДП.ПаузкаКонечныйВесГруза+СтрТЗ.ВесГруза;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПаузки;
	
КонецФункции

&НаКлиенте
Функция НайтиВМассиве(Массив, ЗначениеСтруктуры, КлючСтруктуры)
	
	Для Каждого Строка Из Массив Цикл
		
		Если Строка.Свойство(КлючСтруктуры) И Строка[КлючСтруктуры] = ЗначениеСтруктуры Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Процедура ПолучитьФлагиДоступностиСудов(Операция)
	
	Если Операция = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Прием") Тогда
		ФлагПриема =	Истина;
		ФлагПередачи =	Ложь;
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Передача") Тогда
		ФлагПриема =		Ложь;
		ФлагПередачи =	Истина;
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.ПриемПередача") Тогда
		ФлагПриема =	Истина;
		ФлагПередачи =	Истина;
	Иначе
		ФлагПриема =	Ложь;
		ФлагПередачи =	Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗПриАктивизацииСтроки(Элемент)
	НастроитьДоступностьКолонокТЗ();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДоступностьКолонокТЗ()
		
	Если ТолькоПросмотр Тогда
		Возврат;
	ИначеЕсли Элементы.ТЗ.ТолькоПросмотр Тогда
		Возврат;
	ИначеЕсли Элементы.ТЗ.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Доступность колонки "Груз"
	//---------------------------
	Если Элементы.ТЗ.ТекущиеДанные.НачальныйВесГруза <> 0 Или Не Элементы.ТЗВесГруза.Видимость Тогда
		Элементы.ТЗГруз.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ТЗГруз.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	// Доступность колонки "БаржаПриход"
	//----------------------------------
	Элементы.ТЗБаржаПриход.ТолькоПросмотр = Не Элементы.ТЗБаржаОперация.Видимость;
	
	// Доступность колонок судов
	//--------------------------
	ФлагПриема = Ложь;
	ФлагПередачи = Ложь;
	Если Элементы.ТЗБаржаОперация.Видимость Тогда
		ПолучитьФлагиДоступностиСудов(Элементы.ТЗ.ТекущиеДанные.БаржаОперация);
		
		Элементы.ТЗСудноПередавшее.ТолькоПросмотр =		Не ФлагПриема;
		Элементы.ТЗСудноПринявшее.ТолькоПросмотр =		Не ФлагПередачи;
		Элементы.ТЗДатаПриемаСекции.ТолькоПросмотр =	Не ФлагПриема;
		Элементы.ТЗДатаПередачиСекции.ТолькоПросмотр =	Не ФлагПередачи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗБаржаПриходПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ТЗ.ТекущиеДанные;
	
	Если Не ЗначениеЗаполнено(АдресПредыдущейСтроки) Или Не ЗначениеЗаполнено(ТекСтрока.БаржаПриход) Тогда
		ТекСтрока.НачальныйВесГруза=0;
		Возврат;
	КонецЕсли;
	
	Результат = ТЗБаржаПриходПриИзмененииСервер(ТекСтрока.БаржаПриход, ТекСтрока.ПолучитьИдентификатор());
	Если Результат Тогда
		ТЗБаржаОперацияПриИзменении(Элементы.ТЗБаржаОперация);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗБаржаПриходАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораСудов(Текст, 1);
	КонецЕсли;
	// -- rarus Камаев П.В. 26.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗБаржаПриходОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	СтандартнаяОбработка = Ложь;
	//ДанныеВыбора = ПолучитьДанныеВыбораБаржа(Текст);
	ДанныеВыбора = ПолучитьДанныеВыбораСудов(Текст, 1);
	// -- rarus Камаев П.В. 26.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗБаржаОперацияПриИзменении(Элемент=Неопределено)
	
	ТекСтрока = Элементы.ТЗ.ТекущиеДанные;
	
	Если ТекСтрока.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Прием")
		Или ТекСтрока.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.ОжиданиеБуксира") 
		Или Не ЗначениеЗаполнено(ТекСтрока.БаржаОперация) Тогда
		ТекСтрока.СудноПринявшее = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка");
		ТекСтрока.ДатаПередачиСекции = Дата(1,1,1);
	КонецЕсли;
	
	Если ТекСтрока.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Передача") 
		Или ТекСтрока.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.ОжиданиеБуксира")
		Или Не ЗначениеЗаполнено(ТекСтрока.БаржаОперация) Тогда
		ТекСтрока.СудноПередавшее = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка");
		ТекСтрока.ДатаПриемаСекции = Дата(1,1,1);
	КонецЕсли;
	
	НастроитьДоступностьКолонокТЗ();
	
КонецПроцедуры

&НаСервере
Функция ТЗБаржаПриходПриИзмененииСервер(БаржаПриход, ИДТекущейСтроки)
		
	СтрокаПредыдущая = ПолучитьИзВременногоХранилища(АдресПредыдущейСтроки);
	Стр = СтрокаПредыдущая.ОжиданиеБуксира.Найти(БаржаПриход,"БаржаПриход");
	ТекущаяСтрока = ТЗ.НайтиПоИдентификатору(ИДТекущейСтроки);
	Если Стр <> Неопределено Тогда
		ТекущаяСтрока.Груз=Стр.Груз;
		ТекущаяСтрока.НачальныйВесГруза = Стр.НачальныйВесГруза;
		ТекущаяСтрока.БаржаОперация = ПредопределенноеЗначение("Перечисление.рарусБаржиОперации.Прием");
		Возврат Истина;
	КонецЕсли;
	
	Стр=СтрокаПредыдущая.Баржи.Найти(ТекущаяСтрока.БаржаПриход,"БаржаПриход");
	Если Стр<>Неопределено Тогда
		ТекущаяСтрока.Груз=Стр.Груз;
		ТекущаяСтрока.НачальныйВесГруза=Стр.НачальныйВесГруза;
	Иначе
		ТекущаяСтрока.НачальныйВесГруза=0;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеВыбораБаржа(Текст)
	
	
	ДанныеВыбора = Справочники.vftСуда.ПолучитьДанныеВыбораБаржа(Текст);
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТЗСудноПередавшееАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораСудов(Текст);
	КонецЕсли;
	// -- rarus Камаев П.В. 26.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСудноПередавшееОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	СтандартнаяОбработка = Ложь;
	//ДанныеВыбора = ПолучитьДанныеВыбораБаржа(Текст);
	ДанныеВыбора = ПолучитьДанныеВыбораСудов(Текст);
	
	// -- rarus Камаев П.В. 26.03.2020	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСудноПринявшееАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораСудов(Текст);
	КонецЕсли;
	// -- rarus Камаев П.В. 26.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСудноПринявшееОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
	СтандартнаяОбработка = Ложь;
	//ДанныеВыбора = ПолучитьДанныеВыбораБаржа(Текст);
	ДанныеВыбора = ПолучитьДанныеВыбораСудов(Текст);
	// -- rarus Камаев П.В. 26.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗДатаПодачиНотисаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ДатаПодачиНотиса, "ДатаПодачиНотиса");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Подача нотиса";
КонецПроцедуры

&НаКлиенте
Процедура ТЗНачалоОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.НачалоОперации, "НачалоОперации");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начало операции";
КонецПроцедуры

&НаКлиенте
Процедура ТЗНачалоОперации2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.НачалоОперации2, "НачалоОперации2");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начало операции";
КонецПроцедуры

&НаКлиенте
Процедура ТЗОкончаниеОперацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ОкончаниеОперации, "КонецОперации");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Конец операции";
КонецПроцедуры

&НаКлиенте
Процедура ТЗОкончаниеОперации2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ОкончаниеОперации2, "КонецОперации2");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Конец операции";
КонецПроцедуры

&НаКлиенте
Процедура ТЗДокументыНаБортуНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ДокументыНаБортуНачДата, "ДокументыНаБортуНачДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начало оформления документов";
КонецПроцедуры

&НаКлиенте
Процедура ТЗДокументыНаБортуКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ДокументыНаБортуКонДата, "ДокументыНаБортуКонДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Окончание оформления документов";
КонецПроцедуры

&НаКлиенте
Процедура ТЗДатаПриемаСекцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ДатаПриемаСекции, "ДатаПриемаСекции");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Дата приема секции";
КонецПроцедуры

&НаКлиенте
Процедура ТЗДатаПередачиСекцииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ТЗ.ТекущиеДанные.ДатаПередачиСекции, "ДатаПередачиСекции");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Дата передачи секции";
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОФормление()
	
	УсловноеОформление.Элементы.Очистить();

	// ++ rarus Камаев П.В. 19.10.2020 Задача № 24923
	СписокПрием = новый СписокЗначений;
	СписокПрием.Добавить(Перечисления.рарусБаржиОперации.Прием);
	СписокПрием.Добавить(Перечисления.рарусБаржиОперации.ПриемПередача);
	
	СписокПередача = новый СписокЗначений;
	СписокПередача.Добавить(Перечисления.рарусБаржиОперации.Передача);
	СписокПередача.Добавить(Перечисления.рарусБаржиОперации.ПриемПередача);
	// -- rarus Камаев П.В. 19.10.2020
	
	//ТЗГруз
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗГруз");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.НачальныйВесГруза");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВесГрузаВидимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	//ТЗБаржаОперация
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗБаржаПриход");
		
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БаржаОперацияВидимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	//СудноПередавшее
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗСудноПередавшее");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БаржаОперацияВидимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	// ++ rarus Камаев П.В. 19.10.2020 Задача № 24923
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФлагПриема");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.БаржаОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокПрием;
	// -- rarus Камаев П.В. 19.10.2020
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	//ДатаПриемаСекции
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗДатаПриемаСекции");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БаржаОперацияВидимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	// ++ rarus Камаев П.В. 19.10.2020 Задача № 24923
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФлагПриема");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.БаржаОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокПрием;
	// -- rarus Камаев П.В. 20.10.2020
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	//СудноПринявшее
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗСудноПринявшее");
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БаржаОперацияВидимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	// ++ rarus Камаев П.В. 19.10.2020 Задача № 24923
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФлагПередачи");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.БаржаОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокПередача;
	// -- rarus Камаев П.В. 19.10.2020
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);
	
	//ДатаПередачиСекции
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗДатаПередачиСекции");
	ПолеЭлемента.Использование = Истина;
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.Использование = Истина;
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("БаржаОперацияВидимость");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	// ++ rarus Камаев П.В. 20.10.2020 Задача № 24923
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФлагПередачи");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	//ОтборЭлемента.ПравоеЗначение = Ложь;
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗ.БаржаОперация");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокПередача;
	// -- rarus Камаев П.В. 20.10.2020
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоСерый);

КонецПроцедуры

&НаКлиенте
Процедура ПронумероватьСтрокиТЧ()
	НомерСтроки = 1;
	Для Каждого Строка Из ППС Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
	НомерСтроки = 1;
	Для Каждого Строка Из ТЗ Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТЗПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ПронумероватьСтрокиТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// ++ rarus Камаев П.В. 02.09.2020 Задача № 23575
	РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	ЭтоГлавныйУзел		= vftОбщегоНазначения.ЭтоГлавныйУзел();
	Если НЕ ЭтоГлавныйУзел Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЕсли;
	// -- rarus Камаев П.В. 02.09.2020
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТекущаяСтрока",Пункт);
	Форма = ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Список,
	"Тип",
	ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"),
	ВидСравненияКомпоновкиДанных.Равно,
	,
	Ложь, 
	РежимОтображения);	
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ХодовоеВремяПланПриИзменении(Элемент)
	ХодовоеВремяПлан = РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ПЗ(ХодовоеВремяПлан_Представление);
	ХодовоеВремяПлан_Представление = РарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ХодовоеВремяПлан);
КонецПроцедуры

&НаКлиенте
Процедура ПунктСтрокойПриИзменении(Элемент)
	ЭлементПункт = Элементы.Пункт;
	Если ПунктСтрокой Тогда
		Элементы.Пункт.ОграничениеТипа = РарусОбщегоНазначенияКлиент.ПолучитьОписаниеТиповСтроки(80);	
		Пункт = "";
	Иначе
		Элементы.Пункт.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.vftПунктыСледования");
		Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

// ++ rarus Камаев П.В. 26.03.2020 Задача № 20557 

&НаКлиенте
Процедура ППСПричинаСтоянкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Справочник.vftТиповыеОперации.Форма.ФормаВыбораСАналитикой", ПараметрыФормы, Элементы.ППСПричинаСтоянки, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура ППСПричинаСтоянкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ППС.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И 
		(ТипЗнч(ВыбранноеЗначение) = Тип("КлючСтрокиДинамическогоСписка")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Структура")) Тогда
		СтандартнаяОбработка = Ложь;
		ТекСтрока.ПричинаСтоянки = ВыбранноеЗначение.ПричинаСтоянки;
		ТекСтрока.Аналитика = ВыбранноеЗначение.Аналитика;
		ПредставлениеПричиныСтоянки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ППСПричинаСтоянкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПричиныСтоянки(Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ППСПричинаСтоянкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПричиныСтоянки(Текст);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораПричиныСтоянки(Текст = "")
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	vftТиповыеОперации.Ссылка КАК ПричинаСтоянки,
	|	vftТиповыеОперации.Наименование + "" "" + vftТиповыеОперации.НаименованиеАналитики КАК Наименование,
	|	vftТиповыеОперации.СсылкаАналитики КАК Аналитика
	|ИЗ
	|	(ВЫБРАТЬ
	|		СправочникvftТиповыеОперации.Ссылка КАК Ссылка,
	|		СправочникvftТиповыеОперации.Наименование КАК Наименование,
	|		рарусАналитикиПростоя.Ссылка КАК СсылкаАналитики,
	|		рарусАналитикиПростоя.Наименование КАК НаименованиеАналитики
	|	ИЗ
	|		Справочник.vftТиповыеОперации КАК СправочникvftТиповыеОперации
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рарусАналитикиПростоя КАК рарусАналитикиПростоя
	|			ПО (рарусАналитикиПростоя.Владелец = СправочникvftТиповыеОперации.Ссылка)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		vftТиповыеОперации.Ссылка,
	|		vftТиповыеОперации.Наименование,
	|		ЗНАЧЕНИЕ(Справочник.рарусАналитикиПростоя.ПустаяСсылка),
	|		""""
	|	ИЗ
	|		Справочник.vftТиповыеОперации КАК vftТиповыеОперации
	|	ГДЕ
	|		vftТиповыеОперации.ИспользуетсяТолькоСАналитикой = ЛОЖЬ) КАК vftТиповыеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.vftТиповыеОперации.РазделениеПоМоделямРДО КАК рарусТиповыеОперацииРазделениеПоМоделямРДО
	|		ПО (рарусТиповыеОперацииРазделениеПоМоделямРДО.Ссылка = vftТиповыеОперации.Ссылка)
	|			И (рарусТиповыеОперацииРазделениеПоМоделямРДО.МодельРДО = &МодельРДО)
	|ГДЕ
	|	vftТиповыеОперации.Наименование ПОДОБНО &Наименование
	|	И ЕСТЬNULL(рарусТиповыеОперацииРазделениеПоМоделямРДО.ВидимостьВПЖ, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	Запрос.УстановитьПараметр("МодельРДО", Судно.Проект.МодельРДО);
	Выборка = Запрос.Выполнить().Выбрать();
	Список = новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Структура = новый Структура;
		Структура.Вставить("ПричинаСтоянки", Выборка.ПричинаСтоянки);
		Структура.Вставить("Аналитика", Выборка.Аналитика);
		Список.Добавить(Структура, Выборка.Наименование);
	КонецЦикла;
	
	Возврат Список
	
КонецФункции

// -- rarus Камаев П.В. 26.03.2020

// ++ rarus Камаев П.В. 26.03.2020 Задача № 20551
&НаСервере
Функция ПолучитьДанныеВыбораСудов(Текст = "", ТипХода = Неопределено)
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	vftСуда.Ссылка КАК Ссылка,
	|	vftСуда.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	Справочник.vftСуда КАК vftСуда
	|ГДЕ
	|	(vftСуда.Проект.ТипХода = &ТипХода
	|			ИЛИ &ТипХода = НЕОПРЕДЕЛЕНО)
	|	И НЕ vftСуда.ЭтоГруппа
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	рарусПрочиеСуда.Ссылка,
	|	рарусПрочиеСуда.Наименование
	|ИЗ
	|	Справочник.рарусПрочиеСуда КАК рарусПрочиеСуда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.Ссылка КАК Ссылка,
	|	ВТ.Наименование КАК Наименование
	|ИЗ
	|	ВТ КАК ВТ
	|ГДЕ
	|	ВТ.Наименование ПОДОБНО &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	Запрос.УстановитьПараметр("ТипХода", ТипХода);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Список = новый СписокЗначений;
	Пока Выборка.Следующий() Цикл
		Список.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат Список
	
КонецФункции

&НаКлиенте
Процедура НачалоВыбораСудна(Поле)
		
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
			
	ДопПараметры = новый Структура;
	ДопПараметры.Вставить("Поле", Поле);
	
	ОповещениеЗакрытия = новый ОписаниеОповещения("ОповещениеВыбораСудна", ЭтотОбъект, ДопПараметры);
	
	Форма = ОткрытьФорму("Справочник.vftСуда.Форма.ФормаВыбораСудовИПрочихСудовНовый", ПараметрыФормы, Элементы.ТЗ, ЭтаФорма.УникальныйИдентификатор,,,ОповещениеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	// ++ rarus Камаев П.В. 21.09.2020 Задача № 24325
	//СписокПрочиеСуда
	//Форма.Элементы.СписокПрочиеСуда.Отображение = ОтображениеТаблицы.Список;
	// -- rarus Камаев П.В. 21.09.2020
	
	//СписокСудов
	Форма.Элементы.СписокСудов.Отображение = ОтображениеТаблицы.Список;
		
	// ++ rarus Камаев П.В. 21.09.2020 Задача № 24325
	//// ++ rarus Камаев П.В. 02.09.2020 Задача № 23575
	//РежимОтображения	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	//ЭтоГлавныйУзел		= vftОбщегоНазначения.ЭтоГлавныйУзел();
	//Если НЕ ЭтоГлавныйУзел Тогда
	//	РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	//КонецЕсли;
	//// -- rarus Камаев П.В. 02.09.2020
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//Форма.СписокСудов,
	//"ЭтоГруппа",
	//Ложь,
	//ВидСравненияКомпоновкиДанных.Равно
	//,, 
	//Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	//
	//Если Поле = "ТЗБаржаПриход" Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//	Форма.СписокСудов,
	//	"Проект.ТипХода",
	//	1,
	//	ВидСравненияКомпоновкиДанных.Равно
	//	,, 
	//	Истина, РежимОтображения);
	//КонецЕсли;
	// -- rarus Камаев П.В. 21.09.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ОповещениеВыбораСудна(Результат, ДопПараметры) Экспорт
	
	Если ДопПараметры.Свойство("Поле") И ЗначениеЗаполнено(Результат) Тогда
		Поле = ДопПараметры.Поле;
		Если Поле = "ТЗБаржаПриход" Тогда
			Элементы.ТЗ.ТекущиеДанные.БаржаПриход = Результат;
			//rarus_AfoD 18.09.2020 < 
			ТЗБаржаПриходПриИзменении(Неопределено);
			//rarus_AfoD 18.09.2020 > 
		ИначеЕсли Поле = "ТЗСудноПередавшее" Тогда
			Элементы.ТЗ.ТекущиеДанные.СудноПередавшее = Результат;
			
		ИначеЕсли Поле = "ТЗСудноПринявшее" Тогда
			Элементы.ТЗ.ТекущиеДанные.СудноПринявшее = Результат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗСудноПередавшееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поле = "ТЗСудноПередавшее";
	НачалоВыбораСудна(Поле);

КонецПроцедуры

&НаКлиенте
Процедура ТЗСудноПринявшееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поле = "ТЗСудноПринявшее";
	НачалоВыбораСудна(Поле);
	
КонецПроцедуры


// -- rarus Камаев П.В. 26.03.2020

&НаКлиенте
Процедура ПричинаСтоянкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПараметрыФормы = Новый Структура;
	ОткрытьФорму("Справочник.vftТиповыеОперации.Форма.ФормаВыбораСАналитикой", ПараметрыФормы, Элементы.ПричинаСтоянки, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаСтоянкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если (ТипЗнч(ВыбранноеЗначение) = Тип("КлючСтрокиДинамическогоСписка")
		ИЛИ ТипЗнч(ВыбранноеЗначение) = Тип("Структура")) Тогда
		СтандартнаяОбработка = Ложь;
		ПричинаСтоянки = ВыбранноеЗначение.ПричинаСтоянки;
		Аналитика = ВыбранноеЗначение.Аналитика;
		ПричинаСтоянкиПриИзмененииСервер();
		ТекПричинаСтоянки = ПричинаСтоянки;
		ПредставлениеПричиныСтоянки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПричинаСтоянкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПричиныСтоянки(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПричинаСтоянкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПричиныСтоянки(Текст);
КонецПроцедуры

// ++ rarus Камаев П.В. 01.04.2020 Задача № 20717
&НаКлиенте
Процедура ПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст,,Ложь);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораПункт(Текст, ТипПункта = Неопределено, ТипПунктаПорт = Истина)
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска","%"+Текст+"%");
	Запрос.УстановитьПараметр("МодельРДО", Судно.Проект.МодельРДО);
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пункты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.vftПунктыСледования КАК Пункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.vftПунктыСледования.РазрешеноПропускать КАК ПунктыСледованияРазрешеноПропускать
	|		ПО (ПунктыСледованияРазрешеноПропускать.Ссылка = Пункты.Ссылка)
	|			И (ПунктыСледованияРазрешеноПропускать.МодельРДО = &МодельРДО)
	|ГДЕ
	|	Пункты.Наименование ПОДОБНО &СтрокаПоиска
	|	И &УсловиеТипПунктаПорт
	|	И ЕСТЬNULL(ПунктыСледованияРазрешеноПропускать.ИспользуетсяВПЖ, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	// ++ rarus Камаев П.В. 24.08.2020 
	Если ТипПунктаПорт Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипПунктаПорт", "Пункты.Тип = ЗНАЧЕНИЕ(Справочник.рарусТипыПунктовСледования.Порт)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипПунктаПорт", "Истина");
	КонецЕсли;
	// -- rarus Камаев П.В. 24.08.2020
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ППСКонДатаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.НачДата) Тогда
		РасчитатьПредставлениеВремени();
	КонецЕсли;

КонецПроцедуры
// -- rarus Камаев П.В. 01.04.2020

// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785 
&НаСервере
Функция ПроверитьВыбранноеЗначение(ВыбранныйПункт)
	
	Если НЕ ЗначениеЗаполнено(ПредыдущийПункт) ИЛИ ТипЗнч(ПредыдущийПункт) = Тип("Строка") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВыбранныйПункт.РекаМоре = Перечисления.vftРекаМоре.Море 
		ИЛИ ПредыдущийПункт.РекаМоре = Перечисления.vftРекаМоре.Море
		ИЛИ ВыбранныйПункт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO 
		ИЛИ ВыбранныйПункт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO 
		ИЛИ ПредыдущийПункт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO 
		ИЛИ ПредыдущийПункт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO Тогда
		Возврат Истина;
	КонецЕсли;
	
	МассивСмежныхПунктов = РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(ПредыдущийПункт, Судно);
	
	Если МассивСмежныхПунктов.Найти(ВыбранныйПункт)<>Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПроверкаВыранногоЗначенияПройдена = ПроверитьВыбранноеЗначение(ВыбранноеЗначение);
	Если НЕ ПроверкаВыранногоЗначенияПройдена 
		И рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Судно) 
		И рарусОбщегоНазначенияВызовСервера.ПолучитьЗначениеКонстанты("рарусИспользоватьКонтрольВыбораПунктов") = Истина Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо выбрать контрольный пункт, смежный с предыдущим";
		Сообщение.Сообщить(); 
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктПриИзменении(Элемент)
	
	ГруженыйРейсПриИзменении(Неопределено);
	// ++ rarus Чернавин Г.К 22.05.2020 № 21775
	Если ТипЗнч(Пункт) = Тип("СправочникСсылка.vftПунктыСледования") Тогда
		Элементы.ПунктСтрокой.Видимость = Ложь;
	КонецЕсли;
	// -- rarus Чернавин Г.К 22.05.2020
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПлановыеДанные()
	
	СтруктураНорм = РегистрыСведений.рарусАктуальныеНормыСледованияПоПроектамСудов.ПолучитьНормыСледования(Пункт, ПредыдущийПункт, Судно.Проект, ГруженыйРейс, Судно);		
	Возврат СтруктураНорм
	
КонецФункции

&НаКлиенте
Процедура ГруженыйРейсПриИзменении(Элемент)
	СтруктураНорм = ПолучитьПлановыеДанные();		
	ХодовоеВремяПлан				= СтруктураНорм.Время * 60;
	ХодовоеВремяПлан_Представление 	= рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП(ХодовоеВремяПлан);
	РасстояниеПлан					= СтруктураНорм.Расстояние;
КонецПроцедуры
// -- rarus Камаев П.В. 03.04.2020

// ++ rarus Чернавин Г.К 19.06.2020  № 22321
&НаКлиенте
Процедура ПредставлениеПричиныСтоянки()
	
	Разделитель = ", ";
	Если Не ЗначениеЗаполнено(Аналитика) Тогда
		Разделитель = "";
	КонецЕсли;
	ПричинаСтоянки_Представление = "" + ПричинаСтоянки + Разделитель + Аналитика;
	
	
	Для Каждого Строка Из ППС Цикл
		Разделитель = ", ";
		Если Не ЗначениеЗаполнено(Строка.Аналитика) Тогда
			Разделитель = "";
		КонецЕсли;
		Строка.ПричинаСтоянки_Представление = "" + Строка.ПричинаСтоянки + Разделитель + Строка.Аналитика;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПричинаСтоянкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", ПричинаСтоянки);
	ОткрытьФорму("Справочник.vftТиповыеОперации.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ППСПричинаСтоянкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ППС.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", ТекущиеДанные.ПричинаСтоянки);
		ОткрытьФорму("Справочник.vftТиповыеОперации.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры
// -- rarus Чернавин Г.К 19.06.2020

// ++ rarus Камаев П.В. 09.07.2020 Задача № 22677 
&НаКлиенте
Процедура ПричинаСтоянкиОчистка(Элемент, СтандартнаяОбработка)
	ПричинаСтоянки					= ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПустаяСсылка");
	Аналитика						= ПредопределенноеЗначение("Справочник.рарусАналитикиПростоя.ПустаяСсылка");
	ПричинаСтоянки_Представление	= "";
КонецПроцедуры

&НаКлиенте
Процедура ППСПричинаСтоянкиОчистка(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.ППС.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока.ПричинаСтоянки				= ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПустаяСсылка");
		ТекСтрока.Аналитика						= ПредопределенноеЗначение("Справочник.рарусАналитикиПростоя.ПустаяСсылка");
		ТекСтрока.ПричинаСтоянки_Представление	= "";
	КонецЕсли;	
КонецПроцедуры
// -- rarus Камаев П.В. 09.07.2020

// ++ rarus Камаев П.В. 14.08.2020 Задача № 23289
&НаКлиенте
Процедура ТЗГрузНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//МодельРДО = рарусОбщегоНазначенияВызовСервера.ПолучитьМодельРДО(Судно);
	//
	//Форма = ОткрытьФорму("Справочник.vftГрузы.ФормаВыбора",,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//Форма.Список,
	//"МодельРДО",
	//МодельРДО,
	//ВидСравненияКомпоновкиДанных.Равно,
	//,
	//Истина,
	//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	//Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗГрузАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокДоступныхГрузов(Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗГрузОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокДоступныхГрузов(Текст);
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокДоступныхГрузов(Текст = "")
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	vftГрузы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.vftГрузы КАК vftГрузы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.vftГрузы.РазделениеПоМоделямРДО КАК vftГрузыРазделениеПоМоделямРДО
	|		ПО (vftГрузыРазделениеПоМоделямРДО.Ссылка = vftГрузы.Ссылка)
	|			И (vftГрузыРазделениеПоМоделямРДО.МодельРДО = &МодельРДО)
	|ГДЕ
	|	vftГрузы.Наименование ПОДОБНО &Наименование
	|	И ЕСТЬNULL(vftГрузыРазделениеПоМоделямРДО.ВидимостьВПЖ, ЛОЖЬ) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	vftГрузы.Наименование";
	Запрос.УстановитьПараметр("Наименование", "%" + Текст + "%");
	Запрос.УстановитьПараметр("МодельРДО", Судно.Проект.МодельРДО);
	Результат = Запрос.Выполнить().Выгрузить();
	Список = новый СписокЗначений;
	Список.ЗагрузитьЗначения(Результат.ВыгрузитьКолонку("Ссылка"));
	
	Возврат Список
КонецФункции
// -- rarus Камаев П.В. 14.08.2020

// ++ rarus Камаев П.В. 07.10.2020 Задача № 24609 
&НаКлиенте
Процедура РассчитатьКоличествоВТЧБаржи(ТекДанные)
	Если ТекДанные <> Неопределено Тогда
		ДанныеПаузки = ПолучитьДанныеПаузкиСтруктура(ПричинаСтоянки, ТЗ);
		Если ПричинаСтоянки  = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаВыгрузка") Тогда
			ТекДанные.ИтогоКолТекСекция = ТекДанные.НачальныйВесГруза - ТекДанные.ВесГруза;
			Если ЗначениеЗаполнено(ТекДанные.СудноПринявшее) Тогда
				ТекДанные.ИтогоКолПринСекция = ТекДанные.ПаузкаНачальныйВесГруза+ТекДанные.ВесГруза;
			Иначе
				ТекДанные.ИтогоКолПринСекция = 0;
			КонецЕсли;
		ИначеЕсли ПричинаСтоянки= ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПаузкаДогрузка") Тогда
			ТекДанные.ИтогоКолТекСекция = ТекДанные.НачальныйВесГруза + ТекДанные.ВесГруза;
			Если ЗначениеЗаполнено(ТекДанные.СудноПринявшее) Тогда
				ТекДанные.ИтогоКолПринСекция = ТекДанные.ПаузкаНачальныйВесГруза-ТекДанные.ВесГруза;
			Иначе
				ТекДанные.ИтогоКолПринСекция = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗНачальныйВесГрузаПриИзменении(Элемент)
	ТекДанные = Элементы.ТЗ.ТекущиеДанные;
	РассчитатьКоличествоВТЧБаржи(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТЗВесГрузаПриИзменении(Элемент)
	ТекДанные = Элементы.ТЗ.ТекущиеДанные;
	РассчитатьКоличествоВТЧБаржи(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТЗПаузкаНачальныйВесГрузаПриИзменении(Элемент)
	ТекДанные = Элементы.ТЗ.ТекущиеДанные;
	РассчитатьКоличествоВТЧБаржи(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТЗСудноПринявшееПриИзменении(Элемент)
	ТекДанные = Элементы.ТЗ.ТекущиеДанные;
	РассчитатьКоличествоВТЧБаржи(ТекДанные);
КонецПроцедуры

// -- rarus Камаев П.В. 07.10.2020

//++ rarus isaeva 14.11.2020
&НаКлиенте
Процедура СформироватьКоординатыСтрокой()
	Если ДислокацияОсобая И (ЗначениеЗаполнено(КоординатыN) ИЛИ ЗначениеЗаполнено(КоординатыE)) Тогда
		Координаты = КоординатыN+?(ПараметрNS=1, "S", "N")+ " "+ КоординатыE + ?(ПараметрWE=1, "W", "E");
	Иначе
		КоординатыN = "";
        КоординатыE = "";
		Координаты = "";
	КонецЕсли;
	
КонецПроцедуры
//-- rarus isaeva 14.11.2020

#КонецОбласти
// -- rarus Чернавин Г.К 10.03.2020