// ++ rarus Чернавин Г.К 10.03.2020
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ЭтоГлавныйУзел = ПланыОбмена.ГлавныйУзел() = Неопределено;
	ДоступныРолиПросмотра = Пользователи.РолиДоступны("vftАдминистратор,vftПользователь,vtfЧтениеИПросмотрМодельРДО", Пользователи.ТекущийПользователь());
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	
	// ++ rarus Чернавин Г.К 18.08.2020 № 23325
	//Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
	//	Для Каждого Строка Из Объект.Пункты Цикл
	//		Строка.ПровереноМенеджером = Ложь;
	//	КонецЦикла;
	//КонецЕсли;
	// -- rarus Чернавин Г.К 18.08.2020
	
	// ++ rarus Камаев П.В. 01.04.2020 Задача № 20731 
	Если Параметры.Свойство("ДанныеДляПереносаЧастиРейса") Тогда
		МассивИД	= Параметры.ДанныеДляПереносаЧастиРейса.МассивИД;
		Рейс		= Параметры.ДанныеДляПереносаЧастиРейса.Рейс;
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.Дата			= ТекущаяДата();
			ЗаполнитьЗначенияСвойств(Объект, Рейс, "Судно, Капитан, Ответственный");
			Объект.СтатусРейса	= Перечисления.рарусСтатусыПутевогоЖурнала.Незавершен;
			Элементы.Номер.Доступность	= Ложь;
			//Элементы.НомерБезПрефикса.Доступность	= Ложь;
			Элементы.Судно.Доступность	= ЭтоГлавныйУзел;
			Объект.РаботаПоРаспоряжению = Ложь;
			ЗаполнитьПункты();
		КонецЕсли;
		ДополнитьТЧ(Рейс, МассивИД);
		// -- rarus Камаев П.В. 01.04.2020	
	ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(ОсновноеСудно) Тогда
			Элементы.Судно.Доступность = Ложь;
		КонецЕсли;
		Элементы.Номер.Доступность	= ЭтоГлавныйУзел;
	Иначе
		Объект.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Незавершен;
		Объект.Судно = ОсновноеСудно;		
		Элементы.Номер.Доступность=Ложь;
		//Элементы.НомерБезПрефикса.Доступность	= Ложь;
		Элементы.Судно.Доступность = ЭтоГлавныйУзел;
		Объект.РаботаПоРаспоряжению = Ложь;
		Ответственный = Пользователи.ТекущийПользователь();
		//СтруктураПредРейса = получитьСтруктуруПредРейса();
		//Объект.ДатаНачала = СтруктураПредРейса.ДатаНачала;
		//Объект.ПортОтправления = СтруктураПредРейса.ПортОтправления;
		// ++ rarus Камаев П.В. 20.03.2020 Задача № 20463
		Для Каждого Строка Из Объект.ПрохождениеУчастковСЛоцманом Цикл
			Строка.Файл = Справочники.vftРейсПрисоединенныеФайлы.ПустаяСсылка();
		КонецЦикла;
		Для Каждого Строка Из Объект.ПрохождениеУчастковСОЛП Цикл
			Строка.Файл = Справочники.vftРейсПрисоединенныеФайлы.ПустаяСсылка();
		КонецЦикла;
		ЗаполнитьПункты();
		// -- rarus Камаев П.В. 20.03.2020
	КонецЕсли;
	ПолноправныйПользователь = РольДоступна("ПолныеПрава");
	Если Объект.СтатусРейса = Перечисления.рарусСтатусыПутевогоЖурнала.Проверен И Не ПолноправныйПользователь Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	// ++ rarus Чернавин Г.К 05.06.2020 № 22139
	УстановитьПредставлениеНомера();
	// -- rarus Чернавин Г.К 05.06.2020
	ПолучитьСписокВидовТоплива();
	ЗаполнитьТЗБункеровки();
	ЗаполнитьПодменюПЖНС();
	
	УстановитьЗначениеЭтоБуксир();
	УстановитьУсловноеОформление();
	
	// ++ rarus Камаев П.В. 02.06.2020 Задача № 22017 
	Элементы.ГруппаПрохождениеРостов.Заголовок	= Справочники.рарусУчасткиСОЛП.РостовНаДону.НаименованиеДляПечати;
	Элементы.ГруппаПрохождениеАзов.Заголовок	= Справочники.рарусУчасткиСОЛП.Азов.НаименованиеДляПечати;
	Элементы.ГруппаПрохождениеКЕК.Заголовок		= Справочники.рарусУчасткиСОЛП.КерчьЕникальскийКанал.НаименованиеДляПечати;
	ЗаполнитьТЧПрохождениеУчастковРостовАзовКЕК();
	// -- rarus Камаев П.В. 02.06.2020
	
	// ++ rarus Камаев П.В. 02.10.2020 Задача № 24509
	УстановитьПараметрыОтбораСтатуса();
	// -- rarus Камаев П.В. 02.10.2020
	
	// ++ rarus makole 2021-02-09
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -- rarus makole 2021-02-09 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ИнтервалМеждуРейсами = Справочники.рарусСправочникСсылок.ИнтервалМеждуРейсами.Значение;
	
	// ++ rarus makole 2021-02-09 
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// -- rarus makole 2021-02-09
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не ТолькоПросмотр Тогда
		//Проверить дату редактирования документа					
	КонецЕсли;
	
	// ++ rarus Камаев П.В. 01.04.2020 Задача № 20731
	//Если перенос строки из другого рейса
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Пункты.Количество() Тогда
		Модифицированность = Истина
	КонецЕсли;
	// -- rarus Камаев П.В. 01.04.2020
	
	Если ТолькоПросмотр И Объект.СтатусРейса = ПредопределенноеЗначение("Перечисление.рарусСтатусыПутевогоЖурнала.Проверен") Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Рейс проверен, возможен только просмотр!'"),30, НСтр("ru = 'Внимание!'"));
	КонецЕсли;
	ПоказатьИтогиТабличнойЧастиПункты();
	ПунктыОбновитьПредставлениеСтрок();	
	УстановитьВидимостьДоступность();
	ЗапомнитьТекущиеЗначения();
	
	// ++ rarus makole 2021-02-09 
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	// -- rarus makole 2021-02-09 

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ПунктыОбновитьПредставлениеСтрок();
	Элементы.Номер.Доступность = ЭтоГлавныйУзел;
	//Элементы.НомерБезПрефикса.Доступность	= Истина;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РаботаПоРаспоряжениюПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура СудноПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.Судно) Тогда
		Объект.Судно = ТекущееСудно;
	Иначе
		УстановитьЗначениеЭтоБуксир();
	КонецЕсли;
	ЗапомнитьТекущиеЗначения();
	УстановитьВидимостьДоступность();
	
	// ++ rarus Камаев П.В. 30.03.2020 Задача № 20647 
	Если Объект.Номер <> "" Тогда
		ОбработатьИзменениеНомераДокумента();
	КонецЕсли;
	// -- rarus Камаев П.В. 30.03.2020
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусРейсаПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(Объект.СтатусРейса) Тогда
		Объект.СтатусРейса = ТекущийСтатусРейса;
	КонецЕсли;
	ЗапомнитьТекущиеЗначения();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПункты

&НаКлиенте
Процедура ПунктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФормуРедактированияСтроки(Элементы.Пункты.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ=Истина;
	ТекущиеДанные = Элементы.Пункты.ТекущиеДанные;
	Если Копирование и ТекущиеДанные <> Неопределено Тогда
		ОткрытьФормуРедактированияСтроки(,,ТекущиеДанные);
	Иначе
		ОткрытьФормуРедактированияСтроки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыПередНачаломИзменения(Элемент, Отказ)
	//Если Не Элемент.ТекущийЭлемент.Имя = "ПунктыПровереноМенеджером" Тогда
		Отказ=Истина;
		ОткрытьФормуРедактированияСтроки(Элементы.Пункты.ТекущиеДанные);
	//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	НомерСтроки = Элемент.ТекущиеДанные.НомерСтроки;
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'Удалить строку № %1?'"), НомерСтроки); 
	Оповещение = Новый ОписаниеОповещения("ПунктыПередУдалениемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,,Нстр("ru = 'Внимание!'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыПередУдалениемЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Пункты.ТекущиеДанные;
	ИД = ТекущиеДанные.ИД;
	УдалитьИзРС.Добавить(ИД);
	Объект.Пункты.Удалить(ТекущиеДанные.НомерСтроки-1);
	
	СтруктураПоиска = Новый Структура("ИД", ИД);
	рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Объект.Баржи, СтруктураПоиска);
	рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Объект.ПрочиеПричиныСтоянки, СтруктураПоиска);
	// ++ rarus Чернавин Г.К 19.06.2020 № 22281
	ПересчитатьХодовоеВремя();
	// ++ rarus Камаев П.В. 27.11.2020 Задача № 25553
	ЗаполнитьРасстояниеВШапке();
	// -- rarus Камаев П.В. 27.11.2020
	//ПроверитьТабличнуюЧастьПункты();
	ПоказатьИтогиТабличнойЧастиПункты();
	ПунктыОбновитьПредставлениеСтрок();
	// -- rarus Чернавин Г.К 19.06.2020
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	к = 1;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБуксировки


&НаКлиенте
Процедура БуксировкиНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.Буксировки.ТекущиеДанные.НачДата, "БуксировкиНачДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начальная дата";
КонецПроцедуры

&НаКлиенте
Процедура БуксировкиКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.Буксировки.ТекущиеДанные.КонДата, "БуксировкиКонДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Конечная дата";
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ТекущиеДанные = Элементы.Пункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтроки = ТекущиеДанные.НомерСтроки - 1;
	Если ИндексСтроки = 0 Тогда
		Возврат;
	КонецЕсли;
	Объект.Пункты.Сдвинуть(ИндексСтроки, -1);
	// ++ rarus Чернавин Г.К 19.06.2020 № 22281
	ПересчитатьХодовоеВремя();
	// ++ rarus Камаев П.В. 27.11.2020 Задача № 25553
	ЗаполнитьРасстояниеВШапке();
	// -- rarus Камаев П.В. 27.11.2020
	ПроверитьТабличнуюЧастьПунктыСервер();
	ПоказатьИтогиТабличнойЧастиПункты();
	ПунктыОбновитьПредставлениеСтрок();
	// -- rarus Чернавин Г.К 19.06.2020
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	ТекущиеДанные = Элементы.Пункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИндексСтроки = ТекущиеДанные.НомерСтроки - 1;
	Если ИндексСтроки = Объект.Пункты.Количество()-1 Тогда
		Возврат;
	КонецЕсли;
	Объект.Пункты.Сдвинуть(ИндексСтроки, 1);
	
	// ++ rarus Чернавин Г.К 19.06.2020 № 22281
	ПересчитатьХодовоеВремя();
	// ++ rarus Камаев П.В. 27.11.2020 Задача № 25553
	ЗаполнитьРасстояниеВШапке();
	// -- rarus Камаев П.В. 27.11.2020
	ПроверитьТабличнуюЧастьПунктыСервер();
	ПоказатьИтогиТабличнойЧастиПункты();
	ПунктыОбновитьПредставлениеСтрок();
	// -- rarus Чернавин Г.К 19.06.2020
	
КонецПроцедуры

&НаКлиенте
Процедура Вставить(Команда)
	
	ТекСтрока = Элементы.Пункты.ТекущаяСтрока;
	Если ТекСтрока = Неопределено Тогда
		ОткрытьФормуРедактированияСтроки();
	Иначе
		ОткрытьФормуРедактированияСтроки(,ТекСтрока);
	КонецЕсли;

КонецПроцедуры

// ++ rarus Камаев П.В. 01.04.2020 Задача № 20731
&НаКлиенте
Процедура ПеренестиСтрокиВДругойРейс(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ПеренестиСтрокиВДругойРейсЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед переносом строк в другой рейс!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		ПеренестиСтрокиВДругойРейсЗавершение(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиСтрокиВДругойРейсЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если Записать() Тогда
			МассивВыделенныхСтрок = Элементы.Пункты.ВыделенныеСтроки;
			ПроверкаВключена = Ложь;
			ПроверкаПройдена = Истина;
			МассивИД = новый Массив;
			
			Для каждого Строка Из Объект.Пункты Цикл
				ИдентификаторСтроки = Строка.ПолучитьИдентификатор();
				Если МассивВыделенныхСтрок.Найти(ИдентификаторСтроки) <> Неопределено Тогда
					МассивИД.Добавить(Строка.ИД);
					ПроверкаВключена = Истина;
				Иначе
					Если ПроверкаВключена Тогда
						ПроверкаПройдена = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	 
			
			Если ПроверкаПройдена И МассивИД.Количество() Тогда
				ДопПараметры = новый Структура;
				ДопПараметры.Вставить("МассивИД", МассивИД);
				Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ДопПараметры);	
				ПоказатьВопрос(Оповещение, "Создать новый Рейс?", РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да); 
			Иначе
				Сообщение = новый СообщениеПользователю;
				Сообщение.Текст = "В другие рейсы можно переносить только строки с конца без разрывов в выделении.";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, ДопПараметры) Экспорт
 
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ОткрытьНовыйРейс(ПредопределенноеЗначение("Документ.vftРейс.ПустаяСсылка"), ДопПараметры.МассивИД);
	Иначе
		ПараметрыФормы = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Судно",  Объект.Судно);
		Отбор.Вставить("Статус",  ПредопределенноеЗначение("Перечисление.рарусСтатусыПутевогоЖурнала.Незавершен"));
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораРейса", ЭтотОбъект, ДопПараметры);
		Форма = ОткрытьФорму("Документ.vftРейс.ФормаВыбора", ПараметрыФормы, ЭтаФорма, Истина, ЭтаФорма.Окно , , ОписаниеОповещения);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Ссылка",
		Объект.Ссылка,
		ВидСравненияКомпоновкиДанных.НеРавно
		,, 
		Истина,);
		
	КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораРейса(Результат, ДопПараметры) Экспорт
 
	Если Результат <> Неопределено Тогда
		ОткрытьНовыйРейс(Результат, ДопПараметры.МассивИД);
    КонецЕсли;	
 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНовыйРейс(Ссылка, МассивИД) Экспорт
	
	УдалитьПеренесенныеСтроки(МассивИД);
	
	мПараметры = новый Структура;
	мПараметры.Вставить("Ключ", Ссылка);
	ДанныеДляПереносаЧастиРейса = новый Структура;
	ДанныеДляПереносаЧастиРейса.Вставить("Рейс", Объект.Ссылка);
	ДанныеДляПереносаЧастиРейса.Вставить("МассивИД", МассивИД);
	мПараметры.Вставить("ДанныеДляПереносаЧастиРейса", ДанныеДляПереносаЧастиРейса);
	ОткрытьФорму("Документ.vftРейс.ФормаОбъекта", мПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПеренесенныеСтроки(МассивИД)
	
	МассивТЧ = новый Массив;
	МассивТЧ.Добавить("Пункты");
	МассивТЧ.Добавить("Баржи");
	МассивТЧ.Добавить("ПрочиеПричиныСтоянки");
	
	Отбор = новый Структура;
	Для каждого ИД Из МассивИД Цикл
		Отбор.Вставить("ИД", ИД);
		Для каждого ТЧ Из МассивТЧ Цикл
			НайденныеСтроки = Объект[ТЧ].НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект[ТЧ].Удалить(НайденнаяСтрока);
				Модифицированность = Истина;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТЧ(Рейс, МассивИД)
	
	МассивТЧ = новый Массив;
	МассивТЧ.Добавить("Пункты");
	МассивТЧ.Добавить("Баржи");
	МассивТЧ.Добавить("ПрочиеПричиныСтоянки");
	
	Отбор = новый Структура;
	Для каждого ИД Из МассивИД Цикл
		Отбор.Вставить("ИД", ИД);
		Для каждого ТЧ Из МассивТЧ Цикл
			НайденныеСтроки = Рейс[ТЧ].НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НоваяСтрока = Объект[ТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры
// -- rarus Камаев П.В. 01.04.2020

// ++ rarus makole 2021-02-09 
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры

// -- rarus Камаев П.В. 01.04.2020
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьСтруктуруПредРейса()
	СтруктураВозврата = Новый Структура("ДатаНачала,ПортОтправления");
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Судно", vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно"));
	Запись = РегистрыСведений.vftТаблицаДвижения.ПолучитьПоследнее(,СтруктураОтбора);
	ОкончаниеВыгрузки = Константы.vftОкончаниеВыгрузки.Получить();
	Если Запись.ВидОперации = ОкончаниеВыгрузки Тогда
		СтруктураВозврата.ДатаНачала = Запись.Начало;
		СтруктураВозврата.ПортОтправления = Запись.Пункт;
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()

	// Установка кнопок "ОК" и "Записать", установка возможных значений статуса рейса, проверка статуса рейса
	//-------------------------------------------------------------------------------------------------------	 
	
	//Если ЭтоГлавныйУзел Тогда
	//	Элементы.ФормаЗаписать.Доступность = Ложь;
	//	Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;	
	//КонецЕсли;
	
	Если Не ЭтоГлавныйУзел И Объект.СтатусРейса = ПредопределенноеЗначение("Перечисление.рарусСтатусыПутевогоЖурнала.Проверен") Тогда
		ТолькоПросмотр = Истина;
		//++ rarus isaeva 06.10.2021
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		//-- rarus isaeva 06.10.2021
	КонецЕсли;
	// Закроем доступ к некоторым частям документа
	//--------------------------------------------
	Если ТолькоПросмотр и не ДоступныРолиПросмотра Тогда
		Элементы.СтраницаОсновное.Видимость = Ложь;
		Элементы.СтраницаПункты.Видимость = Ложь;
		Элементы.ФормаПечать.Видимость = Ложь;
				//Элементы.Панель1.ТекущаяСтраница=Элементы.Панель1.Страницы.Отчеты;
	Иначе
		//Элементы.Панель1.ТекущаяСтраница=Элементы.Панель1.Страницы.УчетВремени;
		ПоказатьИтогиТабличнойЧастиПункты();
	КонецЕсли;

	Элементы.РаботаПоРаспоряжению.Доступность = ЭтоБуксир;	
	// ++ rarus Камаев П.В. 02.04.2020 Задача № 20769 
	//Элементы.ПортВыгрузки.Видимость = Не Объект.РаботаПоРаспоряжению;
	//Элементы.ПортОтправления.Видимость = Не Объект.РаботаПоРаспоряжению;
	//Элементы.ПортПогрузки.Видимость = Не Объект.РаботаПоРаспоряжению;
	Элементы.ПунктыСледования.Видимость = Не Объект.РаботаПоРаспоряжению;
	// -- rarus Камаев П.В. 02.04.2020
	Элементы.НаименованиеРейса.Видимость = Объект.РаботаПоРаспоряжению;
	
	// ++ rarus Чернавин Г.К 09.04.2020
	ЭтоСудноННФ = рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Объект.Судно);
	Элементы.ПунктыКоординаты.Видимость = ЭтоСудноННФ;
	// -- rarus Чернавин Г.К 09.04.2020
	
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
	Элементы.ПунктыХодовоеВремяПлан.Видимость = ЭтоСудноННФ;
	Элементы.ПунктыРасстояниеПлан.Видимость = ЭтоСудноННФ;
	// -- rarus Камаев П.В. 03.04.2020
	
	// ++ rarus Чернавин Г.К 22.05.2020
	Элементы.СтраницаСОЛП.Видимость = Не ЭтоБуксир;
	Элементы.СтраницаСЛоцманом.Видимость = ЭтоБуксир;
	// -- rarus Чернавин Г.К 22.05.2020
	
	// ++ rarus Камаев П.В. 03.09.2020 Задача № 23585
	Элементы.РейсовыйОтчетННФ.Видимость = ЭтоСудноННФ;
	Если Элементы.Найти("ФормаДокументvftРейсПутевойЖурналННФ") <> Неопределено Тогда
		Элементы.ФормаДокументvftРейсПутевойЖурналННФ.Видимость = ЭтоСудноННФ;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.09.2020
	
	//++ rarus isaeva 01.12.2020
	Элементы.РейсовыйОтчет.Видимость = НЕ ЭтоСудноННФ;
	//-- rarus isaeva 01.12.2020
	// ++ rarus Камаев П.В. 18.01.2021 Задача № 26423 
	Элементы.ОтчетРапортСОЛП.Видимость = НЕ ЭтоСудноННФ;
	// -- rarus Камаев П.В. 18.01.2021
	// ++ rarus Камаев П.В. 18.01.2021 Задача № 26425 
	Элементы.ОтчетОРейсообороте.Видимость = НЕ ЭтоСудноННФ;
	// -- rarus Камаев П.В. 18.01.2021
	// ++ rarus Камаев П.В. 18.01.2021 Задача № 26427 
	Элементы.Механик.Видимость = ЭтоСудноННФ;
	// -- rarus Камаев П.В. 18.01.2021

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИтогиТабличнойЧастиПункты()
	
	ХВНС = 0;
	Для Каждого Строка Из Объект.Пункты Цикл
		ХВНС = ХВНС + Строка.ХодовоеВремяНаСтоянке;	
	КонецЦикла;
	ХВ = 0;
	Для Каждого Строка Из Объект.Пункты Цикл
		ХВ = ХВ + Строка.ХодовоеВремя;	
	КонецЦикла;
	ВС = 0;
	Для Каждого Строка Из Объект.Пункты Цикл
		ВС = ВС + Строка.ВремяСтоянки;	
	КонецЦикла;
	ХВП = 0;
	Для Каждого Строка Из Объект.Пункты Цикл
		ХВП = ХВП + Строка.ХодовоеВремяПлан;	
	КонецЦикла;

	ХВ = ХВ + ХВНС;
	ВС = ВС - ХВНС;
	
	Элементы.ПунктыХодовоеВремя.ТекстПодвала=рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(ХВ);
	Элементы.ПунктыВремяСтоянки.ТекстПодвала=рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(ВС);
	Элементы.ПунктыХодовоеВремяПлан.ТекстПодвала=рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(ХВП);
	Элементы.ПунктыХодовоеВремяНаСтоянке.ТекстПодвала=рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(ХВНС);
	
	// Показ ошибок
	//-------------
	ПоискСтрок = Объект.Пункты.НайтиСтроки(Новый Структура("ОшибкаМетка", Истина));
	Если ПоискСтрок.Количество() = 0 Тогда
		Элементы.ПунктыОшибкаТекст.Видимость = Ложь;
	Иначе
		Элементы.ПунктыОшибкаТекст.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыОбновитьПредставлениеСтрок()
	
	Для Каждого Строка из Объект.Пункты Цикл
		Если Строка.ГруженыйРейс Тогда
			Строка.ГруженыйРейсИндексКартинки = 1;
		Иначе
			Строка.ГруженыйРейсИндексКартинки = 0;
		КонецЕсли;
		Строка.ХодовоеВремяСтрока = рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(Строка.ХодовоеВремя);
		Строка.ВремяСтоянкиСтрока = рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(Строка.ВремяСтоянки);
		Строка.ХодовоеВремяНаСтоянкеСтрока = рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(Строка.ХодовоеВремяНаСтоянке);
		Строка.ХодовоеВремяПланСтрока = рарусОбщегоНазначенияКлиент.ПересчитатьВремя_ЗП_Формат(Строка.ХодовоеВремяПлан);
		Если ЗначениеЗаполнено(Строка.Аналитика) Тогда
			Строка.ПричинаСтоянкиСАналитикой = ""+Строка.ПричинаСтоянки + ", " + Строка.Аналитика;
		Иначе
			Строка.ПричинаСтоянкиСАналитикой = ""+Строка.ПричинаСтоянки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Пункты");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Пункты.ОшибкаМетка");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Розовый);
	
	
	//Бункеровки ТЧ
	//Остаток на начало рейса
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗБункеровкиДатаБункеровки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '19000101';
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Остаток на начало рейса'"));
	
	//Итого получено
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗБункеровкиДатаБункеровки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991205';
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Итого получено'"));

	//Итого передано
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗБункеровкиДатаБункеровки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991210';
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Итого передано'"));

	//Расход за рейс
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗБункеровкиДатаБункеровки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991215';
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Расход за рейс'"));

	//Остаток на конец рейса
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТЗБункеровкиДатаБункеровки");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991220';
	ОтборЭлемента.Использование = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Остаток на конец рейса'"));
	
	// ++ rarus Камаев П.В. 02.06.2020 Задача № 22017 
	// ++ rarus Камаев П.В. 23.03.2020 Задача № 20463	
	СтруктураПолей = новый Структура;
	СтруктураПолей.Вставить("ПрохождениеУчастковСОЛП", "Объект.ПрохождениеУчастковСОЛП");
	СтруктураПолей.Вставить("ПрохождениеУчастковСЛоцманом", "Объект.ПрохождениеУчастковСЛоцманом");
	СтруктураПолей.Вставить("ПрохождениеРостов", "ПрохождениеРостов");
	СтруктураПолей.Вставить("ПрохождениеАзов", "ПрохождениеАзов");
	СтруктураПолей.Вставить("ПрохождениеКЕК", "ПрохождениеКЕК");
	
	Для каждого ЭлементСтруктуры Из СтруктураПолей Цикл
		//Видимость колонки Файл 
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора 					= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Значение + ".Файл");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ПолеОформления      			= ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле 			= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ + "Файл");
		ПолеОформления.Использование 	= Истина;	
		ЭлементОформления.Использование = Истина;
		
		//Текст колонки ПрисоединитьФайл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора 					= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Значение + ".Файл");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Заменить");
		ПолеОформления      			= ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле 			= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ + "ЗагрузитьЗаменитьФайл");
		ПолеОформления.Использование 	= Истина;	
		ЭлементОформления.Использование = Истина;
		
		//Текст колонки ПрисоединитьФайл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора 					= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Значение + ".Файл");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Загрузить");
		ПолеОформления      			= ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле 			= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ + "ЗагрузитьЗаменитьФайл");
		ПолеОформления.Использование 	= Истина;	
		ЭлементОформления.Использование = Истина;
		
		//Видимость колонки УбратьФайл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОтбора 					= ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение		= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Значение + ".Файл");
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ЭлементОтбора.ПравоеЗначение	= Истина;
		ЭлементОтбора.Использование		= Истина;
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		ПолеОформления      			= ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле 			= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ + "УдалитьФайл");
		ПолеОформления.Использование 	= Истина;	
		ЭлементОформления.Использование = Истина;
		
		//Текст колонки УбратьФайл
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Удалить");
		ПолеОформления      			= ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле 			= Новый ПолеКомпоновкиДанных(ЭлементСтруктуры.Ключ + "УдалитьФайл");
		ПолеОформления.Использование 	= Истина;	
		ЭлементОформления.Использование = Истина;
	КонецЦикла;
	// -- rarus Камаев П.В. 23.03.2020
	// -- rarus Камаев П.В. 03.06.2020

	//Доступность редактирования ячеек строк
	МассивБК = Новый Массив;
	МассивБК.Добавить("ТЗБункеровкиДатаБункеровки");
	МассивБК.Добавить("ТЗБункеровкиОперация");
	МассивБК.Добавить("ТЗБункеровкиБункеровщик");
	МассивБК.Добавить("ТЗБункеровкиПункт");
	МассивБК.Добавить("ТЗБункеровкиПримечание");
	Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
		МассивБК.Добавить("ТЗБункеровкиМаркаТоплива"+Строка.ИмяРеквизита);
		МассивБК.Добавить("ТЗБункеровкиКоличество"+Строка.ИмяРеквизита);	
	КонецЦикла;
	
	МассивСК = Новый Массив;
	МассивСК.Добавить("ТЗБункеровкиДатаБункеровки");
	МассивСК.Добавить("ТЗБункеровкиОперация");
	МассивСК.Добавить("ТЗБункеровкиБункеровщик");
	МассивСК.Добавить("ТЗБункеровкиПункт");
	МассивСК.Добавить("ТЗБункеровкиПримечание");
	Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
		МассивСК.Добавить("ТЗБункеровкиМаркаТоплива"+Строка.ИмяРеквизита);
	КонецЦикла;
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Для Каждого ЭлементМассива Из МассивСК Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементМассива);
	КонецЦикла;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '19000101';
	ОтборЭлемента.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,240));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Для Каждого ЭлементМассива Из МассивБК Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементМассива);
	КонецЦикла;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991205';
	ОтборЭлемента.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,240));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Для Каждого ЭлементМассива Из МассивБК Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементМассива);
	КонецЦикла;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991210';
	ОтборЭлемента.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,240));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Для Каждого ЭлементМассива Из МассивБК Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементМассива);
	КонецЦикла;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991215';
	ОтборЭлемента.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,240));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Для Каждого ЭлементМассива Из МассивСК Цикл
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементМассива);
	КонецЦикла;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТЗБункеровки.ДатаБункеровки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = '39991220';
	ОтборЭлемента.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,240));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеЭтоБуксир()

	ЭтоБуксир = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	vftПроектыСудов.Толкач КАК Толкач
	               |ИЗ
	               |	Справочник.vftСуда КАК vftСуда
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.vftПроектыСудов КАК vftПроектыСудов
	               |		ПО vftСуда.Проект = vftПроектыСудов.Ссылка
	               |ГДЕ
	               |	vftСуда.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Объект.Судно);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выбрать();
		ВыборкаЗапроса.Следующий();
		ЭтоБуксир = ВыборкаЗапроса.Толкач;
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьЗначениеБуксир()

&НаКлиенте
Процедура ЗапомнитьТекущиеЗначения()

	ТекущееСудно = Объект.Судно;
	ТекущийСтатусРейса = Объект.СтатусРейса;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтроки(ТекущиеДанные = Неопределено, ИндексНовойСтроки = Неопределено, СтрокаКопирования = Неопределено)
	
	
	Если Не ЗначениеЗаполнено(Объект.Судно) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Необходимо указать судно!'"),30, Нстр("ru = 'Внимание!'"));
		Возврат;
	КонецЕсли;
	ОповещениеЗакрытия = Новый ОписаниеОповещения("ОткрытьФормуРедактированияСтрокиЗавершение", ЭтотОбъект);
	
	ТекущиеДанныеПункты = Элементы.Пункты.ТекущиеДанные;
	НомерСтрокиИзПредыдущей = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	//Редактирование строки
	Если ТекущиеДанные <> Неопределено Тогда
		НомерСтрокиИзПредыдущей = Истина;
		//Строка Пункты
		
		//++ rarus isaeva 14.11.2020
		//ПараметрыТекущаяСтрока = Новый Структура("ИД,Пункт,ПунктКомментарий,Приход,Отход,
		//|ХодовоеВремя,ХодовоеВремяНаСтоянке,ХодовоеВремяПлан,МаневрыВПункте,ГруженыйРейс,ВремяСтоянки,ПричинаСтоянки,АдресПредыдущейСтроки,РасстояниеПлан,РасстояниеФакт,Примечание,Аналитика,Координаты");
		ПараметрыТекущаяСтрока = Новый Структура("ИД,Пункт,ПунктКомментарий,Приход,Отход,
		|ХодовоеВремя,ХодовоеВремяНаСтоянке,ХодовоеВремяПлан,МаневрыВПункте,ГруженыйРейс,ВремяСтоянки,ПричинаСтоянки,АдресПредыдущейСтроки,РасстояниеПлан,РасстояниеФакт,Примечание,Аналитика,Координаты, КоординатыN, КоординатыE, ПараметрNS, ПараметрWE");
		//-- rarus isaeva 14.11.2020
		
		ЗаполнитьЗначенияСвойств(ПараметрыТекущаяСтрока, ТекущиеДанные);
		ПараметрыОткрытия.Вставить("РедактированиеСтроки", Истина);
		ПараметрыОткрытия.Вставить("ТекущиеДанные", ПараметрыТекущаяСтрока);
		МассивППС = Новый Массив;
		Для Каждого СтрокаППС Из Объект.ПрочиеПричиныСтоянки Цикл
			Если СтрокаППС.ИД = ТекущиеДанные.ИД Тогда
				СтруктураСтрокиППС = Новый Структура("ИД,ПричинаСтоянки,НачДата,КонДата,ВремяСтоянки,Комментарий,Аналитика");
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиППС, СтрокаППС);
				МассивППС.Добавить(СтруктураСтрокиППС);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("ТаблицаППС", МассивППС);
		МассивБаржи = Новый Массив;
		Для Каждого СтрокаБаржи Из Объект.Баржи Цикл
			Если СтрокаБаржи.ИД = ТекущиеДанные.ИД Тогда
				СтруктураСтрокиБаржи = Новый Структура("ИД,БаржаПриход,БаржаОперация,СудноПередавшее,СудноПринявшее,Груз,НачальныйВесГруза
				|,ВесГруза,ВесГрузаМетка,ПаузкаНачальныйВесГруза,ДатаВыпускаКоносамента,ДатаПодачиНотиса,
				|,НачалоОперации,ОкончаниеОперации,ДокументыНаБортуНачДата,ДокументыНаБортуКонДата,ДатаПриемаСекции
				|,ДатаПередачиСекции,НачалоОперации2,ОкончаниеОперации2,ВесГрузаВыгружено
				// ++ rarus Камаев П.В. 08.10.2020 Задача № 24609 
				|,ИтогоКолТекСекция,ИтогоКолПринСекция");
				// -- rarus Камаев П.В. 08.10.2020
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиБаржи, СтрокаБаржи);
				МассивБаржи.Добавить(СтруктураСтрокиБаржи);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("ТаблицаБаржи", МассивБаржи);
		НомерСтроки = ТекущиеДанные.НомерСтроки;
	КонецЕсли;
	
	//добавление новой строки
	ДобавлениеСтроки = Ложь;
	Если ТекущиеДанные = Неопределено И ИндексНовойСтроки = Неопределено И СтрокаКопирования = Неопределено Тогда
		ДобавлениеСтроки = Истина;
		ПараметрыОткрытия.Вставить("ДобавлениеСтроки", Истина);		
		Если ТекущиеДанныеПункты <> Неопределено Тогда
			ПараметрНомерСтроки = Объект.Пункты.Количество();
			АдресВоВременномХранилище = ПолучитьАдресВоВременномХранилище(ПараметрНомерСтроки);
			ПараметрыОткрытия.Вставить("АдресПредыдущейСтроки", АдресВоВременномХранилище);
		КонецЕсли;
	КонецЕсли;
	
	//вставка строки
	Если ИндексНовойСтроки <> Неопределено Тогда
		НомерСтрокиИзПредыдущей = Истина;
		ПараметрыОткрытия.Вставить("ВставкаСтроки", Истина);	
		ПараметрыОткрытия.Вставить("ИндексНовойСтроки", ИндексНовойСтроки);
	КонецЕсли;
	
	Если СтрокаКопирования <> Неопределено Тогда
		//Строка Пункты
		
		//++ rarus isaeva 14.11.2020
		//ПараметрыТекущаяСтрока = Новый Структура("ИД,Пункт,ПунктКомментарий,Приход,Отход,
		//|ХодовоеВремя,ХодовоеВремяНаСтоянке,ХодовоеВремяПлан,МаневрыВПункте,ГруженыйРейс,ВремяСтоянки,ПричинаСтоянки,РасстояниеПлан,РасстояниеФакт,Примечание,Аналитика,Координаты");
		ПараметрыТекущаяСтрока = Новый Структура("ИД,Пункт,ПунктКомментарий,Приход,Отход,
		|ХодовоеВремя,ХодовоеВремяНаСтоянке,ХодовоеВремяПлан,МаневрыВПункте,ГруженыйРейс,ВремяСтоянки,ПричинаСтоянки,РасстояниеПлан,РасстояниеФакт,Примечание,Аналитика,Координаты, КоординатыN, КоординатыE, ПараметрNS, ПараметрWE");
		//++ rarus isaeva 14.11.2020
		
		ЗаполнитьЗначенияСвойств(ПараметрыТекущаяСтрока, СтрокаКопирования);
		ПараметрыОткрытия.Вставить("КопированиеСтроки", Истина);
		ПараметрыОткрытия.Вставить("ТекущиеДанные", ПараметрыТекущаяСтрока);
		МассивППС = Новый Массив;
		Для Каждого СтрокаППС Из Объект.ПрочиеПричиныСтоянки Цикл
			Если СтрокаППС.ИД = СтрокаКопирования.ИД Тогда
				СтруктураСтрокиППС = Новый Структура("ИД,ПричинаСтоянки,НачДата,КонДата,ВремяСтоянки,Комментарий,Аналитика");
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиППС, СтрокаППС);
				МассивППС.Добавить(СтруктураСтрокиППС);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("ТаблицаППС", МассивППС);
		МассивБаржи = Новый Массив;
		Для Каждого СтрокаБаржи Из Объект.Баржи Цикл
			Если СтрокаБаржи.ИД = СтрокаКопирования.ИД Тогда
				СтруктураСтрокиБаржи = Новый Структура("ИД,БаржаПриход,БаржаОперация,СудноПередавшее,СудноПринявшее,Груз,НачальныйВесГруза
				|,ВесГруза,ВесГрузаМетка,ПаузкаНачальныйВесГруза,ДатаВыпускаКоносамента,ДатаПодачиНотиса,
				|,НачалоОперации,ОкончаниеОперации,ДокументыНаБортуНачДата,ДокументыНаБортуКонДата,ДатаПриемаСекции
				|,ДатаПередачиСекции,НачалоОперации2,ОкончаниеОперации2,ВесГрузаВыгружено
				// ++ rarus Камаев П.В. 08.10.2020 Задача № 24609 
				|,ИтогоКолТекСекция,ИтогоКолПринСекция");
				// -- rarus Камаев П.В. 08.10.2020
				ЗаполнитьЗначенияСвойств(СтруктураСтрокиБаржи, СтрокаБаржи);
				МассивБаржи.Добавить(СтруктураСтрокиБаржи);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("ТаблицаБаржи", МассивБаржи);	
	КонецЕсли;
	Если Не ДобавлениеСтроки И ТекущиеДанныеПункты <> Неопределено И ТекущиеДанныеПункты.НомерСтроки > 1 Тогда
		Если НомерСтрокиИзПредыдущей Тогда
			ПараметрНомерСтроки = ТекущиеДанныеПункты.НомерСтроки-1;
		Иначе
			ПараметрНомерСтроки = ТекущиеДанныеПункты.НомерСтроки;
		КонецЕсли;
		АдресВоВременномХранилище = ПолучитьАдресВоВременномХранилище(ПараметрНомерСтроки);
		ПараметрыОткрытия.Вставить("АдресПредыдущейСтроки", АдресВоВременномХранилище);
	КонецЕсли;
		
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783 
	ПараметрыОткрытия.Вставить("Судно", Объект.Судно);
	// -- rarus Камаев П.В. 03.04.2020
	// ++ rarus Камаев П.В. 03.04.2020 20785
	Если ТекущиеДанные <> Неопределено Тогда
		ПредыдущийПункт = ПолучитьПредыдущийПункт(ТекущиеДанные.НомерСтроки);
	Иначе
		ПредыдущийПункт = ПолучитьПредыдущийПункт(-1);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ПредыдущийПункт", ПредыдущийПункт);
	// -- rarus Камаев П.В. 03.04.2020
	ПараметрыОткрытия.Вставить("ЭтоБуксир", ЭтоБуксир);
	// ++ rarus Камаев П.В. 06.04.2020 Задача № 20799
	Порты = рарусОбщегоНазначенияКлиентСервер.ПолучитьПортыРейса(Объект.ПунктыСледования);
	ПараметрыОткрытия.Вставить("ПортОтправления", Порты.ПортОтправления);
	//ПараметрыОткрытия.Вставить("ПортОтправления", Объект.ПортОтправления);
	// -- rarus Камаев П.В. 06.04.2020
	// ++ rarus Чернавин Г.К 19.08.2020 № 23341
	//ПровереноМенеджером = Ложь;
	//Если ТекущиеДанные <> Неопределено И ТекущиеДанные.ПровереноМенеджером Тогда
	//	ПровереноМенеджером = Истина;
	//КонецЕсли;
	//ПараметрТолькоПросмотр = (ТолькоПросмотр Или ПровереноМенеджером) И Не ПолноправныйПользователь;
	ПараметрТолькоПросмотр = ТолькоПросмотр И Не ПолноправныйПользователь;
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ПараметрТолькоПросмотр);
	// -- rarus Чернавин Г.К 19.08.2020
	
	// ++ rarus Чернавин Г.К 18.06.2020 № 22279
	НомерДокумента = НомерБезПрефикса(Объект.Номер);
	Заголовок = "Рейс "+НомерДокумента+" от "+Формат(Объект.Дата,"ДФ=dd.MM.yyyy")+?(НомерСтроки=Неопределено,", Новая строка",", Строка №"+НомерСтроки);
	// -- rarus Чернавин Г.К 18.06.2020 
	ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	
	ФормаОткрытия = ОткрытьФорму("Документ.vftРейс.Форма.ФормаРедактированияСтроки", ПараметрыОткрытия, ЭтаФорма,,,,ОповещениеЗакрытия,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	
КонецПроцедуры

// ++ rarus Камаев П.В. 03.04.2020 20785 
&НаСервере
Функция ПолучитьПредыдущийПункт(НомерТекСтроки)
	Таблица = Объект.Пункты;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	КонецЕсли;
	
	ПоследнийУказанныйПункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	
	Для каждого Строка Из Таблица Цикл
		Если Строка.НомерСтроки = НомерТекСтроки Тогда
			Прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.Пункт) Тогда
			ПоследнийУказанныйПункт = Строка.Пункт;	
		КонецЕсли; 	
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПоследнийУказанныйПункт) Тогда
		Возврат ПоследнийУказанныйПункт	
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	КонецЕсли; 
	
КонецФункции
// -- rarus Камаев П.В. 03.04.2020

&НаКлиенте
Процедура ОткрытьФормуРедактированияСтрокиЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ТекущиеДанные = Элементы.Пункты.ТекущиеДанные;
	Если Результат <> Неопределено Тогда
		Модифицированность = Результат.Модифицированность;
		Если Результат.Свойство("РедактированиеСтроки") Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат.ПараметрыТекущаяСтрока);
			СтруктураПоиска = Новый Структура("ИД", ТекущиеДанные.ИД);
			рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Объект.Баржи,СтруктураПоиска);
			рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Объект.ПрочиеПричиныСтоянки,СтруктураПоиска);
			Для Каждого СтрокаППС Из Результат.ТаблицаППС Цикл
				НоваяСтрокаППС = Объект.ПрочиеПричиныСтоянки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаППС, СтрокаППС);
				НоваяСтрокаППС.ИД = ТекущиеДанные.ИД;
			КонецЦикла;
			Для Каждого СтрокаБаржи Из Результат.ТаблицаБаржи Цикл
				НоваяСтрокаБаржи = Объект.Баржи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБаржи, СтрокаБаржи);
				НоваяСтрокаБаржи.ИД = ТекущиеДанные.ИД;
			КонецЦикла;
		КонецЕсли;
		Если Результат.Свойство("ДобавлениеСтроки") Тогда
			НоваяСтрокаПункты = Объект.Пункты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПункты, Результат.ПараметрыТекущаяСтрока);
			НовыйУИД = Новый УникальныйИдентификатор;
			НоваяСтрокаПункты.ИД = НовыйУИД;
			Для Каждого СтрокаППС Из Результат.ТаблицаППС Цикл
				НоваяСтрокаППС = Объект.ПрочиеПричиныСтоянки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаППС, СтрокаППС);
				НоваяСтрокаППС.ИД = НовыйУИД;
			КонецЦикла;
			Для Каждого СтрокаБаржи Из Результат.ТаблицаБаржи Цикл
				НоваяСтрокаБаржи = Объект.Баржи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБаржи, СтрокаБаржи);
				НоваяСтрокаБаржи.ИД = НовыйУИД;
			КонецЦикла;
		КонецЕсли;
		Если Результат.Свойство("ВставкаСтроки") Тогда
			НоваяСтрокаПункты = Объект.Пункты.Вставить(Результат.ИндексНовойСтроки);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПункты, Результат.ПараметрыТекущаяСтрока);
			НовыйУИД = Новый УникальныйИдентификатор;
			НоваяСтрокаПункты.ИД = НовыйУИД;
			Для Каждого СтрокаППС Из Результат.ТаблицаППС Цикл
				НоваяСтрокаППС = Объект.ПрочиеПричиныСтоянки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаППС, СтрокаППС);
				НоваяСтрокаППС.ИД = НовыйУИД;
			КонецЦикла;
			Для Каждого СтрокаБаржи Из Результат.ТаблицаБаржи Цикл
				НоваяСтрокаБаржи = Объект.Баржи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБаржи, СтрокаБаржи);
				НоваяСтрокаБаржи.ИД = НовыйУИД;
			КонецЦикла;
		КонецЕсли;
		Если Результат.Свойство("КопированиеСтроки") Тогда
			НоваяСтрокаПункты = Объект.Пункты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПункты, Результат.ПараметрыТекущаяСтрока);
			НовыйУИД = Новый УникальныйИдентификатор;
			НоваяСтрокаПункты.ИД = НовыйУИД;
			Для Каждого СтрокаППС Из Результат.ТаблицаППС Цикл
				НоваяСтрокаППС = Объект.ПрочиеПричиныСтоянки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаППС, СтрокаППС);
				НоваяСтрокаППС.ИД = НовыйУИД;
			КонецЦикла;
			Для Каждого СтрокаБаржи Из Результат.ТаблицаБаржи Цикл
				НоваяСтрокаБаржи = Объект.Баржи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаБаржи, СтрокаБаржи);
				НоваяСтрокаБаржи.ИД = НовыйУИД;
			КонецЦикла;
		КонецЕсли;
		Если Результат.Свойство("ТаблицаПереноса") Тогда
			ТаблицаПереноса = Результат.ТаблицаПереноса;
			Если Результат.Свойство("РедактированиеСтроки") Тогда
				НомерТекущейСтроки = ТекущиеДанные.НомерСтроки;
			Иначе
				НомерТекущейСтроки = НоваяСтрокаПункты.НомерСтроки;
			КонецЕсли;
			ДобавитьСтроку = Ложь;
			Если Объект.Пункты.Количество() > НомерТекущейСтроки Тогда
				СтрокаРедактирования = Объект.Пункты[НомерТекущейСтроки];
				Элементы.Пункты.ТекущаяСтрока = СтрокаРедактирования.ПолучитьИдентификатор();
			Иначе
				СтрокаРедактирования = Объект.Пункты.Добавить();
				НовыйУИД = Новый УникальныйИдентификатор;
				СтрокаРедактирования.Пункт = Результат.ПараметрыТекущаяСтрока.Пункт;
				СтрокаРедактирования.ИД = НовыйУИД;
				СтрокаРедактирования.ПричинаСтоянки = ТаблицаПереноса[0].ПричинаСтоянки;
				Элементы.Пункты.ТекущаяСтрока = СтрокаРедактирования.ПолучитьИдентификатор();
				ДатаМакc = '00010101';
				ДатаМин = '39990101';
				Для Каждого Строка Из ТаблицаПереноса Цикл
					Если Строка.НачДата < ДатаМин Тогда
						ДатаМин = Строка.НачДата;
					КонецЕсли;
					Если Строка.КонДата > ДатаМакc Тогда
						ДатаМакc = Строка.КонДата;
					КонецЕсли;
				КонецЦикла;
				СтрокаРедактирования.Приход = ДатаМин;
				СтрокаРедактирования.Отход = ДатаМакc;			
				//Заполним ТЧ Баржи
				Для Каждого СтрокаБаржи Из Результат.ТаблицаБаржи Цикл
					НоваяСтрокаБаржи = Объект.Баржи.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаБаржи, СтрокаБаржи);
					НоваяСтрокаБаржи.ИД = НовыйУИД;
				КонецЦикла;
			КонецЕсли;
			Для Каждого Строка Из ТаблицаПереноса Цикл
				НоваяСтрока = Объект.ПрочиеПричиныСтоянки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				НоваяСтрока.ИД = СтрокаРедактирования.ИД;
			КонецЦикла;
		
			ОткрытьФормуРедактированияСтроки(Элементы.Пункты.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	Если Модифицированность Тогда
		ПересчитатьХодовоеВремя();
		// ++ rarus Камаев П.В. 27.11.2020 Задача № 25553
		ЗаполнитьРасстояниеВШапке();
		// -- rarus Камаев П.В. 27.11.2020
	КонецЕсли;
	ПроверитьТабличнуюЧастьПунктыСервер();
	ПоказатьИтогиТабличнойЧастиПункты();
	ПунктыОбновитьПредставлениеСтрок();
	 
КонецПроцедуры

&НаСервере
Процедура ПроверитьТабличнуюЧастьПунктыСервер()
		
	ТекОшибкаМетка = Ложь;
	
	// Перебираем все строки табл. части "Пункты"
	//-------------------------------------------
	// ++ rarus Камаев П.В. 15.10.2020 Задача № 24823
	СвоиСекции = новый СписокЗначений;
	// -- rarus Камаев П.В. 15.10.2020
	Для Каждого ТекСтрока из Объект.Пункты Цикл
		СтрокаПредыдущая = ПолучитьДанныеПредыдущейСтроки(ТекСтрока.НомерСтроки-1);
		//Если СтрокаПредыдущая <> Неопределено Тогда
		//	ТекСтрока.АдресПредыдущейСтроки = ПоместитьВоВременноеХранилище(СтрокаПредыдущая, УникальныйИдентификатор);
		//КонецЕсли;
	//	// Корректировка данных документа
	//	//-------------------------------
	//	ТекСтрока.ХодовоеВремя=?(СтрокаПредыдущая=Неопределено,0,рарусОбщегоНазначенияКлиент.РазницаДат(СтрокаПредыдущая.Отход,ТекСтрока.Приход));
	//	
		Если ТекСтрока.НомерСтроки = 1 и ЗначениеЗаполнено(ТекСтрока.Приход) Тогда
			Объект.Дата = ТекСтрока.Приход;
			//НастройкаФорм.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента, ЭлементыФормы.Номер);
			мТекущаяДатаДокумента = Объект.Дата;
		КонецЕсли;
	//	
	//	// Если ранее была обнаружена ошибка, то следующие строки помечаем как ошибочные, без проверки
	//	//--------------------------------------------------------------------------------------------
		ТекСтрока.ОшибкаТекст = "";
		ТекСтрока.ОшибкаМетка = Ложь;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка = Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка заполнения реквизитов
	//	//-------------------------------
	Если Не ЗначениеЗаполнено(ТекСтрока.Пункт) и ПустаяСтрока(ТекСтрока.ПунктКомментарий) 
		//++ rarus isaeva 14.11.2020
		 И Не ЗначениеЗаполнено(ТекСтрока.Координаты)
		//-- rarus isaeva 14.11.2020
		Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Необходимо заполнить ""Пункт"", ""Координаты"" или ""Комментарий к пункту""!" + Символы.ПС;
		КонецЕсли;
	//	
	
	//++ rarus isaeva 04.01.2020
	ЭтоСудноННФ = рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Объект.Судно);
	//-- rarus isaeva 04.01.2020
	
	
	
	Если ТекСтрока.Приход = Дата(1,1,1) Тогда
		ТекОшибкаМетка = Истина;
		ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не заполнен реквизит ""Приход""!" + Символы.ПС;
		
	//++ rarus isaeva 04.01.2020
	//ИначеЕсли Год(ТекСтрока.Приход) <> Год(Объект.Дата) Тогда
	ИначеЕсли Год(ТекСтрока.Приход) <> Год(Объект.Дата) И (НЕ ЭтоСудноННФ) Тогда
	//-- rarus isaeva 04.01.2020
		ТекОшибкаМетка = Истина;
		ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"У значений реквизитов ""Приход"" и ""Дата документа"" должен совпадать год!" + Символы.ПС;
	КонецЕсли;
	
	Если ТекСтрока.Отход = Дата(1,1,1) Тогда
		ТекОшибкаМетка = Истина;
		ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не заполнен реквизит ""Отход""!" + Символы.ПС;
		
	//++ rarus isaeva 04.01.2020
	//ИначеЕсли Год(ТекСтрока.Отход) <> Год(Объект.Дата) Тогда
	ИначеЕсли Год(ТекСтрока.Отход) <> Год(Объект.Дата) И (НЕ ЭтоСудноННФ)  Тогда
	//-- rarus isaeva 04.01.2020
		ТекОшибкаМетка = Истина;
		ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "У значений реквизитов ""Отход"" и ""Дата документа"" должен совпадать год!" + Символы.ПС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ПричинаСтоянки) Тогда
		ТекОшибкаМетка = Истина;
		ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не заполнен реквизит ""Причина стоянки""!" + Символы.ПС;
	КонецЕсли;
	//	
	Если ТекОшибкаМетка Тогда
		ТекСтрока.ОшибкаМетка = Истина;
		Продолжить;
	КонецЕсли;
	//	
	//	// Проверка заполнения первой и последней строк
	//	//---------------------------------------------
		Если ТекСтрока.НомерСтроки = 1 Тогда
			Если ТекСтрока.ПричинаСтоянки <> Справочники.vftТиповыеОперации.НачалоРейса Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "В первой строке рейса причина стоянки должна быть ""Начало рейса""!" + Символы.ПС;
			КонецЕсли;
			
			Если РейсПересекаетсяСПредыдущим() Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Начало текущего рейса должно совпадать с датой окончания предыдущего, либо интервал между рейсами должен быть больше " + ИнтервалМеждуРейсами + " часов!" + Символы.ПС;
			КонецЕсли;
			
			Если ТекСтрока.Приход <> ТекСтрока.Отход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "В первой строке рейса значения реквизитов ""Приход"" и ""Отход"" должны совпадать!" + Символы.ПС;
			КонецЕсли;
		Иначе
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.НачалоРейса Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Причина стоянки ""Начало рейса"" может быть только в первой строке рейса!" + Символы.ПС;
			КонецЕсли;
			
			Если ТекСтрока.НомерСтроки = Объект.Пункты.Количество() и РейсПересекаетсяСоСледующим(ТекСтрока.Отход) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Конец текущего рейса должен совпадать с датой начала следующего, либо интервал между рейсами должен быть больше " + ИнтервалМеждуРейсами + " часов!" + Символы.ПС;
				//ПоказатьОповещениеПользователя(,,"Конец текущего рейса не совпадает с датой начала следующего, либо интервал между рейсами меньше "+ИнтервалМеждуРейсами+" часов!",БиблиотекаКартинок.Внимание48);
			КонецЕсли;
		КонецЕсли;
	//	
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка значения даты прихода
	//	//-------------------------------
		Если СтрокаПредыдущая <> Неопределено Тогда
			Если ТекСтрока.Приход < СтрокаПредыдущая.Отход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Значение реквизита ""Приход"" должно быть больше или равно значению реквизита ""Отход"" предыдущей строки!"+Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	//	
	//	// Проверка значения даты отхода
	//	//------------------------------
		Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПромежуточныйПункт Тогда
			Если ТекСтрока.Отход <> ТекСтрока.Приход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Для промежуточного пункта значения реквизитов ""Приход"" и ""Отход"" должны совпадать!"+Символы.ПС;
			КонецЕсли;
		Иначе
			Если ТекСтрока.Отход < ТекСтрока.Приход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Значение реквизита ""Отход"" должно быть больше или равно значению реквизита ""Приход""!"+Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	//	
		// Проверка значения "ХодовоеВремяНаСтоянке"
		//------------------------------------------
		Если ТекСтрока.ХодовоеВремяНаСтоянке > ТекСтрока.ВремяСтоянки Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Значение реквизита ""Ходовое время в пункте"" не может быть больше общего времени стоянки!"+Символы.ПС;
		КонецЕсли;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка = Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка списка барж на дублирование
	//	//-------------------------------------
		Если ЭтоБуксир Тогда
			Список = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "БаржаПриход,ВесГруза");
			Список.ЗаполнитьЗначения(1, "ВесГруза");
			Список.Свернуть("БаржаПриход", "ВесГруза");
			Для Каждого СтрСписка Из Список Цикл
				Если СтрСписка.ВесГруза <> 1 Тогда
					ТекОшибкаМетка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекОшибкаМетка Тогда
				ТекСтрока.ОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Обнаружено дублирование барж!" + Символы.ПС;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	//	
	//	// Проверка списка барж в соседних строках
	//	//----------------------------------------
		Если ЭтоБуксир и СтрокаПредыдущая <> Неопределено Тогда
			Список = Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД),"БаржаПриход,БаржаОперация");
			Для Каждого СтрСписка Из Список Цикл
				Если СтрСписка.БаржаОперация = Перечисления.РарусБаржиОперации.Прием или
					 СтрСписка.БаржаОперация = Перечисления.РарусБаржиОперации.ПриемПередача Тогда
					СтрСписка.БаржаПриход = Справочники.vftСуда.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			Список.Свернуть("БаржаПриход");
			рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Список, Новый Структура("БаржаПриход", Справочники.vftСуда.ПустаяСсылка()));
			
			Если не рарусОбщегоНазначенияКлиентСервер.СравнитьМассивы(Список.ВыгрузитьКолонку("БаржаПриход"), СтрокаПредыдущая.Баржи.ВыгрузитьКолонку("БаржаПриход")) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не совпадают списки барж в текущей и предыдущей строках!" + Символы.ПС;
				ТекСтрока.ОшибкаМетка = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	//	
	//	// Проверка списка грузов в соседних строках
	//	//------------------------------------------
		Если СтрокаПредыдущая <> Неопределено Тогда
			Если ЭтоБуксир Тогда
				// Проверка буксира
				//-----------------
				Список = Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД),"БаржаПриход,Груз,НачальныйВесГруза");
				Для Каждого Эл из СтрокаПредыдущая.Баржи Цикл
					СтрСписка = Список.Добавить();
					СтрСписка.БаржаПриход = Эл.БаржаПриход;
					СтрСписка.Груз = Эл.Груз;
					СтрСписка.НачальныйВесГруза = -Эл.НачальныйВесГруза;
				КонецЦикла;
				Список.Свернуть("БаржаПриход,Груз", "НачальныйВесГруза");
				рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Список, Новый Структура("НачальныйВесГруза", 0));
				
				СтруктураПоиска=Новый Структура("БаржаПриход,Груз,НачальныйВесГруза");
				
				Для Каждого СтрСписка из Список Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрСписка);
					Эл = СтрокаПредыдущая.ОжиданиеБуксира.НайтиСтроки(СтруктураПоиска);
					Если Эл.Количество() = 0 Тогда
						ТекОшибкаМетка = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				// Проверка сухогруза
				//-------------------
				Список = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "Груз,НачальныйВесГруза");
				Для Каждого Эл из СтрокаПредыдущая.Баржи Цикл
					СтрСписка = Список.Добавить();
					СтрСписка.Груз = Эл.Груз;
					СтрСписка.НачальныйВесГруза = -Эл.НачальныйВесГруза;
				КонецЦикла;
				Список.Свернуть("Груз", "НачальныйВесГруза");
				рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Список, Новый Структура("НачальныйВесГруза", 0));
				
				Если Список.Количество() > 0 Тогда
					ТекОшибкаМетка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекОшибкаМетка Тогда
				ТекСтрока.ОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Не совпадает количество грузов в текущей и предыдущей строках!" + Символы.ПС;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка прочих причин стоянки
		//-------------------------------
		Список = Объект.ПрочиеПричиныСтоянки.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД));
		Для Каждого СтрСписка из Список Цикл
			Если Не ЗначениеЗаполнено(СтрСписка.ПричинаСтоянки) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены незаполненные прочие причины стоянки!"+Символы.ПС;
				Прервать;
			ИначеЕсли Год(СтрСписка.НачДата)<>Год(Объект.Дата) 
				 И (НЕ ЭтоСудноННФ)  //rarus isaeva 04.01.2020
				 Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых год начальной даты не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			ИначеЕсли Год(СтрСписка.КонДата)<>Год(Объект.Дата) 
				 И (НЕ ЭтоСудноННФ)  //rarus isaeva 04.01.2020
				Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых год конечной даты не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			ИначеЕсли не рарусОбщегоНазначенияКлиентСервер.Между(СтрСписка.НачДата,ТекСтрока.Приход,ТекСтрока.Отход) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых начальная дата находится не между датами прихода и отхода!"+Символы.ПС;
				Прервать;
			ИначеЕсли Не рарусОбщегоНазначенияКлиентСервер.Между(СтрСписка.КонДата,ТекСтрока.Приход,ТекСтрока.Отход) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых конечная дата находится не между датами прихода и отхода!"+Символы.ПС;
				Прервать;
			ИначеЕсли СтрСписка.НачДата>СтрСписка.КонДата Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых начальная дата больше конечной!"+Символы.ПС;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;

		// Проверка непересечения интервалов прочих причин стоянки
		//--------------------------------------------------------
		Список.Сортировать("НачДата");
		Для А = 1 по Список.Количество()-1 Цикл
			Если Список[А].НачДата < Список[А-1].КонДата Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены прочие причины стоянки, у которых период действия пересекается с периодом другой прочей причины!" + Символы.ПС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка времени прочих причин стоянки
	//	//---------------------------------------
		Если Список.Итог("ВремяСтоянки") + ТекСтрока.МаневрыВПункте > ТекСтрока.ВремяСтоянки - ТекСтрока.ХодовоеВремяНаСтоянке Тогда
			ТекОшибкаМетка  =Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Общее время прочих причин стоянки " + ?(ТекСтрока.МаневрыВПункте = 0,"","(включая маневры в пункте) ")+"не может быть больше общего времени стоянки!"+Символы.ПС;
		КонецЕсли;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка значений дат в ТЧ "Баржи"
	//	//-----------------------------------
		
		// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247 
		ЭтоСудноННФ = рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Объект.Судно);
		// -- rarus Камаев П.В. 11.11.2020
		
		Список= Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД));
		Для Каждого СтрСписка из Список Цикл
			Если ЗначениеЗаполнено(СтрСписка.ДатаПриемаСекции) И Год(СтрСписка.ДатаПриемаСекции) <> Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты приема секции не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаПередачиСекции) И Год(СтрСписка.ДатаПередачиСекции) <> Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты передачи секции не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаПриемаСекции) И ЗначениеЗаполнено(СтрСписка.ДатаПередачиСекции) и СтрСписка.ДатаПриемаСекции>СтрСписка.ДатаПередачиСекции Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых дата приема секции больше даты передачи секции!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаВыпускаКоносамента) И Год(СтрСписка.ДатаВыпускаКоносамента) <> Год(Объект.Дата)
				 И (НЕ ЭтоСудноННФ)  //rarus isaeva 04.01.2020
				Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты выпуска коносамента не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247
			// Если ЗначениеЗаполнено(СтрСписка.ДатаПодачиНотиса) и Год(СтрСписка.ДатаПодачиНотиса)<>Год(Объект.Дата) Тогда
			Если ЗначениеЗаполнено(СтрСписка.ДатаПодачиНотиса)
				И Год(СтрСписка.ДатаПодачиНотиса)<>Год(Объект.Дата)
				И НЕ ЭтоСудноННФ Тогда
			// -- rarus Камаев П.В. 11.11.2020
			
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты подачи нотиса не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			//№ 21761
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда				
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Погружено,т. не равно 0 и не заполнено начало паузки или окончание паузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) 
				// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247
				И НЕ ЭтоСудноННФ Тогда
				// -- rarus Камаев П.В. 11.11.2020
				
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Выгружено,т. не равно 0 и не заполнено начало выгрузки или окончание выгрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Догружено,т. не равно 0 и не заполнено начало догрузки или окончание догрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Погрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации))
				// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247
				И НЕ ЭтоСудноННФ Тогда
				// -- rarus Камаев П.В. 11.11.2020
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Погружено,т. не равно 0 и не заполнено начало погрузки или окончание погрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Погружено,т. не равно 0 и не заполнено начало погрузки или окончание погрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка
				И СтрСписка.ВесГрузаВыгружено <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации2) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации2)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Выгружено,т. не равно 0 и не заполнено начало выгрузки или окончание выгрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(СтрСписка.НачалоОперации) Или ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации))
				// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247
				И НЕ ЭтоСудноННФ Тогда
				// -- rarus Камаев П.В. 11.11.2020
				Если Год(СтрСписка.НачалоОперации)<>Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты начала операции не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если Год(СтрСписка.ОкончаниеОперации)<>Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты окончания операции не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если СтрСписка.НачалоОперации > СтрСписка.ОкончаниеОперации Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых дата начала операции больше даты окончания операции!"+Символы.ПС;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(СтрСписка.ДокументыНаБортуНачДата) или ЗначениеЗаполнено(СтрСписка.ДокументыНаБортуКонДата))
				// ++ rarus Камаев П.В. 11.11.2020 Задача № 25247
				И НЕ ЭтоСудноННФ Тогда
				// -- rarus Камаев П.В. 11.11.2020
				Если Год(СтрСписка.ДокументыНаБортуНачДата) <> Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты начала оформления документов не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если Год(СтрСписка.ДокументыНаБортуКонДата) <> Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты окончания оформления документов не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если СтрСписка.ДокументыНаБортуНачДата > СтрСписка.ДокументыНаБортуКонДата Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых дата начала оформления документов больше даты окончания оформления документов!"+Символы.ПС;
					Прервать;
				КонецЕсли;
			КонецЕсли;		
			
			//№21731
			Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Прием
				Или СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Передача
				Или СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
								
				Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Прием
					ИЛИ СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
					// ++ rarus Камаев П.В. 15.10.2020 Задача № 24823
					ЭтоСвояСекция = СвоиСекции.НайтиПоЗначению(СтрСписка.БаржаПриход) <> Неопределено;
					//++ rarus isaeva 21.09.2020
					//Заявка в ИТИЛ от Шадрина Д.Ю., чтобы убрали данную проверку
					Если Не ЗначениеЗаполнено(СтрСписка.СудноПередавшее) И НЕ ЭтоСвояСекция Тогда
						// ++ rarus Камаев П.В. 16.10.2020 Задача № 24857
						// ТекОшибкаМетка = Истина;
						//ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнено судно, передавшее секцию!"+Символы.ПС;
						//Прервать;
						// -- rarus Камаев П.В. 16.10.2020
					КонецЕсли;
					//-- rarus isaeva 21.09.2020
					// ++ rarus Камаев П.В. 27.10.2020 Задача № 24921
					ДатаПриемаСекции = СтрСписка.ДатаПриемаСекции;
					Если НЕ ЗначениеЗаполнено(ДатаПриемаСекции) И СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Прием Тогда
						ТЗПункты = Объект.Пункты.Выгрузить();
						НайденнаяСтрокаПункт = ТЗПункты.Найти(СтрСписка.ИД, "ИД");
						ДатаПриемаСекции = НайденнаяСтрокаПункт.Отход;
					КонецЕсли;
					// -- rarus Камаев П.В. 27.10.2020
					
					Если Не ЗначениеЗаполнено(ДатаПриемаСекции) И НЕ ЭтоСвояСекция Тогда
						ТекОшибкаМетка = Истина;
						ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнена дата приема секции!"+Символы.ПС;
						Прервать;
					КонецЕсли;
					// -- rarus Камаев П.В. 15.10.2020
				КонецЕсли;
				
				Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Передача
					ИЛИ СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
					Если Не ЗначениеЗаполнено(СтрСписка.СудноПринявшее) Тогда
						// ++ rarus Камаев П.В. 16.10.2020 Задача № 24857
						//ТекОшибкаМетка = Истина;
						//ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнено судно, принявшее секцию!"+Символы.ПС;
						//Прервать;
						// -- rarus Камаев П.В. 16.10.2020
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрСписка.ДатаПередачиСекции) Тогда
						ТекОшибкаМетка = Истина;
						ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнена дата передачи секции!"+Символы.ПС;
						Прервать;
					КонецЕсли;
				КонецЕсли;
								
			КонецЕсли;
			// ++ rarus Камаев П.В. 15.10.2020 Задача № 24823
			Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира
				И ЗначениеЗаполнено(СтрСписка.БаржаПриход) ТОгда
				СвоиСекции.Добавить(СтрСписка.БаржаПриход);
			КонецЕсли;
			// -- rarus Камаев П.В. 15.10.2020
		КонецЦикла;
				
		ТекСтрока.ОшибкаМетка = ТекОшибкаМетка;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПредыдущейСтроки(НомерСтроки)
	
	Если НомерСтроки = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	
		
	// Возвращаем данные предыдущей строки
	//-----------------------------------
	ТекСтрока = Объект.Пункты[НомерСтроки-1];
	//
	Результат=Новый Структура;
	Результат.Вставить("Отход",			ТекСтрока.Отход);
	Результат.Вставить("ПричинаСтоянки",ТекСтрока.ПричинаСтоянки);
	Результат.Вставить("ГруженыйРейс",	ТекСтрока.ГруженыйРейс);
	//
	// Данные из табл. части "Баржи"
	////------------------------------
	Если ЭтоБуксир Тогда
		ТЗ = Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД),"БаржаПриход,БаржаОперация,Груз,НачальныйВесГруза,ВесГруза,СудноПринявшее,ПаузкаНачальныйВесГруза,ВесГрузаВыгружено");
		ТЗ.Колонки.Добавить("Метка",Новый ОписаниеТипов("Булево"));
	//	
		ДанныеПаузки = ПолучитьДанныеПаузки(ТекСтрока.ПричинаСтоянки,ТЗ);
	//	
		Для Каждого СтрТЗ из ТЗ Цикл
			// Проверка передачи барж
			//-----------------------
			Если СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.Передача или
				СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача или
				СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
				СтрТЗ.Метка = Истина;
				Продолжить;
			КонецЕсли;
			
			// Пересчет количества груза
			//--------------------------
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Тогда
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза;
			ИначеЕсли ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
				СтрДП = ДанныеПаузки.Найти(СтрТЗ.БаржаПриход,"Баржа");
				Если СтрДП = Неопределено Тогда
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза;
				Иначе
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза + СтрДП.ПаузкаКонечныйВесГруза;
					Если Не ЗначениеЗаполнено(СтрТЗ.Груз) Тогда
						СтрТЗ.Груз = СтрДП.Груз;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
				СтрДП = ДанныеПаузки.Найти(СтрТЗ.БаржаПриход,"Баржа");
				Если СтрДП = Неопределено Тогда
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза;
				Иначе
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза - СтрДП.ПаузкаКонечныйВесГруза;
					Если Не ЗначениеЗаполнено(СтрТЗ.Груз) Тогда
						СтрТЗ.Груз=СтрДП.Груз;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// ++ rarus Камаев П.В. 28.04.2020 
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза - СтрТЗ.ВесГрузаВыгружено;
				// -- rarus Камаев П.В. 28.04.2020
			КонецЕсли;
			
			Если СтрТЗ.НачальныйВесГруза = 0 Тогда
				СтрТЗ.Груз = Справочники.vftГрузы.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;

		рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(ТЗ,Новый Структура("Метка",Истина));

		ТЗ.Свернуть("БаржаПриход,Груз","НачальныйВесГруза");
		ТЗ.Сортировать("БаржаПриход");
		Результат.Вставить("Баржи",ТЗ);

	Иначе	// Это судно - не буксир
		ТЗ = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "Груз,НачальныйВесГруза,ВесГруза,ВесГрузаВыгружено");
		ТЗ.Колонки.Добавить("Метка", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрТЗ из ТЗ Цикл
			// Пересчет количества груза
			//--------------------------
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Или ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза-СтрТЗ.ВесГруза;
			Иначе
				// ++ rarus Камаев П.В. 28.04.2020 
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза+СтрТЗ.ВесГруза - СтрТЗ.ВесГрузаВыгружено;
				// -- rarus Камаев П.В. 28.04.2020
			КонецЕсли;
			
			Если СтрТЗ.НачальныйВесГруза = 0 Тогда
				СтрТЗ.Метка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(ТЗ,Новый Структура("Метка",Истина));
		
		ТЗ.Свернуть("Груз","НачальныйВесГруза");
		ТЗ.Сортировать("Груз");
		Результат.Вставить("Баржи",ТЗ);
	КонецЕсли;
	//
	//// Данные по секция, оставленных в ожидании буксира
	////-------------------------------------------------
	//ТО = Объект.Баржи.ВыгрузитьКолонки("БаржаПриход,Груз,НачальныйВесГруза");
	ТО = Новый ТаблицаЗначений;
	ТО.Колонки.Добавить("БаржаПриход");
	ТО.Колонки.Добавить("Груз");
	ТО.Колонки.Добавить("НачальныйВесГруза");
	
	Если ЭтоБуксир Тогда
		// Перебираем строки "Пункты" с первой по "ТекСтрока"
		//---------------------------------------------------
		Для Каждого СтрП из Объект.Пункты Цикл
			// Перебираем строки "Баржи"
			//--------------------------
			Для Каждого СтрБ из Объект.Баржи.НайтиСтроки(Новый Структура("ИД", СтрП.ИД)) Цикл
				Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
					Если СтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка или СтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
						Врем=СтрБ.НачальныйВесГруза - СтрБ.ВесГруза;
					Иначе
						Врем=СтрБ.НачальныйВесГруза + СтрБ.ВесГруза - СтрБ.ВесГрузаВыгружено;
					КонецЕсли;
					
					Если Врем <> 0 Тогда
						СтрТО = ТО.Добавить();
						СтрТО.БаржаПриход =		СтрБ.БаржаПриход;
						СтрТО.Груз =			СтрБ.Груз;
						СтрТО.НачальныйВесГруза=Врем;
					КонецЕсли;
					
				ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием Тогда
					СтрТО = ТО.Найти(СтрБ.БаржаПриход,"БаржаПриход");
					Если СтрТО <> Неопределено Тогда
						ТО.Удалить(СтрТО);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрП = ТекСтрока Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ОжиданиеБуксира",ТО);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПредыдущейСтрокиСтруктура(НомерСтроки)
	
	Если НомерСтроки = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	
		
	// Возвращаем данные предыдущей строки
	//-----------------------------------
	ТекСтрока = Объект.Пункты[НомерСтроки-1];
	//
	Результат=Новый Структура;
	Результат.Вставить("Отход",			ТекСтрока.Отход);
	Результат.Вставить("ПричинаСтоянки",ТекСтрока.ПричинаСтоянки);
	Результат.Вставить("ГруженыйРейс",	ТекСтрока.ГруженыйРейс);
	//
	// Данные из табл. части "Баржи"
	////------------------------------
	Если ЭтоБуксир Тогда
		ТЗ = Новый Массив;
		Для Каждого СтрокаТЗ Из Объект.Баржи Цикл
			Если СтрокаТЗ.ИД = ТекСтрока.ИД Тогда
				СтруктураСтрокаТЗ = Новый Структура("БаржаПриход,БаржаОперация,Груз,НачальныйВесГруза,ВесГруза
				|,СудноПринявшее,ПаузкаНачальныйВесГруза,Метка");
				ЗаполнитьЗначенияСвойств(СтруктураСтрокаТЗ, СтрокаТЗ);
				ТЗ.Добавить(СтруктураСтрокаТЗ);
			КонецЕсли;
		КонецЦикла;
	
		ДанныеПаузки = ПолучитьДанныеПаузкиСтруктура(ТекСтрока.ПричинаСтоянки, ТЗ);
	
		Для Каждого СтрТЗ из ТЗ Цикл
			// Проверка передачи барж
			//-----------------------
			Если СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.Передача или
				СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача или
				СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
				СтрТЗ.Метка = Истина;
				Продолжить;
			КонецЕсли;
			
			// Пересчет количества груза
			//--------------------------
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Тогда
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза;
			ИначеЕсли ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
				СтрДП = НайтиВМассиве(ДанныеПаузки, СтрТЗ.БаржаПриход,"Баржа");
				Если СтрДП = Неопределено Тогда
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза;
				Иначе
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза + СтрДП.ПаузкаКонечныйВесГруза;
					Если Не ЗначениеЗаполнено(СтрТЗ.Груз) Тогда
						СтрТЗ.Груз = СтрДП.Груз;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
				СтрДП = НайтиВМассиве(ДанныеПаузки, СтрТЗ.БаржаПриход,"Баржа");
				Если СтрДП = Неопределено Тогда
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза;
				Иначе
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза - СтрДП.ПаузкаКонечныйВесГруза;
					Если Не ЗначениеЗаполнено(СтрТЗ.Груз) Тогда
						СтрТЗ.Груз=СтрДП.Груз;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза;
			КонецЕсли;
			
			Если СтрТЗ.НачальныйВесГруза = 0 Тогда
				СтрТЗ.Груз = Справочники.vftГрузы.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;

		рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(ТЗ,Новый Структура("Метка",Истина));

		ТЗ.Свернуть("БаржаПриход,Груз","НачальныйВесГруза");
		ТЗ.Сортировать("БаржаПриход");
		Результат.Вставить("Баржи",ТЗ);

	Иначе	// Это судно - не буксир
		ТЗ = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "Груз,НачальныйВесГруза,ВесГруза");
		ТЗ.Колонки.Добавить("Метка", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрТЗ из ТЗ Цикл
			// Пересчет количества груза
			//--------------------------
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Или ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза-СтрТЗ.ВесГруза;
			Иначе
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза+СтрТЗ.ВесГруза;
			КонецЕсли;
			
			Если СтрТЗ.НачальныйВесГруза = 0 Тогда
				СтрТЗ.Метка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(ТЗ,Новый Структура("Метка",Истина));
		
		ТЗ.Свернуть("Груз","НачальныйВесГруза");
		ТЗ.Сортировать("Груз");
		Результат.Вставить("Баржи",ТЗ);
	КонецЕсли;
	//
	//// Данные по секция, оставленных в ожидании буксира
	////-------------------------------------------------
	//ТО = Объект.Баржи.ВыгрузитьКолонки("БаржаПриход,Груз,НачальныйВесГруза");
	ТО = Новый ТаблицаЗначений;
	ТО.Колонки.Добавить("БаржаПриход");
	ТО.Колонки.Добавить("Груз");
	ТО.Колонки.Добавить("НачальныйВесГруза");
	
	Если ЭтоБуксир Тогда
		// Перебираем строки "Пункты" с первой по "ТекСтрока"
		//---------------------------------------------------
		Для Каждого СтрП из Объект.Пункты Цикл
			// Перебираем строки "Баржи"
			//--------------------------
			Для Каждого СтрБ из Объект.Баржи.НайтиСтроки(Новый Структура("ИД", СтрП.ИД)) Цикл
				Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
					Если СтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка или СтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
						Врем=СтрБ.НачальныйВесГруза - СтрБ.ВесГруза;
					Иначе
						Врем=СтрБ.НачальныйВесГруза + СтрБ.ВесГруза;
					КонецЕсли;
					
					Если Врем <> 0 Тогда
						СтрТО = ТО.Добавить();
						СтрТО.БаржаПриход =		СтрБ.БаржаПриход;
						СтрТО.Груз =				СтрБ.Груз;
						СтрТО.НачальныйВесГруза=Врем;
					КонецЕсли;
					
				ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием Тогда
					СтрТО = ТО.Найти(СтрБ.БаржаПриход,"БаржаПриход");
					Если СтрТО <> Неопределено Тогда
						ТО.Удалить(СтрТО);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрП = ТекСтрока Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ОжиданиеБуксира",ТО);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПаузки(ТекПричинаСтоянки,ТЗ) Экспорт
		
	ДанныеПаузки = Новый ТаблицаЗначений;
	ДанныеПаузки.Колонки.Добавить("Баржа",					Новый ОписаниеТипов("СправочникСсылка.vftСуда"));
	ДанныеПаузки.Колонки.Добавить("Груз",					Новый ОписаниеТипов("СправочникСсылка.vftГрузы"));
	ДанныеПаузки.Колонки.Добавить("ПаузкаНачальныйВесГруза", рарусОбщегоНазначенияСервер.ПолучитьОписаниеТиповЧисла(10,3));
	ДанныеПаузки.Колонки.Добавить("ПаузкаКонечныйВесГруза",  рарусОбщегоНазначенияСервер.ПолучитьОписаниеТиповЧисла(10,3));
	
	Если ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка или
		ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		Для Каждого СтрТЗ из ТЗ Цикл
			Если Не ЗначениеЗаполнено(СтрТЗ.СудноПринявшее) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрДП=ДанныеПаузки.Найти(СтрТЗ.СудноПринявшее,"Баржа");
			Если СтрДП=Неопределено Тогда
				СтрДП=ДанныеПаузки.Добавить();
				СтрДП.Баржа=СтрТЗ.СудноПринявшее;
				СтрДП.Груз=СтрТЗ.Груз;
			КонецЕсли;
			СтрДП.ПаузкаНачальныйВесГруза=Макс(СтрДП.ПаузкаНачальныйВесГруза,СтрТЗ.ПаузкаНачальныйВесГруза);
			СтрДП.ПаузкаКонечныйВесГруза=СтрДП.ПаузкаКонечныйВесГруза+СтрТЗ.ВесГруза;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПаузки;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеПаузкиСтруктура(ТекПричинаСтоянки,ТЗ) Экспорт
		
	ДанныеПаузки = Новый Массив;
	
	Если ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка или
		ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		Для Каждого СтрТЗ из ТЗ Цикл
			Если Не ЗначениеЗаполнено(СтрТЗ.СудноПринявшее) Тогда
				Продолжить;
			КонецЕсли;
			СтрДП = Неопределено;
			Для Каждого СтрокаДанныеПаузки Из ДанныеПаузки Цикл
				Если СтрокаДанныеПаузки.Баржа = СтрТЗ.СудноПринявшее Тогда
					СтрДП = СтрокаДанныеПаузки;
					Прервать;
				КонецЕсли;
			КонецЦикла;			
			Если СтрДП = Неопределено Тогда
				СтрДП = Новый Структура("Баржа,Груз,ПаузкаНачальныйВесГруза,ПаузкаКонечныйВесГруза");
				СтрДП.Баржа=СтрТЗ.СудноПринявшее;
				СтрДП.Груз=СтрТЗ.Груз;
				СтрДП.ПаузкаНачальныйВесГруза = 0;
				СтрДП.ПаузкаКонечныйВесГруза = 0;
				ДанныеПаузки.Добавить(СтрДП);
			КонецЕсли;
			СтрДП.ПаузкаНачальныйВесГруза= Макс(СтрДП.ПаузкаНачальныйВесГруза,СтрТЗ.ПаузкаНачальныйВесГруза);
			СтрДП.ПаузкаКонечныйВесГруза=СтрДП.ПаузкаКонечныйВесГруза+СтрТЗ.ВесГруза;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПаузки;
	
КонецФункции

&НаСервере
Функция РейсПересекаетсяСоСледующим(ТекОтход)
	
	// Дата документа и судно должны быть заполнены
	//---------------------------------------------
	Если Не ЗначениеЗаполнено(Объект.Дата) или Не ЗначениеЗаполнено(Объект.Судно) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем следующий документ, сверяем дату его начала с датой окончания текущего
	//----------------------------------------------------------------------------
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("Судно",					Объект.Судно);
	Запрос.УстановитьПараметр("Дата",					Объект.Дата);
	Запрос.УстановитьПараметр("Отход",					ТекОтход);
	Запрос.УстановитьПараметр("ИнтервалМеждуРейсами",	ИнтервалМеждуРейсами*3600);
	
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокРейс.Ссылка,
	|	ДокРейс.Дата
	|ПОМЕСТИТЬ Рейс
	|ИЗ
	|	Документ.vftРейс КАК ДокРейс
	|ГДЕ
	|	НЕ ДокРейс.ПометкаУдаления
	|	И ДокРейс.Ссылка <> &Ссылка
	|	И ДокРейс.Судно = &Судно
	|	И ДокРейс.Дата > &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокРейс.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокРейс.Ссылка
	|ИЗ
	|	Рейс КАК ДокРейс
	|ГДЕ
	|	НЕ(ДокРейс.Дата = &Отход
	|				ИЛИ РАЗНОСТЬДАТ(&Отход, ДокРейс.Дата, СЕКУНДА) >= &ИнтервалМеждуРейсами)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция РейсПересекаетсяСПредыдущим()
	
	// Дата документа и судно должны быть заполнены
	//---------------------------------------------
	Если Не ЗначениеЗаполнено(Объект.Дата) Или Не ЗначениеЗаполнено(Объект.Судно) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем предыдущий документ, сверяем дату его окончания с датой начала текущего
	//-----------------------------------------------------------------------------
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("Судно",					Объект.Судно);
	Запрос.УстановитьПараметр("Дата",					Объект.Дата);
	Запрос.УстановитьПараметр("ИнтервалМеждуРейсами",	ИнтервалМеждуРейсами*3600);
	
	//Если Объект.Пункты.Количество() = 0 или Объект.Пункты[Объект.Пункты.Количество()-1].Отход = Дата(1,1,1) Тогда
	//	ДатаОкончания = Объект.Дата;
	//Иначе
	//	ДатаОкончания = Объект.Пункты[Объект.Пункты.Количество()-1].Отход;
	//КонецЕсли;
	
	//Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончания);

	
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ДокРейс.Ссылка КАК Ссылка,
				 |	ДокРейс.ДатаОкончание КАК ДатаОкончание
				 |ПОМЕСТИТЬ Рейс
	             |ИЗ
	             |	Документ.vftРейс КАК ДокРейс
	             |ГДЕ
	             |	НЕ ДокРейс.ПометкаУдаления
	             |	И ДокРейс.Ссылка <> &Ссылка
	             |	И ДокРейс.Судно = &Судно
	             |	И ДокРейс.Дата < &Дата
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ДокРейс.Дата УБЫВ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДокРейс.Ссылка КАК Ссылка
	             |ИЗ
	             |	Рейс КАК ДокРейс
	             |ГДЕ
	             |	НЕ(ДокРейс.ДатаОкончание = &Дата
	             |				ИЛИ РАЗНОСТЬДАТ(ДокРейс.ДатаОкончание, &Дата, СЕКУНДА) >= &ИнтервалМеждуРейсами)";
	
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Функция НайтиВМассиве(Массив, ЗначениеСтруктуры, КлючСтруктуры)
	
	Для Каждого Строка Из Массив Цикл
		
		Если Строка.Свойство[КлючСтруктуры] И Строка[КлючСтруктуры] = ЗначениеСтруктуры Тогда
			Возврат Строка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьАдресВоВременномХранилище(НомерСтроки)
	
	СтрокаПредыдущая = ПолучитьДанныеПредыдущейСтроки(НомерСтроки);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтрокаПредыдущая, УникальныйИдентификатор);
	Возврат АдресВоВременномХранилище;
	
КонецФункции

&НаКлиенте
Процедура СудноОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СудноАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СудноОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ДанныеВыбора = ПолучитьДанныеВыбораБаржа(Текст);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораБаржа(Текст)
	
	ДанныеВыбора = Справочники.vftСуда.ПолучитьДанныеВыбораБаржа(Текст);
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ПортОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// ++ rarus Камаев П.В. 01.04.2020 Задача № 20717
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
	КонецЕсли;
	// -- rarus Камаев П.В. 01.04.2020
КонецПроцедуры


&НаКлиенте
Процедура ПортОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПортПогрузкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// ++ rarus Камаев П.В. 01.04.2020 Задача № 20717
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
	КонецЕсли;
	// -- rarus Камаев П.В. 01.04.2020
КонецПроцедуры

&НаКлиенте
Процедура ПортПогрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ПортВыгрузкиАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	// ++ rarus Камаев П.В. 01.04.2020 Задача № 20717
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
	КонецЕсли;
	// -- rarus Камаев П.В. 01.04.2020
КонецПроцедуры

&НаКлиенте
Процедура ПортВыгрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораПункт(Текст, ТипПункта = Неопределено, ТипПунктаПорт = Истина)
	
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска","%"+Текст+"%");
	Запрос.УстановитьПараметр("МодельРДО", Объект.Судно.Проект.МодельРДО);
	Запрос.Текст="ВЫБРАТЬ
	|	Пункты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.vftПунктыСледования КАК Пункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.vftПунктыСледования.РазрешеноПропускать КАК ПунктыСледованияРазрешеноПропускать
	|		ПО (ПунктыСледованияРазрешеноПропускать.Ссылка = Пункты.Ссылка)
	|			И (ПунктыСледованияРазрешеноПропускать.МодельРДО = &МодельРДО)
	|ГДЕ
	|	Пункты.Наименование ПОДОБНО &СтрокаПоиска
	|	И &УсловиеТипПунктаПорт
	|	И ЕСТЬNULL(ПунктыСледованияРазрешеноПропускать.ИспользуетсяВПЖ, ИСТИНА) = ИСТИНА
	// ++ rarus Чернавин Г.К 18.08.2020 № 23337
	|   И &УсловиеЭтоПорт
	// -- rarus Чернавин Г.К 18.08.2020
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	// ++ rarus Камаев П.В. 24.08.2020 
	Если ТипПунктаПорт Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипПунктаПорт", "Пункты.Тип = ЗНАЧЕНИЕ(Справочник.рарусТипыПунктовСледования.Порт)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипПунктаПорт", "Истина");
	КонецЕсли;
	// -- rarus Камаев П.В. 24.08.2020
	
	// ++ rarus Чернавин Г.К 18.08.2020 № 23337
	Если ЗначениеЗаполнено(ТипПункта) И СухогрузныйФлот() Тогда	
		Если ТипПункта = Перечисления.рарусТипыПунктов.ПортОтправления Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЭтоПорт", "Пункты.ЭтоПорт1 = Истина");	
		ИначеЕсли ТипПункта = Перечисления.рарусТипыПунктов.ПортПогрузки Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЭтоПорт", "Пункты.ЭтоПорт2 = Истина");	
		ИначеЕсли ТипПункта = Перечисления.рарусТипыПунктов.ПортВыгрузки Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЭтоПорт", "Пункты.ЭтоПорт3 = Истина");
		КонецЕсли;
	КонецЕсли;		
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеЭтоПорт", "Истина");	
	// -- rarus Чернавин Г.К 18.08.2020
	
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаКлиенте
Процедура ПортОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Форма = ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Список,
	"Тип",
	ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"),
	ВидСравненияКомпоновкиДанных.Равно
	,, 
	Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ПортПогрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	//Отбор.Вставить("Отбор", Новый Структура("Партнер, Организация", Объект.Исполнитель, Объект.Организация));
	Форма = ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Список,
	"Тип",
	ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"),
	ВидСравненияКомпоновкиДанных.Равно
	,, 
	Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
КонецПроцедуры

&НаКлиенте
Процедура ПортВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	//Отбор.Вставить("Отбор", Новый Структура("Партнер, Организация", Объект.Исполнитель, Объект.Организация));
	Форма = ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Список,
	"Тип",
	ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"),
	ВидСравненияКомпоновкиДанных.Равно
	,, 
	Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыПослеУдаления(Элемент)
	ПересчитатьХодовоеВремя();
	// ++ rarus Камаев П.В. 27.11.2020 Задача № 25553
	ЗаполнитьРасстояниеВШапке();
	// -- rarus Камаев П.В. 27.11.2020
	ПроверитьТабличнуюЧастьПунктыСервер();
	ПоказатьИтогиТабличнойЧастиПункты();
КонецПроцедуры

&НаКлиенте
Процедура СтатусРейсаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	//rarus_AfoD 16.09.2020 < 
	//Если Не ЭтоГлавныйУзел Или Объект.РаботаПоРаспоряжению Или ВыбранноеЗначение <> ПредопределенноеЗначение("Перечисление.рарусСтатусыПутевогоЖурнала.Завершен") Тогда
	Если Объект.РаботаПоРаспоряжению ИЛИ ВыбранноеЗначение <> ПредопределенноеЗначение("Перечисление.рарусСтатусыПутевогоЖурнала.Завершен") Тогда
		//rarus_AfoD 16.09.2020 > 	
		Возврат;
	КонецЕсли;
	
	// ++ rarus Камаев П.В. 02.04.2020 Задача № 20769 
	//rarus_AfoD 16.09.2020 < 
	// В СМ предусмотреть проверку: если в рейсе не установлен флажок "Работа по распоряжению диспетчера" и 
	// Капитан устанавливает статус рейса "Завершен", программа должна проверять, что ТЧ "Пункты следования" заполнена. 
	// В ТЧ "Пункты следования" должны быть заполнены все три реквизита - Порт отправления, Порт погрузки и Порт выгрузки. 
	// Если одно из этих полей не заполнено, нужно выдавать предупреждение - "В табличной части "Пункты следования" не заполнено поле ...(название соответствующего поля)". 
	Для каждого Строка Из Объект.ПунктыСледования Цикл
		//rarus_AfoD 16.09.2020 < 
		Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортОтправления") И НЕ ЗначениеЗаполнено(Строка.Пункт) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Перед закрытием рейса необходимо заполнить порт отправления!'"), 30, НСтр("ru = 'Внимание!'"));	
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		//rarus_AfoD 16.09.2020 > 
		Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортПогрузки") И НЕ ЗначениеЗаполнено(Строка.Пункт) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Перед закрытием рейса необходимо заполнить порт погрузки!'"), 30, НСтр("ru = 'Внимание!'"));
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортВыгрузки") И НЕ ЗначениеЗаполнено(Строка.Пункт) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Перед закрытием рейса необходимо заполнить порт выгрузки!'"), 30, НСтр("ru = 'Внимание!'"));	
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	//rarus_AfoD 16.09.2020 > 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатыЗавершение(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ПараметрыЗакрытия <> Неопределено И ПараметрыЗакрытия.Свойство("ИмяЭлемента") Тогда
		Если ПараметрыЗакрытия.ИмяЭлемента = "БуксировкиНачДата" Тогда
			ТекущиеДанные = Элементы.Буксировки.ТекущиеДанные;
			ТекущиеДанные.НачДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "БуксировкиКонДата" Тогда
			ТекущиеДанные = Элементы.Буксировки.ТекущиеДанные;
			ТекущиеДанные.КонДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "СОЛПНачДата" Тогда
			ТекущиеДанные = Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные;
			ТекущиеДанные.НачДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "СОЛПКонДата" Тогда
			ТекущиеДанные = Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные;
			ТекущиеДанные.КонДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ЛоцманНачДата" Тогда
			ТекущиеДанные = Элементы.ПрохождениеУчастковСЛоцманом.ТекущиеДанные;
			ТекущиеДанные.НачДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "ЛоцманКонДата" Тогда
			ТекущиеДанные = Элементы.ПрохождениеУчастковСЛоцманом.ТекущиеДанные;
			ТекущиеДанные.КонДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСОЛПНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные.НачДата, "СОЛПНачДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начало движения";
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСОЛПКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные.КонДата, "СОЛПКонДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Окончание движения";
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСЛоцманомНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ПрохождениеУчастковСЛоцманом.ТекущиеДанные.НачДата, "ЛоцманНачДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начало движения";
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСЛоцманомКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершение", ЭтотОбъект);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", Элементы.ПрохождениеУчастковСЛоцманом.ТекущиеДанные.КонДата, "ЛоцманКонДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Окончание движения";
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСОЛППередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПроверкаСтрокиПрохождения(Элемент,НоваяСтрока,ОтменаРедактирования,Отказ);
КонецПроцедуры


&НаКлиенте
Процедура ПроверкаСтрокиПрохождения(Элемент,НоваяСтрока,ОтменаРедактирования,Отказ)
	
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	// Общие проверки введенных данных
	//--------------------------------
	ТекСтрока = Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные;
	
	Если ТекСтрока.НачДата=Дата(1,1,1) Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Не указана дата начала движения!'"),30,"Ошибка!");
		Элементы.ПрохождениеУчастковСОЛП.ТекущийЭлемент = Элементы.ПрохождениеУчастковСОЛПНачДата;
		
	ИначеЕсли ТекСтрока.КонДата=Дата(1,1,1) Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Не указана дата окончания движения!'"),30,"Ошибка!");
		Элементы.ПрохождениеУчастковСОЛП.ТекущийЭлемент = Элементы.ПрохождениеУчастковСОЛПКонДата;
		
	ИначеЕсли ТекСтрока.КонДата<=ТекСтрока.НачДата Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Дата окончания движения должна быть больше даты начала!'"),30,"Ошибка!");
		Элементы.ПрохождениеУчастковСОЛП.ТекущийЭлемент = Элементы.ПрохождениеУчастковСОЛПКонДата;
		
	ИначеЕсли не ТекСтрока.СОЛП и ТекСтрока.Лоцман.Пустая() Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'При движении без СОЛПА обязательно должен быть указан лоцман!'"),30,"Ошибка!");
		Элементы.ПрохождениеУчастковСОЛП.ТекущийЭлемент = Элементы.ПрохождениеУчастковСОЛПЛоцман;
		
	КонецЕсли;
	//
	// Частные проверки введенных данных
	//----------------------------------
	Если ТекСтрока.Участок = ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.КерчьЕникальскийКанал") Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ВариантПрохожденияКЕК) Тогда
			Отказ=Истина;
			ПоказатьПредупреждение(,НСтр("ru = 'Не указан вариант прохождения КЕК!'"),30,"Ошибка!");
			Элементы.ПрохождениеУчастковСОЛП.ТекущийЭлемент = Элементы.ПрохождениеУчастковСОЛПВариантПрохожденияКЕК;
		КонецЕсли;
	Иначе
		ТекСтрока.ВариантПрохожденияКЕК = ПредопределенноеЗначение("Перечисление.рарусВариантыПрохожденияКЕК.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗБункеровки() 
	//
	ТЗБункеровкиЗначение = РеквизитФормыВЗначение("ТЗБункеровки");
	#Если Клиент Тогда 
		ТЗБункеровкиЗначение = Новый ТаблицаЗначений;
	#КонецЕсли
	
	//Описание типов ТЗ
	КолонкаВидТоплива = Неопределено;
	КолонкаМаркаТоплива = Неопределено;
	КолонкаКоличество = Неопределено;
	Для Каждого Колонка Из ТЗБункеровкиЗначение.Колонки Цикл
		Если Колонка.Имя = "ВидТоплива" Тогда
			КолонкаВидТоплива = Колонка;
		КонецЕсли;
		Если Колонка.Имя = "МаркаТоплива" Тогда
			КолонкаМаркаТоплива = Колонка;
		КонецЕсли;
		Если Колонка.Имя = "КоличествоМасло" Тогда
			КолонкаКоличествоМасло = Колонка;
		КонецЕсли;
		Если Колонка.Имя = "КоличествоТопливо" Тогда
			КолонкаКоличествоТопливо = Колонка;
		КонецЕсли;
	КонецЦикла;
		
	ГруппаПрограммноеЗаполнение = Элементы.ГруппаПрограммноеЗаполнение;
	
	Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
		МассивРеквизитов = Новый Массив;
		//ГруппаВидТоплива
		НовыйЭлемент = Элементы.Добавить("ТЗБункеровкиГруппа"+Строка.ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПрограммноеЗаполнение);       
		НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
		//РодительДляПодчиенных
		ГруппаВидТолпива = НовыйЭлемент;
		//Реквизит ВидТоплива
		ТЗБункеровкиЗначение.Колонки.Добавить("ВидТоплива"+Строка.ИмяРеквизита,КолонкаВидТоплива.ТипЗначения, Строка.ИмяЗаголовка);
		МассивРеквизитов.Добавить(Новый РеквизитФормы("ВидТоплива"+Строка.ИмяРеквизита, КолонкаВидТоплива.ТипЗначения,"ТЗБункеровки"));
		//НовыйЭлемент.Ширина = 10;
		//Реквизит МаркаТоплива
		МассивРеквизитов.Добавить(Новый РеквизитФормы("МаркаТоплива"+Строка.ИмяРеквизита, КолонкаМаркаТоплива.ТипЗначения,"ТЗБункеровки"));
		ТЗБункеровкиЗначение.Колонки.Добавить("МаркаТоплива"+Строка.ИмяРеквизита, КолонкаМаркаТоплива.ТипЗначения, "Марка");
		//Реквизит Количество
		Если СтрНайти(Строка.ЗаголовокКоличества, "кг") <> 0 Тогда
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Количество"+Строка.ИмяРеквизита, КолонкаКоличествоМасло.ТипЗначения,"ТЗБункеровки"));
			ТЗБункеровкиЗначение.Колонки.Добавить("Количество"+Строка.ИмяРеквизита,КолонкаКоличествоМасло.ТипЗначения, "Количество");
		Иначе
			МассивРеквизитов.Добавить(Новый РеквизитФормы("Количество"+Строка.ИмяРеквизита, КолонкаКоличествоТопливо.ТипЗначения,"ТЗБункеровки"));
			ТЗБункеровкиЗначение.Колонки.Добавить("Количество"+Строка.ИмяРеквизита,КолонкаКоличествоТопливо.ТипЗначения, "Количество");
		КонецЕсли;
			
			
		ИзменитьРеквизиты(МассивРеквизитов);
		
		//ГруппаВидТоплива
		НовыйЭлемент = Элементы.Добавить("ТЗБункеровкиГруппаВидТоплива"+Строка.ИмяРеквизита, Тип("ГруппаФормы"), ГруппаПрограммноеЗаполнение);       
		НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
		НовыйЭлемент.ОтображатьВШапке = Истина;
		НовыйЭлемент.Заголовок = Строка.ИмяЗаголовка;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.Ширина = 14;
		//РодительДляПодчиенных
		ГруппаВидТолпива = НовыйЭлемент;		
		//Элемент ВидТоплива
		НовыйЭлемент = Элементы.Добавить("ТЗБункеровкиВидТоплива"+Строка.ИмяРеквизита, Тип("ПолеФормы"), ГруппаВидТолпива);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТЗБункеровки.ВидТоплива" + Строка.ИмяРеквизита;
		НовыйЭлемент.Заголовок = Строка.ИмяЗаголовка;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.Ширина = 14;
		НовыйЭлемент.Видимость = Ложь;
		//ГруппаМаркаКоличество
		НовыйЭлемент = Элементы.Добавить("ТЗБункеровкиГруппаМаркаКоличество"+Строка.ИмяРеквизита, Тип("ГруппаФормы"), ГруппаВидТолпива);       
		НовыйЭлемент.Вид = ВидГруппыФормы.ГруппаКолонок;
		НовыйЭлемент.Группировка = ГруппировкаКолонок.Горизонтальная;
		//РодительДляПодчиенных
		ГруппаМаркаКоличество = НовыйЭлемент;
		//Элемент МаркаТоплива
		НовыйЭлемент = Элементы.Добавить("ТЗБункеровкиМаркаТоплива"+Строка.ИмяРеквизита, Тип("ПолеФормы"), ГруппаМаркаКоличество);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТЗБункеровки.МаркаТоплива" + Строка.ИмяРеквизита;
		НовыйЭлемент.Заголовок = "Марка";
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.Ширина = 5;
		НовыйЭлемент.КнопкаВыбора = Истина;
		НовыйЭлемент.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВПолеВвода;
		// ++ rarus Камаев П.В. 14.08.2020 Задача № 23227
		НовыйЭлемент.КнопкаВыпадающегоСписка= Ложь;
		НовыйЭлемент.КнопкаОткрытия			= Ложь;
		НовыйЭлемент.КнопкаОчистки		 	= Истина;
		НовыйЭлемент.КнопкаРегулирования	= Ложь;
		НовыйЭлемент.КнопкаСоздания		 	= Ложь;
		НовыйЭлемент.ИсторияВыбораПриВводе 	= ИсторияВыбораПриВводе.НеИспользовать;
		// -- rarus Камаев П.В. 14.08.2020
		НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.Номенклатура", "Элементы.ТЗБункеровки.ТекущиеДанные.ВидТоплива"+Строка.ИмяРеквизита);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НоваяСвязь);
		НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
		НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
		//Элемент Количество
		НовыйЭлемент = Элементы.Добавить("ТЗБункеровкиКоличество"+Строка.ИмяРеквизита, Тип("ПолеФормы"), ГруппаМаркаКоличество);       
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ПутьКДанным = "ТЗБункеровки.Количество" + Строка.ИмяРеквизита;
		НовыйЭлемент.Заголовок = Строка.ЗаголовокКоличества;
		Если СтрНайти(Строка.ЗаголовокКоличества, "кг") <> 0 Тогда
			НовыйЭлемент.Формат = "ЧДЦ=1";
		КонецЕсли;
		НовыйЭлемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		НовыйЭлемент.Ширина = 7;
	КонецЦикла;
	
	СлужебныеСтрокиБункеровки = ЗаполнитьСлужебныеСтрокиБункеровки();
		
	Для Каждого Строка Из СлужебныеСтрокиБункеровки Цикл
		Если ТЗБункеровкиЗначение.Найти(Строка.ДатаБункеровки,"ДатаБункеровки") = Неопределено Тогда
			НоваяСтрока = ТЗБункеровкиЗначение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "ДатаБункеровки");
			Для Каждого СтрокаВидТоплива Из СписокВидовТопливаТЗ Цикл							
				НаименованиеВидаТоплива = СтрокаВидТоплива.ИмяРеквизита;
				НоваяСтрока["ВидТоплива"+НаименованиеВидаТоплива] = СтрокаВидТоплива.Номенклатура;				
			КонецЦикла;
			ЗаполнитьСтрокуТЗ(Строка.ДатаБункеровки, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьПользовательскиеСтроки(ТЗБункеровкиЗначение);
	//Остальные строки будут всегда вверху. Группируем по дате и добавляем. Если Бункеровки.Найти(Дата) = Неопределно тогда добавить строку,
	//иначе записать в существующую
	РасчитатьИтоги(ТЗБункеровкиЗначение);
	//
	//
	//
	//
	//Для Каждого Строка Из Объект.Бункеровки Цикл
	//		
	//КонецЦикла;
	//Для Каждого Колонка Из ТЗБункеровкиЗначение.Колонки Цикл
	//	Если Колонка.Имя = "ВидТоплива" Тогда
	//		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя+"1", Колонка.ТипЗначения,"ТЗБункеровки"));
	//		ИзменитьРеквизиты(МассивРеквизитов);
	//		
	//		НовыйЭлемент = Элементы.Добавить(Колонка.Имя+"1", Тип("ПолеФормы"), Элементы.ТЗБункеровки);       
	//		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	//		НовыйЭлемент.ПутьКДанным = "ТЗБункеровки." + Колонка.Имя+"1";
	//		НовыйЭлемент.Ширина = 10;

	//	КонецЕсли;
	//КонецЦикла;
		
	ЗначениеВРеквизитФормы(ТЗБункеровкиЗначение, "ТЗБункеровки");	
	//ТЗБункеровкиЗначение.
	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокВидовТоплива()
	
	
	МаслоГД = Справочники.рарусСправочникСсылок.МаслоГД;
	НоваяСтрока = СписокВидовТопливаТЗ.Добавить();
	НоваяСтрока.Номенклатура = МаслоГД.Значение;
	НоваяСтрока.ИмяЗаголовка = МаслоГД.Наименование;
	НоваяСтрока.ИмяРеквизита = МаслоГД.Код;
	НоваяСтрока.ЗаголовокКоличества = "Кол-во, кг";
	МаслоДГ = Справочники.рарусСправочникСсылок.МаслоДГ;
	НоваяСтрока = СписокВидовТопливаТЗ.Добавить();
	НоваяСтрока.Номенклатура = МаслоДГ.Значение;
	НоваяСтрока.ИмяЗаголовка = МаслоДГ.Наименование;
	НоваяСтрока.ИмяРеквизита = МаслоДГ.Код;
	НоваяСтрока.ЗаголовокКоличества = "Кол-во, кг";
	ТопливоСМТ = Справочники.рарусСправочникСсылок.ТопливоСМТ;
	НоваяСтрока = СписокВидовТопливаТЗ.Добавить();
	НоваяСтрока.Номенклатура = ТопливоСМТ.Значение;
	НоваяСтрока.ИмяЗаголовка = ТопливоСМТ.Наименование;
	НоваяСтрока.ИмяРеквизита = ТопливоСМТ.Код;
	НоваяСтрока.ЗаголовокКоличества = "Кол-во, т";
	ТопливоМТ01 = Справочники.рарусСправочникСсылок.ТопливоМТ01;
	НоваяСтрока = СписокВидовТопливаТЗ.Добавить();
	НоваяСтрока.Номенклатура = ТопливоМТ01.Значение;
	НоваяСтрока.ИмяЗаголовка = ТопливоМТ01.Наименование;
	НоваяСтрока.ИмяРеквизита = ТопливоМТ01.Код;
	НоваяСтрока.ЗаголовокКоличества = "Кол-во, т";
	ТопливоМТ05 = Справочники.рарусСправочникСсылок.ТопливоМТ05;
	НоваяСтрока = СписокВидовТопливаТЗ.Добавить();
	НоваяСтрока.Номенклатура = ТопливоМТ05.Значение;
	НоваяСтрока.ИмяЗаголовка = ТопливоМТ05.Наименование;
	НоваяСтрока.ИмяРеквизита = ТопливоМТ05.Код;
	НоваяСтрока.ЗаголовокКоличества = "Кол-во, т";
	ТопливоМТ15 = Справочники.рарусСправочникСсылок.ТопливоМТ15;
	НоваяСтрока = СписокВидовТопливаТЗ.Добавить();
	НоваяСтрока.Номенклатура = ТопливоМТ15.Значение;
	НоваяСтрока.ИмяЗаголовка = ТопливоМТ15.Наименование;
	НоваяСтрока.ИмяРеквизита = ТопливоМТ15.Код;
	НоваяСтрока.ЗаголовокКоличества = "Кол-во, т";
	
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	Номенклатура.Наименование КАК Наименование,
	//               |	Номенклатура.Ссылка КАК Ссылка
	//               |ИЗ
	//               |	Справочник.Номенклатура КАК Номенклатура
	//               |ГДЕ
	//               |	(Номенклатура.ЭтоМасло
	//               |			ИЛИ Номенклатура.ЭтоТопливо)
	//               |	И Номенклатура.ПометкаУдаления = ЛОЖЬ
	//               |
	//               |УПОРЯДОЧИТЬ ПО
	//               |	Номенклатура.ЭтоМасло УБЫВ";
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	//Пока ВыборкаЗапроса.Следующий() Цикл
	//	СписокВидовТоплива.Добавить(ВыборкаЗапроса.Ссылка, ВыборкаЗапроса.Наименование);	
	//КонецЦикла;
	
	//Запрос=Новый Запрос;
	//Запрос.УстановитьПараметр("ПапкаМасла", "СписокВидовМасла");
	//Запрос.УстановитьПараметр("ПапкаТопливо", "СписокВидовТоплива");
	//
	//Запрос.Текст="ВЫБРАТЬ
	//             |	Спр.Значение КАК Значение,
	//             |	Спр.Наименование КАК Наименование,
	//             |	ИСТИНА КАК ЭтоМасло
	//             |ИЗ
	//             |	Справочник.рарусСправочникСсылок КАК Спр
	//             |ГДЕ
	//             |	НЕ Спр.ПометкаУдаления
	//             |	И НЕ Спр.ЭтоГруппа
	//             |	И Спр.Родитель.Код = &ПапкаМасла
	//             |	И Спр.Родитель.ЭтоГруппа
	//             |
	//             |ОБЪЕДИНИТЬ ВСЕ
	//             |
	//             |ВЫБРАТЬ
	//             |	Спр.Значение,
	//             |	Спр.Наименование,
	//             |	ЛОЖЬ
	//             |ИЗ
	//             |	Справочник.рарусСправочникСсылок КАК Спр
	//             |ГДЕ
	//             |	НЕ Спр.ПометкаУдаления
	//             |	И НЕ Спр.ЭтоГруппа
	//             |	И Спр.Родитель.Код = &ПапкаТопливо
	//             |	И Спр.Родитель.ЭтоГруппа";
	//РезультатЗапроса = Запрос.Выполнить();
	//ВыборкаЗапроса = РезультатЗапроса.Выбрать();
	//Пока ВыборкаЗапроса.Следующий() Цикл
	//	СписокВидовТоплива.Добавить(ВыборкаЗапроса.Значение, ВыборкаЗапроса.Наименование,ВыборкаЗапроса.ЭтоМасло);	
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСлужебныеСтрокиБункеровки()
	
	// Список колонок, закрытых для редактирования (без количества)
	//-------------------------------------------------------------
	МассивБК=Новый Массив;
	МассивБК.Добавить("ДатаБункеровки");
	МассивБК.Добавить("Операция");
	МассивБК.Добавить("Бункеровщик");
	МассивБК.Добавить("Пункт");
	МассивБК.Добавить("МаслоГДМарка");
	МассивБК.Добавить("МаслоДГМарка");
	МассивБК.Добавить("МазутМарка");
	МассивБК.Добавить("ДизтопливоМарка");
	
	// Список колонок, закрытых для редактирования (с количеством)
	//------------------------------------------------------------
	МассивСК=Новый Массив;
	МассивСК.Добавить("ДатаБункеровки");
	МассивСК.Добавить("Операция");
	МассивСК.Добавить("Бункеровщик");
	МассивСК.Добавить("Пункт");
	МассивСК.Добавить("МаслоГДМарка");
	МассивСК.Добавить("МаслоДГМарка");
	МассивСК.Добавить("МазутМарка");
	МассивСК.Добавить("ДизтопливоМарка");
	МассивСК.Добавить("МаслоГДКол");
	МассивСК.Добавить("МаслоДГКол");
	МассивСК.Добавить("МазутКол");
	МассивСК.Добавить("ДизтопливоКол");
	
	// Формируем табл. часть "СлужебныеСтрокиБункеровки"
	//--------------------------------------------------
	СлужебныеСтрокиБункеровки = Новый ТаблицаЗначений;
	СлужебныеСтрокиБункеровки.Колонки.Добавить("ДатаБункеровки", РарусОбщегоНазначенияСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	СлужебныеСтрокиБункеровки.Колонки.Добавить("Наименование");
	СлужебныеСтрокиБункеровки.Колонки.Добавить("ЗакрытыеКолонки");
	
	Стр=СлужебныеСтрокиБункеровки.Добавить();
	Стр.ДатаБункеровки=	'19000101';
	Стр.Наименование=	"Остаток на начало рейса";
	Стр.ЗакрытыеКолонки = МассивБК;
	СписокСлужебныхДат.Очистить();
	СписокСлужебныхДат.Добавить('19000101');
	
	Стр=СлужебныеСтрокиБункеровки.Добавить();
	Стр.ДатаБункеровки=	'39991205';
	Стр.Наименование=	"Итого получено";
	Стр.ЗакрытыеКолонки = МассивСК;
	СписокСлужебныхДат.Добавить('39991205');
	
	Стр=СлужебныеСтрокиБункеровки.Добавить();
	Стр.ДатаБункеровки=	'39991210';
	Стр.Наименование=	"Итого передано";
	Стр.ЗакрытыеКолонки = МассивСК;
	СписокСлужебныхДат.Добавить('39991210');
	
	Стр=СлужебныеСтрокиБункеровки.Добавить();
	Стр.ДатаБункеровки=	'39991215';
	Стр.Наименование=	"Расход за рейс";
	Стр.ЗакрытыеКолонки = МассивСК;
	СписокСлужебныхДат.Добавить('39991215');
	
	Стр=СлужебныеСтрокиБункеровки.Добавить();
	Стр.ДатаБункеровки=	'39991220';
	Стр.Наименование=	"Остаток на конец рейса";
	Стр.ЗакрытыеКолонки = МассивБК;
	СписокСлужебныхДат.Добавить('39991220');
	
	Возврат СлужебныеСтрокиБункеровки;
КонецФункции

&НаКлиенте
Процедура ТЗБункеровкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Или Копирование Тогда
		
		Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
			Элемент.ТекущиеДанные["ВидТоплива"+Строка.ИмяРеквизита] = Строка.Номенклатура;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Операция) Тогда
			Элемент.ТекущиеДанные.Операция = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Бункеровка");
		КонецЕсли;
		
		Если не РарусОбщегоНазначенияКлиент.Между(Элемент.ТекущиеДанные.ДатаБункеровки,'20000101','29991231') Тогда
			Элемент.ТекущиеДанные.ДатаБункеровки = Дата(1,1,1);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗБункеровкиПередНачаломИзменения(Элемент, Отказ)
	к = 1;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТЗ(ДатаБункеровки, НоваяСтрока)
	
	НайтиСтроки = Объект.Бункеровки.НайтиСтроки(Новый Структура("ДатаБункеровки", ДатаБункеровки));
	Для Каждого Строка Из НайтиСтроки Цикл
		Попытка
			НайтиСтрокиТопливо = СписокВидовТопливаТЗ.НайтиСтроки(Новый Структура("Номенклатура", Строка.ВидТоплива));

			Если НайтиСтрокиТопливо.Количество() <> 0 Тогда
				НаименованиеВидаТоплива = НайтиСтрокиТопливо[0].ИмяРеквизита;
			//НоваяСтрока["ВидТоплива"+НаименованиеВидаТоплива] = Строка.ВидТоплива;
			//НоваяСтрока["МаркаТоплива"+НаименованиеВидаТоплива] = Строка.МаркаТоплива;
				НоваяСтрока["Количество"+НаименованиеВидаТоплива] = Строка.Количество;
			Иначе
				ТекстСообщения = НСтр("ru = 'Возникла ошибка при заполнении вида топлива %1. Проверьте что данные элемент есть в списке топлива в Справочнике ссылок'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ""+Строка.ВидТоплива);
				Сообщить(ТекстСообщения);	
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при заполнении вида топлива %1. Проверьте правильность наименования. Без пробелов и спец. символов'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НаименованиеВидаТоплива);
			Сообщить(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьИтоги(ТЗБункеровкиЗначение)
	
	Перем СтрНачОстаток;
	Перем СтрПолучено;
	Перем СтрПередано;
	Перем СтрРасход;
	Перем СтрКонОстаток;
	
	ТЗБункеровкиЗначение.Сортировать("ДатаБункеровки");
	
	ИтогоПолучено = Новый Структура();
	ИтогоПередано = Новый Структура();
	Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
		ИтогоПолучено.Вставить("Количество" + Строка.ИмяРеквизита, 0);
		ИтогоПередано.Вставить("Количество" + Строка.ИмяРеквизита, 0);
	КонецЦикла;
	
	
	
	Для Каждого Стр из ТЗБункеровкиЗначение Цикл
		Если Стр.ДатаБункеровки='19000101' Тогда		// Нач. остаток
			СтрНачОстаток = Стр;
			
		ИначеЕсли Стр.ДатаБункеровки='39991205' Тогда	// Итого получено
			СтрПолучено = Стр;
			
		ИначеЕсли Стр.ДатаБункеровки='39991210' Тогда	// Итого передано
			СтрПередано = Стр;
			
		ИначеЕсли Стр.ДатаБункеровки='39991215' Тогда	// Итого расход
			СтрРасход = Стр;
			           
		ИначеЕсли Стр.ДатаБункеровки='39991220' Тогда	// Кон. остаток
			СтрКонОстаток = Стр;
			
		ИначеЕсли Стр.Операция = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Бункеровка") Тогда
			Для Каждого Эл из ИтогоПолучено Цикл
				ИтогоПолучено[Эл.Ключ] = ИтогоПолучено[Эл.Ключ] + Стр[Эл.Ключ];
			КонецЦикла;
			
		ИначеЕсли Стр.Операция = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПередачаТоплива") Тогда
			Для Каждого Эл из ИтогоПередано Цикл
				ИтогоПередано[Эл.Ключ] = ИтогоПередано[Эл.Ключ] + Стр[Эл.Ключ];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	//
	//// Записываем полученные данные
	////-----------------------------
	ЗаполнитьЗначенияСвойств(СтрПолучено,ИтогоПолучено);
	ЗаполнитьЗначенияСвойств(СтрПередано,ИтогоПередано);
	//
	Для Каждого Эл из ИтогоПолучено Цикл
		Попытка
			СтрРасход[Эл.Ключ] = СтрНачОстаток[Эл.Ключ] - СтрКонОстаток[Эл.Ключ] + СтрПолучено[Эл.Ключ] - СтрПередано[Эл.Ключ];
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при заполнении поля с ключом %1. Проверьте правильность наименования. Без пробелов и спец. символов'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Эл.Ключ);
			Сообщить(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьИтогиКлиент()
	
	Перем СтрНачОстаток;
	Перем СтрПолучено;
	Перем СтрПередано;
	Перем СтрРасход;
	Перем СтрКонОстаток;
	
	ТЗБункеровки.Сортировать("ДатаБункеровки");
	
	ИтогоПолучено = Новый Структура();
	ИтогоПередано = Новый Структура();
	Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
		ИтогоПолучено.Вставить("Количество" + Строка.ИмяРеквизита, 0);
		ИтогоПередано.Вставить("Количество" + Строка.ИмяРеквизита, 0);
	КонецЦикла;
	
	
	
	Для Каждого Стр из ТЗБункеровки Цикл
		Если Стр.ДатаБункеровки='19000101' Тогда		// Нач. остаток
			СтрНачОстаток = Стр;
			
		ИначеЕсли Стр.ДатаБункеровки='39991205' Тогда	// Итого получено
			СтрПолучено = Стр;
			
		ИначеЕсли Стр.ДатаБункеровки='39991210' Тогда	// Итого передано
			СтрПередано = Стр;
			
		ИначеЕсли Стр.ДатаБункеровки='39991215' Тогда	// Итого расход
			СтрРасход = Стр;
			           
		ИначеЕсли Стр.ДатаБункеровки='39991220' Тогда	// Кон. остаток
			СтрКонОстаток = Стр;
			
		ИначеЕсли Стр.Операция = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.Бункеровка") Тогда
			Для Каждого Эл из ИтогоПолучено Цикл
				ИтогоПолучено[Эл.Ключ] = ИтогоПолучено[Эл.Ключ] + Стр[Эл.Ключ];
			КонецЦикла;
			
		ИначеЕсли Стр.Операция = ПредопределенноеЗначение("Справочник.vftТиповыеОперации.ПередачаТоплива") Тогда
			Для Каждого Эл из ИтогоПередано Цикл
				ИтогоПередано[Эл.Ключ] = ИтогоПередано[Эл.Ключ] + Стр[Эл.Ключ];
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	//
	//// Записываем полученные данные
	////-----------------------------
	ЗаполнитьЗначенияСвойств(СтрПолучено,ИтогоПолучено);
	ЗаполнитьЗначенияСвойств(СтрПередано,ИтогоПередано);
	//
	Для Каждого Эл из ИтогоПолучено Цикл
		Попытка
			СтрРасход[Эл.Ключ] = СтрНачОстаток[Эл.Ключ] - СтрКонОстаток[Эл.Ключ] + СтрПолучено[Эл.Ключ] - СтрПередано[Эл.Ключ];
		Исключение
			ТекстСообщения = НСтр("ru = 'Возникла ошибка при заполнении поля с ключом %1. Проверьте правильность наименования. Без пробелов и спец. символов'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", Эл.Ключ);
			Сообщить(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользовательскиеСтроки(ТЗБункеровкиЗначение)
	
	//++ rarus isaeva 12.08.2021
	КоличествоСтрок = 1;
	//-- rarus isaeva 12.08.2021
	
	Для Каждого Строка Из Объект.Бункеровки Цикл
		Если рарусОбщегоНазначенияКлиентСервер.Между(Строка.ДатаБункеровки, '19010101','39990101') Тогда
			
			//++ rarus isaeva 12.08.2021
			
			//НоваяСтрока = ТЗБункеровкиЗначение.Найти(Строка.ДатаБункеровки,"ДатаБункеровки");
			//Если НоваяСтрока = Неопределено	Тогда
			//	НоваяСтрока = ТЗБункеровкиЗначение.Добавить();
			//	ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			//КонецЕсли;
			
			Если КоличествоСтрок = 1 ИЛИ КоличествоСтрок > 6 Тогда
				КоличествоСтрок = 1;
				НоваяСтрока = ТЗБункеровкиЗначение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
			//-- rarus isaeva 12.08.2021
			
			Попытка
				НайтиСтрокиТопливо = СписокВидовТопливаТЗ.НайтиСтроки(Новый Структура("Номенклатура", Строка.ВидТоплива));			
				Если НайтиСтрокиТопливо.Количество() <> 0 Тогда
					НаименованиеВидаТоплива = НайтиСтрокиТопливо[0].ИмяРеквизита;
					НоваяСтрока["ВидТоплива"+НаименованиеВидаТоплива] = Строка.ВидТоплива;
					НоваяСтрока["МаркаТоплива"+НаименованиеВидаТоплива] = Строка.МаркаТоплива;
					НоваяСтрока["Количество"+НаименованиеВидаТоплива] = Строка.Количество;
				Иначе
					ТекстСообщения = НСтр("ru = 'Возникла ошибка при заполнении вида топлива %1. Проверьте что данные элемент есть в списке топлива в Справочнике ссылок'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", ""+Строка.ВидТоплива);
					Сообщить(ТекстСообщения);
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru = 'Возникла ошибка при заполнении вида топлива %1. Проверьте правильность наименования. Без пробелов и спец. символов'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", НаименованиеВидаТоплива);
				Сообщить(ТекстСообщения);
			КонецПопытки;
			
			//++ rarus isaeva 12.08.2021
			КоличествоСтрок = КоличествоСтрок + 1;
			//-- rarus isaeva 12.08.2021
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Для Каждого Строка Из УдалитьИзРС Цикл
		НаборЗаписей = РегистрыСведений.рарусОтправленныеРейсыРДО.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ИДСтрокиРейса.Установить(Строка.Значение);
		НаборЗаписей.Записать();
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	ТЗБункеровкиЗначение = РеквизитФормыВЗначение("ТЗБункеровки");
	#Если Клиент Тогда 
		ТЗБункеровкиЗначение = Новый ТаблицаЗначений;
	#КонецЕсли
	// ++ rarus Камаев П.В. 28.08.2020 Задача № 23501
	//ТекущийОбъект.ОР_Расчет_14Ф = 0;
	//ТекущийОбъект.ОР_Расчет_13Ф = 0;
	// -- rarus Камаев П.В. 28.08.2020
	ТекущийОбъект.Бункеровки.Очистить();
	Для Каждого Строка Из ТЗБункеровкиЗначение Цикл
		Для Каждого СтрокаВидТоплива Из СписокВидовТопливаТЗ Цикл
			
			Попытка
				ВидТопливаКоличество = Строка["Количество"+СтрокаВидТоплива.ИмяРеквизита];					
			Исключение
				ТекстСообщения = НСтр("ru = 'Возникла ошибка при чтении колонки  %1. Проверьте правильность наименования. Без пробелов и спец. символов'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%1", "Количество"+СтрокаВидТоплива.ИмяРеквизита);
				Сообщить(ТекстСообщения);
				Продолжить;
			КонецПопытки;
			
			Если рарусОбщегоНазначенияКлиентСервер.Между(Строка.ДатаБункеровки, '19000101','39991220') Тогда
				//Добавляем только заполненые цифровые значения
				НоваяСтрока = ТекущийОбъект.Бункеровки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,"ДатаБункеровки,Операция,Бункеровщик,Пункт,Примечание","ВидТоплива,МаркаТоплива,Количество");
				НоваяСтрока.ВидТоплива = СтрокаВидТоплива.Номенклатура;
				НоваяСтрока.МаркаТоплива = Строка["МаркаТоплива"+СтрокаВидТоплива.ИмяРеквизита];
				НоваяСтрока.Количество = Строка["Количество"+СтрокаВидТоплива.ИмяРеквизита];
			КонецЕсли;
			
			// ++ rarus Камаев П.В. 28.08.2020 Задача № 23501
			//Если Строка.ДатаБункеровки = '39991215' Тогда
			//	Если СтрокаВидТоплива.Номенклатура.ЭтоТопливо Тогда
			//		ТекущийОбъект.ОР_Расчет_13Ф = ТекущийОбъект.ОР_Расчет_13Ф + ВидТопливаКоличество;	
			//	КонецЕсли;
			//	Если СтрокаВидТоплива.Номенклатура.ЭтоМасло Тогда
			//		ТекущийОбъект.ОР_Расчет_14Ф = ТекущийОбъект.ОР_Расчет_14Ф + ВидТопливаКоличество;	
			//	КонецЕсли;
			//КонецЕсли;
			// -- rarus Камаев П.В. 28.08.2020
			
		КонецЦикла;
	КонецЦикла;	
	
	
		// ++ rarus Чернавин Г.К 20.07.2020 № 22865
	ТекущийОбъект.ДополнительныеСвойства.Вставить("НомерБезПрефикса", НомерБезПрефикса);
	// -- rarus Чернавин Г.К 20.07.2020

КонецПроцедуры


// ++ rarus Камаев П.В. 20.03.2020 999
&НаКлиенте
Процедура ПослеЗакрытияФормыРаботаСФайламиПрохождениеУчастковСОЛП(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		текСтрока = Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные;
		Если текСтрока <> Неопределено Тогда
			
			текСтрока.Файл = Результат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСОЛПВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	текСтрока = Элементы.ПрохождениеУчастковСОЛП.ТекущиеДанные;
	
	Если текСтрока <> Неопределено Тогда
		Файл = текСтрока.Файл; 
		Если Поле = Элементы.ПрохождениеУчастковСОЛПФайл Тогда
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Файл, Неопределено, УникальныйИдентификатор, Неопределено, Неопределено);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
			
		ИначеЕсли Поле = Элементы.ПрохождениеУчастковСОЛПЗагрузитьЗаменитьФайл Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыРаботаСФайламиПрохождениеУчастковСОЛП", ЭтотОбъект);
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтаФорма, Истина, ЭтаФорма.Окно , , ОписаниеОповещения);
			
		ИначеЕсли Поле = Элементы.ПрохождениеУчастковСОЛПУдалитьФайл Тогда
			
			текСтрока.Файл = ПредопределенноеЗначение("Справочник.vftРейсПрисоединенныеФайлы.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРаботаСФайламиПрохождениеУчастковСЛоцманом(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		текСтрока = Элементы.ПрохождениеУчастковСЛоцманом.ТекущиеДанные;
		Если текСтрока <> Неопределено Тогда
			
			текСтрока.Файл = Результат;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСЛоцманомВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	текСтрока = Элементы.ПрохождениеУчастковСЛоцманом.ТекущиеДанные;
	
	Если текСтрока <> Неопределено Тогда
		Файл = текСтрока.Файл; 
		Если Поле = Элементы.ПрохождениеУчастковСЛоцманомФайл Тогда
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Файл, Неопределено, УникальныйИдентификатор, Неопределено, Неопределено);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
			
		ИначеЕсли Поле = Элементы.ПрохождениеУчастковСЛоцманомЗагрузитьЗаменитьФайл Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыРаботаСФайламиПрохождениеУчастковСЛоцманом", ЭтотОбъект);
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтаФорма, Истина, ЭтаФорма.Окно , , ОписаниеОповещения);
			
		ИначеЕсли Поле = Элементы.ПрохождениеУчастковСЛоцманомУдалитьФайл Тогда
			
			текСтрока.Файл = ПредопределенноеЗначение("Справочник.vftРейсПрисоединенныеФайлы.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
// -- rarus Камаев П.В. 20.03.2020


&НаКлиенте
Процедура ТЗБункеровкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Бункеровки.Сортировать("ДатаБункеровки");
	РасчитатьИтогиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗБункеровкиПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТЗБункеровки.ТекущиеДанные;
	Если СписокСлужебныхДат.НайтиПоЗначению(ТекущиеДанные.ДатаБункеровки) <> Неопределено Тогда 
		Отказ=Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТЗБункеровкиПослеУдаления(Элемент)
	РасчитатьИтогиКлиент();
КонецПроцедуры

&НаКлиенте
Процедура ТЗБункеровкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Или Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка даты бункеровки
	//-------------------------
	
	//++ rarus isaeva 04.01.2021
	ЭтоСудноННФ = рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Объект.Судно);
	//-- rarus isaeva 04.01.2021
	
	Если Год(Элемент.ТекущиеДанные.ДатаБункеровки) <> Год(Объект.Дата) 
		И НЕ ЭтоСудноННФ // rarus isaeva 04.01.2021
		Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Год бункеровки должен совпадать с годом документа!'"),30,"Ошибка!");
		Элементы.ТЗБункеровки.ТекущийЭлемент = Элементы.ТЗБункеровкиДатаБункеровки;
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзЖурналаНаСервере()
	Перем ТЗ;
	
	ТЗБункеровкиЗначение = РеквизитФормыВЗначение("ТЗБункеровки");
	#Если Клиент Тогда 
		ТЗБункеровкиЗначение = Новый ТаблицаЗначений;
	#КонецЕсли
	
	ТЗ = ТЗБункеровкиЗначение.СкопироватьКолонки("ДатаБункеровки,Операция,Пункт");
	СтруктураПоиска = Новый Структура("ДатаБункеровки,Операция,Пункт");
	
	Для Каждого Стр из Объект.Пункты Цикл
		Если Стр.ПричинаСтоянки = Справочники.vftТиповыеОперации.Бункеровка Тогда
			СтрТЗ = ТЗ.Добавить();
			СтрТЗ.ДатаБункеровки =	НачалоДня(Стр.Приход);
			СтрТЗ.Операция =		Справочники.vftТиповыеОперации.Бункеровка;
			СтрТЗ.Пункт =			Стр.Пункт;
		КонецЕсли;
		Если Стр.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПередачаТоплива Тогда
			СтрТЗ = ТЗ.Добавить();
			СтрТЗ.ДатаБункеровки =	НачалоДня(Стр.Приход);
			СтрТЗ.Операция =		Справочники.vftТиповыеОперации.ПередачаТоплива;
			СтрТЗ.Пункт =			Стр.Пункт;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр из Объект.ПрочиеПричиныСтоянки Цикл
		Если Стр.ПричинаСтоянки = Справочники.vftТиповыеОперации.Бункеровка Тогда
			СтрТЗ = ТЗ.Добавить();
			СтрТЗ.ДатаБункеровки =	НачалоДня(Стр.НачДата);
			СтрТЗ.Операция =		Справочники.vftТиповыеОперации.Бункеровка;
			СтрокиПункты = Объект.Пункты.НайтиСтроки(Новый Структура("ИД", Стр.ИД));
			Если СтрокиПункты.Количество() <> 0 Тогда
				СтрТЗ.Пункт = СтрокиПункты[0].Пункт;
			Иначе
				СтрТЗ.Пункт = Справочники.vftПунктыСледования.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		Если Стр.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПередачаТоплива Тогда
			СтрТЗ = ТЗ.Добавить();
			СтрТЗ.ДатаБункеровки =	НачалоДня(Стр.НачДата);
			СтрТЗ.Операция =		Справочники.vftТиповыеОперации.ПередачаТоплива;
			СтрокиПункты = Объект.Пункты.НайтиСтроки(Новый Структура("ИД", Стр.ИД));
			Если СтрокиПункты.Количество() <> 0 Тогда
				СтрТЗ.Пункт = СтрокиПункты[0].Пункт;
			Иначе
				СтрТЗ.Пункт = Справочники.vftПунктыСледования.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТЗ.Свернуть("ДатаБункеровки,Операция,Пункт");
	
	Для Каждого СтрТЗ из ТЗ Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрТЗ);
		Если ТЗБункеровкиЗначение.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ЗаполнитьЗначенияСвойств(ТЗБункеровкиЗначение.Добавить(),СтрТЗ);
		КонецЕсли;
	КонецЦикла;
	
	ТЗБункеровкиЗначение.Сортировать("ДатаБункеровки");
	
	ЗначениеВРеквизитФормы(ТЗБункеровкиЗначение, "ТЗБункеровки");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИзЖурнала(Команда)
	ЗаполнитьИзЖурналаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ТЗБункеровкиБункеровщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//
	//Меню = Новый СписокЗначений;
	//Меню.Добавить(1,"Строка");
	//Меню.Добавить(2,"Справочник судов");
	//
	//Если ТипЗнч(Элемент) = Тип("Строка") Тогда
	//	НачальноеЗначение = 1;
	//ИначеЕсли ТипЗнч(Элемент)=Тип("СправочникСсылка.vftСуда") Тогда
	//	НачальноеЗначение = 2;
	//КонецЕсли;
	//
	//Результат = Неопределено;
	//
	//ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ТЗБункеровкиБункеровщикНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент)), Меню,Элемент,НачальноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗБункеровкиБункеровщикНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	//Элемент = ДополнительныеПараметры.Элемент;
	//
	//
	//Результат = ВыбранныйЭлемент;
	//
	//Если Результат=Неопределено Тогда
	//	СтандартнаяОбработка=Ложь;
	//	Возврат;
	//Иначе
	//	Если Результат.Значение=1 Тогда
	//		Элемент.ОграничениеТипа = РарусОбщегоНазначенияКлиент.ПолучитьОписаниеТиповСтроки(50);
	//	Иначе
	//		Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.vftСуда");
	//	КонецЕсли;
	//	ТекущиеДанные = Элементы.Бункеровки.ТекущиеДанные;
	//	//ТекущиеДанные.Бункеровщик = Элемент.ОграничениеТипа.ПривестиЗначение(ТекущиеДанные.Бункеровщик);
	//КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтчетДанныеПоГСМ(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "ОтчетДанныеПоГСМ");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьОтчетДанныеПоГСМ();
		УстановитьПометкуОтчета(Элементы.ОтчетДанныеПоГСМ.Пометка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетДанныеПоГСМ();
	
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	Макет = РеквизитОбъект.ПолучитьМакет("ПФ_MXL_ОтчетПоРасходуТоплива");
	
	Если Ложь Тогда
		РеквизитОбъект = Документы.vftРейс.СоздатьДокумент();
	КонецЕсли;
	
	Таб = ТабДок;
	Таб.Очистить();
	Таб.ОбластьПечати=Неопределено;
	Таб.ЧерноБелаяПечать=Ложь;
	Таб.АвтоМасштаб=Истина;
	Таб.ОриентацияСтраницы=ОриентацияСтраницы.Ландшафт;
	Таб.ОтображатьСетку=Ложь;
	Таб.ОтображатьЗаголовки=Ложь;
	Таб.ОтображатьГруппировки=Истина;
	Таб.ТолькоПросмотр=Истина;
	
	Область=Макет.ПолучитьОбласть("Шапка|Лево");
	// ++ rarus Чернавин Г.К 18.06.2020 № 22279
	НомерДокумента = Документы.vftРейс.НомерБезПрефикса(Объект.Номер);
	Область.Параметры.Номер = НомерДокумента;
	// -- rarus Чернавин Г.К 18.06.2020
	Область.Параметры.Судно = Объект.Судно;
	Область.Параметры.НаименованиеРейса = рарусОбщегоНазначенияСервер.ПолучитьПредставлениеНаименованияРейса(Объект);
	Область.Параметры.Дата = Формат(Объект.Дата,"ДЛФ=DD");
	Таб.Вывести(Область);
	Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
		ОбластьВидТоплива = Макет.ПолучитьОбласть("Шапка|ВидТоплива");
		ОбластьВидТоплива.Параметры.НаименованиеВидаТоплива = Строка.ИмяЗаголовка; 
		ОбластьВидТоплива.Параметры.ЕдИзм = Строка.ЗаголовокКоличества;
		Таб.Присоединить(ОбластьВидТоплива);
	КонецЦикла;
	Область=Макет.ПолучитьОбласть("Шапка|Примечание");
	Таб.Присоединить(Область);
	// Выводим строки
	//---------------
	
	СлужебныеСтрокиБункеровки = ЗаполнитьСлужебныеСтрокиБункеровки();
	НомерСтроки = 1;
	Для Каждого Стр Из ТЗБункеровки Цикл
		Врем = СлужебныеСтрокиБункеровки.Найти(Стр.ДатаБункеровки,"ДатаБункеровки");
		Если Врем=Неопределено Тогда
			Область = Макет.ПолучитьОбласть("Строка|Лево");
			Область.Параметры.ДатаБункеровки=	Формат(Стр.ДатаБункеровки,"ДФ=dd.MM.yyyy")+" - "+Стр.Операция;
			Область.Параметры.Бункеровщик=		Стр.Бункеровщик;
			Область.Параметры.Пункт=			Стр.Пункт;
			Область.Параметры.НомерСтрокиДокумента=	"НомерСтрокиДокумента_ДГ_"+Формат(НомерСтроки,"ЧН=; ЧГ=0");
			НомерСтроки = НомерСтроки + 1;

			Таб.Вывести(Область);
			Область = Макет.ПолучитьОбласть("Строка|ВидТоплива");
			Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
				Если СтрНайти(Строка.ЗаголовокКоличества, "кг") <> 0 Тогда
					Область = Макет.ПолучитьОбласть("Строка|ВидМасла");
				Иначе
					Область = Макет.ПолучитьОбласть("Строка|ВидТоплива");
				КонецЕсли;
				Область.Параметры.Марка = Стр["МаркаТоплива"+Строка.ИмяРеквизита];
				Область.Параметры.Количество = Стр["Количество"+Строка.ИмяРеквизита];
				Таб.Присоединить(Область);
			КонецЦикла;
			
			Область=Макет.ПолучитьОбласть("Строка|Примечание");
			Область.Параметры.Примечание = Стр.Примечание;
			Таб.Присоединить(Область);
		Иначе
			Область=Макет.ПолучитьОбласть("Итого|Лево");
			Область.Параметры.ДатаБункеровки = Врем.Наименование;
			Область.Параметры.НомерСтрокиДокумента=	"НомерСтрокиДокумента_ДГ_"+Формат(НомерСтроки,"ЧН=; ЧГ=0");
			НомерСтроки = НомерСтроки + 1;
			Таб.Вывести(Область);
			Область=Макет.ПолучитьОбласть("Итого|ВидТоплива");
			Для Каждого Строка Из СписокВидовТопливаТЗ Цикл
				Если СтрНайти(Строка.ЗаголовокКоличества, "кг") <> 0 Тогда
					Область=Макет.ПолучитьОбласть("Итого|ВидМасла");
				Иначе
					Область=Макет.ПолучитьОбласть("Итого|ВидТоплива");					
				КонецЕсли;
				Область.Параметры.ВидТопливаКолИтого = Стр["Количество"+Строка.ИмяРеквизита];
				Таб.Присоединить(Область);
			КонецЦикла;
			
			Область=Макет.ПолучитьОбласть("Итого|Примечание");
			Область.Параметры.Примечание = Стр.Примечание;
			Таб.Присоединить(Область);
		КонецЕсли;
	КонецЦикла;
	
	// Создадим группировку колонок
	//-----------------------------
	Область=Таб.Область(,Таб.ШиринаТаблицы,,Таб.ШиринаТаблицы);
	Область.Сгруппировать("Примечание",РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	
	Таб.ВерхнийКолонтитул.НачальнаяСтраница=1;
	Таб.ВерхнийКолонтитул.ТекстСправа="Стр.[&НомерСтраницы] из [&СтраницВсего]";
	Таб.ВерхнийКолонтитул.Выводить=Истина;
	
	Таб.НижнийКолонтитул.НачальнаяСтраница=1;
	Таб.НижнийКолонтитул.ТекстСправа="Отчет сформирован [&Дата] [&Время]";
	Таб.НижнийКолонтитул.Выводить=Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОтчета(ЭлементПометка = Истина)
	
	Элементы.ОтчетДанныеПоГСМ.Пометка = Ложь;
	Элементы.ОтчетПутевойЖурнал.Пометка = Ложь;
	Элементы.ОтчетГрафикДвижения.Пометка = Ложь;
	Элементы.РейсовыйОтчетННФ.Пометка = Ложь;
	// ++ rarus Камаев П.В. 31.03.2020 Задача № 20673
	Элементы.ОтчетРапортСОЛП.Пометка = Ложь;
	Элементы.РейсовыйОтчет.Пометка = Ложь;
	Элементы.ТопливныйОтчет.Пометка = Ложь;
	Элементы.ОтчетОРейсообороте.Пометка = Ложь;
	// -- rarus Камаев П.В. 31.03.2020

	Для Каждого Кнопка Из Элементы.ПутевойЖурналНС.ПодчиненныеЭлементы Цикл
		Кнопка.Пометка = Ложь;
	КонецЦикла;
	ЭлементПометка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	
	Если ТипЗнч(Расшифровка)=Тип("Строка") Тогда
		Если Лев(Расшифровка,24)="НомерСтрокиДокумента_УВ_" Тогда
			СтандартнаяОбработка=Ложь;
			НомерСтрокиДокумента = Число(Сред(Расшифровка,25));
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаПункты;
			Элементы.Пункты.ТекущаяСтрока= Объект.Пункты[НомерСтрокиДокумента-1].ПолучитьИдентификатор();
			
		ИначеЕсли Лев(Расшифровка,24)="НомерСтрокиДокумента_ДГ_" Тогда
			СтандартнаяОбработка=Ложь;
			НомерСтрокиДокумента = Число(Сред(Расшифровка,25));
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаБункеровки;
			Элементы.ТЗБункеровки.ТекущаяСтрока = ТЗБункеровки[НомерСтрокиДокумента-1].ПолучитьИдентификатор();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПутевойЖурнал(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "ОтчетПутевойЖурнал");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьОтчетПутевойЖурнал();
		УстановитьПометкуОтчета(Элементы.ОтчетПутевойЖурнал.Пометка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетГрафикДвижения(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "ОтчетГрафикДвижения");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьОтчетГрафикДвижения();
		УстановитьПометкуОтчета(Элементы.ОтчетГрафикДвижения.Пометка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПутевойЖурналНС(Команда)
	//Элементы.ПутевойЖурналНС
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, Команда.Имя);
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьОтчетПутевойЖурналНС(Команда.Имя);
		УстановитьПометкуОтчета(Элементы[Команда.Имя].Пометка);
	КонецЕсли;
КонецПроцедуры

// ++ rarus Камаев П.В. 31.03.2020 Задача № 20673
&НаКлиенте
Процедура ОтчетРапортСОЛП(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "ОтчетРапортСОЛП");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьОтчетРапортСОЛП();
		УстановитьПометкуОтчета(Элементы.ОтчетРапортСОЛП.Пометка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РейсовыйОтчет(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "РейсовыйОтчет");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьРейсовыйОтчет();
		УстановитьПометкуОтчета(Элементы.РейсовыйОтчет.Пометка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТопливныйОтчет(Команда)
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "ТопливныйОтчет");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьТопливныйОтчет();
		УстановитьПометкуОтчета(Элементы.ТопливныйОтчет.Пометка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОРейсообороте(Команда)
	ИмяТекущегоОтчета = "ОтчетОРейсообороте";
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "ОтчетОРейсообороте");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьОтчетОРейсообороте();
		УстановитьПометкуОтчета(Элементы.ОтчетОРейсообороте.Пометка);
	КонецЕсли;
	
КонецПроцедуры

// -- rarus Камаев П.В. 31.03.2020

&НаСервере
Процедура ЗаполнитьПодменюПЖНС()
	
	СоответствиеКнопкаСекция.Очистить();
	//
	Подменю = Элементы.ПутевойЖурналНС;
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Эл Из Подменю.ПодчиненныеЭлементы Цикл
		МассивУдаляемыхЭлементов.Добавить(Эл);
	КонецЦикла;
	
	Для Каждого Эл Из МассивУдаляемыхЭлементов Цикл
		Команды.Удалить(Команды.Найти(Эл.ИмяКоманды));
		Элементы.Удалить(Эл);
	КонецЦикла;
	//
	Если ТолькоПросмотр И Не ДоступныРолиПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	Список = Новый СписокЗначений;
	Для Каждого Стр из Объект.Баржи Цикл
		Если ЗначениеЗаполнено(Стр.БаржаПриход) Тогда
			Если Список.НайтиПоЗначению(Стр.БаржаПриход)=Неопределено Тогда
				Список.Добавить(Стр.БаржаПриход);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Список.СортироватьПоЗначению();
	//
	Для А=1 по Список.Количество() Цикл
		
		НоваяКоманда = Команды.Добавить("ПодменюПЖНС"+А);
		НоваяКоманда.Действие = "ОтчетПутевойЖурналНС";
		
		НовыйЭлемент        = Элементы.Добавить("ПодменюПЖНС"+А, Тип("КнопкаФормы"), Подменю);
		НовыйЭлемент.Вид    = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.Заголовок  = ""+Список[а-1].Значение;
		НовыйЭлемент.ИмяКоманды = "ПодменюПЖНС"+А;
		СоответствиеКнопкаСекция.Добавить(Список[а-1].Значение, "ПодменюПЖНС"+А);
		//НоваяКнопка = Подменю.Добавить(,ТипКнопкиКоманднойПанели.Действие,""+Список[А-1].Значение,Новый Действие("КоманднаяПанельОтчетыПутевойЖурналНС"));
		//СоответствиеКнопкаСекция.Вставить(НоваяКнопка,Список[А-1].Значение);
	КонецЦикла;
	
КонецПроцедуры




&НаСервере
Процедура СформироватьОтчетПутевойЖурнал()
	
	Отчет = Отчеты.рарусПутевойЖурнал.Создать();
	ТабДок = Отчет.СформироватьТабДок(Объект.Ссылка);
					
КонецПроцедуры

&НаКлиенте
Процедура ВопросМодифицированностьЗавершение(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		
		//++ rarus isaeva 13.10.2020
		//Если Записать() Тогда
		
		ДопПараметрыЗаписи = Новый Структура;
		ДопПараметрыЗаписи.Вставить("НаименованиеОтчета", ДопПараметры);
		Если Записать(ДопПараметрыЗаписи) Тогда
			
			//Перенесено в ПродолжениеФормированияОтчетов(), 
			//т.к. при записи добавлена обработка оповещения, 
			//и все что ниже не выполняется 
				
			//Если ДопПараметры = "ОтчетДанныеПоГСМ" Тогда
			//	СформироватьОтчетДанныеПоГСМ();
			//	УстановитьПометкуОтчета(Элементы.ОтчетДанныеПоГСМ.Пометка);	
			//КонецЕсли;
			//Если ДопПараметры = "ОтчетПутевойЖурнал" Тогда
			//	СформироватьОтчетПутевойЖурнал();
			//	УстановитьПометкуОтчета(Элементы.ОтчетПутевойЖурнал.Пометка);	
			//КонецЕсли;
			//Если ДопПараметры = "ОтчетГрафикДвижения" Тогда
			//	СформироватьОтчетГрафикДвижения();
			//	УстановитьПометкуОтчета(Элементы.ОтчетГрафикДвижения.Пометка);	
			//КонецЕсли;
			//// ++ rarus Камаев П.В. 31.03.2020 
			//Если ДопПараметры = "ОтчетРапортСОЛП" Тогда
			//	СформироватьОтчетРапортСОЛП();
			//	УстановитьПометкуОтчета(Элементы.ОтчетГрафикДвижения.Пометка);	
			//КонецЕсли;
			//Если ДопПараметры = "РейсовыйОтчет" Тогда
			//	СформироватьРейсовыйОтчет();
			//	УстановитьПометкуОтчета(Элементы.РейсовыйОтчет.Пометка);	
			//КонецЕсли;
			//Если ДопПараметры = "ТопливныйОтчет" Тогда
			//	СформироватьТопливныйОтчет();
			//	УстановитьПометкуОтчета(Элементы.ТопливныйОтчет.Пометка);	
			//КонецЕсли;
			//Если ДопПараметры = "ОтчетОРейсообороте" Тогда
			//	СформироватьОтчетОРейсообороте();
			//	УстановитьПометкуОтчета(Элементы.ОтчетОРейсообороте.Пометка);	
			//КонецЕсли;
			//// -- rarus Камаев П.В. 31.03.2020
			//Если СтрНайти(ДопПараметры, "ПодменюПЖНС") <> 0 Тогда
			//	СформироватьОтчетПутевойЖурналНС(ДопПараметры);
			//	УстановитьПометкуОтчета(Элементы[ДопПараметры].Пометка);	
			//КонецЕсли;
			//
			//Если ДопПараметры = "РейсовыйОтчетННФ" Тогда
			//	СформироватьРейсовыйОтчетННФ();
			//	УстановитьПометкуОтчета(Элементы.РейсовыйОтчетННФ.Пометка);	
			//КонецЕсли;
			
			//-- rarus isaeva 13.10.2020

		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// ++ rarus Камаев П.В. 31.03.2020 Задача № 20673 
&НаСервере
Процедура СформироватьОтчетРапортСОЛП()
	
	Отчет = Отчеты.рарусРапортСОЛП.Создать();
	ТабДок = Отчет.СформироватьТабДок(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьРейсовыйОтчет()
	
	Отчет = Отчеты.рарусРейсовыйОтчет.Создать();
	ТабДок = Отчет.СформироватьТабДок(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьТопливныйОтчет()
	
	Отчет = Отчеты.рарусТопливныйОтчет.Создать();
	ТабДок = Отчет.СформироватьТабДок(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция СформироватьОтчетОРейсообороте()
	
	ТабДок = СформироватьОтчетОРейсооборотеНаСервере();
	
	рарусОтчетыКлиент.ПересчетЯчеек(ТабДок);
	
	Если ТолькоПросмотр Тогда
		// Закрываем все ячейки от изменений
		Для Каждого Эл из ТабДок.Области Цикл
			Если не Эл.Защита Тогда
				Эл.Защита = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Кнопка "Заполнить" на поле табличного документа
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетОРейсооборотеНаСервере()
	
	мОтчет = Отчеты.рарусОтчетОРейсообороте.Создать();
	мТабДок = мОтчет.СформироватьТабДок(Объект);
	Возврат мТабДок

КонецФункции

&НаКлиенте
Процедура ТабПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	Модифицированность=Истина;
	
	МассивМета = рарусОтчеты.ПолучитьМассивРеквизитов("Документы", "vftРейс");
	
	// Сохраним новое значение в реквизите документа
	ИмяРеквизита	= Область.Имя;
	Значение		= Область.Значение;
	Если МассивМета.Найти(ИмяРеквизита) <> Неопределено Тогда
		Объект[ИмяРеквизита] = Значение;
	КонецЕсли;
	
	// ++ rarus Чернавин Г.К 08.06.2020 добавил проверку на имя отчёта
	Если ИмяТекущегоОтчета = "ОтчетОРейсообороте" Тогда
	// -- rarus Чернавин Г.К 08.06.2020	
		рарусОтчетыКлиент.ПересчетЯчеек(ТабДок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабПриАктивизацииОбласти(Элемент)
	ИмяОбласти = Элемент.ТекущаяОбласть.Имя;
	Если ИмяОбласти = "КнопкаЗаполнить" Тогда
		рарусОтчетыКлиент.ЗаполнитьДанныеДокумента(Объект, ТабДок);
		СформироватьОтчетОРейсообороте();
	ИначеЕсли Прав(ИмяОбласти, 13) = "КнопкаОчистки" Тогда
		Область = ТабДок.Области[СтрЗаменить(ИмяОбласти,"КнопкаОчистки","")];
		Область.Значение = "";
		ТабПриИзмененииСодержимогоОбласти(Неопределено, Область);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Область.Защита Тогда
		Возврат;
	КонецЕсли;
	
	Если Лев(Область.Имя,8)="ОР_Порт_" Тогда
		СтандартнаяОбработка = Ложь;
		ВыборПорта(Элемент);
	ИначеЕсли ТипЗнч(Область.Значение)=Тип("Дата") Тогда
		// rarus evgenu РАIT-0000699 2020_09_02 ++ 
		//СтандартнаяОбработка = Ложь;
		//РедактированиеДатыВОтдельнойФорме(Элемент);
		// rarus evgenu 2020_09_02 --
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПорта(Элемент)
	
	ПараметрФормы = Новый Структура;
	Отбор = Новый Структура;
	Отбор.Вставить("Тип", ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"));
	ПараметрФормы.Вставить("Отбор", Отбор);
	
	Врем=Элемент.ТекущаяОбласть.Значение;
	Если ЗначениеЗаполнено(Врем) Тогда
		ПараметрФормы.Вставить("ТекущаяСтрока",Врем);
	КонецЕсли;
	
	ДопПараметры = новый Структура;
	ДопПараметры.Вставить("ТекущаяОбласть", Элемент.ТекущаяОбласть);
	
	Оповещение = Новый ОписаниеОповещения("ВыборПортаЗавершение", ЭтаФорма, ДопПараметры);
	ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора",ПараметрФормы,Элементы.Таб,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура ВыборПортаЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДопПараметры.ТекущаяОбласть.Значение = Результат;
		ТабПриИзмененииСодержимогоОбласти(Неопределено, ДопПараметры.ТекущаяОбласть);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДатыВОтдельнойФорме(Элемент, Заголовок="")
	
	ПараметрФормы = Новый Структура;
	ПараметрФормы.Вставить("Дата", Элемент.ТекущаяОбласть.Значение);
	
	ДопПараметры = новый Структура;
	ДопПараметры.Вставить("ТекущаяОбласть", Элемент.ТекущаяОбласть);
	
	Оповещение = Новый ОписаниеОповещения("РедактированиеДатыВОтдельнойФормеЗавершение", ЭтаФорма, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",ПараметрФормы,Элементы.Таб,,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура РедактированиеДатыВОтдельнойФормеЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДопПараметры.ТекущаяОбласть.Значение = Результат.Результат;
		ТабПриИзмененииСодержимогоОбласти(Неопределено, ДопПараметры.ТекущаяОбласть);
	КонецЕсли;
	
КонецПроцедуры

// -- rarus Камаев П.В. 31.03.2020

&НаСервере
Процедура СформироватьОтчетГрафикДвижения()
	
	Отчет = Отчеты.рарусГрафикДвижения.Создать();
	ТабДок = Отчет.СформироватьТабДок(Объект.Ссылка);

КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеПричиныСтоянки(СтрП)
	Перем Стр;
	
	Если Не ЗначениеЗаполнено(СтрП.ПричинаСтоянки) Тогда
		Стр="<Причина стоянки не выбрана>";
	Иначе
		Стр=""+СтрП.ПричинаСтоянки;
	КонецЕсли;
	
	Если не ПустаяСтрока(СтрП.ПредставлениеПричиныСтоянки) Тогда
		Стр=Стр+"."+Символы.ПС+СтрП.ПредставлениеПричиныСтоянки;
	КонецЕсли;
	
	Возврат Стр;
КонецФункции

&НаСервере
Функция ПолучитьПредставлениеСекции(Документ, ИД)
	
	Результат="";
	Для Каждого Стр из Объект.Баржи.Выгрузить(Новый Структура("ИД",ИД),"БаржаПриход") Цикл
		Результат=Результат+?(ПустаяСтрока(Результат),"",", ")+Стр.БаржаПриход;
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СформироватьОтчетПутевойЖурналНС(ИмяКоманды)
	
	Секция = Справочники.vftСуда.ПустаяСсылка();
	
	Для Каждого Строка Из СоответствиеКнопкаСекция Цикл
		Если Строка.Представление = ИмяКоманды Тогда
			Секция = Строка.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РеквизитОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Ложь Тогда
		РеквизитОбъект = Документы.vftРейс.СоздатьДокумент();
	КонецЕсли;
	Таб  =  ТабДок;
	
	// Получаем данные отчета
	//-----------------------
	ТЗ = ПолучитьДанныеПоНС(Объект, Секция);
	
	// Выводим шапку
	//--------------
	Макет = РеквизитОбъект.ПолучитьМакет("ПФ_MXL_ПутевойЖурналНС");
	
	Таб.Очистить();
	Таб.ОбластьПечати			= Неопределено;
	Таб.ЧерноБелаяПечать		= Ложь;
	Таб.АвтоМасштаб				= Истина;
	Таб.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	Таб.ОтображатьСетку			= Ложь;
	Таб.ОтображатьЗаголовки 	= Ложь;
	Таб.ОтображатьГруппировки	= Истина;
	Таб.ТолькоПросмотр			= Истина;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусПринадлежностьСуднаКБТОФСрезПоследних.БТОФ КАК БТОФ
	|ИЗ
	//|	РегистрСведений.рарусПринадлежностьСуднаКБТОФ.СрезПоследних(&Период,  Судно = &Судно) КАК рарусПринадлежностьСуднаКБТОФСрезПоследних";
	|	РегистрСведений.рарусПринадлежностьСуднаКБТОФ.СрезПоследних(,  Судно = &Судно) КАК рарусПринадлежностьСуднаКБТОФСрезПоследних";
	Запрос.УстановитьПараметр("Судно", Секция);
	Запрос.УстановитьПараметр("Период", новый Граница(Объект.Дата,  ВидГраницы.Включая));
	Выборка	= Запрос.Выполнить().Выбрать();
	БТОФ	=  "";
	Если Выборка.Следующий() Тогда
		БТОФ = Выборка.БТОФ;
	КонецЕсли;
	
	Судно = Объект.Судно;
	
	Если ТипЗнч(Секция) = Тип("СправочникСсылка.рарусПрочиеСуда") Тогда
		МощностьДвигателя = 0;
	Иначе
		МощностьДвигателя = Секция.МощностьДвигателя;
		Если НЕ ЗначениеЗаполнено(МощностьДвигателя) Тогда
			МощностьДвигателя = Секция.Проект.МощностьДвигателя;
		КонецЕсли;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Шапка");
	// ++ rarus Чернавин Г.К 18.06.2020 № 22279
	НомерДокумента = Документы.vftРейс.НомерБезПрефикса(Объект.Номер);
	Область.Параметры.Номер				= НомерДокумента;
	// -- rarus Чернавин Г.К 18.06.2020
	Область.Параметры.Судно				= Секция;
	Область.Параметры.НаименованиеРейса = рарусОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеНаименованияРейса(Объект);
	Область.Параметры.Дата				= Формат(Объект.Дата, "ДЛФ = DD");
	Область.Параметры.Приписка			= БТОФ;
	Таб.Вывести(Область);
	
	// Выводим строки
	//---------------
	Для Каждого СтрТЗ Из ТЗ Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.НомерСтрокиДокумента	 =  СтрТЗ.НомерСтрокиДокумента;
		Область.Параметры.Пункты				 =  СтрТЗ.Пункты;
		Область.Параметры.Приход				 =  СтрТЗ.Приход;
		Область.Параметры.Отход					 =  СтрТЗ.Отход;
		Область.Параметры.Примечание			 =  СтрТЗ.Примечание;
		Область.Параметры.Груз					 =  СтрТЗ.Груз;
		Аналитика = "";
		Если ЗначениеЗаполнено(СтрТЗ.Аналитика) Тогда
			Аналитика = ", " + СтрТЗ.Аналитика;
		КонецЕсли;
		Область.Параметры.ПричинаСтоянки		 =  "" + СтрТЗ.ПричинаСтоянки + Аналитика;
		Область.Параметры.Принявший				 =  СтрТЗ.Принявший;
		Область.Параметры.Передавший			 =  СтрТЗ.Передавший;
		Область.Параметры.Следует				 =  СтрТЗ.Следует;
		
		Для А = 4 по 13 Цикл
			Область.Параметры["Время"  +  А] = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(СтрТЗ["Время"  +  А]);
		КонецЦикла;
		
		Для А = 15 по 18 Цикл
			Область.Параметры["Время"  +  А] = Формат(СтрТЗ["Время"  +  А], "ЧГ = 0");
		КонецЦикла;
		
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Выводим итоги
	//--------------
	СтрТЗ = ТЗ.Добавить();
	СтрТЗ.ГруженыйРейс = Истина;
	
	СтрТЗ = ТЗ.Добавить();
	СтрТЗ.ГруженыйРейс = Ложь;
	
	ТЗ.Свернуть("ГруженыйРейс", "Время4, Время5, Время6, Время7, Время8, Время9, Время10, Время11, Время12, Время13, Время14, Время15, Время16, Время17, Время18");
	ТЗ.Сортировать("ГруженыйРейс");
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Область = Макет.ПолучитьОбласть("Итого");
		Область.Параметры.Пункты = ?(СтрТЗ.ГруженыйРейс, "Итого за груженый рейс", "Итого за порожний рейс");
		
		Для А = 4 по 13 Цикл
			Область.Параметры["Время"  +  А] = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(СтрТЗ["Время"  +  А]);
		КонецЦикла;
		
		Для А = 15 по 18 Цикл
			Область.Параметры["Время"  +  А] = Формат(СтрТЗ["Время"  +  А], "ЧГ = 0");
		КонецЦикла;
		
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Выводим общий итог
	//-------------------
	ТЗ.ЗаполнитьЗначения(Истина, "ГруженыйРейс");
	ТЗ.Свернуть("ГруженыйРейс", "Время4, Время5, Время6, Время7, Время8, Время9, Время10, Время11, Время12, Время13, Время14, Время15, Время16, Время17, Время18");
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Область = Макет.ПолучитьОбласть("Итого");
		Область.Параметры.Пункты = "Итого за круговой рейс";
		
		Для А = 4 по 13 Цикл
			Область.Параметры["Время"  +  А] = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(СтрТЗ["Время"  +  А]);
		КонецЦикла;
		
		Для А = 15 по 18 Цикл
			Область.Параметры["Время"  +  А] = Формат(СтрТЗ["Время"  +  А], "ЧГ = 0");
		КонецЦикла;
		
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Создадим группировку колонок
	//-----------------------------
	Область = Таб.Область(, Таб.ШиринаТаблицы, , Таб.ШиринаТаблицы);
	Область.Сгруппировать("Примечание", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	
	Область = Таб.Область(, Таб.ШиринаТаблицы-3, , Таб.ШиринаТаблицы-2);
	Область.Сгруппировать("Теплоход", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	
	// Корректировка ширины колонок
	//-----------------------------
	Для А = 15 по 18 Цикл
		Если ТЗ.Итог("Время"  +  А) = 0 Тогда
			Таб.Область(, А, А).ШиринаКолонки = 4;
		КонецЕсли;
	КонецЦикла;
	
	Таб.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	Таб.ВерхнийКолонтитул.ТекстСправа		= "Стр.[&НомерСтраницы] из [&СтраницВсего]";
	Таб.ВерхнийКолонтитул.Выводить			= Истина;
	
	Таб.НижнийКолонтитул.НачальнаяСтраница	= 1;
	Таб.НижнийКолонтитул.ТекстСправа		= "Отчет сформирован [&Дата] [&Время]";
	Таб.НижнийКолонтитул.Выводить			= Истина;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьДанныеПоНС(Объект,  Секция) Экспорт
	
	// Таблица для данных отчета
	//--------------------------
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСтрокиДокумента");
	ТЗ.Колонки.Добавить("Пункты");
	ТЗ.Колонки.Добавить("Приход");
	ТЗ.Колонки.Добавить("Отход");
	ТЗ.Колонки.Добавить("ГруженыйРейс");
	ТЗ.Колонки.Добавить("Примечание");
	ТЗ.Колонки.Добавить("Груз");
	ТЗ.Колонки.Добавить("ПричинаСтоянки");
	ТЗ.Колонки.Добавить("Передавший");
	ТЗ.Колонки.Добавить("Принявший");
	ТЗ.Колонки.Добавить("Аналитика");
	ТЗ.Колонки.Добавить("Следует");
	
	Для А = 4 по 18 Цикл
		ТЗ.Колонки.Добавить("Время" + А, Новый ОписаниеТипов("Число"));
	КонецЦикла;
	
	// Определим баржу для отчета
	//---------------------------
	Баржа = Новый Структура;
	Баржа.Вставить("Ссылка", Секция);
	Баржа.Вставить("СтрокаОжиданияБуксираП", Неопределено);
	Баржа.Вставить("СтрокаОжиданияБуксираБ", Неопределено);
	
	// Перебираем строки ТЧ "Пункты"
	//------------------------------
	Для Каждого СтрП Из Объект.Пункты Цикл
		
		// Найдем в ТЧ "Баржи" баржу для отчета
		//-------------------------------------
		Врем = Объект.Баржи.НайтиСтроки(Новый Структура("ИД, БаржаПриход", СтрП.ИД, Баржа.Ссылка));
		Если Врем.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрБ = Врем[0];
		
		// Если секция была оставлена на рейде,  сохраним ссылки на СтрБ и СтрП (строки начала ожидания)
		//---------------------------------------------------------------------------------------------
		Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
			Баржа.СтрокаОжиданияБуксираП = СтрП;
			Баржа.СтрокаОжиданияБуксираБ = СтрБ;
			Продолжить;
		КонецЕсли;
		
		// Добавляем строку ТЗ для текущей строки "Пункты"
		//------------------------------------------------
		ЗаполнитьСтрокуПутевогоЖурналаНС(Объект,  ТЗ.Добавить(), Баржа, СтрП, СтрБ);
	КонецЦикла;
	
	// Если остались необработанные строки
	//------------------------------------
	Если Баржа.СтрокаОжиданияБуксираБ <> Неопределено Тогда
		СтрП = Баржа.СтрокаОжиданияБуксираП;
		СтрБ = Баржа.СтрокаОжиданияБуксираБ;
		Баржа.СтрокаОжиданияБуксираП = Неопределено;
		Баржа.СтрокаОжиданияБуксираБ = Неопределено;
		ЗаполнитьСтрокуПутевогоЖурналаНС(Объект,  ТЗ.Добавить(), Баржа, СтрП, СтрБ);
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуПутевогоЖурналаНС(Объект,  СтрТЗ,  Баржа,  СтрП,  СтрБ)
	
	Судно = Объект.Судно;
	
	ФлагОжиданияБуксира = Баржа.СтрокаОжиданияБуксираБ <> Неопределено;
	
	// Получим данные для расчета
	//---------------------------
	Если ФлагОжиданияБуксира Тогда
		// Данные получаем из данных двух строк: строк начала ожидания и текущих
		//----------------------------------------------------------------------
		Приход = Макс(Баржа.СтрокаОжиданияБуксираБ.ДатаПриемаСекции, Баржа.СтрокаОжиданияБуксираП.Приход);
	    Отход = рарусОбщегоНазначенияКлиентСервер.Меньшее(СтрБ.ДатаПередачиСекции, СтрП.Отход);
	Иначе
		// Данные получаем из текущих строк СтрП и СтрБ
		//---------------------------------------------
		Приход = Макс(СтрБ.ДатаПриемаСекции, СтрП.Приход);
	    Отход = рарусОбщегоНазначенияКлиентСервер.Меньшее(СтрБ.ДатаПередачиСекции, СтрП.Отход);
	КонецЕсли;
	
	// Заполняем СтрТЗ
	//----------------
	СтрТЗ.НомерСтрокиДокумента	= "НомерСтрокиДокумента_УВ_" + Формат(СтрП.НомерСтроки, "ЧН = ; ЧГ = 0");
	СтрТЗ.Пункты				= рарусОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеПункта(СтрП);
	СтрТЗ.Приход				= Приход;
	СтрТЗ.Отход					= Отход;
	СтрТЗ.ГруженыйРейс			= СтрП.ГруженыйРейс;
	СтрТЗ.Примечание			= ОбъединитьЗначенияИзСтрок(Баржа.СтрокаОжиданияБуксираП, СтрП, "Примечание", ". " + Символы.ПС);
	СтрТЗ.Груз					= ОбъединитьЗначенияИзСтрок(Баржа.СтрокаОжиданияБуксираБ, СтрБ, "Груз", ",  ");
	СтрТЗ.ПричинаСтоянки		= ОбъединитьЗначенияИзСтрок(Баржа.СтрокаОжиданияБуксираП, СтрП, "ПричинаСтоянки", ",  ");
	
	// Определим,  какая из строк при ожидании буксира будет основной для получения данных
	//-----------------------------------------------------------------------------------
	Если ЗначениеЗаполнено(СтрБ.НачалоОперации) или ЗначениеЗаполнено(СтрБ.НачалоОперации2) Тогда
		ОснСтрП = СтрП;
		ОснСтрБ = СтрБ;
	ИначеЕсли ФлагОжиданияБуксира и (ЗначениеЗаполнено(Баржа.СтрокаОжиданияБуксираБ.НачалоОперации) или ЗначениеЗаполнено(Баржа.СтрокаОжиданияБуксираБ.НачалоОперации2)) Тогда
		ОснСтрП = Баржа.СтрокаОжиданияБуксираП;
		ОснСтрБ = Баржа.СтрокаОжиданияБуксираБ;
	Иначе
		ОснСтрП = СтрП;
		ОснСтрБ = СтрБ;
	КонецЕсли;
	
	// Расчет времени ожидания грузовых работ и времени ожидания накопления состава
	//-----------------------------------------------------------------------------
	Если ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) Тогда
		СтрТЗ.Время7 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.ДатаПодачиНотиса), ОснСтрБ.НачалоОперации);
		СтрТЗ.Время8 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(ОснСтрБ.ОкончаниеОперации, Отход);
	ИначеЕсли ЗначениеЗаполнено(ОснСтрБ.НачалоОперации2) Тогда
		СтрТЗ.Время7 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.ДатаПодачиНотиса), ОснСтрБ.НачалоОперации2);
		СтрТЗ.Время8 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(ОснСтрБ.ОкончаниеОперации2, Отход);
	КонецЕсли;
	
	// Заполняем данные,  связанные с причиной стоянки
	//-----------------------------------------------
	Если ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Шлюзование Тогда
		СтрТЗ.Время9 = ОснСтрП.ВремяСтоянки;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.МетеорологическиеПричины Тогда
		СтрТЗ.Время11 = ОснСтрП.ВремяСтоянки;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
		СтрТЗ.Время16 = ОснСтрБ.ВесГруза;
		// Учтем случай,  когда паузка производилась в текущую секцию
		//----------------------------------------------------------
		ДанныеПаузки = ПолучитьДанныеПаузки(ОснСтрП.ПричинаСтоянки, Объект.Баржи.Выгрузить(Новый Структура("ИД", ОснСтрП.ИД), "Груз, ВесГруза, СудноПринявшее, ПаузкаНачальныйВесГруза"));
		СтрДП = ДанныеПаузки.Найти(Баржа.Ссылка, "Баржа");
		Если СтрДП <> Неопределено Тогда
			СтрТЗ.Время17 = СтрДП.ПаузкаКонечныйВесГруза;
			СтрТЗ.Груз = СтрДП.Груз;
		КонецЕсли;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		СтрТЗ.Время17 = ОснСтрБ.ВесГруза;
		// Учтем случай,  когда догрузка производилась из текущей секции
		//-------------------------------------------------------------
		ДанныеПаузки = ПолучитьДанныеПаузки(ОснСтрП.ПричинаСтоянки, Объект.Баржи.Выгрузить(Новый Структура("ИД", ОснСтрП.ИД), "Груз, ВесГруза, СудноПринявшее, ПаузкаНачальныйВесГруза"));
		СтрДП = ДанныеПаузки.Найти(Баржа.Ссылка, "Баржа");
		Если СтрДП <> Неопределено Тогда
			СтрТЗ.Время16 = СтрДП.ПаузкаКонечныйВесГруза;
			СтрТЗ.Груз = СтрДП.Груз;
		КонецЕсли;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Погрузка и ОснСтрБ.ВесГруза <> 0 и ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) Тогда
		СтрТЗ.Время15 = ОснСтрБ.ВесГруза;
		СтрТЗ.Время5  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации));
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка и ОснСтрБ.ВесГруза <> 0 и ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) Тогда
		СтрТЗ.Время18 = ОснСтрБ.ВесГруза;
		СтрТЗ.Время6  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации));
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка Тогда
		Если ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) и ОснСтрБ.ВесГруза <> 0 Тогда	// Это погрузка
			СтрТЗ.Время15 = ОснСтрБ.ВесГруза;
			СтрТЗ.Время5  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации));
		ИначеЕсли ЗначениеЗаполнено(ОснСтрБ.НачалоОперации2) Тогда					// Это выгрузка,  но вес не указывается
			СтрТЗ.Время6  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации2), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации2));
		КонецЕсли;
	КонецЕсли;
	
	// Данные по ходовому времени
	//---------------------------
	Если ФлагОжиданияБуксира Тогда
		// Данные получаем из строк начала ожидания
		//-----------------------------------------
		СтрТЗ.Время4 = Баржа.СтрокаОжиданияБуксираП.ХодовоеВремя;
	Иначе
		// Данные берем из текущих СтрБ и СтрП
		//------------------------------------
		Если не (СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием или СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача) Тогда
			СтрТЗ.Время4 = СтрП.ХодовоеВремя;
		КонецЕсли;
	КонецЕсли;
	
	// Данные по общему стояночному времени
	//-------------------------------------
	СтрТЗ.Время13 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Приход, Отход);
	СтрТЗ.Время12 = СтрТЗ.Время13 + СтрТЗ.Время4;
	СтрТЗ.Время10 = СтрТЗ.Время13-СтрТЗ.Время5-СтрТЗ.Время6-СтрТЗ.Время7-СтрТЗ.Время8-СтрТЗ.Время9-СтрТЗ.Время11;
	
	// Данные по принявшим / передавшим судам
	//---------------------------------------
	Если ФлагОжиданияБуксира Тогда
		Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
			СтрТЗ.Принявший = 	СтрБ.СудноПринявшее;
			СтрТЗ.Передавший = 	Судно;
		Иначе
			СтрТЗ.Следует = Судно;
		КонецЕсли;
	Иначе
		Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием Тогда
			СтрТЗ.Принявший		= Судно;
			СтрТЗ.Передавший	= СтрБ.СудноПередавшее;
		ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Передача Тогда
			СтрТЗ.Принявший		= СтрБ.СудноПринявшее;
			СтрТЗ.Передавший	= Судно;
		ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
			СтрТЗ.Передавший	= СтрБ.СудноПередавшее;
			СтрТЗ.Принявший		= СтрБ.СудноПринявшее;
		Иначе
			СтрТЗ.Следует		= Судно;
		КонецЕсли;
	КонецЕсли;
	
	// Сбросим значения
	//-----------------
	Баржа.СтрокаОжиданияБуксираБ = Неопределено;
	Баржа.СтрокаОжиданияБуксираП = Неопределено;
	
КонецПроцедуры

&НаСервере
Функция ОбъединитьЗначенияИзСтрок(Стр1, Стр2, ИмяРеквизита, Разделитель)
	
	Перем Значение1, Значение2;
	
	Если Стр1 = Неопределено Тогда
		Возврат Стр2[ИмяРеквизита];
	КонецЕсли;
	
	Значение1 = Стр1[ИмяРеквизита];
	// ++ rarus Чернавин Г.К 08.06.2020 № 22221
	Если ИмяРеквизита = "ПричинаСтоянки" Тогда
		Разделитель= "; ";
		Если ЗначениеЗаполнено(Стр1.Аналитика) Тогда
			Значение1 = ""+ Стр1[ИмяРеквизита] + ", " + Стр1.Аналитика;
		КонецЕсли;
	КонецЕсли;
	// -- rarus Чернавин Г.К 08.06.2020
	Значение2 = Стр2[ИмяРеквизита];
	
	Если ЗначениеЗаполнено(Значение1) и ЗначениеЗаполнено(Значение2) Тогда
		Если Значение1 = Значение2 Тогда
			Возврат Значение1;
		Иначе
			Возврат "" + Значение1 + Разделитель + Значение2;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Значение1) Тогда
		Возврат Значение1;
	ИначеЕсли ЗначениеЗаполнено(Значение2) Тогда
		Возврат Значение2;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// ++ rarus Камаев П.В. 30.03.2020 Задача № 20647
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Если Объект.Номер <> "" Тогда
		ОбработатьИзменениеНомераДокумента();
	КонецЕсли;
	// ++ rarus Камаев П.В. 20.04.2020 Задача № 21039
	Объект.ДатаНачала = Объект.Дата;
	// -- rarus Камаев П.В. 20.04.2020
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеНомераДокумента()
	
	текОбъект = РеквизитФормыВЗначение("Объект");
	
	Префикс = текОбъект.СформироватьПрефиксНомераДокумента();
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(текОбъект, Истина, Префикс);
	
	Если СтрНайти(Объект.Номер, Префикс) <> 1 Тогда
		Объект.Номер = "";		
	КонецЕсли;
	
КонецПроцедуры
// -- rarus Камаев П.В. 30.03.2020

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОтчеты Тогда
		Если Модифицированность Тогда
			//Если Не ЭлементыФормы.КоманднаяПанельОтчеты.Кнопки.ОтчетОРейсообороте.Пометка Тогда
			УстановитьПометкуОтчета();
			//КонецЕсли;
			ЗаполнитьПодменюПЖНС();
		КонецЕсли;
	КонецЕсли;
	
	// rarus evgenu РАIT-0000900 2020_09_18 ++ 
	//// ++ rarus markim 09.07.2020 Задача № 22637 (чтобы не прыгала форма. костыль, лучше форму перерисовать под закладки)
	//Для н = 0 по 2 Цикл
	//	НайденныйЭлемент = Элементы.ГруппаСтраницы.ТекущаяСтраница.ПодчиненныеЭлементы.Найти("СтрокаФикс" + н);
	//	Если НЕ НайденныйЭлемент = неопределено Тогда
	//		ЭтаФорма.ТекущийЭлемент = НайденныйЭлемент;
	//		прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//// -- rarus markim 09.07.2020 Задача № 22637
	// rarus evgenu 2020_09_18 --

КонецПроцедуры

// ++ rarus Камаев П.В. 02.04.2020 Задача № 20769 
&НаКлиенте
Процедура ПунктыСледованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ПунктыСледования.ТекущиеДанные;
	Если НоваяСтрока ИЛИ Копирование Тогда
		ТекущиеДанные.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ОпорныйПункт");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПункты()
		
	Если Объект.ПунктыСледования.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	МассивПунктов = новый Массив;
	МассивПунктов.Добавить(Перечисления.рарусТипыПунктов.ПортОтправления);
	МассивПунктов.Добавить(Перечисления.рарусТипыПунктов.ПортПогрузки);
	МассивПунктов.Добавить(Перечисления.рарусТипыПунктов.ПортВыгрузки);
	
	Для каждого Элемент Из МассивПунктов Цикл
		НоваяСтрока = Объект.ПунктыСледования.Добавить();
		НоваяСтрока.ТипПункта = Элемент;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// ++ rarus Камаев П.В. 02.09.2020 Задача № 23575
	РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
	Если НЕ ЭтоГлавныйУзел Тогда
		РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	КонецЕсли;
	// -- rarus Камаев П.В. 02.09.2020
	
	Отбор = Новый Структура;
	
	Врем=Элемент.Родитель.ТекущиеДанные.Пункт;
	Если ЗначениеЗаполнено(Врем) Тогда
		Отбор.Вставить("ТекущаяСтрока",Врем);
	КонецЕсли;
	
	Форма = ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Список,
	"Тип",
	ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"),
	ВидСравненияКомпоновкиДанных.Равно
	,, 
	Истина, РежимОтображения);
	
	// ++ rarus Чернавин Г.К 18.08.2020 № 23337
	Если СухогрузныйФлот() Тогда
		ТекущиеДанные = Элементы.ПунктыСледования.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущиеДанные.ТипПункта) Тогда
			Если ТекущиеДанные.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортОтправления") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.Список,
				"ЭтоПорт1",
				Истина,
				ВидСравненияКомпоновкиДанных.Равно
				,, 
				Истина, РежимОтображения);		
			КонецЕсли;
			Если ТекущиеДанные.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортПогрузки") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.Список,
				"ЭтоПорт2",
				Истина,
				ВидСравненияКомпоновкиДанных.Равно
				,, 
				Истина, РежимОтображения);		
			КонецЕсли;
			Если ТекущиеДанные.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортВыгрузки") Тогда
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма.Список,
				"ЭтоПорт3",Истина,
				ВидСравненияКомпоновкиДанных.Равно
				,, 
				Истина, РежимОтображения);		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// -- rarus Чернавин Г.К 18.08.2020
	
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ТипПункта = Элементы.ПунктыСледования.ТекущиеДанные.ТипПункта;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст, ТипПункта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТипПункта = Элементы.ПунктыСледования.ТекущиеДанные.ТипПункта;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст, ТипПункта);
КонецПроцедуры
// -- rarus Камаев П.В. 02.04.2020

// ++ rarus Камаев П.В. 06.04.2020 Задача № 20771 
&НаКлиенте
Процедура ЗаполнитьМаршрутНовыйАлгоритм(Команда)
	Если Объект.Пункты.Количество() Тогда
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПерезаполненииТЧМаршрут_НовыйАлгоритм", ЭтотОбъект);	
		ПоказатьВопрос(Оповещение, "Табличная часть Маршрут будет перезаполнена. Продолжить?", РежимДиалогаВопрос.ДаНет);	
	Иначе
		ОбработкаКомандыЗаполненияМаршрута_НовыйАлгоритм();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПерезаполненииТЧМаршрут_НовыйАлгоритм(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбработкаКомандыЗаполненияМаршрута_НовыйАлгоритм();
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаКомандыЗаполненияМаршрута_НовыйАлгоритм()
	
	Отказ = Ложь;
	
	//в ТЧ должна быть только одна строка с Тип = ПортОтправления (пункт не обязательно заполнен)
	//Должны быть строки с Тип = ПортПогрузки и с Тип = ПортВыгрузкия (пункты не обязательно заполнен)
	КоличествоПортОтправления	= 0;
	КоличествоПортПогрузки		= 0;
	КоличествоПортВыгрузки		= 0;
	ПортОтправления = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	Для каждого Строка Из Объект.ПунктыСледования Цикл
		Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортОтправления") Тогда
			ПортОтправления = Строка.Пункт;
			КоличествоПортОтправления = КоличествоПортОтправления + 1;
		КонецЕсли;
		Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортПогрузки") Тогда
			КоличествоПортПогрузки = КоличествоПортПогрузки + 1;
		КонецЕсли;
		Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортВыгрузки") Тогда
			КоличествоПортВыгрузки = КоличествоПортВыгрузки + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоПортОтправления <> 1 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'В рейсе может быть только один порт отправления. Пожалуйста внесите изменения.'"),);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ,"Объект.ПунктыСледования");
	КонецЕсли;
	Если КоличествоПортПогрузки = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'В рейсе должен быть хотя бы один порт погрузки. Пожалуйста внесите изменения.'"),);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ,"Объект.ПунктыСледования");
	КонецЕсли;
	Если КоличествоПортВыгрузки = 0 Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Нстр("ru = 'В рейсе должен быть хотя бы один порт выгрузки. Пожалуйста внесите изменения.'"),);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , ,"Объект.ПунктыСледования");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ПортОтправления) Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнен Порт отправления", , ,"Объект.ПунктыСледования");	
	КонецЕсли;
	
	Если Объект.ПунктыСледования.Количество() < 1 Тогда
		Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не заполнены пункты следования", , ,"Объект.ПунктыСледования");	
	КонецЕсли;
	
	ВсеПунктыОдинаковые = Истина;
	ПредПункт = Неопределено;
	Для каждого Строка Из Объект.ПунктыСледования Цикл
		Если ПредПункт <> Неопределено И ПредПункт <> Строка.Пункт Тогда
			ВсеПунктыОдинаковые = Ложь;
			Прервать;
		КонецЕсли;
		ПредПункт = Строка.Пункт;
	КонецЦикла;	
	
	Если ВсеПунктыОдинаковые Тогда
		// заполняем одну строку в ТЧ МАршрут
		Отказ = Истина;
		Объект.Пункты.Очистить();
		НоваяСтрока = Объект.Пункты.Добавить();
		ПунктСледования = "";
		НоваяСтрока.Пункт = Объект.ПунктыСледования[0].Пункт;
		//НоваяСтрока.ЗаходВПорт = Истина;
		НовыйУИД = Новый УникальныйИдентификатор;
		НоваяСтрока.ИД = НовыйУИД;
		//НоваяСтрока.ВремяПрибытияПлан = Объект.ДатаНачалаРейса;
		//НоваяСтрока.ВремяУбытияПлан = Объект.ДатаОкончанияРейса;
		//НоваяСтрока.ТипСостава = Объект.ПунктыСледования[0].ТипСостава;
		НоваяСтрока.ХодовоеВремяПлан				= 0;
		НоваяСтрока.РасстояниеПлан					= 0;
	КонецЕсли;
		
	Если Не Отказ Тогда
		РассчитатьМаршрутНаСервере_НовыйАлгоритм();
	КонецЕсли;
	ПроверитьТабличнуюЧастьПунктыСервер();
	ПоказатьИтогиТабличнойЧастиПункты();
	ПунктыОбновитьПредставлениеСтрок();
КонецПроцедуры

&НаСервере
Процедура РассчитатьМаршрутНаСервере_НовыйАлгоритм()
	текОбъект = РеквизитФормыВЗначение("Объект");
	РезультатЗаполнения = текОбъект.ЗаполнитьМаршрутНаСервере_НовыйАлгоритм();	
	Если РезультатЗаполнения = Истина Тогда
		Объект.Пункты.Очистить();
		Для каждого Строка Из текОбъект.Пункты Цикл
			НоваяСтрока = Объект.Пункты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
			НовыйУИД = Новый УникальныйИдентификатор;
			НоваяСтрока.ИД = НовыйУИД;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Приход) Тогда
				СтруктураНорм = ПолучитьПлановыеДанные(Строка);		
				НоваяСтрока.ХодовоеВремяПлан				= СтруктураНорм.Время * 60;
				НоваяСтрока.РасстояниеПлан					= СтруктураНорм.Расстояние;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПлановыеДанные(Строка)
	
	ПредыдущийПункт = ПолучитьПредыдущийПункт(Строка.НомерСтроки);
	СтруктураНорм = РегистрыСведений.рарусАктуальныеНормыСледованияПоПроектамСудов.ПолучитьНормыСледования(Строка.Пункт, ПредыдущийПункт, Объект.Судно.Проект, Строка.ГруженыйРейс, Объект.Судно);		
	Возврат СтруктураНорм
	
КонецФункции

// -- rarus Камаев П.В. 06.04.2020

#КонецОбласти
// -- rarus Чернавин Г.К 10.03.2020

// ++ rarus Камаев П.В. 02.06.2020 Задача № 22017
&НаСервере
Процедура ЗаполнитьТЧПрохождениеУчастковРостовАзовКЕК()
	
	ПрохождениеРостов.Очистить();
	ПрохождениеАзов.Очистить();
	ПрохождениеКЕК.Очистить();
	НомерСтрокиРостов	= 1;
	НомерСтрокиАзов		= 1;
	НомерСтрокиКЕК		= 1;	
	Для каждого Строка Из Объект.ПрохождениеУчастковСОЛП Цикл
		Если Строка.Участок = Справочники.рарусУчасткиСОЛП.РостовНаДону Тогда
			НоваяСтрока = ПрохождениеРостов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "НомерСтроки");
			НоваяСтрока.НомерСтроки = НомерСтрокиРостов;
			НомерСтрокиРостов = НомерСтрокиРостов + 1;
		ИначеЕсли Строка.Участок = Справочники.рарусУчасткиСОЛП.Азов Тогда
			НоваяСтрока = ПрохождениеАзов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "НомерСтроки");
			НоваяСтрока.НомерСтроки = НомерСтрокиАзов;
			НомерСтрокиАзов = НомерСтрокиАзов + 1;
		ИначеЕсли Строка.Участок = Справочники.рарусУчасткиСОЛП.КерчьЕникальскийКанал Тогда
			НоваяСтрока = ПрохождениеКЕК.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "НомерСтроки");
			НоваяСтрока.НомерСтроки = НомерСтрокиКЕК;
			НомерСтрокиКЕК = НомерСтрокиКЕК + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧПрохождениеУчастковСОЛП()
	
	ПрохождениеУчастковСОЛП = Объект.ПрохождениеУчастковСОЛП;
	ПрохождениеУчастковСОЛП.Очистить();
	Для каждого Строка Из ПрохождениеРостов Цикл
		НоваяСтрока = ПрохождениеУчастковСОЛП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "НомерСтроки");
		НоваяСтрока.Участок = Справочники.рарусУчасткиСОЛП.РостовНаДону;
	КонецЦикла;
	Для каждого Строка Из ПрохождениеАзов Цикл
		НоваяСтрока = ПрохождениеУчастковСОЛП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "НомерСтроки");
		НоваяСтрока.Участок = Справочники.рарусУчасткиСОЛП.Азов;
	КонецЦикла;
	Для каждого Строка Из ПрохождениеКЕК Цикл
		НоваяСтрока = ПрохождениеУчастковСОЛП.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "НомерСтроки");
		НоваяСтрока.Участок = Справочники.рарусУчасткиСОЛП.КерчьЕникальскийКанал;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ЗаполнитьТЧПрохождениеУчастковСОЛП();
	
	// ++ rarus Камаев П.В. 24.08.2020 Задача № 23379
	Если Модифицированность = Истина И НЕ ПараметрыЗаписи.Свойство("ВопросПользователюОбИзмененииДанныхЗадан") Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаПользователюОбИзмененииДанных", ЭтотОбъект, ПараметрыЗаписи);
		ТекстВопроса = "Изменение данных путевого журнала приведет к изменению данных на судне. Продолжить?"; 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	// -- rarus Камаев П.В. 24.08.2020
	
КонецПроцедуры

//ПередНачаломДобавления
&НаКлиенте
Процедура ПрохождениеРостовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ПрохождениеРостов.ТекущиеДанные;
	ТекСтрока.Участок = ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.РостовНаДону");
	// ++ rarus Камаев П.В. 03.06.2020 Задача № 22115
	Если НоваяСтрока Тогда
		ТекСтрока.Капитан = Объект.Капитан;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.06.2020
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеАзовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ПрохождениеАзов.ТекущиеДанные;
	ТекСтрока.Участок = ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.Азов");
	// ++ rarus Камаев П.В. 03.06.2020 Задача № 22115
	Если НоваяСтрока Тогда
		ТекСтрока.Капитан = Объект.Капитан;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.06.2020
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеКЕКПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ПрохождениеКЕК.ТекущиеДанные;
	ТекСтрока.Участок = ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.КерчьЕникальскийКанал");
	// ++ rarus Камаев П.В. 03.06.2020 Задача № 22115
	Если НоваяСтрока Тогда
		ТекСтрока.Капитан = Объект.Капитан;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.06.2020
КонецПроцедуры

//ПередОкончаниемРедактирования
&НаКлиенте
Процедура ПрохождениеРостовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПроверкаСтрокиПрохожденияРостовАзовКЕК(Элемент,НоваяСтрока,ОтменаРедактирования,Отказ, "ПрохождениеРостов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеАзовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПроверкаСтрокиПрохожденияРостовАзовКЕК(Элемент,НоваяСтрока,ОтменаРедактирования,Отказ, "ПрохождениеАзов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеКЕКПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ПроверкаСтрокиПрохожденияРостовАзовКЕК(Элемент,НоваяСтрока,ОтменаРедактирования,Отказ, "ПрохождениеКЕК");
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСтрокиПрохожденияРостовАзовКЕК(Элемент,НоваяСтрока,ОтменаРедактирования,Отказ, Текст)
	
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	// Общие проверки введенных данных
	//--------------------------------
	ТекСтрока = Элементы[Текст].ТекущиеДанные;
	
	Если ТекСтрока.НачДата=Дата(1,1,1) Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Не указана дата начала движения!'"),30,"Ошибка!");
		Элементы[Текст].ТекущийЭлемент = Элементы[Текст + "НачДата"];
		
	ИначеЕсли ТекСтрока.КонДата=Дата(1,1,1) Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Не указана дата окончания движения!'"),30,"Ошибка!");
		Элементы[Текст].ТекущийЭлемент = Элементы[Текст + "КонДата"];
		
	ИначеЕсли ТекСтрока.КонДата<=ТекСтрока.НачДата Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'Дата окончания движения должна быть больше даты начала!'"),30,"Ошибка!");
		Элементы[Текст].ТекущийЭлемент = Элементы[Текст + "КонДата"];
		
	ИначеЕсли не ТекСтрока.СОЛП и ТекСтрока.Лоцман.Пустая() Тогда
		Отказ=Истина;
		ПоказатьПредупреждение(,НСтр("ru = 'При движении без СОЛПА обязательно должен быть указан лоцман!'"),30,"Ошибка!");
		Элементы[Текст].ТекущийЭлемент = Элементы[Текст + "Лоцман"];
		
	КонецЕсли;
	//
	// Частные проверки введенных данных
	//----------------------------------
	Если ТекСтрока.Участок = ПредопределенноеЗначение("Справочник.рарусУчасткиСОЛП.КерчьЕникальскийКанал") Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ВариантПрохожденияКЕК) Тогда
			Отказ=Истина;
			ПоказатьПредупреждение(,НСтр("ru = 'Не указан вариант прохождения КЕК!'"),30,"Ошибка!");
			Элементы[Текст].ТекущийЭлемент = Элементы[Текст + "ВариантПрохожденияКЕК"];
		КонецЕсли;
	Иначе
		ТекСтрока.ВариантПрохожденияКЕК = ПредопределенноеЗначение("Перечисление.рарусВариантыПрохожденияКЕК.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

//Выбор
&НаКлиенте
Процедура ПрохождениеРостовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПрохождениеУчастковРостовАзовКЕКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, "ПрохождениеРостов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеАзовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПрохождениеУчастковРостовАзовКЕКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, "ПрохождениеАзов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеКЕКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПрохождениеУчастковРостовАзовКЕКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, "ПрохождениеКЕК");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковРостовАзовКЕКВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, Текст)
	текСтрока = Элементы[Текст].ТекущиеДанные;
	
	Если текСтрока <> Неопределено Тогда
		Файл = текСтрока.Файл; 
		Если Поле = Элементы[Текст + "Файл"] Тогда
			
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(Файл, Неопределено, УникальныйИдентификатор, Неопределено, Неопределено);
			РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
			
		ИначеЕсли Поле = Элементы[Текст + "ЗагрузитьЗаменитьФайл"] Тогда
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ВладелецФайла",  Объект.Ссылка);
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
			ПараметрыФормы.Вставить("РежимВыбора", Истина);
			
			ДопПараметры = новый Структура;
			ДопПараметры.Вставить("текСтрока", текСтрока);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыРаботаСФайламиПрохождениеУчастковРостовАзовКЕК", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Обработка.РаботаСФайлами.Форма.ПрисоединенныеФайлы", ПараметрыФормы, ЭтаФорма, Истина, ЭтаФорма.Окно , , ОписаниеОповещения);
			
		ИначеЕсли Поле = Элементы[Текст + "УдалитьФайл"] Тогда
			
			текСтрока.Файл = ПредопределенноеЗначение("Справочник.vftРейсПрисоединенныеФайлы.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыРаботаСФайламиПрохождениеУчастковРостовАзовКЕК(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		текСтрока = ДопПараметры.текСтрока;
		Если текСтрока <> Неопределено Тогда	
			текСтрока.Файл = Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

//НачДата НачалоВыбора
&НаКлиенте
Процедура ПрохождениеРостовНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрохождениеРостовАзовКЕКНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрохождениеРостов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеАзовНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрохождениеРостовАзовКЕКНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрохождениеАзов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеКЕКНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрохождениеРостовАзовКЕКНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрохождениеКЕК");
КонецПроцедуры

//КонДата НачалоВыбора
&НаКлиенте
Процедура ПрохождениеРостовКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрохождениеРостовАзовКЕККонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрохождениеРостов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеАзовКонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрохождениеРостовАзовКЕККонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрохождениеАзов");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеКЕККонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПрохождениеРостовАзовКЕККонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, "ПрохождениеКЕК");
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеРостовАзовКЕКНачДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Текст)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы[Текст].ТекущиеДанные;
	ДопПараметры = новый Структура;
	ДопПараметры.Вставить("ТекДанные", ТекДанные);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершениеРостовАзовКЕК", ЭтотОбъект, ДопПараметры);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", ТекДанные.НачДата, "РостовАзовКЕКНачДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Начало движения";
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеРостовАзовКЕККонДатаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка, Текст)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы[Текст].ТекущиеДанные;
	ДопПараметры = новый Структура;
	ДопПараметры.Вставить("ТекДанные", ТекДанные);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборДатыЗавершениеРостовАзовКЕК", ЭтотОбъект, ДопПараметры);
	СтруктураПараметров = Новый Структура("Дата, ИмяЭлемента", ТекДанные.КонДата, "РостовАзовКЕККонДата");
	ФормаОткрыть = ОткрытьФорму("ОбщаяФорма.рарусРедактированиеДатаЧасыМинуты",СтруктураПараметров,ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ФормаОткрыть.Заголовок = "Окончание движения";
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатыЗавершениеРостовАзовКЕК(ПараметрыЗакрытия, ДопПараметры) Экспорт
	
	Если ПараметрыЗакрытия <> Неопределено И ПараметрыЗакрытия.Свойство("ИмяЭлемента") Тогда
		Если ПараметрыЗакрытия.ИмяЭлемента = "РостовАзовКЕКНачДата" Тогда
			ТекущиеДанные = ДопПараметры.ТекДанные;
			ТекущиеДанные.НачДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
		Если ПараметрыЗакрытия.ИмяЭлемента = "РостовАзовКЕККонДата" Тогда
			ТекущиеДанные = ДопПараметры.ТекДанные;
			ТекущиеДанные.КонДата = ПараметрыЗакрытия.Результат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеРостовПриИзменении(Элемент)
	НомерСтроки = 1;
	Для каждого Строка Из ПрохождениеРостов Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеАзовПриИзменении(Элемент)
	НомерСтроки = 1;
	Для каждого Строка Из ПрохождениеАзов Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеКЕКПриИзменении(Элемент)
	НомерСтроки = 1;
	Для каждого Строка Из ПрохождениеКЕК Цикл
		Строка.НомерСтроки = НомерСтроки;
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
КонецПроцедуры
// -- rarus Камаев П.В. 03.06.2020

// ++ rarus Камаев П.В. 03.06.2020 Задача № 22115
&НаКлиенте
Процедура КапитанПриИзменении(Элемент)

	Для каждого Строка Из ПрохождениеРостов Цикл
		Строка.Капитан = Объект.Капитан;
	КонецЦикла;

	Для каждого Строка Из ПрохождениеАзов Цикл
		Строка.Капитан = Объект.Капитан;
	КонецЦикла;
	
	Для каждого Строка Из ПрохождениеКЕК Цикл
		Строка.Капитан = Объект.Капитан;
	КонецЦикла;

КонецПроцедуры
// -- rarus Камаев П.В. 02.06.2020

// ++ rarus Чернавин Г.К 05.06.2020 № 22139
&НаСервере
Процедура УстановитьПредставлениеНомера()
	Элементы.Номер.Видимость = ПолноправныйПользователь;
	Если ЗначениеЗаполнено(Объект.Номер) Тогда
		НомерБезПрефикса = Документы.vftРейс.НомерБезПрефикса(Объект.Номер);
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	УстановитьПредставлениеНомера();
КонецПроцедуры
// -- rarus Чернавин Г.К 05.06.2020

&НаСервере
Процедура СформироватьРейсовыйОтчетННФ()
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	ОбъектыПечати = Новый СписокЗначений;
	ТабДок = Документы.vftРейс.ПечатьОтчета(МассивОбъектов, ОбъектыПечати);
	ТабДок.ТолькоПросмотр = Ложь;
	ТабДок.Защита = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура РейсовыйОтчетННФ(Команда)
	ИмяТекущегоОтчета = "РейсовыйОтчетННФ";
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросМодифицированностьЗавершение", ЭтотОбъект, "РейсовыйОтчетННФ");
		ПоказатьВопрос(Оповещение, НСтр("ru = '""Необходимо записать документ перед формированием отчета!"+Символы.ПС+"Записать документ?""'"),РежимДиалогаВопрос.ОКОтмена,30,,"Внимание!")
	Иначе
		СформироватьРейсовыйОтчетННФ();
		УстановитьПометкуОтчета(Элементы.РейсовыйОтчетННФ.Пометка);
	КонецЕсли;
КонецПроцедуры

// ++ rarus Чернавин Г.К 18.06.2020
&НаКлиенте
Функция НомерБезПрефикса(Номер)
	НомерВозврат = Номер;
	Разделитель = "-";
	ПозицияРазделителя = СтрНайти(НомерВозврат, Разделитель, НаправлениеПоиска.СКонца);
	Если ПозицияРазделителя <> 0 Тогда
		НомерВозврат = Сред(НомерВозврат, ПозицияРазделителя+1);
		НомерВозврат = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерВозврат);
	КонецЕсли;
	Возврат НомерВозврат;
	
КонецФункции
// -- rarus Чернавин Г.К 18.06.2020

// ++ rarus Чернавин Г.К 19.06.2020 № 22281
&НаКлиенте
Процедура ПересчитатьХодовоеВремя()
	Если Объект.Пункты.Количество() > 1 Тогда
		текОтход = Объект.Пункты[0].Отход;
		Объект.Пункты[0].ХодовоеВремя = 0;
		Для ц = 1 по Объект.Пункты.Количество() - 1 Цикл
			текСтрока = Объект.Пункты[ц];
			текСтрока.ХодовоеВремя = РарусОбщегоНазначенияКлиент.РазницаДат(текОтход, текСтрока.Приход);
			текОтход = Объект.Пункты[ц].Отход;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры
// -- rarus Чернавин Г.К 19.06.2020

// ++ rarus Камаев П.В. 27.11.2020 Задача № 25553
&НаКлиенте
Процедура ЗаполнитьРасстояниеВШапке()
	ЭтоСудноННФ = рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Объект.Судно);
	
	Если ЭтоСудноННФ Тогда
		РасстояниеГруженый = 0;
		РасстояниеПорожний = 0;
		Для каждого Строка Из Объект.Пункты Цикл
			Если Строка.ГруженыйРейс Тогда
				РасстояниеГруженый = РасстояниеГруженый + Строка.РасстояниеФакт;
			Иначе
				РасстояниеПорожний = РасстояниеПорожний + Строка.РасстояниеФакт;
			КонецЕсли;
		КонецЦикла;
		Объект.РасстояниеГруженый = РасстояниеГруженый;
		Объект.РасстояниеПорожний = РасстояниеПорожний;
	КонецЕсли;
КонецПроцедуры
// -- rarus Камаев П.В. 27.11.2020

// ++ rarus Чернавин Г.К 16.07.2020 № 22623
&НаКлиенте
Процедура НомерБезПрефиксаПриИзменении(Элемент)
	
	
	Если ЗначениеЗаполнено(Объект.Номер) И ЗначениеЗаполнено(НомерБезПрефикса) Тогда
		НомерВозврат = Объект.Номер;
		Разделитель = "-";
		ПозицияРазделителя = СтрНайти(НомерВозврат, Разделитель, НаправлениеПоиска.СКонца);
		Если ПозицияРазделителя <> 0 Тогда
			НомерВозврат = Сред(НомерВозврат, ПозицияРазделителя+1);
			ПрефиксНомера = Лев(Объект.Номер, ПозицияРазделителя);
			//НомерВозврат = 003
			//ПрефиксНомера = ОТ-12-
			Если СтрДлина(НомерБезПрефикса) <= СтрДлина(НомерВозврат) Тогда
				ДлинаНомера = СтрДлина(НомерВозврат);
				ПраваяЧасть = НомерБезПрефикса;
				Пока СтрДлина(НомерВозврат) > СтрДлина(ПраваяЧасть) цикл
					ПраваяЧасть = "0" + ПраваяЧасть;
				КонецЦикла;
			    Объект.Номер = ПрефиксНомера + ПраваяЧасть;
			Иначе
				НомерБезПрефикса = НомерБезПрефикса(Объект.Номер);
				Сообщить(НСтр("ru = 'Номер большего допустимого!'"));
			КонецЕсли;
			//НомерВозврат = ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(НомерВозврат);
		КонецЕсли;					
	КонецЕсли;
	
	// ++ rarus Чернавин Г.К 20.07.2020 № 22865
	Если Не ЗначениеЗаполнено(Объект.Номер) Тогда
		НомерБезПрефиксаПриИзмененииНаСервере();	
	КонецЕсли;
	// -- rarus Чернавин Г.К 20.07.2020

	
КонецПроцедуры

// ++ rarus Чернавин Г.К 20.07.2020 № 22865
&НаСервере
Процедура НомерБезПрефиксаПриИзмененииНаСервере()
	
	Префикс = "";
	
	Префикс = Префикс + ?(Объект.Судно <> Справочники.vftСуда.ПустаяСсылка(), Объект.Судно.КодБыстрогоВвода, "      ");
	Префикс = Префикс + "-";
	Префикс = Префикс + ?(Объект.Дата = Дата("00010101000000"), "  ", Прав(Формат(Объект.Дата, "ДФ=yyyy"), 2));
	Префикс = Префикс + "-";
	
	ПрефиксацияОбъектовСобытия.УстановитьПрефиксИнформационнойБазы(Объект, Истина, Префикс);
	
	НомерБезПрефикса = СокрЛП(НомерБезПрефикса);
	
	ТекстНомерБезПрефикса = НомерБезПрефикса;
	
	Пока СтрДлина(ТекстНомерБезПрефикса) < 3 Цикл
		ТекстНомерБезПрефикса = "0" + ТекстНомерБезПрефикса;
	КонецЦикла;
	Объект.Номер = Префикс + ТекстНомерБезПрефикса;
	
КонецПроцедуры
// -- rarus Чернавин Г.К 20.07.2020
// -- rarus Чернавин Г.К 16.07.2020

// ++ rarus Камаев П.В. 02.10.2020 Задача № 24509
Процедура УстановитьПараметрыОтбораСтатуса()
	Если НЕ ЭтоГлавныйУзел И НЕ ПолноправныйПользователь Тогда
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(Перечисления.рарусСтатусыПутевогоЖурнала.Завершен);
		НовыйМассив.Добавить(Перечисления.рарусСтатусыПутевогоЖурнала.Незавершен);
		НовыеЗначения = Новый ФиксированныйМассив(НовыйМассив);
		
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", НовыеЗначения);
		
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		
		Элементы.СтатусРейса.ПараметрыВыбора = НовыеПараметры;
	КонецЕсли;
КонецПроцедуры
// -- rarus Камаев П.В. 02.10.2020

// ++ rarus Чернавин Г.К 18.08.2020 № 23337
&НаСервере
Функция СухогрузныйФлот()
	Если ЗначениеЗаполнено(Объект.Судно) Тогда
		МодельРДО = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Судно, "Проект.МодельРДО");
		Если ЗначениеЗаполнено(МодельРДО) И МодельРДО = Справочники.рарусСправочникСсылок.МодельРДО_СГФ.Значение Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции
// -- rarus Чернавин Г.К 18.08.2020

// ++ rarus Камаев П.В. 24.08.2020 
&НаКлиенте
Процедура ПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст,,Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст,,Ложь);
КонецПроцедуры
// -- rarus Камаев П.В. 24.08.2020

// ++ rarus Камаев П.В. 24.08.2020 Задача № 23379
&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("РежимЗаписи", ПредопределенноеЗначение("РежимЗаписиДокумента.Запись"));
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	
	// ++ rarus Камаев П.В. 27.10.2020 Задача № 24973 
	НажалиЗаписатьИЗакрыть = Истина;
	// -- rarus Камаев П.В. 27.10.2020
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаПользователюОбИзмененииДанных(Результат, ПараметрыЗаписи) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ВопросПользователюОбИзмененииДанныхЗадан");
		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
			
			//++ rarus isaeva 13.10.2020
		ИначеЕсли ПараметрыЗаписи.Свойство("НаименованиеОтчета") Тогда
			ПродолжениеФормированияОтчетов(ПараметрыЗаписи.НаименованиеОтчета);
			//-- rarus isaeva 13.10.2020
		КонецЕсли;
	Иначе
		// ++ rarus Камаев П.В. 27.10.2020 Задача № 24973 
		НажалиЗаписатьИЗакрыть = Ложь;
		// -- rarus Камаев П.В. 27.10.2020
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И НЕ ЗавершениеРаботы Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Неопределено);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		// ++ rarus Камаев П.В. 27.10.2020 Задача № 24973 
		НажалиЗаписатьИЗакрыть = Ложь;
		// -- rarus Камаев П.В. 27.10.2020
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры
// -- rarus Камаев П.В. 24.08.2020

// ++ rarus Камаев П.В. 25.09.2020 Задача № 24417 
&НаКлиенте
Процедура ПрохождениеУчастковСЛоцманомЛоцманНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ЭтоБуксир Тогда
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Форма = ОткрытьФорму("Справочник.рарусЛоцманы.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список,
		"Владелец.ЛоцманСЗ",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно
		,, 
		Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСЛоцманомЛоцманАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ЭтоБуксир Тогда
		Если Текст <> "" Тогда
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ПолучитьДанныеВыбораЛоцман(Текст);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрохождениеУчастковСЛоцманомЛоцманОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ЭтоБуксир Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораЛоцман(Текст);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораЛоцман(Текст)
	
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска","%"+Текст+"%");
	Запрос.Текст="ВЫБРАТЬ
	|	рарусЛоцманы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.рарусЛоцманы КАК рарусЛоцманы
	|ГДЕ
	|	рарусЛоцманы.Наименование ПОДОБНО &СтрокаПоиска
	|	И рарусЛоцманы.Владелец.Лоцман
	|	И рарусЛоцманы.Владелец.ЛоцманСЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
		
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции
// -- rarus Камаев П.В. 25.09.2020

//++ rarus isaeva 13.10.2020
&НаКлиенте
Процедура ПродолжениеФормированияОтчетов(ДопПараметры) 
	
	Если ДопПараметры = "ОтчетДанныеПоГСМ" Тогда
		СформироватьОтчетДанныеПоГСМ();
		УстановитьПометкуОтчета(Элементы.ОтчетДанныеПоГСМ.Пометка);	
	КонецЕсли;
	Если ДопПараметры = "ОтчетПутевойЖурнал" Тогда
		СформироватьОтчетПутевойЖурнал();
		УстановитьПометкуОтчета(Элементы.ОтчетПутевойЖурнал.Пометка);	
	КонецЕсли;
	Если ДопПараметры = "ОтчетГрафикДвижения" Тогда
		СформироватьОтчетГрафикДвижения();
		УстановитьПометкуОтчета(Элементы.ОтчетГрафикДвижения.Пометка);	
	КонецЕсли;
	// ++ rarus Камаев П.В. 31.03.2020 
	Если ДопПараметры = "ОтчетРапортСОЛП" Тогда
		СформироватьОтчетРапортСОЛП();
		УстановитьПометкуОтчета(Элементы.ОтчетГрафикДвижения.Пометка);	
	КонецЕсли;
	Если ДопПараметры = "РейсовыйОтчет" Тогда
		СформироватьРейсовыйОтчет();
		УстановитьПометкуОтчета(Элементы.РейсовыйОтчет.Пометка);	
	КонецЕсли;
	Если ДопПараметры = "ТопливныйОтчет" Тогда
		СформироватьТопливныйОтчет();
		УстановитьПометкуОтчета(Элементы.ТопливныйОтчет.Пометка);	
	КонецЕсли;
	Если ДопПараметры = "ОтчетОРейсообороте" Тогда
		СформироватьОтчетОРейсообороте();
		УстановитьПометкуОтчета(Элементы.ОтчетОРейсообороте.Пометка);	
	КонецЕсли;
	// -- rarus Камаев П.В. 31.03.2020
	Если СтрНайти(ДопПараметры, "ПодменюПЖНС") <> 0 Тогда
		СформироватьОтчетПутевойЖурналНС(ДопПараметры);
		УстановитьПометкуОтчета(Элементы[ДопПараметры].Пометка);	
	КонецЕсли;
	
	Если ДопПараметры = "РейсовыйОтчетННФ" Тогда
		СформироватьРейсовыйОтчетННФ();
		УстановитьПометкуОтчета(Элементы.РейсовыйОтчетННФ.Пометка);	
	КонецЕсли;
	
КонецПроцедуры //
//-- rarus isaeva 13.10.2020

// ++ rarus Камаев П.В. 27.10.2020 Задача № 24973 
&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы И НажалиЗаписатьИЗакрыть Тогда
		ОбязательностьЗаполненияПрохождениеУчастковСЛоцманом();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбязательностьЗаполненияПрохождениеУчастковСЛоцманом()
		
	Документы.vftРейс.ОбязательностьЗаполненияПрохождениеУчастковСЛоцманом(Объект);
	
КонецПроцедуры

// -- rarus Камаев П.В. 27.10.2020

//++ rarus isaeva 16.03.2021
&НаКлиенте
Процедура ПунктыСледованияТипПунктаПриИзменении(Элемент)
	ОбновитьПунктыПогрузкиВыгрузки();
КонецПроцедуры

&НаКлиенте
Процедура ПунктыСледованияПунктПриИзменении(Элемент)
	ОбновитьПунктыПогрузкиВыгрузки();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПунктыПогрузкиВыгрузки()
	
	Объект.ПортОтправления = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	Объект.ПортПогрузки = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	Объект.ПортВыгрузки = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
	Для каждого Строка Из Объект.ПунктыСледования Цикл
		Если ЗначениеЗаполнено(Строка.Пункт) Тогда
			Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортОтправления") И ЗначениеЗаполнено(Строка.Пункт) Тогда
				Объект.ПортОтправления = Строка.Пункт;
			КонецЕсли;
			Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортПогрузки") И НЕ ЗначениеЗаполнено(Объект.ПортПогрузки) Тогда
				Объект.ПортПогрузки = Строка.Пункт;
			КонецЕсли;
			Если Строка.ТипПункта = ПредопределенноеЗначение("Перечисление.рарусТипыПунктов.ПортВыгрузки") И ЗначениеЗаполнено(Строка.Пункт) Тогда
				Объект.ПортВыгрузки = Строка.Пункт;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
//-- rarus isaeva 16.03.2021

