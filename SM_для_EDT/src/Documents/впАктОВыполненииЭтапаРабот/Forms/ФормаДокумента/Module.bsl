
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			ШаблонСообщения = НСтр("ru = 'В строке номер %1, списка ремонтные работы, дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения,	Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// ++ rarus makole 2021-02-09
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ++ rarus makole 2021-07-01 [ЗНИ РАIT-0023374]
	Элементы.ЗапчастиРемонтаНоменклатураКачество.Видимость = рарусИмущественныйУчетВызовСервера.ИспользуетсяКачествоТоваров();
	// -- rarus makole 2021-07-01 [ЗНИ РАIT-0023374]
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры
// -- rarus makole 2021-02-09 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования


// Заполняет дерево ремонтных работ на форме документа.
// Параметры:
//		СтруктураДляЗаполнения - Структура - структура данных.
//		ЭлементыДерево - ДанныеФормыДерево - дерево, которое нужно заполнить.
//		Объект - ДокументОбъект, ДанныеФормыСтруктура - объект с формы.
//
&НаКлиенте
Процедура ЗаполнитьДеревоРемонтов(СтруктураДляЗаполнения, ЭлементыДерево,Объект) Экспорт
	
	ИмяТЧ                     = СтруктураДляЗаполнения.ИмяТЧ;
	Текущий_ID                = СтруктураДляЗаполнения.Текущий_ID;
	Наименование_Ремонты      = СтруктураДляЗаполнения.Наименование_Ремонты;
	Наименование_ПолеРодитель = СтруктураДляЗаполнения.Наименование_ПолеРодитель;
	Наименование_ПолеЭлемент  = СтруктураДляЗаполнения.Наименование_ПолеЭлемент;
	
	
	МассивСтрокРемонтныхРабот = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(Наименование_Ремонты,Текущий_ID));
	
	СоответствиеID = Новый Соответствие;
	
	Для каждого СтрокаМассива Из МассивСтрокРемонтныхРабот Цикл
		
		ID_Родителя = СтрокаМассива[Наименование_ПолеРодитель];
		
		НайдСоответствие = СоответствиеID.Получить(СтрокаМассива[Наименование_ПолеРодитель]);
		
		Если НайдСоответствие = Неопределено Тогда
			МассивСтрокСоответствия = Новый Массив;
			МассивСтрокСоответствия.Добавить(СтрокаМассива);
			СоответствиеID.Вставить(ID_Родителя, МассивСтрокСоответствия);
		Иначе
			МассивСтрокСоответствия = НайдСоответствие;
			МассивСтрокСоответствия.Добавить(СтрокаМассива);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЭлементыДерева = ЭлементыДерево.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	ЭлементДерева = ЭлементыДерева.Добавить();
	
	ЭлементДерева.РемонтнаяРабота = "Ремонтные работы";	
	
	ЗаполнитьДерево(ЭлементДерева,СоответствиеID,"", Наименование_ПолеЭлемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДерево(ЭлементДерева, Соответствие, Родитель, Наименование_ПолеЭлемент, ЭтоЗаявка)
	
	МассивПодчиненныхСтрок = Соответствие.Получить(Родитель);
	
	Если Не МассивПодчиненныхСтрок = Неопределено
		И МассивПодчиненныхСтрок.Количество() > 0 Тогда
		
		ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		
		Если Не МассивПодчиненныхСтрок = Неопределено Тогда
			Для каждого Строка Из МассивПодчиненныхСтрок Цикл
				Элемент = ЭлементыДерева.Добавить();
				ЗаполнитьЗначенияСвойств(Элемент,Строка);
				Если ЭтоЗаявка Тогда
					Если ТипЗнч(Элемент.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты") Тогда
						Элемент.ЭтоТехКарта = Истина;
						ЭлементДерева.ПроцентВыполненияРабот = Элемент.ПроцентВыполненияРабот; //переделать под много техкарт!
						ЭлементДерева.Выполнено = Элемент.Выполнено; //переделать под много техкарт!
					Иначе
						Элемент.ЭтоТехКарта = Ложь;
					КонецЕсли; 
				КонецЕсли; 
				ЗаполнитьДерево(Элемент,Соответствие,Строка[Наименование_ПолеЭлемент], Наименование_ПолеЭлемент, ЭтоЗаявка);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры


Процедура ОбновитьПроцентыВыполненияВДереве(ДеревоРемонтов)
	Для каждого Строка Из ДеревоРемонтов.Строки Цикл
		СтруктураПолученная = ПроцентВыполненияПодчиненных(Строка);
		Строка.ПроцентВыполненияРабот = ?(СтруктураПолученная.Количество = 0, СтруктураПолученная.Процент, СтруктураПолученная.Процент/СтруктураПолученная.Количество);
		Строка.Выполнено = СтруктураПолученная.Выполнено;
	КонецЦикла;
КонецПроцедуры

Функция ПроцентВыполненияПодчиненных(СтрокаДереваРемонтов)

	КоличествоПодчиненных = 0;
	ПроцентПодчиненных = 0;
	Выполнено = Истина;
	Для каждого СтрокаПодчиненная Из СтрокаДереваРемонтов.Строки Цикл
		Если ТипЗнч(СтрокаПодчиненная.РемонтнаяРабота) = Тип("СправочникСсылка.впТехнологическиеОперации") Тогда
			СтруктураПолученная = Новый Структура("Количество, Процент", СтрокаПодчиненная.Количество, СтрокаПодчиненная.ПроцентВыполненияРабот);	
		Иначе
			СтруктураПолученная = ПроцентВыполненияПодчиненных(СтрокаПодчиненная);
			Если НЕ СтрокаПодчиненная.Выполнено Тогда
				Выполнено = Ложь;
			КонецЕсли;
		КонецЕсли; 
		КоличествоПодчиненных = КоличествоПодчиненных + СтруктураПолученная.Количество; 
		ПроцентПодчиненных = ПроцентПодчиненных + СтруктураПолученная.Процент * СтруктураПолученная.Количество;
	КонецЦикла;
	
	СтрокаДереваРемонтов.ПроцентВыполненияРабот = ?(КоличествоПодчиненных = 0, 100, ПроцентПодчиненных / КоличествоПодчиненных);
	СтруктураВозврата = Новый Структура("Количество, Процент, Выполнено", СтрокаДереваРемонтов.Количество, СтрокаДереваРемонтов.ПроцентВыполненияРабот, Выполнено);
	
	Возврат СтруктураВозврата;	

КонецФункции


&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		Структура = Новый Структура();
		Структура.Вставить(	"ИмяТЧ"                    , "РемонтныеРаботы");
		Структура.Вставить(	"Текущий_ID"               , ТекущиеДанные.ID);
		Структура.Вставить(	"Наименование_Ремонты"     , "РемонтыОборудования_ID");
		Структура.Вставить(	"Наименование_ПолеРодитель", "Родитель_ID");
		Структура.Вставить(	"Наименование_ПолеЭлемент" , "ID");
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере(ТекущиеДанные.ID);

		//ЗаполнитьДеревоРемонтов(Структура, ДеревоРемонтныхРабот, Объект);
		
		УстановитьОтборыСвязанныхТаблицРемонты(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		//	Элементы.УчетНаработки.Видимость = ЗаполнитьНаработку(?(Завершено, ТекущиеДанные.ДатаОкончания, ТекущаяДата()), ТекущиеДанные.ОбъектРемонта, ТекущиеДанные.ID, Завершено);
		Элементы.УчетНаработки.Видимость = ЗаполнитьНаработку(ТекущиеДанные.ДатаОкончания, ТекущиеДанные.ОбъектРемонта, ТекущиеДанные.ID, Завершено);    //наработка на дату окончания (машина времени, убрать)
	КонецЕсли;
	
	УстановитьПараметрыВыбораНоменклатуры();
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьНаработку(ДатаОкончания, ОбъектРемонта, РемонтыОборудования_ID, РаботыЗавершены)
	УчетНаработки.Очистить();
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	Запрос.УстановитьПараметр("РаботыЗавершены", РаботыЗавершены);
	
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	впНаработкаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	впНаработкаОбъектовРемонта.Показатель КАК Показатель,
	               |	впНаработкаОбъектовРемонта.Период КАК ДатаРаботыПо,
	               |	впНаработкаОбъектовРемонта.НовоеЗначение КАК НовоеЗначение,
	               |	впНаработкаОбъектовРемонта.Регистратор КАК Регистратор,
	               |	МАКСИМУМ(впНаработкаОбъектовРемонта1.Период) КАК ДатаРаботыС,
	               |	впНаработкаОбъектовРемонта.НаработкаПоРемонту КАК НаработкаПоРемонту,
	               |	МАКСИМУМ(впУчетНаработкиОборудованияНаработкаОбъектов.РаспространятьНаПодчиненных) КАК РаспространятьНаПодчиненных
	               |ПОМЕСТИТЬ вт_ТекНаработкаПериоды
	               |ИЗ
	               |	РегистрСведений.впНаработкаОбъектовРемонта КАК впНаработкаОбъектовРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впНаработкаОбъектовРемонта КАК впНаработкаОбъектовРемонта1
	               |		ПО впНаработкаОбъектовРемонта.Период > впНаработкаОбъектовРемонта1.Период
	               |			И впНаработкаОбъектовРемонта.ОбъектРемонта = впНаработкаОбъектовРемонта1.ОбъектРемонта
	               |			И впНаработкаОбъектовРемонта.Показатель = впНаработкаОбъектовРемонта1.Показатель
	               |			И впНаработкаОбъектовРемонта.НаработкаПоРемонту <> впНаработкаОбъектовРемонта1.НаработкаПоРемонту
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впУчетНаработкиОборудования.НаработкаОбъектов КАК впУчетНаработкиОборудованияНаработкаОбъектов
	               |		ПО впНаработкаОбъектовРемонта.Регистратор = впУчетНаработкиОборудованияНаработкаОбъектов.Ссылка
	               |			И впНаработкаОбъектовРемонта.ОбъектРемонта = впУчетНаработкиОборудованияНаработкаОбъектов.ОбъектРемонта
	               |			И впНаработкаОбъектовРемонта.Показатель = впУчетНаработкиОборудованияНаработкаОбъектов.Показатель
	               |			И впНаработкаОбъектовРемонта.НаработкаПоРемонту = впУчетНаработкиОборудованияНаработкаОбъектов.НаработкаПоРемонту
	               |ГДЕ
	               |	впНаработкаОбъектовРемонта.НаработкаПоРемонту = &НаработкаПоРемонту
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впНаработкаОбъектовРемонта.Регистратор,
	               |	впНаработкаОбъектовРемонта.ОбъектРемонта,
	               |	впНаработкаОбъектовРемонта.Показатель,
	               |	впНаработкаОбъектовРемонта.НаработкаПоРемонту,
	               |	впНаработкаОбъектовРемонта.Период,
	               |	впНаработкаОбъектовРемонта.НовоеЗначение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаРаботыПо УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_ТекНаработкаПериоды.ОбъектРемонта КАК ОбъектРемонта,
	               |	вт_ТекНаработкаПериоды.Показатель КАК Показатель,
	               |	ВЫБОР
	               |		КОГДА &РаботыЗавершены
	               |			ТОГДА вт_ТекНаработкаПериоды.ДатаРаботыПо
	               |		ИНАЧЕ &ДатаОкончания
	               |	КОНЕЦ КАК ДатаРаботыПо,
	               |	ВЫБОР
	               |		КОГДА &РаботыЗавершены
	               |			ТОГДА вт_ТекНаработкаПериоды.НовоеЗначение
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК НовоеЗначение,
	               |	вт_ТекНаработкаПериоды.Регистратор КАК Регистратор,
	               |	вт_ТекНаработкаПериоды.ДатаРаботыС КАК ДатаРаботыС,
	               |	впНаработкаОбъектовРемонта.НовоеЗначение КАК СтароеЗначение,
	               |	вт_ТекНаработкаПериоды.НовоеЗначение - ЕСТЬNULL(впНаработкаОбъектовРемонта.НовоеЗначение, 0) КАК Наработка,
	               |	вт_ТекНаработкаПериоды.НаработкаПоРемонту КАК НаработкаПоРемонту,
	               |	вт_ТекНаработкаПериоды.РаспространятьНаПодчиненных КАК РаспространятьНаПодчиненных
	               |ИЗ
	               |	вт_ТекНаработкаПериоды КАК вт_ТекНаработкаПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впНаработкаОбъектовРемонта КАК впНаработкаОбъектовРемонта
	               |		ПО вт_ТекНаработкаПериоды.ОбъектРемонта = впНаработкаОбъектовРемонта.ОбъектРемонта
	               |			И вт_ТекНаработкаПериоды.Показатель = впНаработкаОбъектовРемонта.Показатель
	               |			И вт_ТекНаработкаПериоды.ДатаРаботыС = впНаработкаОбъектовРемонта.Период";
	Запрос.УстановитьПараметр("НаработкаПоРемонту", РемонтыОборудования_ID);
	УчетНаработки.Загрузить(Запрос.Выполнить().Выгрузить());
	Если УчетНаработки.Количество() > 0 Тогда Возврат Истина КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	впПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	впПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
	|ПОМЕСТИТЬ вт_ТекНаработкаПериоды
	|ИЗ
	|	РегистрСведений.впПараметрыНаработкиОбъектовРемонта.СрезПоследних(&ДатаОкончания, ОбъектРемонта = &ОбъектРемонта) КАК впПараметрыНаработкиОбъектовРемонтаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	впНаработкаОбъектовРемонтаСрезПоследних.НовоеЗначение КАК СтароеЗначение,
	|	вт_ТекНаработкаПериоды.Показатель КАК Показатель,
	|	&НаработкаПоРемонту КАК НаработкаПоРемонту,
	|	впНаработкаОбъектовРемонтаСрезПоследних.Период КАК ДатаРаботыС,
	|	&ДатаОкончания КАК ДатаРаботыПо,
	|	вт_ТекНаработкаПериоды.ОбъектРемонта КАК ОбъектРемонта,
	|	МАКСИМУМ(впУчетНаработкиОборудованияНаработкаОбъектов.РаспространятьНаПодчиненных) КАК РаспространятьНаПодчиненных
	|ИЗ
	|	вт_ТекНаработкаПериоды КАК вт_ТекНаработкаПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впНаработкаОбъектовРемонта.СрезПоследних(&ДатаОкончания, ) КАК впНаработкаОбъектовРемонтаСрезПоследних
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впУчетНаработкиОборудования.НаработкаОбъектов КАК впУчетНаработкиОборудованияНаработкаОбъектов
	|			ПО (впУчетНаработкиОборудованияНаработкаОбъектов.Ссылка = впНаработкаОбъектовРемонтаСрезПоследних.Регистратор)
	|				И (впУчетНаработкиОборудованияНаработкаОбъектов.ОбъектРемонта = впНаработкаОбъектовРемонтаСрезПоследних.ОбъектРемонта)
	|				И (впУчетНаработкиОборудованияНаработкаОбъектов.Показатель = впНаработкаОбъектовРемонтаСрезПоследних.Показатель)
	|		ПО вт_ТекНаработкаПериоды.ОбъектРемонта = впНаработкаОбъектовРемонтаСрезПоследних.ОбъектРемонта
	|			И вт_ТекНаработкаПериоды.Показатель = впНаработкаОбъектовРемонтаСрезПоследних.Показатель
	|
	|СГРУППИРОВАТЬ ПО
	|	вт_ТекНаработкаПериоды.Показатель,
	|	вт_ТекНаработкаПериоды.ОбъектРемонта,
	|	впНаработкаОбъектовРемонтаСрезПоследних.Период,
	|	впНаработкаОбъектовРемонтаСрезПоследних.НовоеЗначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаРаботыС УБЫВ";
	
	УчетНаработки.Загрузить(Запрос.Выполнить().Выгрузить());
	Если УчетНаработки.Количество() > 0 Тогда Возврат Истина Иначе Возврат Ложь КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		УстановитьОтборСтрокПоЗатратам();
		Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = ТекДанные.РемонтнаяРабота = "Ремонтные работы";	
		Элементы.ДеревоРемонтныхРаботПроцентВыполненияРабот.ТолькоПросмотр = ТекДанные.РемонтнаяРабота = "Ремонтные работы";	
		Элементы.ДеревоРемонтныхРаботВыполнено.ТолькоПросмотр = ТекДанные.РемонтнаяРабота = "Ремонтные работы";	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;       
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество()>0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("СправочникСсылка.впТехКарты") Тогда
		ТекущийРемонт = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Пока ТекущийРемонт <> Неопределено И ТипЗнч(ТекущийРемонт.РемонтнаяРабота) <> Тип("Строка") Цикл
			Если ТекущийРемонт.РемонтнаяРабота = ВыбранноеЗначение[0] Тогда
				ШаблонСообщения = НСтр("ru = 'Выбранное значение ""%1"" не может быть включено в состав самого себя.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыбранноеЗначение[0]);
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли; 
			ТекущийРемонт = ТекущийРемонт.ПолучитьРодителя();	
		КонецЦикла;
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, ДатаНачалаРемонта);
	
	ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Номенклатура",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Номенклатура)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная номенклатура уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструменты

&НаКлиенте
Процедура ИнструментыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.Инструменты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Инструмент",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Инструмент)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данный инструмент уже добавлен.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиРемонта

&НаКлиенте
Процедура ЗапчастиРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать ремонт, для которого заполняется список запчастей!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.РемонтыОборудования.ТекущиеДанные;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.ID = Элемент.ТекущиеДанные.Номенклатура.УникальныйИдентификатор();
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("Номенклатура,РемонтыОборудования_ID",Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.РемонтыОборудования_ID)).Количество() > 1 Тогда
			ТекстСообщения = НСтр("ru = 'Данная запчасть уже добавлена.'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.впТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.впТехКарты.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательнаяМелочь

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРР(ДеревоРР)
	
	Для Каждого Строка Из ДеревоРР Цикл
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоРемонтныхРабот.Развернуть(ИдентификаторСтроки, Истина);
		РазвернутьДеревоРР(Строка.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры 

#КонецОбласти

&НаКлиенте 
Процедура РемонтыОборудованияОбработкаВыбораПослеВопроса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивИДРемонтов = ДополнительныеПараметры.МассивИДДобавленныхРемонтов;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого ЭлементМассива из МассивИДРемонтов Цикл
			ОчиститьСвязанныеТабличныеЧасти(, , ЭлементМассива);
		КонецЦикла;
		
		ОбработкаВыбораЗавершение(ДополнительныеПараметры.ВыбранноеЗначение)
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаВыбораЗавершение(ВыбранноеЗначение)
	
	СтруктураВозврата = РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;
	
КонецПроцедуры

#Область ЗаполнениеТЧОсновныхДокументов

// Процедура выполняет заполнение типовых затрат технологических операций.
//
// Параметры:
//  ДокументОбъект  – ДокументОбъект.торо_ЗаявкаНаРемонт – документ для которого
//                    необходимо заполнить типовые затраты.
//  СтрокаДерева    – СтрокаДереваЗначений – строка дерева ремонтных работ для
//                    которой заполняются типовые затраты.
//
Процедура ЗаполнитьТиповыеЗатратыТехнологическойОперации(Дерево, ДокументОбъект, СтруктураСтрокаРодитель, Значение, СтруктураСоответствияТЧ = Неопределено, РемонтыОборудования_ID = "", КоличествоОпераций = Неопределено) Экспорт
	
	МассивСтрок = Дерево.Строки.НайтиСтроки(
	Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", 
	СтруктураСтрокаРодитель.СтрокаРодитель_ID, 
	СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID , 
	СтруктураСтрокаРодитель.СтрокаРодительРодитель_ID), Истина);
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДереваРодитель = МассивСтрок[0];
		СтрокаДерева = СтрокаДереваРодитель.Строки.Добавить();
		СтрокаДерева.ID = Новый УникальныйИдентификатор;
		СтрокаДерева.Родитель_ID     = СтруктураСтрокаРодитель.СтрокаРодитель_ID;
		СтрокаДерева.РемонтнаяРабота = Значение;
		СтрокаДерева.ТехОперация 	 = Значение;
		СтрокаДерева.РемонтыОборудования_ID = ?(РемонтыОборудования_ID = "", СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID, РемонтыОборудования_ID);
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.впАктОВыполненииЭтапаРабот") Тогда
			СтрокаДерева.Количество = 1;
			СтрокаДерева.НоваяОперация = Истина;
			СтрокаДерева.ПроцентВыполненияРабот = 100;
		КонецЕсли;
		Если КоличествоОпераций <> Неопределено Тогда
			СтрокаДерева.Количество = КоличествоОпераций;
		Иначе
			СтрокаДерева.Количество = 1;
		КонецЕсли; 
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), СтрокаДерева);
		
		СтруктураСоответствияТЧ = Новый Структура;
		СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
		СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", "ТрудовыеЗатраты");
		Если НЕ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.впАктОВыполненииЭтапаРабот") Тогда
			
			СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника",  "Инструменты");
			
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл
			
			ТЧ = Значение[КлючИЗначение.Ключ];
			
			Для Каждого СтрокаТЧ Из ТЧ Цикл
				
				НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение].Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, СтрокаТЧ);
				НовСтрокаТЧ.ID = СтрокаДерева.ID;
				НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
				
				Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
					
					НовСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
					
					Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
					
					Если Коэффициент = 0 Тогда
						Коэффициент = 1;
					КонецЕсли;
					
					НовСтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоУпаковок * Коэффициент;
					
				КонецЕсли;
				Если КлючИЗначение.Ключ = "ИнструментыИТехника" Тогда
					Если ЗначениеЗаполнено(СтрокаТЧ.Упаковка) Тогда
						НовСтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Упаковка;
						НовСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

Функция ОбработкаПодбораТехКарты(Дерево, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения)
	
	Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
		РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
	Иначе
		Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования, для добавления тех. карты!'"));
	КонецЕсли;
	
	ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота", РемонтыОборудования_ID, ВыбранноеЗначение)).Количество() > 0;
	
	Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID) Тогда
			ТЧ_РемонтныхРабот.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
		НовСтрокаРР = ?(ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID),ТЧ_РемонтныхРабот.Добавить(), ТЧ_РемонтныхРабот[0]);
	Иначе
		НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
	КонецЕсли;
	
	НовСтрокаРР.РемонтыОборудования_ID = РемонтыОборудования_ID;	
	НовСтрокаРР.ID                     = Новый УникальныйИдентификатор;
	НовСтрокаРР.РемонтнаяРабота        = ВыбранноеЗначение;
	НовСтрокаРР.Картинка               = 0;	
	
	НовСтрокаРР.Количество = 1;
	
	ДатаНачала = ТекущиеЗначения.ДатаНачалаРемонта;
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата();
	КонецЕсли; 
	
	ТехКарта = ВыбранноеЗначение;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("РемонтыОборудования_ID" , РемонтыОборудования_ID);
	СтруктураДанных.Вставить("РемонтнаяРабота"        , ТехКарта);
	СтруктураДанных.Вставить("ДатаРемонта"            , ДатаНачала);
	
	//		торо_ЗаполнениеДокументов.ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, Ложь);
	
	Возврат Новый Структура("Дерево, ДокументОбъект", Дерево, ДокументОбъект);
	
КонецФункции

// Функция обрабатывает выбор ремонта
&НаСервере
Функция ОбработкаВыбораРемонта(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтовОборудования, ТЧ_РемонтныхРабот, ТекущиеЗначения, ВыходныеПараметры=Неопределено, КоличествоОпераций = Неопределено)
	
	Возврат ОбработкаПодбораТехКарты(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения);
	
КонецФункции

Функция ДобавитьСтрокуРемонтаОборудования(ТЧ_РемонтовОборудования, СтрокаРемонтовОборудования, ДокументОбъект, ДокОснование)
	
	Если ТЧ_РемонтовОборудования.Количество() > 0 Тогда
		СтрокаРО = ТЧ_РемонтовОборудования.Получить(0);
	Иначе
		СтрокаРО = ТЧ_РемонтовОборудования.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаРО.ID) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
	Иначе
		СтрокаРО = ТЧ_РемонтовОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРО.ДатаНачала) Тогда
		Попытка
			СтрокаРО.ДатаНачала = СтрокаРемонтовОборудования.ПлановаяДата;
		Исключение
			Если Не ЗначениеЗаполнено(СтрокаРО.ДатаНачала) Тогда
				СтрокаРО.ДатаНачала = Неопределено;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.впВыявленныеДефекты") Тогда
		ИДДефекта = СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Если СтрокаРемонтовОборудования.Свойство("Предписания") 
		Или (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.впВыявленныеДефекты") И Не ЗначениеЗаполнено(СтрокаРемонтовОборудования.ВидРемонтныхРабот)) Тогда
		СтрокаРО.ЗакрываетПредписание = Истина;
		Если Не ЗначениеЗаполнено(СтрокаРО.ВидРемонтныхРабот) Тогда
			Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.впВнешнееОснованиеДляРабот") Тогда
				СтрокаРО.ВидРемонтныхРабот = Константы.впВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить();
			Иначе
				СтрокаРО.ВидРемонтныхРабот = Константы.впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтрокаРО.ИДДефекта = ИДДефекта;
	
	СтрокаРО.ДокументИсточник = ДокОснование;
	
	Возврат СтрокаРО;
	
КонецФункции

&НаСервере
Функция РемонтыОборудованияОбработкаВыбораСервер(ВыбранноеЗначение)
	
	IDРемонтаДляАктивизации = Неопределено;
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = ОбработкаВыбораРемонта(Неопределено, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = ОбработкаВыбораРемонта(Неопределено, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, Неопределено);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		IDРемонтаДляАктивизации = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("IDРемонтаДляАктивизации", IDРемонтаДляАктивизации);
	
КонецФункции

&НаСервере
Процедура ДеревоРемонтныхРаботОбработкаВыбораСервер(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	Объект.ЗавершитьРемонтныеРаботы = Ложь;
	
	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("Инструменты, МатериальныеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ТрудовыеЗатраты");
	
	СтруктураТабличныхЧастейПоРемонтам = Новый Структура("ЗапчастиРемонта");
	СтруктураТабличныхЧастейПоРемонтам.Вставить("ИсполнителиПоРемонтам");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
		
		Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
				Объект.РемонтныеРаботы.Очистить();
			КонецЕсли
		КонецЕсли;
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		
		Если Объект.РемонтныеРаботы.Количество() = 0 Тогда
			Объект.РемонтныеРаботы.Добавить();
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Объект.РемонтныеРаботы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из СтруктураТабличныхЧастейПоРемонтам Цикл
			Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
				СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("РемонтыОборудования_ID",Ремонт_ID));
				Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
					Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
		Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
			Объект.РемонтныеРаботы.Очистить();
		КонецЕсли
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере(); 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРемонтныхРаботНаСервере(РемонтыОборудования_ID = Неопределено)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоСФормы.Строки.Очистить();
	
	КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";	
	
	Если Не РемонтыОборудования_ID = Неопределено Тогда
		ТЗРемонтныеРаботы = Объект.РемонтныеРаботы.Выгрузить(Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID)));
	Иначе
		ТЗРемонтныеРаботы = Неопределено;
	КонецЕсли;                                                       
	
	СоздатьВетвьДереваПоТЧ(КорневаяСтрока, ТЗРемонтныеРаботы);
	
	СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
	ОбновитьПроцентыВыполненияВДереве(ДеревоСФормы);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВетвьДереваПоТЧ(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
	Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ТипЗнч(НовСтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты") Тогда
				НовСтрокаДерева.ЭтоТехКарта = Истина;
			Иначе
				НовСтрокаДерева.ЭтоТехКарта = Ложь;
			КонецЕсли; 
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты(ID)
	Элементы.ЗапчастиРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ID);
	Элементы.ИсполнителиПоРемонтам.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID);
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов       = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если НЕ ТекСтрокаДереваРемонтов = Неопределено И НЕ ТекСтрокаРемонтовОборудования = Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		
		Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
			
			ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
			
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Трудовые затраты.
			Если ЗначениеЗаполнено(ID_Отбора) Тогда
				Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);				
			Иначе
				Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID_ОтбораРемонтов);
			КонецЕсли;
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// ++ rarus selmik 03.03.2021
			// Запчасти.
			Если ЗначениеЗаполнено(ID_Отбора) Тогда
				Элементы.ЗапчастиРемонта.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);				
			Иначе
				Элементы.ЗапчастиРемонта.ОтборСтрок           = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID", ID_ОтбораРемонтов);
			КонецЕсли;
			// -- rarus selmik 03.03.2021
			
		Иначе
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Трудовые затраты.
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// ++ rarus selmik 03.03.2021
			// Запчасти.
			Элементы.ЗапчастиРемонта.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			// -- rarus selmik 03.03.2021
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(ТекущиеЗначения, СтруктураТабличныхЧастей)
	
	Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
		
		СтрокиДляУдаления = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("РемонтыОборудования_ID", ТекущиеЗначения.РемонтыОборудования_ID);
	ПараметрыПоиска.Вставить("Родитель_ID", ТекущиеЗначения.ID);
	
	МассивПодчиненныхСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
	Для Каждого СтрДерева Из МассивПодчиненныхСтрок Цикл
		СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктураДляПередачи, СтруктураТабличныхЧастей);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗапчастейДляОР(ОбъектРемонта)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впЗапчасти.Номенклатура
	|ИЗ
	|	РегистрСведений.впЗапчасти КАК впЗапчасти
	|ГДЕ
	|	впЗапчасти.ОбъектРемонта = &ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;
	
	Возврат МассивЗапчастей;
	
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Константы.впОсновнаяОрганизация.Получить();
	КонецЕсли;
	Завершено = Объект.ЗавершитьРемонтныеРаботы;
	ЭтаФорма.ТолькоПросмотр =  Объект.ЗавершитьРемонтныеРаботы и Объект.Проведен;
	
	// rarus evgenu 2020_12_09 ++ 
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// rarus evgenu 2020_12_09 --
	
	// ++ rarus selmik 27.01.2021	
	СтрокаСообщения = СообщенияДляПроверки.Добавить();
	СтрокаСообщения.Идентификатор 	= "ГруппаЗапчасти";
	СтрокаСообщения.Сообщение 		= "Требуется проверить запчасти";

	СтрокаСообщения = СообщенияДляПроверки.Добавить();
	СтрокаСообщения.Идентификатор 	= "ГруппаИсполнители";
	СтрокаСообщения.Сообщение 		= "Требуется проверить исполнителей";

	СтрокаСообщения = СообщенияДляПроверки.Добавить();
	СтрокаСообщения.Идентификатор 	= "РаботыМожноЗавершить";
	СтрокаСообщения.Сообщение 		= "Работы по акту можно завершить";	
	// -- rarus selmik 27.01.2021
	
	// ++ rarus makole 2021-02-09 
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	// -- rarus makole 2021-02-09 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыполненоПриИзменении(Элемент)
	
	Если НЕ Элементы.РемонтыОборудования.ТекущиеДанные.Выполнено Тогда
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
	Иначе
		ТаблицаПроцентовВыполненияЗаполнить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.РемонтыОборудования.ТекущиеДанные.ID));
		
		// ++ rarus selmik 24.03.2021
		УказатьЗавершитьРемонтныеРаботы = Истина;
		
		Для Каждого СтрокаРемонтыОборудования Из Объект.РемонтыОборудования Цикл
			Если Не СтрокаРемонтыОборудования.Выполнено Тогда
				УказатьЗавершитьРемонтныеРаботы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УказатьЗавершитьРемонтныеРаботы Тогда
			Объект.ЗавершитьРемонтныеРаботы = Истина;
		КонецЕсли;
		
		Если Не Элементы.РемонтыОборудования.ТекущиеДанные.ДатаОкончанияИзменена ИЛИ Не ЗначениеЗаполнено(Элементы.РемонтыОборудования.ТекущиеДанные.ДатаОкончания) Тогда
			//RARUS-NN EvgenU РАIT-0023371 2021_06_30 ++
			//Элементы.РемонтыОборудования.ТекущиеДанные.ДатаОкончания = ТекущаяДата();
			СтрокаРР = Элементы.РемонтыОборудования.ТекущиеДанные;
			Если СтрокаРР.ДатаНачала >  ТекущаяДата() Тогда
				СтрокаРР.ДатаНачала = НачалоДня(ТекущаяДата());
				СтрокаРР.ДатаОкончания = ТекущаяДата();
			Иначе
				СтрокаРР.ДатаОкончания = ТекущаяДата();
			КонецЕсли;
			//RARUS-NN EvgenU РАIT-0023371 2021_06_30 --
		КонецЕсли;
		// -- rarus selmik 24.03.2021
	КонецЕсли;
	
	СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
	Для Каждого СтрокаРР из СтрокиРР Цикл
		Если НЕ Элементы.РемонтыОборудования.ТекущиеДанные.Выполнено Тогда
			СтрокаРР.Выполнено = Ложь;
			СтрокаРР.ПроцентВыполненияРабот = 0;
		Иначе
			СтрокаРР.Выполнено = Истина;
			мНайд = ТаблицаПроцентовВыполнения.НайтиСтроки(Новый Структура("IDРемонтнойРаботы", СтрокаРР.ID)) ;
			СтрНайд = ?(мНайд.Количество() = 0, неопределено, мНайд[0]);
			Если СтрНайд <> неопределено Тогда
				СтрокаРР.ПроцентВыполненияРабот = 100 - СтрНайд.ПроцентВыполнения;
			Иначе
				СтрокаРР.ПроцентВыполненияРабот = 100;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	РемонтыОборудованияПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПроцентВыполненияРаботПриИзменении(Элемент)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаДерева.Выполнено = Ложь;
	Объект.ЗавершитьРемонтныеРаботы = Ложь;
	//МасСтр = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ТекСтрокаДерева.ID));
	//МасСтр[0].Выполнено = Ложь;
//	МасСтр[0].ПроцентВыполненияРабот = ТекСтрокаДерева.ПроцентВыполненияРабот;
	
	//МасСтр = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("Родитель_ID", ТекСтрокаДерева.ID));
	//МасСтр[0].Выполнено = Ложь;
//	МасСтр[0].ПроцентВыполненияРабот = ТекСтрокаДерева.ПроцентВыполненияРабот;

//	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	 ПерерасчитатьПроцентыВыполненияРабот();
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьПроцентыВыполненияРабот()

	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		 ТекСтрокаДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0];
	КонецЕсли; 
	 
	ТекСтрокаДерева.ПроцентВыполненияРабот = мин(100, ТекСтрокаДерева.ПроцентВыполненияРабот);

	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);	
	
	Строка = ВыполнитьПоискПоДереву(СтруктураСтроки);
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Строка.ПолучитьИдентификатор();
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПоискПоДереву(СтруктураСтроки)
	
	Для каждого СтрокаДерева из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> СтрокаДерева[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева)
	
	Для каждого Подстрока из СтрокаДерева.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> Подстрока[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат Подстрока;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, Подстрока); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьРемонтныеРаботыПриИзменении(Элемент)
	
	ЗавершитьРемонтныеРаботыСервер();
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	//ПерерасчитатьПроцентыВыполненияРабот();
	//ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	//РасставитьПроцентыРодительскихСтрок(неопределено, Новый Структура("ID, Родитель_ID, РемонтыОборудования_ID", "", "", ""));
//ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьРемонтныеРаботыСервер()
Если Объект.ЗавершитьРемонтныеРаботы Тогда
	ТаблицаПроцентовВыполненияЗаполнить(Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Для Каждого СтрокаРР из Объект.РемонтныеРаботы Цикл
		СтрокаРР.Выполнено = Истина;
		СтрНайд = ТаблицаПроцентовВыполнения.Выгрузить().Найти(СтрокаРР.ID, "IDРемонтнойРаботы");
		Если СтрНайд <> неопределено Тогда
			СтрокаРР.ПроцентВыполненияРабот = 100 - СтрНайд.ПроцентВыполнения;
		Иначе  
			СтрокаРР.ПроцентВыполненияРабот = 100;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРР из Объект.РемонтыОборудования Цикл
		СтрокаРР.Выполнено = Истина; 
		Если Не СтрокаРР.ДатаОкончанияИзменена ИЛИ Не ЗначениеЗаполнено(СтрокаРР.ДатаОкончания) Тогда
			//RARUS-NN EvgenU РАIT-0023371 2021_06_30 ++
			//СтрокаРР.ДатаОкончания = ТекущаяДата();
			Если СтрокаРР.ДатаНачала >  ТекущаяДата() Тогда
				СтрокаРР.ДатаНачала = НачалоДня(ТекущаяДата());
				СтрокаРР.ДатаОкончания = ТекущаяДата();
			Иначе
				СтрокаРР.ДатаОкончания = ТекущаяДата();
			КонецЕсли;
			//RARUS-NN EvgenU РАIT-0023371 2021_06_30 --
		КонецЕсли;
	КонецЦикла;
Иначе
	Для Каждого СтрокаРР из Объект.РемонтныеРаботы Цикл
		СтрокаРР.Выполнено = Ложь;
		СтрокаРР.ПроцентВыполненияРабот = 0;
	КонецЦикла;
	Для Каждого СтрокаРР из Объект.РемонтыОборудования Цикл
		СтрокаРР.Выполнено = Ложь;
	КонецЦикла;
	Завершено = ложь;
КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ТаблицаПроцентовВыполненияЗаполнить(ИД_РО, ИД = неопределено)
	
	ТаблицаПроцентовВыполнения.Загрузить(впОбщиеПроцедурыДокументовТОИР.ПолучитьПроцентыВыполнения(Объект.Ссылка, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИД_РО), ИД));
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыполненоПриИзменении(Элемент)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрокаДерева.РемонтнаяРабота = "Ремонтные работы" Тогда
		ТекСтрокаДерева.Выполнено   =    Не ТекСтрокаДерева.Выполнено;
		Возврат;
	КонецЕсли;
	
	 СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	
	Если Не ТекСтрокаДерева.Выполнено Тогда
		ТекСтрокаДерева.ПроцентВыполненияРабот = 0;
		ТекСтрокаДерева.Выполнено = Ложь;
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
		Если НЕ Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
			МасСтр = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
			Если МасСтр.Количество() > 0 Тогда
				МасСтр[0].Выполнено = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
		
	Иначе
		Если ТекСтрокаДерева.ЭтоТехКарта Тогда
			
			ТаблицаПроцентовВыполненияЗаполнить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекСтрокаДерева.РемонтыОборудования_ID));
			ЗаполнитьПроцентВыполненияРемонтныхРаботВПодчиненныхСтроках(СтруктураСтроки, СтруктураРодСтроки);
			
		Иначе
			
			ТаблицаПроцентовВыполненияЗаполнить(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекСтрокаДерева.РемонтыОборудования_ID), ТекСтрокаДерева.ID);
			
			СтрНайд = ?(ТаблицаПроцентовВыполнения.Количество() = 0, неопределено, ТаблицаПроцентовВыполнения[0]);
			Если СтрНайд <> неопределено Тогда
				ТекСтрокаДерева.ПроцентВыполненияРабот = 100 - СтрНайд.ПроцентВыполнения;
			Иначе
				ТекСтрокаДерева.ПроцентВыполненияРабот = 100;
			КонецЕсли;
			ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
		КонецЕсли;

	КонецЕсли;
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;	
	
	// ++ rarus selmik 24.03.2021  
	Если ТекСтрокаДерева.Выполнено Тогда
		УказатьЗавершитьРемонтныеРаботы = Истина;
		
		Для Каждого СтрокаРемонтыОборудования Из Объект.РемонтыОборудования Цикл
			Если Не СтрокаРемонтыОборудования.Выполнено Тогда
				УказатьЗавершитьРемонтныеРаботы = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если УказатьЗавершитьРемонтныеРаботы Тогда
			Объект.ЗавершитьРемонтныеРаботы = Истина;
		КонецЕсли;  
	КонецЕсли;
	// -- rarus selmik 24.03.2021
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
// Процедура выполняет заполнение процентов выполнения ремонтных работ.
//
// Параметры
//  СтрокаДерева – строка дерева ремонтных работ.
//
Процедура ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтруктураСтроки);
	
	Если НЕ СтруктураРодСтроки = Неопределено Тогда	
		РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураРодСтроки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоРемонтныхРабот");
	
КонецПроцедуры 

// Процедура выполняет заполнение процентов выполнения ремонтных работ.
//
// Параметры
//  СтрокаДерева – строка дерева ремонтных работ.
//
&НаСервере
Процедура ЗаполнитьПроцентВыполненияРемонтныхРаботВПодчиненныхСтроках(СтруктураСтроки, СтруктураРодСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	Если НЕ СтруктураРодСтроки = Неопределено Тогда	
		РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураРодСтроки);
	КонецЕсли;
	
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтруктураСтроки, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			
			мНайд = ТаблицаПроцентовВыполнения.НайтиСтроки(Новый Структура("IDРемонтнойРаботы", СтрДерева.ID)) ;
			СтрНайд = ?(мНайд.Количество() = 0, неопределено, мНайд[0]);
		СтрДерева.Выполнено = Истина;
			Если СтрНайд <> неопределено Тогда
				СтрДерева.ПроцентВыполненияРабот = 100 - СтрНайд.ПроцентВыполнения;
			Иначе
				СтрДерева.ПроцентВыполненияРабот = 100;
			КонецЕсли;
	        РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураСтроки);
		КонецЦикла; 
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоРемонтныхРабот");
	
КонецПроцедуры 

// Процедура проставляет проценты родительских строк
//
&НаСервереБезКонтекста
Процедура РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтрокаРодитель) Экспорт
	
	Если СтрокаРодитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроцентРодителя = 0;
	КоличествоПодчиненных = 0;
	ВыполненаВетка = Истина;
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтрокаРодитель, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];	
		
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			Если НЕ СтрДерева.Выполнено Тогда
			ВыполненаВетка = Ложь;
			КонецЕсли;
			ПроцентРодителя = ПроцентРодителя + СтрДерева.ПроцентВыполненияРабот * СтрДерева.Количество;
			КоличествоПодчиненных = КоличествоПодчиненных + СтрДерева.Количество;
			
		КонецЦикла;
		
		//КоличествоПодчиненных = ТекСтрока.Строки.Количество(); 
		
		Если КоличествоПодчиненных > 0 Тогда
			
			ТекСтрока.ПроцентВыполненияРабот = Окр(ПроцентРодителя / КоличествоПодчиненных, 2);
			ТекСтрока.Выполнено = ВыполненаВетка;
			
		КонецЕсли; 
		СтрРодитель = ТекСтрока.Родитель;
		Если НЕ СтрРодитель = Неопределено Тогда
			РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрРодитель.ID, СтрРодитель.РемонтыОборудования_ID, СтрРодитель.Родитель_ID));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасставитьПроцентыРодительскихСтрок()

// Процедура проставляет проценты у подчиненных строк
//
&НаСервереБезКонтекста
Процедура РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтрокаДерева) Экспорт
	
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтрокаДерева, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			
			СтрДерева.ПроцентВыполненияРабот = ТекСтрока.ПроцентВыполненияРабот;
			СтрДерева.Выполнено = ТекСтрока.Выполнено;
			РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID));
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры // РасставитьПроцентыПодчиненныхСтрок()

&НаКлиенте
Процедура ОбновитьПроцентВыполненияВСтрокахТЧ(СтрокаДерева)
	
	Если ЗначениеЗаполнено(СтрокаДерева.ID) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ID",СтрокаДерева.ID);
		СтруктураПоиска.Вставить("Родитель_ID",СтрокаДерева.Родитель_ID);
		СтруктураПоиска.Вставить("РемонтыОборудования_ID",СтрокаДерева.РемонтыОборудования_ID);
		
		СтрокиРемРаботы = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРемРаботы.Количество() <> 0 Тогда
			СтрокиРемРаботы[0].ПроцентВыполненияРабот = СтрокаДерева.ПроцентВыполненияРабот;
			СтрокиРемРаботы[0].Выполнено = СтрокаДерева.Выполнено;
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ОбновитьПроцентВыполненияВСтрокахТЧ(ТекСтрокаДерева);
	КонецЦикла;
	
	Элементы.РемонтыОборудования.ТекущиеДанные.Выполнено = СтрокаДерева.Выполнено;
	
	Если СтрокаДерева.Выполнено И (Не Элементы.РемонтыОборудования.ТекущиеДанные.ДатаОкончанияИзменена ИЛИ Не ЗначениеЗаполнено(Элементы.РемонтыОборудования.ТекущиеДанные.ДатаОкончания)) Тогда
		Элементы.РемонтыОборудования.ТекущиеДанные.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеВыполненияКлиент()
	//
	//РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	//
	//Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
	//	ВОзврат;
	//КонецЕсли;
	//
	//СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
	//
	//Выполнено = Истина;
	//
	//Для Каждого СтрокаРР из СтрокиРР Цикл
	//	Если  НЕ  СтрокаРР.Выполнено Тогда
	//		Выполнено = Ложь;
	//		Объект.ЗавершитьРемонтныеРаботы = Ложь;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	//Элементы.РемонтыОборудования.ТекущиеДанные.Выполнено = Выполнено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.ID));
	
	Для Каждого СтрокаРР из СтрокиРР Цикл
		СтрокаРР.Количество = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные.Количество;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыВыбораНоменклатуры()
	
	Если Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);
		
		ПараметрыВыбораМассив = Новый Массив;
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(МассивЗапчастей)));
		Элементы.ЗапчастиРемонтаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);		
		Элементы.ЗапчастиРемонтаНоменклатура.СписокВыбора.ЗагрузитьЗначения(МассивЗапчастей);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
		ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	Иначе
		ТекстПредупреждения = НСтр("ru = 'Запчасти можно указывать только для технологических операций!'");
	КонецЕсли;
	
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты 
		И ЗначениеЗаполнено(ТекСтрокаДереваРемонтныхРабот.РемонтнаяРабота) Тогда
		
		МассивЗапчастей = ПолучитьМассивНоменклатурыДляТехОперации(ТекСтрокаДереваРемонтныхРабот.РемонтнаяРабота);
		
	ИначеЕсли Не Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
		ОбъектРемонта = Элементы.РемонтыОборудования.ТекущиеДанные.ОбъектРемонта;
		МассивЗапчастей = ПолучитьМассивЗапчастейДляОР(ОбъектРемонта);
	Иначе
		МассивЗапчастей = Новый Массив;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                    НСтр("ru = 'Подбор номенклатуры'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок",                    НСтр("ru = 'Подбор инструментов и техники'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("Дата",                             ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                         Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",		"ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборНоменклатуры",				МассивЗапчастей);
	// ++ rarus makole 2021-08-11 [РАIT-0023494]
	ПараметрыФормы.Вставить("Судно",						 	Объект.Подразделение);
	// -- rarus makole 2021-08-11 [РАIT-0023494]
	
	ОткрытьФорму("Обработка.впПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

// ++ rarus selmik 05.03.2021
&НаСервереБезКонтекста
Функция ПолучитьМассивНоменклатурыДляТехОперации(ТехОперация)

	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехнологическиеОперацииМатериальныеЗатраты.Номенклатура КАК Номенклатура
	|ИЗ
	|	Справочник.впТехнологическиеОперации.МатериальныеЗатраты КАК впТехнологическиеОперацииМатериальныеЗатраты
	|ГДЕ
	|	впТехнологическиеОперацииМатериальныеЗатраты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехОперация);
	
	Выборка = Запрос.Выполнить().Выбрать();

	МассивЗапчастей = Новый Массив;
	Пока Выборка.Следующий() Цикл;
		МассивЗапчастей.Добавить(Выборка.Номенклатура);
	КонецЦикла;

	Возврат МассивЗапчастей;
	
КонецФункции // -- rarus selmik 05.03.2021


&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.Имяформы = "Обработка.впПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекДанныеРемонты = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено ИЛИ ТекДанныеРемонты = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
			ИмяТЧ = "Инструменты";
			ИмяРеквизита = "Инструмент";
		Иначе
			ИмяТЧ = "ЗапчастиРемонта";
			ИмяРеквизита = "Номенклатура";
		КонецЕсли;
		
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемонты.ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" ИЛИ ИмяТЧ = "ЗапчастиРемонта" Тогда
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Номенклатура", РемонтыОборудования_ID, текСтрока.Номенклатура);
		Иначе
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, Инструмент", РемонтыОборудования_ID, текСтрока.Номенклатура);
		КонецЕсли;
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска); 
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.Количество 					= текСтрока.Количество;
			
			
			нс.ID 							= ID;
			нс.РемонтыОборудования_ID 		= РемонтыОборудования_ID;
			
		Иначе
			
			нс = НайС[0];
			
			КоличествоЕдиниц = (нс.Количество + текСтрока.Количество);
			нс.Количество = КоличествоЕдиниц;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Объект.ЗавершитьРемонтныеРаботы и ПараметрыЗаписи.РежимЗаписи  = РежимЗаписиДокумента.Проведение Тогда
		Для Каждого СтрокаНаработки из УчетНаработки Цикл
			СтрокаРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", СтрокаНаработки.НаработкаПоРемонту))[0];
			Если ЗначениеЗаполнено(СтрокаНаработки.Регистратор) Тогда
				НаработкаДок = СтрокаНаработки.Регистратор.ПолучитьОбъект();
				НаработкаДок.НаработкаОбъектов.Очистить();
			Иначе
				НаработкаДок = Документы.впУчетНаработкиОборудования.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(НаработкаДок, Объект, "Подразделение, Ответственный, Организация");
			КонецЕсли;
			
			НаработкаДок.Дата = СтрокаРемонта.ДатаОкончания;
			ТаблицаНаработки = УчетНаработки.Выгрузить();
			ТаблицаНаработки.ЗаполнитьЗначения(СтрокаРемонта.ОбъектРемонта, "ОбъектРемонта");
			// rarus evgenu 2020_12_11 ++ 
			//НаработкаДок.НаработкаОбъектов.Загрузить(ТаблицаНаработки);
			ЗаписыватьДокумент = Ложь;
			Для Каждого СтрокаТаблицы Из ТаблицаНаработки Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.НовоеЗначение) Тогда
					ЗаписыватьДокумент = Истина;
					нСтрока = НаработкаДок.НаработкаОбъектов.Добавить();
					ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТаблицы);
				КонецЕсли;
			КонецЦикла;
			// rarus evgenu 2020_12_11 --
			
			Попытка
				// rarus evgenu 2020_12_11 ++
				Если ЗаписыватьДокумент Тогда 
					Если НаработкаДок.ПометкаУдаления Тогда
						НаработкаДок.ПометкаУдаления = Ложь;
					КонецЕсли;
					// rarus evgenu 2020_12_11 --
				НаработкаДок.Записать(РежимЗаписиДокумента.Проведение);
					// rarus evgenu 2020_12_11 ++ 
				ИначеЕсли ЗначениеЗаполнено(НаработкаДок.Ссылка) Тогда
					НаработкаДок.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					НаработкаДок.УстановитьПометкуУдаления(Истина);
				КонецЕсли;
				// rarus evgenu 2020_12_11 --
			Исключение
				Сообщить(ОписаниеОшибки());
				Отказ = Истина;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ЗавершитьРемонтныеРаботы и ПараметрыЗаписи.РежимЗаписи  = РежимЗаписиДокумента.Проведение и СообщенияДляПроверки.Количество() <> 1 Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Проверьте/отразите ЗИП и материальные затраты в режиме проверки акта!",,,, Отказ);
	КонецЕсли;
	
	// ++ rarus selmik 27.01.2021
	Если Не Отказ И Не ПараметрыЗаписи.Свойство("ВопросЗадан") И УчетНаработки.Количество() > 0 
			И Объект.ЗавершитьРемонтныеРаботы И ПараметрыЗаписи.РежимЗаписи  = РежимЗаписиДокумента.Проведение
			И ВывестиСообщениеПроверкаНаработки() Тогда
		Если vftОбщегоНазначенияВызовСервера.ЭтоПолноправныйПользовательИБ() Тогда	
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗарегистрироватьНаработкуЗавершение", ЭтаФорма, ПараметрыЗаписи),
													"Возможно, введены некорректные показания счетчика." + Символы.ПС + 
													"Значение наработки за период с " + Формат(УчетНаработки[0].ДатаРаботыС, "ДФ=dd.MM.yyyy") + 
													" по " + Формат(УчетНаработки[0].ДатаРаботыПо, "ДФ=dd.MM.yyyy") + 
													", не должно быть меньше нуля и больше 24 часов в сутки."+ Символы.ПС +
													"Продолжить?", РежимДиалогаВопрос.ДаНет);
		Иначе
			ПоказатьПредупреждение(, 	"Введены некорректные показания счетчика." + Символы.ПС + 
										"Значение наработки за период с " + Формат(УчетНаработки[0].ДатаРаботыС, "ДФ=dd.MM.yyyy") + 
										" по " + Формат(УчетНаработки[0].ДатаРаботыПо, "ДФ=dd.MM.yyyy") + 
										",  не должно быть меньше нуля и больше 24 часов в сутки.");
		КонецЕсли;	
		Отказ = Истина;
		
	КонецЕсли;
	// -- rarus selmik 27.01.2021
КонецПроцедуры

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура ЗарегистрироватьНаработкуЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи.Вставить("ВопросЗадан", Истина);
		Если Записать(ПараметрыЗаписи) И ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // -- rarus selmik 27.01.2021

// ++ rarus selmik 27.01.2021
&НаСервере
Функция ВывестиСообщениеПроверкаНаработки()
	ВременнаяТаблица = УчетНаработки.Выгрузить(,"ДатаРаботыПо, ДатаРаботыС, НовоеЗначение, СтароеЗначение").СкопироватьКолонки();
	
	Для Каждого СтрокаНаработки Из УчетНаработки Цикл
		Если ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыС) И ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыПо) И СтрокаНаработки.НовоеЗначение > 0 Тогда
			Если СтрокаНаработки.ДатаРаботыС = СтрокаНаработки.ДатаРаботыПо И СтрокаНаработки.Наработка > 0 И СтрокаНаработки.Наработка <= 24 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНаработки Из УчетНаработки Цикл
		Если ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыС) И ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыПо) И СтрокаНаработки.НовоеЗначение > 0 Тогда
			СтрокаВТ = ВременнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВТ, СтрокаНаработки);
		КонецЕсли;
	КонецЦикла;
	
	Если ВременнаяТаблица.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(ДанныеФормы.ДатаРаботыС, ДанныеФормы.ДатаРаботыПо, ЧАС) КАК ЧасовМеждуДатами,
		|	ДанныеФормы.НовоеЗначение - ДанныеФормы.СтароеЗначение КАК РазностьЗначений
		|ПОМЕСТИТЬ Вт_ПредварительнаяВыборка
		|ИЗ
		|	&ДанныеФормы КАК ДанныеФормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт_ПредварительнаяВыборка.ЧасовМеждуДатами КАК ЧасовМеждуДатами,
		|	Вт_ПредварительнаяВыборка.РазностьЗначений КАК РазностьЗначений
		|ИЗ
		|	Вт_ПредварительнаяВыборка КАК Вт_ПредварительнаяВыборка
		|ГДЕ
		|	(Вт_ПредварительнаяВыборка.РазностьЗначений > Вт_ПредварительнаяВыборка.ЧасовМеждуДатами
		|			ИЛИ Вт_ПредварительнаяВыборка.ЧасовМеждуДатами = 0
		|			ИЛИ Вт_ПредварительнаяВыборка.РазностьЗначений <= 0)";
		
		Запрос.УстановитьПараметр("ДанныеФормы", ВременнаяТаблица);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;			
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // -- rarus selmik 27.01.2021

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 ++
	Оповестить("впАктОВыполненииЭтапаРабот_Запись");
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 --
	
	//Если (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись или ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) и НЕ Объект.ПометкаУдаления Тогда
	//	Попытка
	//		ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	//	Исключение
	//		Сообщить(ОписаниеОшибки());
	//	КонецПопытки;
	//КонецЕсли;
	//
	//Оповестить("ОбновитьРемонты");
	
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПриАктивизацииСтроки(Элемент)
	Элементы.УчетНаработки.ТолькоПросмотр = НЕ Объект.ЗавершитьРемонтныеРаботы;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиНовоеЗначениеПриИзменении(Элемент)
	
	ТекДанные = Элементы.УчетНаработки.ТекущиеДанные;
	Если ТекДанные.СтароеЗначение >  ТекДанные.НовоеЗначение Тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("УчетНаработкиНовоеЗначениеЗавершение", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Новое значение счетчика меньше предыдущего. Вы уверены?'"), Режим, 0);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.СтароеЗначение) И ЗначениеЗаполнено(ТекДанные.НовоеЗначение) Тогда
		ТекДанные.Наработка = ТекДанные.НовоеЗначение - ТекДанные.СтароеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиНовоеЗначениеЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Элементы.УчетНаработки.ТекущиеДанные.НовоеЗначение 	=  0;
		Элементы.УчетНаработки.ТекущиеДанные.Наработка 		=  0;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура РемонтыОборудованияДатаОкончанияПриИзменении(Элемент)
	РемонтыОборудованияПриАктивизацииСтроки(Элемент);
	// ++ rarus selmik 24.02.2021
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не vftОбщегоНазначенияВызовСервера.ЭтоПолноправныйПользовательИБ() И ТекущиеДанные.ДатаОкончания > ТекущаяДата() Тогда
		ТекущиеДанные.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
	ТекущиеДанные.ДатаОкончанияИзменена = Истина;
	// -- rarus selmik 24.02.2021

КонецПроцедуры


&НаКлиенте
Процедура ОтразитьЗатраты(Команда)
	Элементы.ДеревоРемонтныхРаботОтразитьЗатраты.Пометка = НЕ Элементы.ДеревоРемонтныхРаботОтразитьЗатраты.Пометка;
	Элементы.ПанельЗатрат.Видимость =  Элементы.ДеревоРемонтныхРаботОтразитьЗатраты.Пометка;
	// ++ rarus selmik 27.01.2021
	Элементы.СообщениеДляПроверки.Видимость = Элементы.ПанельЗатрат.Видимость;
	
	Если Элементы.ПанельЗатрат.Видимость Тогда
		
		Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ГруппаМатериальныеЗатраты;
		УстановитьСообщениеОПроверке();
		
	КонецЕсли;
	// -- rarus selmik 27.01.2021
КонецПроцедуры

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура УстановитьСообщениеОПроверке()
	Если СообщенияДляПроверки.Количество() > 0 Тогда
		СообщениеДляПроверки = СообщенияДляПроверки[0].Сообщение;
	КонецЕсли;
	
	Если СообщенияДляПроверки.Количество() = 1 Тогда
		Элементы.СообщениеДляПроверки.ЦветТекста = WebЦвета.Зеленый;
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ПанельЗатратПриСменеСтраницы(Элемент, ТекущаяСтраница)
	// ++ rarus selmik 27.01.2021
	СтруктураПоиска = Новый Структура("Идентификатор", ТекущаяСтраница.Имя);
	НайденныеСтроки = СообщенияДляПроверки.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		СообщенияДляПроверки.Удалить(НайденныеСтроки[0]);
	КонецЕсли;
	
	УстановитьСообщениеОПроверке();
	// -- rarus selmik 27.01.2021
	
КонецПроцедуры


&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
		ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные; 
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("МатериальныеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("Инструменты");
	СтруктураСвязанныхТЧ.Вставить("ТрудовыеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
 		
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
			
			ТабличнаяЧасть = Объект[КлючИЗначение.Ключ];
		
			ПараметрыПоиска = Новый Структура;
			ПараметрыПоиска.Вставить("РемонтыОборудования_ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		
			СтрокиКУдалению = ТабличнаяЧасть.НайтиСтроки(ПараметрыПоиска);
			
			Для Каждого Строка Из СтрокиКУдалению Цикл
				
				ТабличнаяЧасть.Удалить(Строка);
				
			КонецЦикла;		    
						
		КонецЦикла;

		Модифицированность = Истина;
		
		Отказ = Истина;

	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоРемонтныхРабот.ВыделенныеСтроки;
		МассивСтрокДляУдаления = Новый Массив;
		
		Для каждого Стр Из ВыделенныеСтроки Цикл 
			Строка = ДеревоРемонтныхРабот.НайтиПоИдентификатору(Стр);
			Если Строка <> Неопределено И Строка.РемонтнаяРабота <> "Ремонтные работы" Тогда 
				МассивСтрокДляУдаления.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;		
		
		Для каждого Элемент Из МассивСтрокДляУдаления Цикл
			СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
			Элемент.ID, Элемент.РемонтыОборудования_ID, Элемент.Родитель_ID, Элемент.РемонтнаяРабота);
			УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи, СтруктураСвязанныхТЧ);
			
			СтрокаРодителя = Элемент.ПолучитьРодителя();
			Если СтрокаРодителя <> Неопределено Тогда 
				СтрокаРодителя.ПолучитьЭлементы().Удалить(Элемент); 
			КонецЕсли; 

		КонецЦикла;
		Модифицированность = Истина;
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиБСП

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	ПараметрыЗаписи = Новый Структура();
	ПараметрыЗаписи.Вставить("РежимЗаписи", ПредопределенноеЗначение("РежимЗаписиДокумента.Проведение"));
	ПараметрыЗаписи.Вставить("Закрыть", Истина);
	
	Если Записать(ПараметрыЗаписи) Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры  // -- rarus selmik 27.01.2021

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура УчетНаработкиНаработкаПриИзменении(Элемент)
	
	СтрокаНаработки = Элементы.УчетНаработки.ТекущиеДанные;	
	СтрокаНаработки.НовоеЗначение = СтрокаНаработки.Наработка + СтрокаНаработки.СтароеЗначение;
	
КонецПроцедуры // ++ rarus selmik 27.01.2021

// ++ rarus selmik 02.02.2021
&НаСервере
Функция ТрудовыеЗатратыКвалификацияПриИзмененииНаСервере(Квалификация)
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.Заведование КАК Заведование,
	|	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.рарусСоответствиеПользователяФизическомуЛицу.СрезПоследних(&НаДату, Заведование = &Квалификация) КАК рарусСоответствиеПользователяФизическомуЛицуСрезПоследних";
	
	Запрос.УстановитьПараметр("Квалификация"		, Квалификация);
	Запрос.УстановитьПараметр("НаДату"				, Объект.Дата);
	
	РезультатЗапроса = Запрос.Выполнить();			
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ФизическоеЛицо;			
	КонецЕсли;
	
	Возврат Неопределено;	

КонецФункции // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ТрудовыеЗатратыКвалификацияПриИзменении(Элемент)
	ДанныеСтроки = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	ДанныеСтроки.ФизическоеЛицо = ТрудовыеЗатратыКвалификацияПриИзмененииНаСервере(ДанныеСтроки.Квалификация);
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ИсполнителиПоРемонтамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 02.02.2021
&НаКлиенте
Процедура ИсполнителиПоРемонтамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.впТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры // -- rarus selmik 02.02.2021

// ++ rarus selmik 24.02.2021
&НаКлиенте
Процедура РемонтыОборудованияДатаНачалаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не vftОбщегоНазначенияВызовСервера.ЭтоПолноправныйПользовательИБ() И ТекущиеДанные.ДатаНачала > ТекущаяДата() Тогда
		ТекущиеДанные.ДатаНачала = ТекущаяДата();
	КонецЕсли;
КонецПроцедуры // -- rarus selmik 24.02.2021

// ++ rarus selmik 24.03.2021
&НаКлиенте
Процедура РемонтыОборудованияДатаОкончанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекущиеДанные.ДатаНачала > ВыбранноеЗначение Тогда
		ШаблонСообщения = НСтр("ru = 'В строке номер %1, списка ремонтные работы, дата начала периода ремонтных работ больше даты окончания (%2 - %3).'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения,	ТекущиеДанные.НомерСтроки, ТекущиеДанные.ДатаНачала, ВыбранноеЗначение);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		СтандартнаяОбработка = Ложь
	КонецЕсли;

КонецПроцедуры // -- rarus selmik 24.03.2021

//RARUS-NN EvgenU РАIT-0023371 2021_06_16 ++
&НаКлиенте
Процедура ПодборРабот(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
	ПараметрыФормы.Вставить("ВладелецДата", Объект.Дата);
	ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыФормы.Вставить("СписокИД", Объект.РемонтыОборудования);

	
	ОткрытьФорму("Документ.впЗаявкаНаРемонт.Форма.ПодборРемонтов", 
				ПараметрыФормы, Элементы.РемонтыОборудования, Объект.Ссылка);
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023371 2021_06_16 --

//RARUS-NN EvgenU РАIT-0023371 2021_06_16 ++
&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Для Каждого СтрВыбр из ВыбранноеЗначение Цикл
		СтрДоб = Объект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрДоб, СтрВыбр);
		ЗаполнитьСвязТЧКлиент(СтрДоб);
		Если Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", СтрВыбр.ДокументИсточник)).Количество() = 0 Тогда
			Объект.ДокументыОснования.Добавить().ДокументОснование = СтрВыбр.ДокументИсточник;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023371 2021_06_16 --

//RARUS-NN EvgenU РАIT-0023371 2021_06_16 ++
&НаКлиенте
Процедура ЗаполнитьСвязТЧКлиент(СтрДоб)     
	
	ДобавитьИсполнителяСервер(СтрДоб.ID, СтрДоб.ОбъектРемонта);
	СтруктураТК =  впОбщиеПроцедурыДокументовТОИР.НайтиТехкартуОР(СтрДоб.ВидРемонтныхРабот, СтрДоб.ОбъектРемонта);
	Если НЕ СтруктураТК = Неопределено Тогда
		РемонтыОборудованияОбработкаВыбораЗавершениеNew(СтрДоб, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СтруктураТК.Техкарта));
	КонецЕсли;
	
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023371 2021_06_16 --

//RARUS-NN EvgenU РАIT-0023371 2021_06_16 ++
&НаКлиенте
Процедура РемонтыОборудованияОбработкаВыбораЗавершениеNew(СтрДоб, ВыбранноеЗначение)
	
	СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
	ИДВыбраннойСтроки = "";
	
	РемонтыОборудования_ID = "";
	ДатаНачалаРемонта      = Неопределено;       
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, ДатаНачалаРемонта"
	, СтрДоб.ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрДоб.ДатаНачала);
	
	РемонтыОборудованияОбработкаВыбораСерверNew(ВыбранноеЗначение, ТекущиеДанные);
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	Модифицированность = Истина;
	
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023371 2021_06_16 --

//RARUS-NN EvgenU РАIT-0023371 2021_06_16 ++
&НаСервере
Процедура РемонтыОборудованияОбработкаВыбораСерверNew(ВыбранноеЗначение, ТекущиеДанные)
	
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
			Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
				МассивСтруктурВозврата.Добавить(СтруктураВозврата);
			КонецЕсли;
		КонецЦикла;	
	Иначе
		СтруктураВозврата = впОбщиеПроцедурыДокументовТОИР.ОбработкаВыбораРемонта(ДеревоРеквизит, ВыбранноеЗначение, Объект, Объект.РемонтыОборудования, Объект.РемонтныеРаботы, Объект.ДокументыОснования, ТекущиеДанные);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивСтруктурВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
	КонецЕсли;

	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			ОбщегоНазначения.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;

	ЗначениеВРеквизитФормы(ДеревоРеквизит, "ДеревоРемонтныхРабот");
	
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023371 2021_06_16 --

//RARUS-NN EvgenU РАIT-0023371 2021_06_16 ++
&НаСервере
Процедура ДобавитьИсполнителяСервер(ID,ОбъектРемонта)
	
	СтрокаИсп = Объект.ИсполнителиПоРемонтам.Добавить();
	СтрокаИсп.РемонтыОборудования_ID = ID;
	СтрокаИсп.Исполнитель = ОбъектРемонта.ПодразделениеИсполнитель;
	
	Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = ОбъектРемонта.ПодразделениеИсполнитель;
	КонецЕсли;
	
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023371 2021_06_16 --


#КонецОбласти

#Область Штрихкодирование
// ++ rarus yukuzi 25.02.2021   // ФТ.СНБ.02. Задача_Штрихкодирование
&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
 рарусШтрихкодированиеКлиент.ВыполнитьКомандуШтрихкодирование(ЭтаФорма, ПолучитьИмяРеквизита(Команда.ИспользуемаяТаблица.Имя), Команда);
	
КонецПроцедуры
&НаСервере
Функция ПолучитьИмяРеквизита(ТаблицаФормыИмя)
Возврат рарусШтрихкодирование.ПолучитьИмяРеквизита(Элементы[ТаблицаФормыИмя].ПутьКДанным);
КонецФункции 
// -- rarus yukuzi 25.02.2021
#КонецОбласти
