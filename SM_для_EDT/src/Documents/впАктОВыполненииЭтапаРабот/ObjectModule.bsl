
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ++ rarus makole 2021-07-02
	// Проведённый завершённый документ не может быть распроведён
	Если НЕ Отказ
		И НЕ ОбменДанными.Загрузка
		И Проведен
		И ЗавершитьРемонтныеРаботы
		// rarus makole 2021-08-11
		//И (Модифицированность() ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
		И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// rarus makole 2021-08-11
		//Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Ремонтные работы по документу завершены, отмена проведения не предусмотрена",,,,Отказ);
		
	КонецЕсли;
	// -- rarus makole 2021-07-02
	
	// ++ rarus makole 2021-08-06 [РАIT-0023494]
	// Контроль остатков ТМЦ
	Если рарусИмущественныйУчетСервер.КонтролироватьОстаткиТМЦДляДокумента(ЭтотОбъект) Тогда
		ПроверитьОстаткиТМЦКСписанию(Отказ);
	КонецЕсли;
	// -- rarus makole 2021-08-06 [РАIT-0023494]
	
	// ++ rarus selmik 29.03.2021
	Если Не Отказ Тогда
		ОбъектыРемонтаСтрокой_ДоИзменения = ОбъектыРемонтаСтрокой;
		ОбъектыРемонтаСтрокой_НовоеЗначение = "";
		
		РемонтыОборудованияТЗ = РемонтыОборудования.Выгрузить(,"ОбъектРемонта");
		РемонтыОборудованияТЗ.Свернуть("ОбъектРемонта");
		
		Для Каждого	ЭлементОбъектРемонта Из РемонтыОборудованияТЗ Цикл
			Если ЗначениеЗаполнено(ЭлементОбъектРемонта.ОбъектРемонта) Тогда
				
				Если Не ЗначениеЗаполнено(ОбъектыРемонтаСтрокой_НовоеЗначение) Тогда
					ОбъектыРемонтаСтрокой_НовоеЗначение = ЭлементОбъектРемонта.ОбъектРемонта.Наименование;
				Иначе
					ОбъектыРемонтаСтрокой_НовоеЗначение = ОбъектыРемонтаСтрокой_НовоеЗначение + "; " + ЭлементОбъектРемонта.ОбъектРемонта.Наименование;
				КонецЕсли;
				
			КонецЕсли;			
		КонецЦикла;
		
		Если ОбъектыРемонтаСтрокой_ДоИзменения <> ОбъектыРемонтаСтрокой_НовоеЗначение Тогда
			ОбъектыРемонтаСтрокой = ОбъектыРемонтаСтрокой_НовоеЗначение;	
		КонецЕсли;
	КонецЕсли;
	// -- rarus selmik 29.03.2021
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РР", РемонтныеРаботы);
	// rarus evgenu 2020_12_21 ++ 
	Запрос.УстановитьПараметр("РО", РемонтыОборудования);
	// rarus evgenu 2020_12_21 --
	Запрос.УстановитьПараметр("Период", МоментВремени().Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	РР.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	РР.ID КАК ID,
	               |	РР.ПроцентВыполненияРабот КАК ПроцентВыполненияРабот,
	               |	РР.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	               |ПОМЕСТИТЬ вт
	               |ИЗ
	               |	&РР КАК РР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               // rarus evgenu 2020_12_21 ++ 
				   |ВЫБРАТЬ
	               |	РО.ДатаНачала КАК ДатаНачала,
	               |	РО.ДатаОкончания КАК ДатаОкончания,
	               |	РО.ID КАК РемонтыОборудования_ID
	               |ПОМЕСТИТЬ вт1
	               |ИЗ
	               |	&РО КАК РО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
				   // rarus evgenu 2020_12_21 --
				   |ВЫБРАТЬ
	               |	&Период КАК Период,
	               |	СРЕДНЕЕ(вт.ПроцентВыполненияРабот) КАК ПроцентВыполнения,
	               |	вт.РемонтыОборудования_ID КАК IDРемонта,
	               |	вт.РемонтнаяРабота КАК РемонтнаяРабота,
	               // rarus evgenu 2020_12_21 ++ 
	               |	МИНИМУМ(вт1.ДатаНачала) КАК ДатаНачала,
	               |	МАКСИМУМ(вт1.ДатаОкончания) КАК ДатаОкончания,
				   // rarus evgenu 2020_12_21 --
				   |	вт.ID КАК IDРемонтнойРаботы
	               |ИЗ
	               |	вт КАК вт
	               // rarus evgenu 2020_12_21 ++ 
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт1 КАК вт1
				   |        	ПО вт.РемонтыОборудования_ID = вт1.РемонтыОборудования_ID
				   // rarus evgenu 2020_12_21 --
				   |
	               |СГРУППИРОВАТЬ ПО
	               |	вт.РемонтыОборудования_ID,
	               |	вт.ID,
				   |	вт.РемонтнаяРабота";
	
	ТаблицаВыполненияРемонтов = Запрос.Выполнить().Выгрузить();
	
	МассивПересечений = Новый Массив;

	ТаблицаВыполненияРемонтовПроцент = впОбщиеПроцедурыДокументовТОИР.ПолучитьПроцентыВыполнения(Ссылка, РемонтыОборудования.ВыгрузитьКолонку("ID"));
	
	Для Каждого стрЗаписей из ТаблицаВыполненияРемонтовПроцент Цикл
		стрНайд = ТаблицаВыполненияРемонтов.НайтиСтроки(Новый Структура("IDРемонта, IDРемонтнойРаботы", стрЗаписей.IDРемонта, стрЗаписей.IDРемонтнойРаботы));
		Если стрНайд.Количество() > 0 и стрНайд[0].ПроцентВыполнения + стрЗаписей.ПроцентВыполнения > 100 Тогда
			СтрРемонта = РемонтыОборудования.НайтиСтроки(Новый Структура("ID", стрЗаписей.IDРемонта))[0];
			МассивПересечений.Добавить(СтрШаблон("Срока ремонта: %1; Ремонт: %2" ,Строка(СтрРемонта.НомерСтроки), Строка(стрНайд[0].РемонтнаяРабота)));
		КонецЕсли;
	КонецЦикла;
	ТекстОшибки = ""; 
	Для Каждого СтрПересечения из МассивПересечений Цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС + Строка(СтрПересечения);
	КонецЦикла;
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначения.СообщитьПользователю(СтрШаблон(НСтр("ru='Для работ документа превышен процент выполнения! %1'"), ТекстОшибки));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// ++ rarus selmik 31.12.2020 25003
	ПроверкаОбязательностьНаличияФайла(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// -- rarus selmik 31.12.2020 25003

	
	// ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
	// Исключено формирование расхода по товарам на складах здесь. 
	// Движения формируются вводимым на основании документом РасходТМЦ по РН рарусИмуществоНаСудах.
	//Движения.впТоварыНаСкладах.Записывать = Истина;
	//Для Каждого Стр Из МатериальныеЗатраты Цикл
	//	Движение = Движения.впТоварыНаСкладах.Добавить();
	//	Движение.Период 			= МоментВремени().Дата;
	//	//Движение.IDРемонта			= Стр.РемонтыОборудования_ID;
	//	Движение.Судно			= Подразделение;
	//	Движение.Номенклатура			= Стр.Номенклатура;
	//	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	//	Движение.ВНаличии			= Стр.Количество;
	//КонецЦикла;		
	//Для Каждого Стр Из ЗапчастиРемонта Цикл
	//	Движение = Движения.впТоварыНаСкладах.Добавить();
	//	Движение.Период 			= МоментВремени().Дата;
	//	//Движение.IDРемонта			= Стр.РемонтыОборудования_ID;
	//	Движение.Судно			= Подразделение;
	//	Движение.Номенклатура			= Стр.Номенклатура;
	//	Движение.ВидДвижения			= ВидДвиженияНакопления.Расход;
	//	Движение.ВНаличии			= Стр.Количество;
	//КонецЦикла;	
	// -- rarus atyutyakin 28.02.2021
	
	ТаблицаЗаписейРегистра = впОбщиеПроцедурыДокументовТОИР.ПолучитьТаблицуРемонтов(РемонтыОборудования, Ссылка);
	
	Для Каждого СтрМассива из ТаблицаЗаписейРегистра Цикл
		Запись = РегистрыСведений.впПланГрафикППР.СоздатьМенеджерЗаписи();
		Запись.УникальныйИдентификатор = СтрМассива.УникальныйИдентификатор;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			ЗаполнитьЗначенияСвойств(Запись, СтрМассива);
			Запись.ЕстьАкт = Истина;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
	Движения.впАктыПоРемонтам.Записывать = Истина;
	
	Движения.впАктыПоРемонтам.Загрузить(ТаблицаВыполненияРемонтов);
	
	// rarus evgenu 2020_12_09 ++ 
	Движения.впПроцентВыполненныхРабот.Записывать = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.впВидДокумента.АктОВыполненииЭтапаРабот) КАК ВидДокумента,
	|	РемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	РемонтныеРаботы.РемонтнаяРабота КАК Операция,
	|	РемонтныеРаботы.Родитель_ID КАК IDРодителя,
	|	РемонтныеРаботы.ID КАК ID,
	|	РемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	РемонтныеРаботы.ПроцентВыполненияРабот КАК Процент
	|ИЗ
	|	Документ.впАктОВыполненииЭтапаРабот.РемонтныеРаботы КАК РемонтныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
	|		ПО РемонтныеРаботы.Ссылка = РемонтыОборудования.Ссылка
	|			И РемонтныеРаботы.РемонтыОборудования_ID = РемонтыОборудования.ID
	|ГДЕ
	|	РемонтныеРаботы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Движения.впПроцентВыполненныхРабот.Загрузить(Запрос.Выполнить().Выгрузить());
	// rarus evgenu 2020_12_09 --
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	ТаблицаЗаписейРегистра = впОбщиеПроцедурыДокументовТОИР.ПолучитьТаблицуРемонтов(РемонтыОборудования, Ссылка);
	
	Для Каждого СтрРемРег из ТаблицаЗаписейРегистра Цикл
		Запись = РегистрыСведений.впПланГрафикППР.СоздатьМенеджерЗаписи();
		Запись.УникальныйИдентификатор = СтрРемРег.УникальныйИдентификатор;
		Запись.Прочитать();
		Если Запись.Выбран() Тогда
			Запись.Завершен = Ложь;
			Запись.ЕстьАкт = Ложь;
			Запись.ДатаНачалаФакт = Неопределено;
			Запись.ДатаОкончанияФакт = Неопределено;
			Запись.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	Если ДанныеЗаполнения  = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ++ rarus selmik 24.02.2021
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Количество() = 1 И ДанныеЗаполнения.Свойство("Подразделение") Тогда
		Подразделение = ДанныеЗаполнения.Подразделение;
		//RARUS-NN EvgenU РАIT-0023371 2021_06_11 ++
		//Возврат;
		//RARUS-NN EvgenU РАIT-0023371 2021_06_11 --
	КонецЕсли;
	// -- rarus selmik 24.02.2021
	
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 ++
	Попытка
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 --
	
	Дата = ДанныеЗаполнения.Дата+1;
	Подразделение = ДанныеЗаполнения.Подразделение;
	Организация = ДанныеЗаполнения.Организация;
	Ответственный = Пользователи.ТекущийПользователь();
	
	ДокументыОснования.Добавить().ДокументОснование = ДанныеЗаполнения;
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 ++
	Исключение
	КонецПопытки;
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 --
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.впЗаявкаНаРемонт") Тогда
		
		Для Каждого ТЧ из  ДанныеЗаполнения.Метаданные().ТабличныеЧасти Цикл
			Если ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти(ТЧ.Имя) = неопределено или ТЧ.Имя = "ДокументыОснования" Тогда
				продолжить;
			КонецЕсли;
			Для Каждого СтрокаТаблицы из ДанныеЗаполнения[ТЧ.Имя] Цикл
				СтрокаДобавл = ЭтотОбъект[ТЧ.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
				Если  ТЧ.Имя = "РемонтыОборудования" Тогда
					СтрокаДобавл.ДатаНачала = ТекущаяДатаСеанса();
					СтрокаДобавл.ДатаОкончания = ТекущаяДатаСеанса();
					СтрокаДобавл.ДокументИсточник = ДанныеЗаполнения;
				КонецЕсли;	 
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.впВыявленныеДефекты") Тогда
		
		Для Каждого СтрокаТаблицы из ДанныеЗаполнения.СписокДефектов Цикл
			СтрокаДобавл = РемонтыОборудования.Добавить();
			СтрокаДобавл.ID = СтрокаТаблицы.ID;
			СтрокаДобавл.ИДДефекта = СтрокаТаблицы.ID;
			СтрокаДобавл.ДатаНачала = ДанныеЗаполнения.Дата;
			СтрокаДобавл.ДатаОкончания = ДанныеЗаполнения.Дата;
			СтрокаДобавл.ОбъектРемонта = СтрокаТаблицы.ОтказавшийЭлемент;
			СтрокаДобавл.КритичностьДефекта = СтрокаТаблицы.КритичностьДефекта;
			СтрокаДобавл.ДокументИсточник = ДанныеЗаполнения;
			СтрокаДобавл.ОписаниеРемонта = СтрокаТаблицы.ДефектОписание;
			СтрокаДобавл.ВидРемонтныхРабот = Константы.впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
			СтрокаДобавл.ЗакрываетПредписание = СтрокаТаблицы.ЗакрываетПредписание;
			СтрокаДобавл = ИсполнителиПоРемонтам.Добавить();
			СтрокаДобавл.РемонтыОборудования_ID = СтрокаТаблицы.ID;
			СтрокаДобавл.Исполнитель = СтрокаТаблицы.ОтказавшийЭлемент.ПодразделениеИсполнитель;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.впВнешнееОснованиеДляРабот") Тогда
		
		Для Каждого СтрокаТаблицы из ДанныеЗаполнения.ОбследованноеОборудование Цикл
			СтрокаДобавл = РемонтыОборудования.Добавить();
			СтрокаДобавл.ID = СтрокаТаблицы.ID;
			СтрокаДобавл.ДатаНачала = ТекущаяДатаСеанса();
			СтрокаДобавл.ДатаОкончания = ТекущаяДатаСеанса();
			СтрокаДобавл.ОбъектРемонта = СтрокаТаблицы.ОбъектРемонта;
			СтрокаДобавл.ДокументИсточник = ДанныеЗаполнения;
			СтрокаДобавл.ОписаниеРемонта = СтрокаТаблицы.Описание;
			СтрокаДобавл.ЗакрываетПредписание = Истина;
			СтрокаДобавл.ВидРемонтныхРабот = Константы.впВидРемонтаПриВводеНаОснованииВнешнихОснований.Получить();
			СтрокаИсп = ИсполнителиПоРемонтам.Добавить();
			СтрокаИсп.РемонтыОборудования_ID = СтрокаТаблицы.ID;
			СтрокаИсп.Исполнитель = СтрокаТаблицы.Исполнитель;
		КонецЦикла;
	    //RARUS-NN EvgenU РАIT-0023371 2021_06_11 ++
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		СписокРемонтыОборудования = Неопределено;
		Если ДанныеЗаполнения.СВойство("РемонтыОборудования", СписокРемонтыОборудования) Тогда
			Для Каждого ЭлементРемонтыОборудования Из СписокРемонтыОборудования Цикл
				нСтрока = РемонтыОборудования.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока, ЭлементРемонтыОборудования.Значение);
			КонецЦикла;
		КонецЕсли;
		СписокРемонтныеРаботы = Неопределено;
		Если ДанныеЗаполнения.СВойство("РемонтныеРаботы", СписокРемонтныеРаботы) Тогда
			Для Каждого ЭлементРемонтныеРаботы Из СписокРемонтныеРаботы Цикл
				нСтрока = РемонтныеРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока, ЭлементРемонтныеРаботы.Значение);
			КонецЦикла;
		ИначеЕсли РемонтыОборудования.Количество() Тогда
			//сюда попадаем, если таблица ремонтных работ для заполнения 
			//не задана, но заданы ремонты оборудования
			ТЧ = РемонтыОборудования.Выгрузить(,"НомерСтроки, ID, ВидРемонтныхРабот, ОбъектРемонта");
			ТЧ.Колонки.Найти("ID").Имя = "РемонтыОборудования_ID";
			ТЧ.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
			Для Каждого СтрокаТаблицы Из ТЧ Цикл
				СтрокаТаблицы.ID = Строка(Новый УникальныйИдентификатор());
				
				СтрокаИсполнителиПоРемонтам 						= ИсполнителиПоРемонтам.Добавить();
				СтрокаИсполнителиПоРемонтам.РемонтыОборудования_ID 	= СтрокаТаблицы.РемонтыОборудования_ID;
				СтрокаИсполнителиПоРемонтам.Исполнитель				= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТаблицы.ОбъектРемонта, "ПодразделениеИсполнитель");
			КонецЦикла;
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТЧ", ТЧ);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	тч.НомерСтроки КАК НомерСтроки,
			|	тч.ID КАК ID,
			|	тч.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	тч.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
			|	тч.ОбъектРемонта КАК ОбъектРемонта
			|ПОМЕСТИТЬ врРемонтыОборудования
			|ИЗ
			|	&тч КАК тч
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врРемонтыОборудования.НомерСтроки КАК НомерСтроки,
			|	врРемонтыОборудования.ID КАК ID,
			|	врРемонтыОборудования.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	врРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
			|	врРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
			|	Нормативы.НормативныйРемонт КАК НормативныйРемонт,
			|	Нормативы.СпособПланирования КАК СпособПланирования
			|ПОМЕСТИТЬ врРемонтыОборудования_Нормативы
			|ИЗ
			|	врРемонтыОборудования КАК врРемонтыОборудования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.впНормативныеРемонтыОборудования КАК Нормативы
			|		ПО врРемонтыОборудования.ОбъектРемонта = Нормативы.ОбъектРемонта
			|			И врРемонтыОборудования.ВидРемонтныхРабот = Нормативы.ВидРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врРемонтыОборудования_Нормативы.НомерСтроки КАК НомерСтроки,
			|	врРемонтыОборудования_Нормативы.ID КАК ID,
			|	врРемонтыОборудования_Нормативы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	врРемонтыОборудования_Нормативы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
			|	врРемонтыОборудования_Нормативы.ОбъектРемонта КАК ОбъектРемонта,
			|	врРемонтыОборудования_Нормативы.НормативныйРемонт КАК НормативныйРемонт,
			|	врРемонтыОборудования_Нормативы.СпособПланирования КАК СпособПланирования,
			|	впИдентификаторыТехКарт.Ссылка КАК ИдентификаторТехКарты,
			|	впТехКарты.Ссылка КАК ТехКарта
			|ПОМЕСТИТЬ вр1
			|ИЗ
			|	врРемонтыОборудования_Нормативы КАК врРемонтыОборудования_Нормативы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впИдентификаторыТехКарт КАК впИдентификаторыТехКарт
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты КАК впТехКарты
			|			ПО впИдентификаторыТехКарт.Ссылка = впТехКарты.ИдентификаторТехКарты
			|		ПО врРемонтыОборудования_Нормативы.НормативныйРемонт.ИдентификаторТехКарты = впИдентификаторыТехКарт.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			//РемонтныеРаботы
			|	вр.НомерСтроки КАК НомерСтроки1,
			|	0 КАК НомерСтроки2,
			|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	вр.ТехКарта КАК РемонтнаяРабота,
			|	1 КАК Количество,
			|	вр.ИдентификаторТехКарты КАК ИдентификаторТехКарты,
			|	вр.ID КАК ID,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА(36)) КАК Родитель_ID,
			|	ИСТИНА КАК ПропуститьПроверкуОснований
			|ИЗ
			|	вр1 КАК вр
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	вр.НомерСтроки,
			|	тчСписокОпераций.НомерСтроки,
			|	вр.РемонтыОборудования_ID,
			|	тчСписокОпераций.Операция,
			|	тчСписокОпераций.Количество,
			|	вр.ИдентификаторТехКарты,
			|	тчСписокОпераций.ID,
			|	вр.ID,
			|	ИСТИНА
			|ИЗ
			|	вр1 КАК вр
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.СписокОпераций КАК тчСписокОпераций
			|		ПО вр.ТехКарта = тчСписокОпераций.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки1,
			|	НомерСтроки2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			//МатериальныеЗатраты
			|	МатериальныеЗатраты.ID КАК ID,
			|	МатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	МатериальныеЗатраты.Количество КАК Количество,
			|	МатериальныеЗатраты.Номенклатура КАК Номенклатура,
			|	МатериальныеЗатраты.Операция КАК Операция,
			|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID
			|ИЗ
			|	вр1 КАК вр
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.МатериальныеЗатраты КАК МатериальныеЗатраты
			|		ПО вр.ТехКарта = МатериальныеЗатраты.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	вр.НомерСтроки,
			|	МатериальныеЗатраты.НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			//ТрудовыеЗатраты
			|	ТрудовыеЗатраты.ID КАК ID,
			|	ТрудовыеЗатраты.Количество КАК Количество,
			|	ТрудовыеЗатраты.Операция КАК Операция,
			|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	ТрудовыеЗатраты.Квалификация КАК Квалификация
			|ИЗ
			|	вр1 КАК вр
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ТрудовыеЗатраты КАК ТрудовыеЗатраты
			|		ПО вр.ТехКарта = ТрудовыеЗатраты.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	вр.НомерСтроки,
			|	ТрудовыеЗатраты.НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			
			//Инструменты
			|	ИнструментыИТехника.ID КАК ID,
			|	ИнструментыИТехника.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ИнструментыИТехника.Количество КАК Количество,
			|	ИнструментыИТехника.Операция КАК Операция,
			|	вр.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
			|	ИнструментыИТехника.Инструмент КАК Инструмент
			|ИЗ
			|	вр1 КАК вр
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ИнструментыИТехника КАК ИнструментыИТехника
			|		ПО вр.ТехКарта = ИнструментыИТехника.Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	вр.НомерСтроки,
			|	ИнструментыИТехника.НомерСтроки";
			Результат = Запрос.ВыполнитьПакет();
			РезКрайний = Результат.Количество() - 1;
			
			//Объект.РемонтныеРаботы.Загрузить(Результат[РезКрайний - 3].Выгрузить());
			для КАждого СтрокаТЧ Из Результат[РезКрайний - 3].Выгрузить() Цикл
				нСтрока = РемонтныеРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
			КонецЦикла;
			
			//Объект.МатериальныеЗатраты.Загрузить(Результат[РезКрайний - 2].Выгрузить());
			для КАждого СтрокаТЧ Из Результат[РезКрайний - 2].Выгрузить() Цикл
				нСтрока = МатериальныеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
			КонецЦикла;
			
			//Объект.ТрудовыеЗатраты.Загрузить(Результат[РезКрайний - 1].Выгрузить());
			для КАждого СтрокаТЧ Из Результат[РезКрайний - 1].Выгрузить() Цикл
				нСтрока = ТрудовыеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
			КонецЦикла;
			
			//Объект.Инструменты.Загрузить(Результат[РезКрайний].Выгрузить());
			для КАждого СтрокаТЧ Из Результат[РезКрайний].Выгрузить()Цикл
				нСтрока = Инструменты.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрока, СтрокаТЧ);
			КонецЦикла;
		КонецЕсли;
		//RARUS-NN EvgenU РАIT-0023371 2021_06_11 --
		
	КонецЕсли;
	
	// ++ rarus selmik 02.02.2021
	МассивКвалификаций = ТрудовыеЗатраты.Выгрузить().ВыгрузитьКолонку("Квалификация");
	Если МассивКвалификаций.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.Заведование КАК Заведование,
		|	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	РегистрСведений.рарусСоответствиеПользователяФизическомуЛицу.СрезПоследних(&НаДату, Заведование В (&МассивКвалификаций)) КАК рарусСоответствиеПользователяФизическомуЛицуСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.Заведование,
		|	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо";
		
		Запрос.УстановитьПараметр("МассивКвалификаций"	, МассивКвалификаций);
		Запрос.УстановитьПараметр("НаДату"				, Дата);
		
		РезультатЗапроса = Запрос.Выполнить();			
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();			
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтруктураПоиска = Новый Структура("Квалификация", ВыборкаДетальныеЗаписи.Заведование);
			
			СтрокиСКвалификацией = ТрудовыеЗатраты.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаКвалификации Из СтрокиСКвалификацией Цикл
				СтрокаКвалификации.ФизическоеЛицо = ВыборкаДетальныеЗаписи.ФизическоеЛицо;	
			КонецЦикла;
			
		КонецЦикла;	
		
	КонецЕсли;
	// -- rarus selmik 02.02.2021

	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 ++
	Если Не ЗначениеЗаполнено(Подразделение)
		И РемонтыОборудования.Количество() Тогда
		//взять судно из первого объекта ремонта
		Если  ЗначениеЗаполнено(РемонтыОборудования[0].ОбъектРемонта) Тогда
			Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РемонтыОборудования[0].ОбъектРемонта, "ПодразделениеИсполнитель");
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		//установить единственную организацию
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 2
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	НЕ Организации.ПометкаУдаления";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Организация = Выборка.Организация;
		КонецЕсли;
	КонецЕсли;
	//RARUS-NN EvgenU РАIT-0023371 2021_06_11 --
	
КонецПроцедуры

// ++ rarus selmik 31.12.2020 25003
Процедура ПроверкаОбязательностьНаличияФайла(Отказ)	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусОбязательностьФайловВАктахСрезПоследних.ВидРемонта КАК ВидРемонта,
		|	рарусОбязательностьФайловВАктахСрезПоследних.ВидРемонта.Наименование КАК ВидРемонтаНаименование
		|ИЗ
		|	РегистрСведений.рарусОбязательностьФайловВАктах.СрезПоследних(&НаДату, ВидРемонта В (&ВидыРемонтов)) КАК рарусОбязательностьФайловВАктахСрезПоследних
		|ГДЕ
		|	рарусОбязательностьФайловВАктахСрезПоследних.ФайлОбязателен";
	
	Запрос.УстановитьПараметр("ВидыРемонтов", РемонтыОборудования.ВыгрузитьКолонку("ВидРемонтныхРабот"));
	Запрос.УстановитьПараметр("НаДату", Дата);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	НужноПроверитьНаличиеФайла 	= Ложь;
	ТекстОшибки					= "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НужноПроверитьНаличиеФайла = Истина;
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС, ТекстОшибки) + "Нужно обязательно приложить файл, для вида ремонтных работ: " + ВыборкаДетальныеЗаписи.ВидРемонтаНаименование;
	КонецЦикла;
	
	Если НужноПроверитьНаличиеФайла Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	впАктОВыполненииЭтапаРаботПрисоединенныеФайлы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.впАктОВыполненииЭтапаРаботПрисоединенныеФайлы КАК впАктОВыполненииЭтапаРаботПрисоединенныеФайлы
		|ГДЕ
		|	впАктОВыполненииЭтапаРаботПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
		|	И НЕ впАктОВыполненииЭтапаРаботПрисоединенныеФайлы.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("ВладелецФайла", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если Не ВыборкаДетальныеЗаписи.Следующий() Тогда
			Отказ = Истина;
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры	// -- rarus selmik 31.12.2020 25003

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// ++ rarus selmik 06.05.2021
	Для Каждого стрРем из РемонтыОборудования Цикл  // ввод из АРМ
		Если стрРем.ДатаНачала > стрРем.ДатаОкончания Тогда
			ОбщегоНазначения.СообщитьПользователю(НСтр("ru='Дата начала ремонта не может быть больше даты окончания!'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	// -- rarus selmik 06.05.2021
КонецПроцедуры

// ++ rarus makole 2021-08-06 [РАIT-0023494]
// Контроль остатков ТМЦ
Процедура ПроверитьОстаткиТМЦКСписанию(Отказ)
	
	ТаблицаМЦ = МатериальныеЗатраты.Выгрузить(, "Номенклатура, Количество");
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ЗапчастиРемонта.Выгрузить(,"Номенклатура, Количество"), ТаблицаМЦ);
	
	ТаблицаМЦ.Свернуть("Номенклатура", "Количество");
	СкладСудна = рарусОбщегоНазначенияСервер.СкладСудна(Подразделение);
	// Запрос получает на вход список номенклатуры. По этой номенклатуре получаем связанную номенклатуру другого качества,
	// получаем остатки как самой номенклатуры, так и другого качества на складе и в выданном. На выходе имеем список номенклатуры,
	// остатка которой нехватает для выполнения ремонта
	ЗапросПоОстаткам = Новый Запрос;
	ЗапросПоОстаткам.Текст = 
	// ++ rarus makole 2021-09-28 [РАIT-0023495]
	// Выдаём ошибку при отсутствии номенклатуры на складе, в выданном или БУ без поиска остатком номенклатуры другого качества 
	
	"ВЫБРАТЬ
	|	ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ДанныеДокумента.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	рарусИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
	|	рарусИмуществоНаСудахОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
	|			&ДатаДокумента,
	|			Склад = &СкладДокумента
	|				И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ))
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура
	|					ИЗ
	|						ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)) КАК рарусИмуществоНаСудахОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура,
	|	ВТ_ДанныеДокумента.Количество - ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) КАК Количество,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.Номенклатура) КАК ПредставлениеНоменклатуры,
	|	ПРЕДСТАВЛЕНИЕ(спрНоменклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО (ВТ_ДанныеДокумента.Номенклатура = ВТ_Остатки.Номенклатура)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
	|		ПО (ВТ_ДанныеДокумента.Номенклатура = спрНоменклатура.Ссылка)
	|ГДЕ
	|	ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) - ВТ_ДанныеДокумента.Количество < 0";
	
	#Область СтарыйТекстЗапроса
		//"ВЫБРАТЬ
		//|	ДанныеДокумента.Номенклатура КАК Номенклатура,
		//|	ДанныеДокумента.Количество КАК Количество
		//|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		//|ИЗ
		//|	&ДанныеДокумента КАК ДанныеДокумента
		//|
		//|ИНДЕКСИРОВАТЬ ПО
		//|	Номенклатура
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ТоварыДругогоКачества.Номенклатура КАК Номенклатура,
		//|	ТоварыДругогоКачества.НоменклатураБрак КАК НоменклатураБрак
		//|ПОМЕСТИТЬ ВТ_НоменклатураДругогоКачества
		//|ИЗ
		//|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		//|ГДЕ
		//|	ТоварыДругогоКачества.ГрадацияКачества В (ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.БУ), ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Восстановленный))
		//|	И ТоварыДругогоКачества.Номенклатура В
		//|			(ВЫБРАТЬ
		//|				ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура
		//|			ИЗ
		//|				ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	рарусИмуществоНаСудахОстатки_Новая.Номенклатура КАК Номенклатура,
		//|	рарусИмуществоНаСудахОстатки_Новая.КоличествоОстаток КАК КоличествоОстаток
		//|ПОМЕСТИТЬ ВТ_Остатки
		//|ИЗ
		//|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
		//|			&ДатаДокумента,
		//|			Склад = &СкладДокумента
		//|				И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование))
		//|				И Номенклатура В
		//|					(ВЫБРАТЬ
		//|						ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура
		//|					ИЗ
		//|						ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)) КАК рарусИмуществоНаСудахОстатки_Новая
		//|ГДЕ
		//|	рарусИмуществоНаСудахОстатки_Новая.КоличествоОстаток > 0
		//|
		//|ОБЪЕДИНИТЬ ВСЕ
		//|
		//|ВЫБРАТЬ
		//|	ВТ_НоменклатураДругогоКачества.Номенклатура,
		//|	рарусИмуществоНаСудахОстатки_Брак.КоличествоОстаток
		//|ИЗ
		//|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
		//|			&ДатаДокумента,
		//|			Склад = &СкладДокумента
		//|				И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование))
		//|				И Номенклатура В
		//|					(ВЫБРАТЬ
		//|						ВТ_НоменклатураДругогоКачества.НоменклатураБрак КАК НоменклатураБрак
		//|					ИЗ
		//|						ВТ_НоменклатураДругогоКачества КАК ВТ_НоменклатураДругогоКачества)) КАК рарусИмуществоНаСудахОстатки_Брак
		//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_НоменклатураДругогоКачества КАК ВТ_НоменклатураДругогоКачества
		//|		ПО рарусИмуществоНаСудахОстатки_Брак.Номенклатура = ВТ_НоменклатураДругогоКачества.НоменклатураБрак
		//|ГДЕ
		//|	рарусИмуществоНаСудахОстатки_Брак.КоличествоОстаток > 0
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	ВТ_ДанныеДокумента.Номенклатура КАК Номенклатура,
		//|	ВТ_ДанныеДокумента.Количество - ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) КАК Количество,
		//|	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.Номенклатура) КАК ПредставлениеНоменклатуры,
		//|	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеДокумента.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмерения
		//|ИЗ
		//|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
		//|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		//|		ПО ВТ_ДанныеДокумента.Номенклатура = ВТ_Остатки.Номенклатура
		//|ГДЕ
		//|	ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) - ВТ_ДанныеДокумента.Количество < 0";
		
	#КонецОбласти
	
	// -- rarus makole 2021-09-28 [РАIT-0023495]
	
	ЗапросПоОстаткам.УстановитьПараметр("ДатаДокумента", Дата);
	ЗапросПоОстаткам.УстановитьПараметр("СкладДокумента", СкладСудна);
	ЗапросПоОстаткам.УстановитьПараметр("ДанныеДокумента", ТаблицаМЦ);
	
	ВыборкаПоНедостающейНоменклатуре = ЗапросПоОстаткам.Выполнить().Выбрать();
	
	ЕстьОшибки = ВыборкаПоНедостающейНоменклатуре.Количество() > 0;
	ТекстОшибки = СтрШаблон("Для закрытия Акта на складе %1 не хватает ТМЦ:", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СкладСудна, "Наименование"));
	
	Пока ВыборкаПоНедостающейНоменклатуре.Следующий() Цикл
		ТекстОшибки = ТекстОшибки + Символы.ПС +
					СтрШаблон("%1 - %2 %3", ВыборкаПоНедостающейНоменклатуре.ПредставлениеНоменклатуры,
							ВыборкаПоНедостающейНоменклатуре.Количество,
							ВыборкаПоНедостающейНоменклатуре.ЕдиницаИзмерения)
	КонецЦикла;
	
	// При отсутствии остатка даём проводить документ с выводом сообщения, но не даём завершить работы
	Если ЕстьОшибки И ЗавершитьРемонтныеРаботы Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,,Отказ)
	ИначеЕсли ЕстьОшибки Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки)
	КонецЕсли;
	
КонецПроцедуры // -- rarus makole 2021-08-06 [РАIT-0023494]


Процедура ПриЗаписи(Отказ)
	// ++ rarus selmik 04.10.2021 РАIT-0023502
	Если Не Отказ Тогда
		Для Каждого СтрокаДокументыОснования Из ДокументыОснования Цикл
			рарусОбщегоНазначенияВызовСервера.ПолучитьСтатусЗаявкиНаРемонт(СтрокаДокументыОснования.ДокументОснование);
		КонецЦикла;
	КонецЕсли;
	// -- rarus selmik 04.10.2021 РАIT-0023502
КонецПроцедуры

