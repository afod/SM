// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки)
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект, 
//												представление - имя области в которой был выведен объект)
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РапортОПоврежденииНеисправности") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"РапортОПоврежденииНеисправности", НСтр("ru = 'РапортОПоврежденииНеисправности'"),
		ПечатьСообщения(МассивОбъектов, ОбъектыПечати), ,
		"ПФ_MXL_РапортОПоврежденииНеисправности");
	КонецЕсли;
	

КонецПроцедуры

Функция ПечатьСообщения(МассивОбъектов, ОбъектыПечати,ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.vftРапортОПоврежденииНеисправности.ПФ_MXL_РапортОПоврежденииНеисправности");
	
	//ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСудно = Макет.ПолучитьОбласть("ОбластьСудно");
	ОбластьМеханизм = Макет.ПолучитьОбласть("ОбластьМеханизм");
	ОбластьШапкаДействия = Макет.ПолучитьОбласть("ОбластьШапкаДействия");
	ОбластьРемонтныеРаботы = Макет.ПолучитьОбласть("ОбластьРемонтныеРаботы");
	ОбластьШапкаОтветственный = Макет.ПолучитьОбласть("ОбластьШапкаОтветственный");
	ОбластьОтветственный = Макет.ПолучитьОбласть("ОбластьОтветственный");
	ОбластьПримечание = Макет.ПолучитьОбласть("ОбластьПримечание");
	ОбластьШапкаОфисныйРаботник =  Макет.ПолучитьОбласть("ОбластьШапкаОфисныйРаботник");
	ОбластьОтветственныйМеханик = Макет.ПолучитьОбласть("ОбластьОтветственныйМеханик");
	ОбластьШапкаОтветственныйЧлен = Макет.ПолучитьОбласть("ОбластьШапкаОтветственныйЧлен");
	ОбластьОтветственныйЧленЭкипажа = Макет.ПолучитьОбласть("ОбластьОтветственныйЧленЭкипажа");
	
	ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ОбластьПустаяСтрока");
	ДокументыСообщения =  vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыРапортОПовреждении(МассивОбъектов);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	Для каждого Документ Из ДокументыСообщения Цикл
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);

		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

		//Выводим данные о судне
		ОбластьСудно.Параметры.Заполнить(Документ.Шапка);
		ТабличныйДокумент.Вывести(ОбластьСудно);
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);
		
		//Выводим данные о механизме
		ОбластьМеханизм.Параметры.Заполнить(Документ.Шапка);
		ОписаниеНеисправности = "";
		
		Для каждого стр Из Документ.Описания Цикл
			
			
			Описание = стр.ОписаниеНеисправности;
			
			ОписаниеНеисправности = ОписаниеНеисправности + Описание;
			
			Если стр.НомерСтроки <> Документ.Описания.Количество() Тогда
			
				 ОписаниеНеисправности = ОписаниеНеисправности + ", ";
			
			КонецЕсли;
			
		КонецЦикла; 
		
		ОбластьМеханизм.Параметры.ОписаниеНеисправности = ОписаниеНеисправности;
		
		
		ТабличныйДокумент.Вывести(ОбластьМеханизм);
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);

		ТабличныйДокумент.Вывести(ОбластьШапкаДействия);
		Для каждого Действие Из Документ.Действия Цикл
			НеобходимыеРаботы = "";
			Для каждого Работы из Документ.Работы Цикл
					НеобходимыеРаботы = НеобходимыеРаботы + " " + Работы.НеобходимыеРаботы;
			КонецЦикла;
			ОбластьРемонтныеРаботы.Параметры.НеобходимыеРаботы = НеобходимыеРаботы;
			ОбластьРемонтныеРаботы.Параметры.Заполнить(Действие);
			ТабличныйДокумент.Вывести(ОбластьРемонтныеРаботы);
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);

		//Выводим данные об ответственном
		ТабличныйДокумент.Вывести(ОбластьШапкаОтветственный);
		ОбластьОтветственный.Параметры.Заполнить(Документ.Шапка);
		ТабличныйДокумент.Вывести(ОбластьОтветственный);
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);

		ТабличныйДокумент.Вывести(ОбластьПримечание);
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);

		ТабличныйДокумент.Вывести(ОбластьШапкаОфисныйРаботник);
		ОбластьОтветственныйМеханик.Параметры.Заполнить(Документ.Шапка);
		ТабличныйДокумент.Вывести(ОбластьОтветственныйМеханик);
		
		ТабличныйДокумент.Вывести(ОбластьПустаяСтрока);

		ТабличныйДокумент.Вывести(ОбластьШапкаОтветственныйЧлен);
		ОбластьОтветственныйЧленЭкипажа.Параметры.Заполнить(Документ.Шапка);
		ТабличныйДокумент.Вывести(ОбластьОтветственныйЧленЭкипажа);
		
		
		Если ВставлятьРазрывВКонцеМакета Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;

		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Шапка.Ссылка);	
	КонецЦикла; 
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// ++ ilshill 11.01.2020 № 26441
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
				
		ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");	
		
		Если ИспользоватьФункционалСУБ Тогда 
			
			СтандартнаяОбработка = Ложь;
			
			ВыбраннаяФорма = "Документ.vftРапортОПоврежденииНеисправности.Форма.ФормаДокументаСУБ";		
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	
	ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");
	
	Если ИспользоватьФункционалСУБ Тогда 
		
		СтандартнаяОбработка = Ложь;
		Представление = "Рапорт о техническом недостатке";
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	Результат = Новый Массив;
	Результат.Добавить("Судно");
	Результат.Добавить("ОписаниеНеисправности");
	Результат.Добавить("Капитан");
	Результат.Добавить("ЗаявкаНаСнабжение");
	Результат.Добавить("ПриобретениеЗИП");
	Результат.Добавить("ПредупреждающиеДействия");
	Результат.Добавить("КорректирующиеДействия");
	Результат.Добавить("РегистрацияДефекта");
	Результат.Добавить("ФИОКапитана");
	Результат.Добавить("Ответственный");
	Результат.Добавить("ДатаВыполнения");
	Результат.Добавить("КемВыполнено");
	Возврат Результат;
КонецФункции

#Область СозданиеНаОсновании
// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
		
КонецПроцедуры

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	//ВариантыОтчетовУТПереопределяемый.ДобавитьКомандуСтруктураПодчиненности(КомандыОтчетов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры
#КонецОбласти

// -- ilshill 11.01.2020 № 26441
