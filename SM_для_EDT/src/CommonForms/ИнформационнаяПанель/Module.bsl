&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем БыстроеОбновлениеДанных;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПериодВиджетов.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Инициализация таблицы настроек
	ИнформационнаяПанель.ДобавитьПредопределенныеБлоки(ТаблицаБлоков);
	
	// Накладываем пользовательские настройки
	ИнформационнаяПанель.ПрименитьНастройки(ТаблицаБлоков, КоличествоСтрок, КоличествоКолонок);
	
	РасставитьБлоки();
	
	ИнициализироватьДанныеБлоков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Обновление всех блоков
	ПрочитатьДанныеСтатическихБлоков = Истина;
	ПрочитатьДанныеДинамическихБлоков = Истина;
	ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков);
	
	// Обновление динамических блоков
	ЗадержкаПередЗапускомФоновыхЗаданий = 16;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", ЗадержкаПередЗапускомФоновыхЗаданий);
	
	// Запланируем обновление на завтра (все блоки)
	Интервал = Макс(ИнтервалОбновленияДанных(ТекущаяДата()), ЗадержкаПередЗапускомФоновыхЗаданий);
	ПодключитьОбработчикОжидания("Подключаемый_ЕжедневноеОбновление", Интервал, Истина);
	
	ТекущийЭлемент = Элементы.Обновить;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ГруппыСудов" Тогда
		
		// При изменении Группы судов, необходимо обновить данные виджетов.
		ОбработкаОповещенияЗаписьГруппыСудов(Параметр, Источник);
		
	ИначеЕсли ИмяСобытия = "Запись_ПериодаВиджета" Тогда
		
		// При изменении Периода по умолчанию, необходимо обновить данные виджета.
		ОбработкаОповещенияЗаписьПериодаВиджета(Параметр, Источник);
		
	ИначеЕсли ИмяСобытия = "ИзмененаНастройкаИнформационнойПанели" Тогда
		
		НастройкаИнформационнойПанелиПриИзменении();
		
		// Полное обновление всех блоков
		ПрочитатьДанныеСтатическихБлоков = Истина;
		ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков);
		
	ИначеЕсли ИмяСобытия = "ДобавитьБлокИнформационнойПанели" Тогда
		
		// В БП3.0 Это событие вызывалось при записи платежного поручения, 
		// оставил на всякий случай. "Оповестить("ДобавитьБлокИнформационнойПанели", "ПериодическиеПлатежи");"
		
		ИмяБлока = Строка(Параметр);
		
		Если ДобавитьБлок(ИмяБлока) Тогда
			
			РасставитьБлоки();
			
			// Полное обновление всех блоков
			ПрочитатьДанныеСтатическихБлоков = Истина;
			ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков);
			
		КонецЕсли;
	// ++ rarus yukuzi 31.08.2021   //
	//ИначеЕсли ИмяСобытия = "КурсыВалют_Изменение" Тогда
	//	
	//	Если ИзмененаДоступностьКурсовВалют() Тогда
	//		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	//	КонецЕсли;
	//	
	//	// Изменение данных курсов валют
	//	ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаКурсыВалют();
	//	Если БлокВключен(ИмяБлока) Тогда
	//		//ПрочитатьДанныеБлоков(ИмяБлока);
	//	КонецЕсли;
	//	
	//	КурсыВалют_ОшибкаЗагрузки = Ложь;
	//	БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомКурсыВалют(ЭтотОбъект);
	// -- rarus yukuzi 31.08.2021
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппаСудовПриИзменении(Элемент)
	
	ГруппаСудовОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаСправочникПериодовНажатие(Элемент)
	
	//ОткрытьФорму("Справочник.рарусПериодыВиджетовПоУмолчанию.ФормаСписка");
	ОткрытьФорму("Справочник.рарусПериодыВиджетовПоУмолчанию.ФормаСписка",, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСсылкаНаФормуУстановкиПериодаНажатие(Элемент)
	ОповещениеОВводеПериода = Новый ОписаниеОповещения("ОповещениеОВводеПериода", ЭтотОбъект);
	ПараметрыОткрытия = Новый Структура("Период", ПериодВиджетов);
	ОткрытьФорму("ОбщаяФорма.рарусВыборПериодаИнформационнойПанели", ПараметрыОткрытия, ЭтотОбъект,,,,ОповещениеОВводеПериода);
КонецПроцедуры
&НаКлиенте
Процедура ОповещениеОВводеПериода(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СтандартныйПериод") Тогда
		ПериодВиджетов = Результат;  
		УстановитьОформлениеСсылкиВыбораПериода();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияКартинкаКрестНажатие(Элемент)
	
	ПериодВиджетов.ДатаНачала = Дата("00010101");
	ПериодВиджетов.ДатаОкончания = Дата("00010101");
	УстановитьОформлениеСсылкиВыбораПериода();

КонецПроцедуры

// ++ rarus yukuzi 31.08.2021   //
//&НаКлиенте
//Процедура ОрганизацияПриИзменении(Элемент)
//	
//	ОрганизацияОбработатьИзменение();
//	
//КонецПроцедуры
// -- rarus yukuzi 31.08.2021

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Настройка(Команда)
	
	СписокБлоков = Новый СписокЗначений;
	Для Каждого Блок Из ТаблицаБлоков Цикл
		СписокБлоков.Добавить(Блок.Имя, Блок.Синоним, Блок.Пометка);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СписокБлоков", СписокБлоков);
	ПараметрыФормы.Вставить("КоличествоСтрок", КоличествоСтрок);
	ПараметрыФормы.Вставить("КоличествоКолонок", КоличествоКолонок);
	
	ОткрытьФорму("ОбщаяФорма.ИнформационнаяПанельНастройка", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ПрочитатьДанныеСтатическихБлоков = Истина;
	ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыНаВнутреннееПотребление

&НаКлиенте
Процедура ЗаказыНаВнутреннееПотреблениеВсеДокументыНажатие(Элемент)
	
//{{MRG[ <-> ]
	ПараметрыФормы = Новый Структура;
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	// ++ rarus yukuzi 23.08.2021   //
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//	//ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаСписка");
//}}MRG[ <-> ]
	НастройкиКД = Новый НастройкиКомпоновкиДанных;
//{{MRG[ <-> ]
//	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаСписка");
//	// -- rarus yukuzi 23.08.2021
//}}MRG[ <-> ]
	
	ЗаказНаВнутреннееПотреблениеУстановитьПараметрыОтбора(НастройкиКД, СписокСкладовГруппыСудов, ПериодВиджетов);
		
	ПараметрыФормы.Вставить("ФиксированныеНастройки", НастройкиКД);
	// ++ rarus yukuzi 31.08.2021   //
	//ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	// -- rarus yukuzi 31.08.2021
	
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаказНаВнутреннееПотреблениеУстановитьПараметрыОтбора(НастройкиКД, СписокСкладов, ПериодВиджета)
	
	// Отбор по непомеченным на удаление
	ЭлементСклад = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементСклад.Использование = Истина;
	ЭлементСклад.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементСклад.ПравоеЗначение = Ложь;
		
	// Отбор по списку складов
	Если ЗначениеЗаполнено(СписокСкладов) Тогда
		ЭлементСклад = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементСклад.Использование = Истина;
		ЭлементСклад.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Склад");
		ЭлементСклад.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементСклад.ПравоеЗначение = СписокСкладов;
	КонецЕсли;

	// Получение периода
	Если ЗначениеЗаполнено(ПериодВиджета) Тогда
		// Сначала проверяем период в шапке панели. Если он заполнен, используем его
		ДатаНачала = ПериодВиджета.ДатаНачала;
		ДатаОкончания = ПериодВиджета.ДатаОкончания;
	Иначе
		// Получим период из стандартного отклонения
		СсылкаНаВиджет = БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗаказНаВнутреннееПотребление();
		СтандартныеПериодыВиджета = БлокиИнформационнойПанели.ПолучитьМассивСтандартныхПериодовВиджета(СсылкаНаВиджет);
		СтандартныйПериодВиджета = СтандартныеПериодыВиджета[0]; // Для этого виджета всегда должен вернуться массив с одной записью
		
		ДатаНачала = СтандартныйПериодВиджета.ДатаНачала;
		ДатаОкончания = СтандартныйПериодВиджета.ДатаОкончания;
	КонецЕсли;
	
	// Отбор по периоду
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		ЭлементДатаНачала = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДатаНачала.Использование = Истина;
		ЭлементДатаНачала.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		ЭлементДатаНачала.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементДатаНачала.ПравоеЗначение = ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		ЭлементДатаОкончания = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементДатаОкончания.Использование = Истина;
		ЭлементДатаОкончания.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Дата");
		ЭлементДатаОкончания.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементДатаОкончания.ПравоеЗначение = ДатаОкончания;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаВнутреннееПотребление_ПредупрежденияПриПолученииДанныхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	//Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиВЖурналЗаказовНаВнутреннееПотребление" Тогда
	//	СтандартнаяОбработка = Ложь;
	//	ПараметрыФормы = Новый Структура;
	//	ПараметрыФормы.Вставить("ПоказатьПредупреждения", Истина);
	//	Если ЗначениеЗаполнено(ГруппаСудов) Тогда
	//		МассивСкладовГруппы = СписокСкладовГруппыСудов.ВыгрузитьЗначения();
	//		Отбор = Новый Структура("Склад", МассивСкладовГруппы);
	//		ПараметрыФормы.Вставить("Отбор", Отбор);
	//	КонецЕсли;
	//	
	//	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.ФормаСписка", ПараметрыФормы, ЭтотОбъект);
	//	
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНаВнутреннееПотребление_ГиперссылкаОбновитьНажатие(Элемент)
	
	ИмяБлока = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗаказыНаВнутреннееПотребление();
	ОбновитьДанныеБлока(ИмяБлока);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура УстановитьОформлениеСсылкиВыбораПериода()
	
	Если ЗначениеЗаполнено(ПериодВиджетов) Тогда
		Элементы.ДекорацияСсылкаНаФормуУстановкиПериода.Заголовок = СтрШаблон("Установлен период (%1 - %2)", 
					Формат(ПериодВиджетов.ДатаНачала, "ДФ=dd.MM.yyyy"),
					Формат(ПериодВиджетов.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		Элементы.ДекорацияСсылкаНаФормуУстановкиПериода.Шрифт = ШрифтСтиляМелкий(Истина);			
		Элементы.ДекорацияКартинкаКрест.Видимость = Истина;
	Иначе
		Элементы.ДекорацияСсылкаНаФормуУстановкиПериода.Заголовок = "Установить период вручную";
		Элементы.ДекорацияСсылкаНаФормуУстановкиПериода.Шрифт = ШрифтСтиляМелкий();			
		Элементы.ДекорацияКартинкаКрест.Видимость = Ложь;		
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ШрифтСтиляМелкий(Жирный = Ложь)
	Возврат Новый Шрифт(ШрифтыСтиля.ШрифтТекстаМелкийИнформационнойПанели,,, Жирный)
КонецФункции

&НаСервере
Процедура ИнициализироватьДанныеБлоков()
	
	ОбновитьЗаголовокФормы();
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураПараметров = ПараметрыПроцедурыПолученияДанных(АдресХранилища, Истина);
	
	ПараметрыПроцедуры = Новый Массив();
	ПараметрыПроцедуры.Добавить(СтруктураПараметров);
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Блок.ПроцедураПолученияДанных) Тогда
			
		    ОбщегоНазначения.ВыполнитьМетодКонфигурации(Блок.ПроцедураПолученияДанных, ПараметрыПроцедуры);
		    ДанныеБлока = ПолучитьИзВременногоХранилища(АдресХранилища);
		    Если ТипЗнч(ДанныеБлока) = Тип("Структура") Тогда
		    	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока);
		    КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресХранилища);
		АдресХранилища = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеБлоков(СтрокаОтбора)
	
	ОбновитьЗаголовокФормы();
	
	УстановленОтбор = Не ПустаяСтрока(СтрокаОтбора);
	Если УстановленОтбор Тогда
		ОтборБлоков = СтрРазделить(СтрокаОтбора, ", ", Ложь);
	КонецЕсли;
	
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если УстановленОтбор И (ОтборБлоков.Найти(Блок.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Блок.ПроцедураПолученияДанных) Тогда
			
			ВыполнитьОбновлениеДанныхБлока(Блок);
			
		КонецЕсли;
		
		УправлениеБлоком(ЭтотОбъект, Блок);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МассивСкладовГруппыСудов(ГруппаСудов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Склады.Ссылка КАК Склад
		|ИЗ
		|	Справочник.vftГруппыСудов.Суда КАК рарусГруппыСудовСуда
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Склады КАК Склады
		|		ПО рарусГруппыСудовСуда.Судно = Склады.Судно
		|ГДЕ
		|	рарусГруппыСудовСуда.Ссылка В (&ГруппаСудов)";
	
	Запрос.УстановитьПараметр("ГруппаСудов", ГруппаСудов.ВыгрузитьЗначения());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивСкладов = Новый Массив;
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ВыборкаСклады = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаСклады.Следующий() Цикл
			МассивСкладов.Добавить(ВыборкаСклады.Склад);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивСкладов;
	
КонецФункции

&НаКлиенте
// Вызывается при получении оповещения о записи Группы судов.
// Для выбранной группы судов необходимо запустить обновление виджета, 
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//	Источник - СправочникСсылка.рарусГруппыСудов - Ссылка на измененную группу судов.
//
Процедура ОбработкаОповещенияЗаписьГруппыСудов(Параметр, Источник)
	
	Если ГруппаСудов.НайтиПоЗначению(Источник) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ГруппаСудовОбработатьИзменение();

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСудовОбработатьИзменение()
	
	ПрочитатьДанныеСтатическихБлоков  = Истина;
	ПрочитатьДанныеДинамическихБлоков = Истина;
	СписокСкладовГруппыСудов.ЗагрузитьЗначения(МассивСкладовГруппыСудов(ГруппаСудов));
	ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	ПараметрыПроцедурыУправленияБлоком = Новый Массив;
	ПараметрыПроцедурыУправленияБлоком.Добавить(Форма);
	
	Для Каждого Блок Из Форма.ТаблицаБлоков Цикл
		
		Если Не ЗначениеЗаполнено(Блок.ПроцедураУправлениеБлоком) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыПроцедурыУправленияБлоком.Количество() = 2 Тогда
			ПараметрыПроцедурыУправленияБлоком.Удалить(1); // Удаляем параметр от предыдущего блока
		КонецЕсли;
		
		ПараметрыПроцедурыУправленияБлоком.Добавить(Блок); // Добавляем вторым параметром строку блока
		ВыполнитьМетодКонфигурации(Блок.ПроцедураУправлениеБлоком, ПараметрыПроцедурыУправленияБлоком);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеБлоком(Форма, СтрокаБлока)
	
	Если ТипЗнч(СтрокаБлока) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ПараметрыПроцедурыУправленияБлоком = Новый Массив;
		ПараметрыПроцедурыУправленияБлоком.Добавить(Форма);
		ПараметрыПроцедурыУправленияБлоком.Добавить(СтрокаБлока);
		ВыполнитьМетодКонфигурации(СтрокаБлока.ПроцедураУправлениеБлоком, ПараметрыПроцедурыУправленияБлоком);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВыполнитьМетодКонфигурации(Знач ИмяМетода, Знач Параметры = Неопределено)
	
	ПараметрыСтрока = "";
	Если Параметры <> Неопределено И Параметры.Количество() > 0 Тогда
		Для Индекс = 0 По Параметры.ВГраница() Цикл 
			ПараметрыСтрока = ПараметрыСтрока + "Параметры[" + Индекс + "],";
		КонецЦикла;
		ПараметрыСтрока = Сред(ПараметрыСтрока, 1, СтрДлина(ПараметрыСтрока) - 1);
	КонецЕсли;
	
	//Выполнить ИмяМетода + "(" + ПараметрыСтрока + ")";
	// ++ rarus yukuzi 21.10.2021   //
	Если ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОстаткиСудовогоСклада" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОстаткиСудовогоСклада(Параметры[0],Параметры[1]);
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПлановыеВнеплановыеРемонты" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПлановыеВнеплановыеРемонты(Параметры[0],Параметры[1]);
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомЗапланированныеМероприятияСУБ" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомЗапланированныеМероприятияСУБ(Параметры[0],Параметры[1]);		
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПриближениеСрокаСудовых" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПриближениеСрокаСудовых(Параметры[0],Параметры[1]);			
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомНеустраненныеЗамечанияСУБ" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомНеустраненныеЗамечанияСУБ(Параметры[0],Параметры[1]);				
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПросроченныеРемонты" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПросроченныеРемонты(Параметры[0],Параметры[1]);					
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОткрытиеАРМ" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОткрытиеАРМ(Параметры[0],Параметры[1]);					
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОбменДаннымиБМ" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОбменДаннымиБМ(Параметры[0],Параметры[1]);	
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомАнализСУБКапитанами" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомАнализСУБКапитанами(Параметры[0],Параметры[1]);
	ИначеЕсли ИмяМетода="БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОтслеживаниеПоказанийНаработки" тогда
		БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОтслеживаниеПоказанийНаработки(Параметры[0],Параметры[1]);

	КонецЕсли;	
	// -- rarus yukuzi 21.10.2021
	
	
КонецПроцедуры

&НаСервере
Процедура РасставитьБлоки()
	
	// Инициализация свойств
	
	ОбщиеСвойстваБлоков = ОбщиеСвойстваБлоков();
	
	ЭлементыБлоков = Новый Соответствие; // Соответствие элемента формы имени блока
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		ЭлементФормы = Элементы.Найти(Блок.Имя);
		Если ЭлементФормы <> Неопределено Тогда
			ЭлементыБлоков.Вставить(Блок.Имя, ЭлементФормы);
			ЭлементФормы.ЦветФона = Блок.ЦветФона;
			ЗаполнитьЗначенияСвойств(ЭлементФормы, ОбщиеСвойстваБлоков);
		КонецЕсли;
	КонецЦикла;
	
	// Возвращаем все блоки в невидимую группу БлокиПанели
	
	Для ИндексСтроки = 0 По ИнформационнаяПанель.КоличествоСтрок() - 1 Цикл
		Для ИндексКолонки = 0 По ИнформационнаяПанель.КоличествоКолонок() - 1 Цикл
			Контейнер = Элементы[ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)];
			Для Каждого ПодчиненныйЭлемент Из Контейнер.ПодчиненныеЭлементы Цикл
				Элементы.Переместить(ПодчиненныйЭлемент, Элементы.БлокиПанели)
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Распределение блоков по контейнерам
	
	ИндексСтроки  = 0;
	ИндексКолонки = 0;
	
	ВГраницаСтрок   = КоличествоСтрок - 1;
	ВГраницаКолонок = КоличествоКолонок - 1;
	
	СтатическиеБлоки  = "";
	ДинамическиеБлоки = "";
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			// Блок выключен
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
			СтатическиеБлоки = СтатическиеБлоки + ?(ПустаяСтрока(СтатическиеБлоки), "", ",") + Блок.Имя;
		Иначе
			ДинамическиеБлоки = ДинамическиеБлоки + ?(ПустаяСтрока(ДинамическиеБлоки), "", ",") + Блок.Имя;
		КонецЕсли;
		
		// Перемещаем блок из группы БлокиПанели в контейнер
		Контейнер = Элементы[ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)];
		Если Контейнер <> Неопределено Тогда
			Элементы.Переместить(ЭлементыБлоков[Блок.Имя], Контейнер);
		КонецЕсли;
		
		Если ИндексКолонки = ВГраницаКолонок Тогда
			ИндексКолонки = 0;
			ИндексСтроки  = ИндексСтроки + 1;
		Иначе
			ИндексКолонки = ИндексКолонки + 1;
		КонецЕсли;
		
		Если ИндексСтроки > ВГраницаСтрок Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбщиеСвойстваБлоков()
	
	Возврат Новый Структура("Ширина,Высота,РастягиватьПоВертикали,РастягиватьПоГоризонтали", 30, 12, Ложь, Ложь);
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяКонтейнераБлока(ИндексСтроки, ИндексКолонки)
	
	Возврат СтрШаблон("Контейнер%1%2", ИндексСтроки, ИндексКолонки);
	
КонецФункции

&НаСервере
Процедура ОбновитьЗаголовокФормы()
	
	Период = ТекущаяДатаСеанса();
	
	ПредставлениеТекущейДаты = Формат(Период, "Л=ru_RU; ДФ='d MMMM, dddd'");
	
	Заголовок = СтрШаблон(НСтр("ru = 'Сегодня: %1'"), ПредставлениеТекущейДаты);
	
КонецПроцедуры

&НаСервере
Процедура НастройкаИнформационнойПанелиПриИзменении()
	
	ИнформационнаяПанель.ПрименитьНастройки(ТаблицаБлоков, КоличествоСтрок, КоличествоКолонок);
	
	РасставитьБлоки();
	
КонецПроцедуры

&НаКлиенте
Функция ИндексЭлементаФормы(Знач Имя)
	
	Цифры = "1234567890";
	НомерСтрокой = "";
	
	ДлинаИмени = СтрДлина(Имя);
	
	ВГраница   = ДлинаИмени - 1;
	Для Индекс = 0 По ВГраница Цикл
		Позиция = ДлинаИмени - Индекс;
		Символ = Сред(Имя,Позиция,1);
		Если СтрНайти(Цифры, Символ) = 0 Тогда
			Прервать;
		КонецЕсли;
		НомерСтрокой = Символ + НомерСтрокой;
	КонецЦикла;
	
	Если ПустаяСтрока(НомерСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Попытка
		Возврат Число(НомерСтрокой);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьОтчет(Отчет, ГруппировкаОтчета = Неопределено, Отборы = Неопределено, Показатели  = Неопределено, КлючВарианта = Неопределено, НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	ПользовательскиеНастройки = ПользовательскиеНастройкиДляРасшифровки(НачалоПериода, КонецПериода);
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	Если ГруппировкаОтчета <> Неопределено И ТипЗнч(ГруппировкаОтчета) = Тип("Массив") Тогда
		ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	КонецЕсли;
	
	Если ТипЗнч(Отборы) = Тип("Массив") Тогда
		
		НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
		Для Каждого Отбор Из Отборы Цикл
			// ++ rarus yukuzi 31.08.2021   //
			//БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
			ДобавитьОтбор(НастройкаОтбора, Отбор.Поле, Отбор.Значение, Отбор.ВидСравнения);
			// -- rarus yukuzi 31.08.2021
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(Показатели) = Тип("Массив") Тогда
		
		Для Каждого Показатель Из Показатели Цикл
			ДополнительныеСвойства.Вставить(Показатель, Истина);
		КонецЦикла;
		
	КонецЕсли;
	
	Если КлючВарианта <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КлючВарианта", КлючВарианта);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки"         , Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки"           , 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму(Отчет, ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция ПользовательскиеНастройкиДляРасшифровки(НачалоПериода = Неопределено, КонецПериода = Неопределено)
	
	// Инициализация пользовательских настроек
	// Добавим в настройки все параметры которые могут использоваться в отчетах руководителю
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация", Организация);
	ДополнительныеСвойства.Вставить("Период", Период);
	
	Если НачалоПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("НачалоПериода", НачалоПериода);
	КонецЕсли;
	Если КонецПериода <> Неопределено Тогда
		ДополнительныеСвойства.Вставить("КонецПериода", КонецПериода);
	КонецЕсли;
	
	Если ВариантОкругления = 1000 Тогда
		
		// Установим формат цифр для рублевых сумм
		УсловноеОформление = ПользовательскиеНастройки.Элементы.Добавить(Тип("УсловноеОформлениеКомпоновкиДанных"));
		УсловноеОформление.ИдентификаторПользовательскойНастройки = "УсловноеОформление";
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Представление = НСтр("ru = 'Суммы в тыс.'");
		ЭлементУсловногоОформления.Использование = Истина;
		
		// ++ rarus yukuzi 23.08.2021   //
		//БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(ЭлементУсловногоОформления.Оформление, "Формат", "ЧДЦ=; ЧС=3");
		УстановитьПараметр(ЭлементУсловногоОформления.Оформление, "Формат", "ЧДЦ=; ЧС=3");
		// -- rarus yukuzi 23.08.2021
		
	КонецЕсли;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

&НаКлиенте
Функция БлокВключен(ИмяБлока)
	
	ПараметрыОтбора = Новый Структура("Имя", ИмяБлока);
	НайденныеБлоки = ТаблицаБлоков.НайтиСтроки(ПараметрыОтбора);
	
	Возврат НайденныеБлоки.Количество() > 0 И НайденныеБлоки[0].Пометка;
	
КонецФункции

&НаКлиенте
Функция ДобавитьБлок(ИмяБлока)
	
	ПараметрыОтбора = Новый Структура("Имя", ИмяБлока);
	НайденныеБлоки = ТаблицаБлоков.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеБлоки.Количество() > 0 И Не НайденныеБлоки[0].Пометка Тогда
		НайденныеБлоки[0].Пометка = Истина;
		СоставИзменен = Истина;
	Иначе
		СоставИзменен = Ложь;
	КонецЕсли;
	
	Возврат СоставИзменен;
	
КонецФункции

&НаКлиенте
// Вызывается при получении оповещения о записи Периода виджета.
// Для выбранного виджета необходимо запустить обновление, 
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//	Источник - СправочникСсылка.рарусПериодыВиджетовПоУмолчанию - Ссылка на измененную настройку периода.
//
Процедура ОбработкаОповещенияЗаписьПериодаВиджета(Параметр, Источник)
	
	ВиджетПериода = ЗначениеРеквизитаОбъекта(Источник, "Владелец");
	СтрокиСИзмененнымПериодом = ТаблицаБлоков.НайтиСтроки(Новый Структура("Виджет", ВиджетПериода));
	
	Для каждого СтрокаБлока Из СтрокиСИзмененнымПериодом Цикл
		
		ВыполнитьОбновлениеДанныхБлока(СтрокаБлока);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта (Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоМонопольныйРежим()
	
	Если МонопольныйРежим() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

#Область ОбновлениеИнформационнойПанели

&НаКлиенте
Процедура ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков = Ложь)
	
	Если ПрочитатьДанныеСтатическихБлоков И Не ПустаяСтрока(СтатическиеБлоки) Тогда
		ПрочитатьДанныеБлоков(СтатическиеБлоки);
	КонецЕсли;
	
	Если ПрочитатьДанныеДинамическихБлоков И Не ПустаяСтрока(ДинамическиеБлоки) Тогда
		
		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
		
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеБлока(ИмяБлока)
	
	ДанныеБлока = ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлока));
	
	Если ДанныеБлока.Количество() Тогда
		
		СтрокаБлока = ДанныеБлока[0];
		ВыполнитьОбновлениеДанныхБлока(СтрокаБлока);
		
	КонецЕсли;
	
	УправлениеБлоком(ЭтотОбъект, СтрокаБлока);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбновлениеДанныхБлока(СтрокаБлока, ОбновлениеДанных = Ложь)
	
	Если СтрокаБлока.ФоновоеЗаданиеЗапущено Тогда
		// Текущее фоновое задание неактуально
		ОтменитьВыполнениеЗадания(СтрокаБлока.ФоновоеЗаданиеИдентификатор, СтрокаБлока.ФоновоеЗаданиеЗапущено);
	КонецЕсли;

	СтрокаБлока.ФоновоеЗаданиеУИДРезультата = Новый УникальныйИдентификатор();

	ДлительнаяОперация = ЗапуститьЧтениеДанныхБлока(СтрокаБлока.ФоновоеЗаданиеУИДРезультата, 
							?(ОбновлениеДанных, СтрокаБлока.ПроцедураОбновленияДанных, СтрокаБлока.ПроцедураПолученияДанных));

	СтрокаБлока.ФоновоеЗаданиеИдентификатор = ДлительнаяОперация.ИдентификаторЗадания;
	СтрокаБлока.ФоновоеЗаданиеЗапущено = Истина;

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ЗавершениеОбновленияБлока", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьЧтениеДанныхБлока(ФоновоеЗаданиеУИДРезультата, ПроцедураПолученияДанных)
	
	СтруктураПараметров = ПараметрыПроцедурыПолученияДанных(ФоновоеЗаданиеУИДРезультата, Ложь);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);

	Возврат ДлительныеОперации.ВыполнитьВФоне(ПроцедураПолученияДанных, СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция ПараметрыПроцедурыПолученияДанных(АдресРезультата, Инициализация)
	
	СтруктураПараметров = Новый Структура;
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		СтруктураПараметров.Вставить("АдресХранилища",              АдресРезультата);
	Иначе
		СтруктураПараметров.Вставить("ФоновоеЗаданиеУИДРезультата",	АдресРезультата);
	КонецЕсли;
	СтруктураПараметров.Вставить("МассивСкладов",                   СписокСкладовГруппыСудов.ВыгрузитьЗначения());
	СтруктураПараметров.Вставить("Период",                    		ПериодВиджетов);
	СтруктураПараметров.Вставить("Пользователь",                    ТекущийПользователь);
	СтруктураПараметров.Вставить("Инициализация", 					Инициализация);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗавершениеОбновленияБлока(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		АдресРезультата = Результат.АдресРезультата;
		ИдентификаторРезультата = ПолучитьИзВременногоХранилища(АдресРезультата);
		ОбработатьРезультатПоБлоку(ИдентификаторРезультата);
		УдалитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатПоБлоку(ИдентификаторРезультата)
	
	Перем СохраненныйРезультат;
	
	Если ТипЗнч(ИдентификаторРезультата) = Тип("УникальныйИдентификатор") Тогда
		
		ДанныеБлока = ТаблицаБлоков.НайтиСтроки(Новый Структура("ФоновоеЗаданиеУИДРезультата", ИдентификаторРезультата));
		Если ДанныеБлока.Количество() Тогда
			СтрокаБлока = ДанныеБлока[0];
			БлокиИнформационнойПанели.ПрочитатьСохраненныеДанныеВиджета(ТекущийПользователь, СтрокаБлока.Виджет, СохраненныйРезультат, ИдентификаторРезультата);
			Если ЗначениеЗаполнено(СохраненныйРезультат) Тогда
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныйРезультат, СтрокаБлока.РеквизитыФормы);
			КонецЕсли;
			СтрокаБлока.ФоновоеЗаданиеЗапущено = Ложь;
			УправлениеБлоком(ЭтотОбъект, СтрокаБлока);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЕжедневноеОбновление()
	
	// Полное обновление всех блоков
	ПрочитатьДанныеСтатическихБлоков = Истина;
	ОбновитьДанныеБлоков(ПрочитатьДанныеСтатическихБлоков);
	
	// Запланируем обновление на завтра
	ПодключитьОбработчикОжидания("Подключаемый_ЕжедневноеОбновление", ИнтервалОбновленияДанных(ТекущаяДата()), Истина);
	
КонецПроцедуры


#КонецОбласти

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(Знач ИдентификаторЗадания, ЗаданиеЗапущено)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ЗаданиеЗапущено = Ложь;
	
КонецПроцедуры

&НаКлиенте
Функция ИнтервалОбновленияДанных(ДатаОбновленияДанных)
	
	Возврат (КонецДня(ДатаОбновленияДанных) + 1) - ДатаОбновленияДанных + 59;
	
КонецФункции

&НаСервере
Процедура ПолучитьДанныеБлоков(СтрокаОтбора, Инициализация)
	
	ОбновитьЗаголовокФормы();
	
	УстановленОтбор = Не ПустаяСтрока(СтрокаОтбора);
	Если УстановленОтбор Тогда
		ОтборБлоков = СтрРазделить(СтрокаОтбора, ", ", Ложь);
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("УникальныйИдентификатор",          УникальныйИдентификатор);
	СтруктураПараметров.Вставить("АдресХранилища",                   АдресХранилища);
	СтруктураПараметров.Вставить("Организация",                      Организация);
	СтруктураПараметров.Вставить("ВариантОкругления",                ВариантОкругления);
	СтруктураПараметров.Вставить("Инициализация",                    Инициализация);
	
	ПараметрыПроцедуры = Новый Массив();
	ПараметрыПроцедуры.Добавить(СтруктураПараметров);
	
	Для Каждого Блок Из ТаблицаБлоков Цикл
		
		Если Не Блок.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если УстановленОтбор И (ОтборБлоков.Найти(Блок.Имя) = Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(Блок.ПроцедураПолученияДанных) Тогда
			
			ОбщегоНазначения.ВыполнитьМетодКонфигурации(Блок.ПроцедураПолученияДанных, ПараметрыПроцедуры);
			
			ДанныеБлока = ПолучитьИзВременногоХранилища(АдресХранилища);
			Если ТипЗнч(ДанныеБлока) = Тип("Структура") Тогда
				Если Инициализация Тогда
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока);
				Иначе
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеБлока, Блок.РеквизитыФормы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	// ++ rarus yukuzi 23.08.2021   //
	//ОбновитьСостояниеЗагрузкиКурсовВалют();
	
	// -- rarus yukuzi 23.08.2021
	
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		УдалитьИзВременногоХранилища(АдресХранилища);
		АдресХранилища = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

//&НаКлиенте
//Процедура ОрганизацияОбработатьИзменение()
//	
//	РеквизитыОрганизации = Организация;
//	
//	ДанныеОрганизации                = ДанныеОрганизации(Организация);
//	ИННОрганизации                   = ДанныеОрганизации.ИНН;
//	
//	БыстроеОбновление = Ложь;
//	ПрочитатьДанныеСтатическихБлоков  = Ложь;
//	ПрочитатьДанныеДинамическихБлоков = Истина;
//	
//	ОбновитьДанныеБлоков(БыстроеОбновление, ПрочитатьДанныеСтатическихБлоков, ПрочитатьДанныеДинамическихБлоков);
//	
//КонецПроцедуры

&НаКлиенте
// Вызывается при получении оповещения о записи организации.
// Для новых организаций добавляет их ссылки в отбор параметра выбора, 
// чтобы они были доступны в списке на форме.
//
// Параметры:
//	Параметр - Неопределено, Структура - Параметр, полученный в ОбработкаОповещения().
//		Если имеет тип Структура и содержит ключ "ЭтоНовый", то такое оповещения будет обработано,
//		иначе проигнорировано.
//	Источник - СправочникСсылка.Организации - Ссылка на измененную организацию.
//
Процедура ОбработкаОповещенияЗаписьОрганизации(Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметр.Свойство("ЭтоНовый") 
		ИЛИ НЕ Параметр.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	// При записи новой организации добавим ее в список доступных для выбора организаций на форме.
	ДоступныеОрганизации = Новый Массив;
	ДоступныеОрганизации.Добавить(Источник);
	
	Если Элементы.Организация.ПараметрыВыбора.Количество() > 0 Тогда
		// В качестве значения параметра выбора указан фиксированный массив ссылок организаций, 
		// полученный из ОбщегоНазначенияБПВызовСервераПовтИсп.ОрганизацииДанныеКоторыхДоступныПользователю().
		// Копируем их в новых массив.
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДоступныеОрганизации, Элементы.Организация.ПараметрыВыбора[0].Значение);
	КонецЕсли;
	
	ФиксированныйМассивДоступныхОрганизаций = Новый ФиксированныйМассив(ДоступныеОрганизации);
	
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;
	
	ПараметрВыбораОтборПоОрганизации = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	
	ПараметрыВыбораОрганизации = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ЕстьПравоПросмотраЖурналаРегистрации()
	Возврат Пользователи.ЭтоПолноправныйПользователь(, , Ложь);
КонецФункции

#Область ВсяПанель

&НаКлиенте
Процедура Подключаемый_ОбновлениеДанныхБлоков()
	
	Если ПустаяСтрока(ДинамическиеБлоки) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтоМонопольныйРежим() Тогда
		
		Для Каждого Блок Из ТаблицаБлоков Цикл
			// Возможно, что фоновое задание было запущено раньше, 
			// пользователь дал команду его отменить, однако задание не отменено.
			// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
			Если Блок.ФоновоеЗаданиеЗапущено И Не ЗаданиеВыполнено(Блок.ФоновоеЗаданиеИдентификатор) Тогда
				Продолжить;
			КонецЕсли;
			
			// Выполняется обновление только динамических блоков
			Если Блок.Пометка И Не ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
				ВыполнитьОбновлениеДанныхБлока(Блок, Истина);
			КонецЕсли;
			
			УправлениеБлоком(ЭтотОбъект, Блок);
			
		КонецЦикла;
		
	Иначе
		// Включен монопольный режим, попробуем обновить позже
		ИнтервалМеждуПопыткамиОбновления = 60;
		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлоков", ИнтервалМеждуПопыткамиОбновления, Истина);
	КонецЕсли;

	
КонецПроцедуры

//&НаСервере
//Функция ЗапуститьОбновлениеДанныхБлоков(БыстроеОбновление = Ложь)
//	
//	Если МонопольныйРежим() Тогда
//		Возврат Ложь;
//	КонецЕсли;
//	
//	// Возможно, что фоновое задание было запущено раньше, 
//	// пользователь дал команду его отменить, однако задание не отменено.
//	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
//	Если ФоновоеЗаданиеЗапущено И Не ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
//		Возврат Истина;
//	КонецЕсли;
//	
//	ПроцедурыОбновленияДанных = Новый Массив;
//	Для Каждого Блок Из ТаблицаБлоков Цикл
//		Если Блок.Пометка И Не ПустаяСтрока(Блок.ПроцедураОбновленияДанных) Тогда
//			ПроцедурыОбновленияДанных.Добавить(Блок.ПроцедураОбновленияДанных);
//		КонецЕсли;
//	КонецЦикла;
//	
//	СтруктураПараметров = Новый Структура();
//	СтруктураПараметров.Вставить("БыстроеОбновление",                БыстроеОбновление);
//	СтруктураПараметров.Вставить("Организация",                      Организация);
//	СтруктураПараметров.Вставить("ПроцедурыОбновленияДанных",        ПроцедурыОбновленияДанных);
//	
//	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
//		УникальныйИдентификатор,
//		"ИнформационнаяПанель.ОбновитьДанныеБлоков",
//		СтруктураПараметров,
//		НСтр("ru = 'Обновление данных блоков Информационной панели'"));
//	
//	ФоновоеЗаданиеИдентификатор = Результат.ИдентификаторЗадания;
//	
//	Если Результат.ЗаданиеВыполнено Тогда
//		ДанныеАктуальны = Истина;
//		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
//	Иначе
//		ФоновоеЗаданиеЗапущено = Истина;
//	КонецЕсли;
//	
//	УправлениеФормой(ЭтотОбъект);
//	
//	Возврат Истина;
//	
//КонецФункции

&НаКлиенте
Процедура ЖдатьОбновленияДанныхБлоков()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
		ФоновоеЗаданиеЗапущено = Ложь;
		ДанныеАктуальны = Истина;
		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
	Иначе
		ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации()
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьЗавершениеДлительнойОперации",
		ПараметрыОбработчикаОжидания.ТекущийИнтервал,
		Истина);
	
КонецПроцедуры
// ++ rarus yukuzi 31.08.2021   //
// <Описание функции>
//
// Параметры:
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
//&НаСервере
//Функция БлижайшийПериодПоПоказателю(Виджет,Показатель,ПериодВиджетов=неопределено)

//	Возврат БлокиИнформационнойПанели.БлижайшийПериодПоПоказателю(Виджет,Показатель, ПериодВиджетов);

//КонецФункции
 &НаСервере
Функция ПериодПоПоказателю(ИмяПоказателя, СтруктураБлижайшихПериодовВиджета)

	Возврат БлокиИнформационнойПанели.ПериодПоПоказателю(ИмяПоказателя, СтруктураБлижайшихПериодовВиджета);

КонецФункции
&НаСервере
Функция СтруктураБлижайшихПериодовВиджета(Виджет, ПериодВиджетов) Экспорт
		Возврат БлокиИнформационнойПанели.СтруктураБлижайшихПериодовВиджета(Виджет, ПериодВиджетов);

КонецФункции

// -- rarus yukuzi 31.08.2021

#КонецОбласти

#Область ТолькоВыбранныйБлок

//&НаКлиенте
//Процедура Подключаемый_ОбновлениеДанныхБлока()
//	
//	РезультатЗапуска = ЗапуститьОбновлениеДанныхБлока();
//	
//	Если РезультатЗапуска = "ЗапущеноОбщееОбновление" Тогда
//		ЖдатьОбновленияДанныхБлоков();
//	ИначеЕсли РезультатЗапуска = "ЗапущеноОбновлениеБлока" Тогда
//		ЖдатьОбновленияДанныхБлока();
//	ИначеЕсли РезультатЗапуска = "МонопольныйРежим" Тогда
//		// Включен монопольный режим, попробуем обновить позже
//		ИнтервалМеждуПопыткамиОбновления = 60;
//		ПодключитьОбработчикОжидания("Подключаемый_ОбновлениеДанныхБлока", ИнтервалМеждуПопыткамиОбновления, Истина);
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Функция ЗапуститьОбновлениеДанныхБлока()
//	
//	Если МонопольныйРежим() Тогда
//		Возврат "МонопольныйРежим";
//	КонецЕсли;
//	
//	// Возможно, что общее фоновое задание было запущено раньше, 
//	// пользователь дал команду его отменить, однако задание не отменено.
//	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
//	Если ФоновоеЗаданиеЗапущено И Не ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор) Тогда
//		Возврат "ЗапущеноОбщееОбновление";
//	КонецЕсли;
//	
//	// Не запускаем обновление виджета, пока не закончилось обновление предыдущего
//	ЗапущенныеОбновленияПоБлокам = ТаблицаБлоков.НайтиСтроки(Новый Структура("ФоновоеЗаданиеЗапущено", Истина));
//	Если ЗапущенныеОбновленияПоБлокам.Количество() И Не ЗаданиеВыполнено(ЗапущенныеОбновленияПоБлокам[0].ФоновоеЗаданиеИдентификатор) Тогда
//		Возврат "ЗапущеноОбновлениеБлока";
//	КонецЕсли;
//	
//	ПроцедурыОбновленияДанных = Новый Массив;
//	СтрокиБлоковКОбновлению = ТаблицаБлоков.НайтиСтроки(Новый Структура("НажатаКнопкаОбновления", Истина));
//	
//	Для Каждого Блок Из ТаблицаБлоков Цикл
//		Если Блок.Пометка И Не ПустаяСтрока(Блок.ПроцедураОбновленияДанных)
//			И Блок.НажатаКнопкаОбновления Тогда
//			ПроцедурыОбновленияДанных.Добавить(Блок.ПроцедураОбновленияДанных);
//			Блок.НажатаКнопкаОбновления = Ложь;
//		КонецЕсли;
//	КонецЦикла;
//	
//	СтруктураПараметров = Новый Структура();
//	СтруктураПараметров.Вставить("Организация",                      Организация);
//	СтруктураПараметров.Вставить("ПроцедурыОбновленияДанных",        ПроцедурыОбновленияДанных);
//	
//	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
//		УникальныйИдентификатор,
//		"ИнформационнаяПанель.ОбновитьДанныеБлоков",
//		СтруктураПараметров,
//		НСтр("ru = 'Обновление данных блоков Информационной панели'"));
//	
//	ИдентификаторФЗ = Результат.ИдентификаторЗадания;
//	
//	Если Результат.ЗаданиеВыполнено Тогда
//		ФЗЗапущено = Ложь;
//		ПрочитатьДанныеБлоков(ДинамическиеБлоки);
//	Иначе
//		ФЗЗапущено = Истина;
//	КонецЕсли;
//	
//	Для каждого Блок Из СтрокиБлоковКОбновлению Цикл
//		Блок.ФоновоеЗаданиеИдентификатор = ИдентификаторФЗ;
//		Блок.ФоновоеЗаданиеЗапущено = ФЗЗапущено;
//	КонецЦикла;
//	
//	УправлениеБлоком(ЭтотОбъект, СтрокиБлоковКОбновлению);
//	
//	Возврат Истина;
//	
//КонецФункции

&НаКлиенте
Процедура ЖдатьОбновленияДанныхБлока()
	
	Если Не ФоновоеЗаданиеЗапущено Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	
	ПодключитьОбработчикОжиданияЗавершенияДлительнойОперации();
	
КонецПроцедуры

#КонецОбласти

#Область Баннер

&НаСервереБезКонтекста
Функция ДанныеОрганизации(Знач Организация)
	
	ДанныеОрганизации = Новый Структура;
	ДанныеОрганизации.Вставить("ИНН",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН"));
	
	Возврат ДанныеОрганизации;
	
КонецФункции

#КонецОбласти
// ++ rarus yukuzi 23.08.2021   //
#Область ОстаткиСудовогоСклада
&НаКлиенте
Процедура ОстаткиСудовогоСклада_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВедомостьТМЦ" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		
		ПериодПользовательскихНастроек = СохраненнаяНастройкаПользователя("Отчет.рарусВедомостьТМЦ", "ПериодОтчета");
		Если не ЗначениеЗаполнено(ПериодПользовательскихНастроек) тогда
			
			СтрПараметры = Новый Структура;
			ПериодОтчета=Новый СтандартныйПериод;
			
			ПериодОтчета.ДатаНачала= НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
			ПериодОтчета.ДатаОкончания =КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
			СтрПараметры.Вставить("ПериодОтчета", ПериодОтчета);
			
			ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("рарусВедомостьТМЦ",СтрПараметры);
			
			
			ПараметрыФормы.Вставить("ПользовательскиеНастройки",ПользовательскиеНастройки);
		КонецЕсли;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);

		Форма=ОткрытьФорму("Отчет.рарусВедомостьТМЦ.Форма", ПараметрыФормы); 
		ОчиститьПользовательскиеОтборы(Форма.Отчет);

	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "МинимальныеЗапасыТМЦ" Тогда
		СтандартнаяОбработка = Ложь;
		СтрПараметры = Новый Структура;
		СтрПараметры.Вставить("Период", ТекущаяДата());
		
		ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("рарусМинимальныеЗапасыТМЦ",СтрПараметры);
		
		ПараметрыФормы = Новый Структура("ПользовательскиеНастройки, СформироватьПриОткрытии",ПользовательскиеНастройки, Истина);
		
		ОткрытьФорму("Отчет.рарусМинимальныеЗапасыТМЦ.Форма", ПараметрыФормы); 
		
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция СохраненнаяНастройкаПользователя(ИмяОбъекта, ИмяПараметра)
	Возврат БлокиИнформационнойПанели.СохраненнаяНастройкаПользователя(ИмяОбъекта, ИмяПараметра)

КонецФункции 


&НаКлиенте
Процедура ОстаткиСудовогоСклада_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОстаткиСудовогоСклада();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти
#Область ЗапланированныеМероприятияСУБ
&НаКлиенте
Процедура ЗапланированныеМероприятияСУБ_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	//БлижайшийПериод=ТекущаяДата();
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗапланированныеМероприятияСУБ(), ПериодВиджетов);
	Если НавигационнаяСсылкаФорматированнойСтроки = "ГрафикМероприятийСУБ" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		
		//ПериодПользовательскихНастроек = СохраненнаяНастройкаПользователя("Отчет.рарусГрафикМероприятийСУБ", "ПериодОтчета");
		//Если не ЗначениеЗаполнено(ПериодПользовательскихНастроек) тогда
		//	
		//	СтрПараметры = Новый Структура;
		//	ПериодОтчета=Новый СтандартныйПериод;
		//	
		//	ПериодОтчета.ДатаНачала= НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
		//	ПериодОтчета.ДатаОкончания =КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
		//	СтрПараметры.Вставить("ПериодОтчета", ПериодОтчета);
		//	
		//	ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("рарусГрафикМероприятийСУБ",СтрПараметры);
		//	
		//	
		//	ПараметрыФормы.Вставить("ПользовательскиеНастройки",ПользовательскиеНастройки);
		//КонецЕсли;
		
		//отчет  не умеет формироваться ни за день, ни за месяц, ни за квартал, ни за несколько лет - только за текущий год
		//поэтому формируем за текущий год.
		СтрПараметры = Новый Структура;
		
		ПериодОтчета=Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);
		СтрПараметры.Вставить("Период", ПериодОтчета);
		
		ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("рарусГрафикМероприятийСУБ",СтрПараметры);
		
		
		ПараметрыФормы.Вставить("ПользовательскиеНастройки",ПользовательскиеНастройки);

			

		ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);

		Форма=ПолучитьФорму("Отчет.рарусГрафикМероприятийСУБ.Форма", ПараметрыФормы); 
		Форма.ВариантМодифицирован = Ложь;
		Форма.ПользовательскиеНастройкиМодифицированы=Ложь;
		ОткрытьФорму(Форма);

	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ГрафикМероприятийСУБ_запланированные" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		
		ПериодПользовательскихНастроек = СохраненнаяНастройкаПользователя("Отчет.рарусГрафикМероприятийСУБ", "ПериодОтчета");
		//Если не ЗначениеЗаполнено(ПериодПользовательскихНастроек) тогда
			
			СтрПараметры = Новый Структура;
			ПериодОтчета=Новый СтандартныйПериод;
			
			//ПериодОтчета.ДатаНачала= НачалоКвартала(БлижайшийПериод);
			//ПериодОтчета.ДатаОкончания =КонецКвартала(БлижайшийПериод);
			//СтрПараметры.Вставить("Период", ПериодОтчета);
			БлижайшийПериод=ПериодПоПоказателю("С04.2",СтруктураБлижайшихПериодовВиджета);
			
			
			//ПериодОтчета.ДатаНачала= НачалоКвартала(БлижайшийПериод.ДатаНачала);
			//ПериодОтчета.ДатаОкончания =КонецКвартала(БлижайшийПериод.ДатаОкончания);
			ПериодОтчета.ДатаНачала= НачалоГода(БлижайшийПериод.ДатаНачала);
			ПериодОтчета.ДатаОкончания =КонецГода(БлижайшийПериод.ДатаОкончания);
			
			//отчет  не умеет формироваться ни за день, ни за месяц, ни за квартал, ни за несколько лет - только за текущий год
			//поэтому формируем за текущий год.
			ПериодОтчета=Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);

			СтрПараметры.Вставить("Период", ПериодОтчета);
		//	СтрПараметры.Вставить("Период", БлижайшийПериод);


					
			
			ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("рарусГрафикМероприятийСУБ",СтрПараметры);
			
			
			ПараметрыФормы.Вставить("ПользовательскиеНастройки",ПользовательскиеНастройки);
		//КонецЕсли;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
		
		//ОткрытьФорму("Отчет.рарусГрафикМероприятийСУБ.Форма", ПараметрыФормы); 
		Форма=ПолучитьФорму("Отчет.рарусГрафикМероприятийСУБ.Форма", ПараметрыФормы,,"ГрафикМероприятийСУБ_запланированные"); 
		ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"Только запланированные",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ГруппаЭлементовОтбора.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"Мероприятие",
		ПредопределенноеЗначение("Документ.рарусМероприятиеСУБ.ПустаяСсылка"),
		ВидСравненияКомпоновкиДанных.Равно,
		"Нет мероприятия",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);	
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"ПериодПо",
		ТекущаяДата(),
		//Дата(2021,08,19),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		"не просроченные",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);		
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"Учение",
		ПредопределенноеЗначение("Документ.рарусУчение.ПустаяСсылка"),
		ВидСравненияКомпоновкиДанных.Равно,
		"Нет учения",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);
		//Форма.Открыть();
		Форма.ВариантМодифицирован = Ложь;
		Форма.ПользовательскиеНастройкиМодифицированы=Ложь;
		ОткрытьФорму(Форма);

		
	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ГрафикМероприятийСУБ_просроченные" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		
		ПериодПользовательскихНастроек = СохраненнаяНастройкаПользователя("Отчет.рарусГрафикМероприятийСУБ", "ПериодОтчета");
		//Если не ЗначениеЗаполнено(ПериодПользовательскихНастроек) тогда
			
			СтрПараметры = Новый Структура;
			ПериодОтчета=Новый СтандартныйПериод;
			
			
			БлижайшийПериод=ПериодПоПоказателю("С04.3",СтруктураБлижайшихПериодовВиджета);
			
			//ПериодОтчета.ДатаНачала= НачалоКвартала(БлижайшийПериод.ДатаНачала);
			//ПериодОтчета.ДатаОкончания =КонецКвартала(БлижайшийПериод.ДатаОкончания);
			ПериодОтчета.ДатаНачала= НачалоГода(БлижайшийПериод.ДатаНачала);
			ПериодОтчета.ДатаОкончания =КонецГода(БлижайшийПериод.ДатаОкончания);
			
			//отчет  не умеет формироваться ни за день, ни за месяц, ни за квартал, ни за несколько лет - только за текущий год
			//поэтому формируем за текущий год.
			ПериодОтчета=Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);

			СтрПараметры.Вставить("Период", ПериодОтчета);
			//СтрПараметры.Вставить("Период", БлижайшийПериод);


			//здесь нужно будет получить группу судов, заданную на форме
			//СтрПараметры.Вставить("ГруппаСудов", ЗаданнаяГруппаСудов());
			
			
			ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("рарусГрафикМероприятийСУБ",СтрПараметры);
			
			
			ПараметрыФормы.Вставить("ПользовательскиеНастройки",ПользовательскиеНастройки);
		//КонецЕсли;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
		
		//ОткрытьФорму("Отчет.рарусГрафикМероприятийСУБ.Форма", ПараметрыФормы); 
		Форма=ПолучитьФорму("Отчет.рарусГрафикМероприятийСУБ.Форма", ПараметрыФормы,,"ГрафикМероприятийСУБ_просроченные"); 
		ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"Запланированные и просроченные",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ГруппаЭлементовОтбора.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"ПериодПо",
		ТекущаяДата(),
		//Дата(2021,08,19),
		ВидСравненияКомпоновкиДанных.Меньше,
		"Просроченные",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);		
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"Мероприятие",
		ПредопределенноеЗначение("Документ.рарусМероприятиеСУБ.ПустаяСсылка"),
		ВидСравненияКомпоновкиДанных.Равно,
		"Нет мероприятия",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);		
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"Учение",
		ПредопределенноеЗначение("Документ.рарусУчение.ПустаяСсылка"),
		ВидСравненияКомпоновкиДанных.Равно,
		"Нет учения",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);	
		
		//Форма.Открыть();
		Форма.ВариантМодифицирован = Ложь;
		Форма.ПользовательскиеНастройкиМодифицированы=Ложь;
		ОткрытьФорму(Форма);

	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗапланированныеМероприятияСУБ_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗапланированныеМероприятияСУБ();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти
#Область ПриближениеСрокаСудовых
&НаКлиенте
Процедура ПриближениеСрокаСудовых_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	//БлижайшийПериод=ТекущаяДата();
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбратитьВнимание" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
				
		//Форма=ПолучитьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"ОбратитьВнимание");
		Форма=ОткрытьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"ОбратитьВнимание");
		//новый вариант
		ГруппаЭлементовОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"Документы с приближающимся сроком (количество дней до уведомления истекло, либо истек срок 3 месяца)",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		ГруппаЭлементовОтбораИ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ГруппаЭлементовОтбораИ.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		
		
		ГруппаЭлементовОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаЭлементовОтбораИ,
		"",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
		
		// ++ rarus yukuzi 30.09.2021   //
		ГруппаЭлементовОтбораИ_СтарыйВариант = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаЭлементовОтбораИли,
		"старый вариант",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ_СтарыйВариант,
		"СрокМенее3Месяцев",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ_СтарыйВариант,
		"ЗаполненоКоличествоДнейУведомления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	

		ГруппаЭлементовОтбораИ_НовыйВариант = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаЭлементовОтбораИли,
		"новый вариант",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ_НовыйВариант,
		"ПрошелСрокДоУведомления",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		// -- rarus yukuzi 30.09.2021

		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		//"СрокМенее3Месяцев",
		//Истина,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		//
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		//"ПрошелСрокДоУведомления",
		//Истина,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"СрокМенееМесяца",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"ВАрхиве",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"Бессрочно",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"Служебный",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		
		Форма.Заголовок="Обратить внимание на окончание срока действия документов";

		
		////
		//ГруппаЭлементовОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		//Форма.Список.КомпоновщикНастроек.Настройки.Отбор,
		//"Документы с приближающимся сроком (количество дней до уведомления ислекло, либо истек срок 3 месяца)",
		//ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		//ГруппаЭлементовОтбораИ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		//ГруппаЭлементовОтбораИ.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		//
		//ГруппаЭлементовОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		//ГруппаЭлементовОтбораИ,
		//"",
		//ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
		////ГруппаЭлементовОтбораИли.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		////ГруппаЭлементовОтбораИли.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		//
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		//"СрокМенее3Месяцев",
		//Истина,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		//
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		//"ПрошелСрокДоУведомления",
		//Истина,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		//
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		//"СрокМенееМесяца",
		//Ложь,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

		// ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		//"ВАрхиве",
		//Ложь,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		//
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		//"Бессрочно",
		//Ложь,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		//"Служебный",
		//Ложь,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

		////
		//
		//
		//
		////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "СрокМенее3Месяцев",
		////Истина,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "СрокМенееМесяца",
		////Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПрошелСрокДоУведомления",
		////Истина,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ВАрхиве",
		////Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Бессрочно",
		////Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		////ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Служебный",
		////Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//Форма.Заголовок="Обратить внимание на окончание срока действия документов";
		//ОткрытьФорму(Форма);

		
	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "МенееМесяца" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
			
		//Форма=ПолучитьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"МенееМесяца");
		Форма=ОткрытьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"МенееМесяца");
		
				
		//новый вариант
		ГруппаЭлементовОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"Документы со сроком действия менее, чем через 1 месяц",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		ГруппаЭлементовОтбораИ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ГруппаЭлементовОтбораИ.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		
		// ++ rarus yukuzi 30.09.2021   //
		ГруппаЭлементовОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаЭлементовОтбораИ,
		"",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		"ЗаполненоКоличествоДнейУведомления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		"ПрошелСрокДоУведомления",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		// -- rarus yukuzi 30.09.2021

		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"СрокМенееМесяца",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"СрокДействия",
		ТекущаяДата(),
		ВидСравненияКомпоновкиДанных.Больше,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	

		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		//"ПрошелСрокДоУведомления",
		//Истина,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"ВАрхиве",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"Бессрочно",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"Служебный",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

	
		Форма.Заголовок="Менее месяца до окончания срока действия документов";
		//ОткрытьФорму(Форма);

		//СтандартнаяОбработка = Ложь;
		//ПараметрыФормы = Новый Структура;
		//		
		//Форма=ПолучитьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"МенееМесяца");
		//	
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "СрокМенееМесяца",
		//Истина,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "СрокДействия",
		//ТекущаяДата(),ВидСравненияКомпоновкиДанных.Больше,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПрошелСрокДоУведомления",
		//Истина,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ВАрхиве",
		//Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Бессрочно",
		//Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Служебный",
		//Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//Форма.Заголовок="Менее месяца до окончания срока действия документов";
		//ОткрытьФорму(Форма);
		
	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИстекСрокДействия" Тогда
		СтандартнаяОбработка = Ложь;
		//ПараметрыФормы = Новый Структура;
		//Если ЗначениеЗаполнено(ГруппаСудов) Тогда
		//	ПараметрыФормы.Вставить("ГрСудов", ГруппаСудов[0].Значение);
		//КонецЕсли;
		
				
		//Форма=ПолучитьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"ИстекСрокДействия");
		Форма=ОткрытьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"ИстекСрокДействия");
		
		//новый вариант
		ГруппаЭлементовОтбораИ = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"Документы с истекшим сроком действия",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		ГруппаЭлементовОтбораИ.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ГруппаЭлементовОтбораИ.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
	
		// ++ rarus yukuzi 30.09.2021   //
		ГруппаЭлементовОтбораИли = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаЭлементовОтбораИ,
		"",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		"ЗаполненоКоличествоДнейУведомления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИли,
		"ПрошелСрокДоУведомления",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		// -- rarus yukuzi 30.09.2021

		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"СрокДействия",
		ТекущаяДата(),
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);	
		
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		//"ПрошелСрокДоУведомления",
		//Истина,
		//ВидСравненияКомпоновкиДанных.Равно,
		//"",
		//Истина,
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"ВАрхиве",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"Бессрочно",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбораИ,
		"Служебный",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
		Форма.Заголовок="Истек срок действия документов";

		//СтандартнаяОбработка = Ложь;
		//СтандартнаяОбработка = Ложь;
		//ПараметрыФормы = Новый Структура;
		//		
		//Форма=ПолучитьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"ИстекСрокДействия");
		//	
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "СрокДействия",
		//ТекущаяДата(),ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПрошелСрокДоУведомления",
		//Истина,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ВАрхиве",
		//Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Бессрочно",
		//Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Служебный",
		//Ложь,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		//Форма.Заголовок="Истек срок действия документов";
		//ОткрытьФорму(Форма);

	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ВсеДокументы" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		//ПериодОтчета=Новый СтандартныйПериод;
		//БлижайшийПериод=ПериодПоПоказателю("С01.2",СтруктураБлижайшихПериодовВиджета);
		//ПараметрыФормы.Вставить("Период", БлижайшийПериод);
		
		Форма=ПолучитьФорму("Справочник.рарусСвидетельстваСудов.ФормаСписка", ПараметрыФормы,,"ВсеДокументы");
	
		ОткрытьФорму(Форма);

	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПриближениеСрокаСудовых_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПриближениеСрокаСудовых();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область НеустраненныеЗамечанияСУБ
&НаКлиенте
Процедура НеустраненныеЗамечанияСУБ_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "НеустраненныеЗамечанияСУБ" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("СформироватьПриОткрытии, КлючВарианта",Истина,"СводныйВариант" );
		
		Форма=ПолучитьФорму("Отчет.рарусОтчетПоЗамечаниям.Форма", ПараметрыФормы,ЭтаФорма); 
		
		КомпоновщикНастроек=Форма.Отчет.КомпоновщикНастроек;
		ОчиститьПользовательскиеОтборы(Форма.Отчет);

		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(КомпоновщикНастроек.Настройки.Отбор,
		"Закрыто",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		"Неустраненные замечания",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,
		новый УникальныйИдентификатор);
		Форма.ВариантМодифицирован = Ложь;
		Форма.ПользовательскиеНастройкиМодифицированы=Ложь;
		ОткрытьФорму(Форма);
		
		
		
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НеустраненныеЗамечанияСУБ_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНеустраненныеЗамечанияСУБ();
	ОбновитьДанныеБлока(СтрокаОтбора);

	
КонецПроцедуры

#КонецОбласти

#Область ПлановыеВнеплановыеРемонты
&НаКлиенте
Процедура ПлановыеВнеплановыеРемонты_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПлановыеВнеплановыеРемонты(), ПериодВиджетов);
	Если НавигационнаяСсылкаФорматированнойСтроки = "СписокРемонтовБезФильтров" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПериодОтчета=Новый СтандартныйПериод;
		
		//для этого показателя нет фильтра по периоду - то есть отбираем записи за все периоды (если не заполнен период, то по умолчанию форма открывается за текущий месяц)
		
		ПериодОтчета.ДатаНачала= Дата(1,1,1);
		ПериодОтчета.ДатаОкончания =Дата(1,1,1);
		ПараметрыФормы.Вставить("Период", ПериодОтчета);
		
		ПараметрыФормы.Вставить("ОткрыватьВНовойЗакладке", Истина);
		
		Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,,"СписокРемонтовБезФильтров");
		ОчиститьПользовательскиеОтборы(Форма.Список);
	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПлановыхРемонтов" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПериодОтчета=Новый СтандартныйПериод;
		БлижайшийПериод=ПериодПоПоказателю("С01.2",СтруктураБлижайшихПериодовВиджета);
		ПараметрыФормы.Вставить("Период", БлижайшийПериод);
		
		Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,, "СписокПлановыхРемонтов");
		ОчиститьПользовательскиеОтборы(Форма.Список);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПлановыйРемонт",
		Истина,ВидСравненияКомпоновкиДанных.Равно,"",Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		Форма.Заголовок="Плановые ремонты";

				
	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПлановыхКритичныхРемонтов" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПериодОтчета=Новый СтандартныйПериод;
		БлижайшийПериод=ПериодПоПоказателю("С01.3",СтруктураБлижайшихПериодовВиджета);
		ПараметрыФормы.Вставить("Период", БлижайшийПериод);
		
		Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,, "СписокПлановыхКритичныхРемонтов");
		ОчиститьПользовательскиеОтборы(Форма.Список);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПлановыйРемонт",
		Истина,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Критичность",
		Истина,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		Форма.Заголовок="Плановые критичные ремонты";
	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокВнеплановыхРемонтов" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПериодОтчета=Новый СтандартныйПериод;
		БлижайшийПериод=ПериодПоПоказателю("С01.4",СтруктураБлижайшихПериодовВиджета);
		ПараметрыФормы.Вставить("Период", БлижайшийПериод);
		
		Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,,"СписокВнеплановыхРемонтов");
		ОчиститьПользовательскиеОтборы(Форма.Список);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПлановыйРемонт",
		Ложь,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		Форма.Заголовок="Внеплановые ремонты";

	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокВнеплановыхКритичныхРемонтов" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПериодОтчета=Новый СтандартныйПериод;
		БлижайшийПериод=ПериодПоПоказателю("С01.5",СтруктураБлижайшихПериодовВиджета);
		ПараметрыФормы.Вставить("Период", БлижайшийПериод);
		
		Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы, ,"СписокВнеплановыхКритичныхРемонтов");
		ОчиститьПользовательскиеОтборы(Форма.Список);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ПлановыйРемонт",
		Ложь,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Критичность",
		Истина,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		Форма.Заголовок="Внеплановые критичные ремонты";

	иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПеренесенныхРемонтов" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПериодОтчета=Новый СтандартныйПериод;
		БлижайшийПериод=ПериодПоПоказателю("С01.6",СтруктураБлижайшихПериодовВиджета);

		ПараметрыФормы.Вставить("Период", БлижайшийПериод);
		
		Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,,"СписокПеренесенныхРемонтов");
		ОчиститьПользовательскиеОтборы(Форма.Список);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Перенесен",
		Истина,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		Форма.Элементы.СписокПеренесен.Видимость=Истина;
		Форма.Элементы.СписокНоваяДатаНачала.Видимость=Истина;
		Форма.Элементы.СписокНоваяДатаОкончания.Видимость=Истина;

		Форма.Заголовок="Перенесенные ремонты";
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПлановыеВнеплановыеРемонты_ПериодОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура ПлановыеВнеплановыеРемонты_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПлановыеВнеплановыеРемонты();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти
#Область ПросроченныеРемонты
&НаКлиенте
Процедура ПросроченныеРемонты_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
//	БлижайшийПериод= ТекущаяДата();
//БлижайшийПериод=Дата(2021,6,1);
Если НавигационнаяСсылкаФорматированнойСтроки = "СписокПросроченных" Тогда
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПериодОтчета=Новый СтандартныйПериод;
	ПараметрыФормы.Вставить("Период", ПериодОтчета);
	
	Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,,"СписокПросроченных");
	ОчиститьПользовательскиеОтборы(Форма.Список);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ДатаНачала",
	ТекущаяДата(),ВидСравненияКомпоновкиДанных.Меньше,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	 Форма.Заголовок="Просроченные ремонты";

	
иначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПросроченныхКритичныхРемонтов" Тогда
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПериодОтчета=Новый СтандартныйПериод;
	ПериодОтчета.ДатаНачала= Дата(1,1,1);
	ПериодОтчета.ДатаОкончания =Дата(1,1,1);
	ПараметрыФормы.Вставить("Период", ПериодОтчета);
	
	
	Форма=ОткрытьФорму("ОбщаяФорма.рарусСписокРемонтов", ПараметрыФормы,,"СписокПросроченныхКритичныхРемонтов");
	ОчиститьПользовательскиеОтборы(Форма.Список);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "ДатаНачала",
	ТекущаяДата(),ВидСравненияКомпоновкиДанных.Меньше,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.Список, "Критичность",
	Истина,ВидСравненияКомпоновкиДанных.Равно,,Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	 Форма.Заголовок="Просроченные критичные ремонты";

	
КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПросроченныеРемонты_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПросроченныеРемонты();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ОткрытиеАРМ
&НаКлиенте
Процедура ОткрытиеАРМ_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьАРМ" Тогда
		СтандартнаяОбработка = Ложь;
		
		
		
		//ПараметрыФормы=Новый Структура("Заголовок", "АРМ ТОИР");
		
		//Форма=ОткрытьФорму("ОбщаяФорма.vftФормаЖурнала",ПараметрыФормы,,"рарусИнфПанель");
		//Форма=ОткрытьФорму("ОбщаяФорма.vftФормаЖурнала",,,"рарусИнфПанель");
		Форма=ОткрытьФорму("ОбщаяФорма.vftФормаЖурнала",,,"рарусСписокРемонтов");

		
		Форма.Заголовок= "АРМ ТОИР";


	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ОткрытиеАРМ_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОткрытиеАРМ();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти
#Область ОбменДаннымиБМ
&НаКлиенте
Процедура ОбменДаннымиБМ_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбменДаннымиБМ" Тогда
		СтандартнаяОбработка = Ложь;
		
		//Форма=ОткрытьФорму("ОбщаяФорма.vftФормаЖурнала");
		Форма=ОткрытьФорму("Обработка.рарусМониторОбменаСудна.Форма.Форма");
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура ОбменДаннымиБМ_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОбменДаннымиБМ();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти
#Область АнализСУБКапитанами
&НаКлиенте
Процедура АнализСУБКапитанами_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ЖурналАнализСУБ" Тогда
		СтандартнаяОбработка = Ложь;
		
		//Форма=ОткрытьФорму("ОбщаяФорма.vftФормаЖурнала");
		Форма=ОткрытьФорму("Документ.vftАнализСУБ.ФормаСписка");
		
	КонецЕсли;

КонецПроцедуры
&НаКлиенте
Процедура АнализСУБКапитанами_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаАнализСУБКапитанами();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти
#Область ОтслеживаниеПоказанийНаработки
&НаКлиенте
Процедура ОтслеживаниеПоказанийНаработки_ТекстВиджетаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)	
	ТекстЗаголовкаВиджета=БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОтслеживаниеПоказанийНаработки();
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОтслеживаниеПоказанийНаработки(), ПериодВиджетов);
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьАРМ" Тогда
		СтандартнаяОбработка = Ложь;
		
		Форма=ОткрытьФорму("ОбщаяФорма.vftФормаЖурнала",,,"рарусСписокРемонтов");
		Форма.Заголовок= "АРМ ТОИР";
		Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.Страницы.ПодчиненныеЭлементы.ТОиР;

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ОтчетНаработка" Тогда
	    СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",Истина);
		СтрПараметры = Новый Структура;
		//БлижайшийПериод=БлижайшийПериодПоПоказателю(ТекстЗаголовкаВиджета,"С9.2", ПериодВиджетов);
		БлижайшийПериод=ПериодПоПоказателю( "С09.2",СтруктураБлижайшихПериодовВиджета);
		ПериодДляОтчета=Новый СтандартныйПериод(Дата(1,1,1),БлижайшийПериод.ДатаНачала); 
		СтрПараметры.Вставить("Период", ПериодДляОтчета);
						
		ПользовательскиеНастройки = УстановитьПользовательскиеНастройкиОтчета("впНаработкаОборудования",СтрПараметры);
			
			
		ПараметрыФормы.Вставить("ПользовательскиеНастройки",ПользовательскиеНастройки);

		
		//Форма=ОткрытьФорму("Отчет.впНаработкаОборудования.Форма", ПараметрыФормы); 
		Форма=ПолучитьФорму("Отчет.впНаработкаОборудования.Форма", ПараметрыФормы); 
		ГруппаЭлементовОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы,
		"По критическому оборудованию",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ); 
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		ГруппаЭлементовОтбора.ИдентификаторПользовательскойНастройки=новый УникальныйИдентификатор;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаЭлементовОтбора,
		"ОбъектРемонта.Приоритет",
		КритическоеОборудование(),
		ВидСравненияКомпоновкиДанных.Равно,
		"Критические",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);
		ОсновноеСудно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор,
		"ОбъектРемонта.ПодразделениеИсполнитель",
		ОсновноеСудно,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ, новый УникальныйИдентификатор);
		СписокОбъектовРемонтаСНаработкой = ПолучитьДанныеНаработкиЗаПериод(БлижайшийПериод, ОсновноеСудно);
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор, 			//  ОбластьПоискаДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора, 
									"ОбъектРемонта",													//   ИмяПоля            - Строка - поле, по которому необходимо установить отбор.
									СписокОбъектовРемонтаСНаработкой, 												//   ПравоеЗначение     - Произвольный - значение отбора.
									ВидСравненияКомпоновкиДанных.НеВСписке,                             //   ВидСравнения  - ВидСравненияКомпоновкиДанных - условие отбора.
									,                                                                   //   Представление - Строка - представление элемента компоновки данных.
									Истина,                                                             //   Использование - Булево - флажок использования этого отбора.
									РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);   		//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - способ отображения этого отбора пользователю.
									
		Форма.ВариантМодифицирован = Ложь;
		Форма.ПользовательскиеНастройкиМодифицированы=Ложь;
		ОткрытьФорму(Форма);

		//ПользовательскиеНастройкиМодифицированы = Истина
		//если нужно чтобы настройки сами сохранялись
		//Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеНаработкиЗаПериод(БлижайшийПериод, Судно)

	Возврат БлокиИнформационнойПанели.ПолучитьДанныеНаработкиЗаПериод(БлижайшийПериод, Судно);

КонецФункции // ПолучитьДанныеНаработкиЗаПериод()

&НаКлиенте
Процедура ОтслеживаниеПоказанийНаработки_ГиперссылкаОбновитьНажатие(Элемент)
	
	СтрокаОтбора = БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОтслеживаниеПоказанийНаработки();
	ОбновитьДанныеБлока(СтрокаОтбора);
	
КонецПроцедуры

#КонецОбласти

// -- rarus yukuzi 23.08.2021



// ++ rarus yukuzi 23.08.2021   //
// Устанавливает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - Настройки, 
//              в которых происходит поиск параметра. 
//	Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно установить значение параметра.
//  Значение - Произвольный - Значение параметра.
//	Использование - Булево - Признак использования параметра. По умолчанию всегда принимается равным истине.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Параметр, для которого установлено значение.
//
&НаСервере
Функция УстановитьПараметр(Настройки, Параметр, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = ПолучитьПараметр(Настройки, Параметр);
	
	Если ЗначениеПараметра <> Неопределено Тогда
		ЗначениеПараметра.Использование = Использование;
		ЗначениеПараметра.Значение      = Значение;
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции
&НаСервере
Функция УстановитьПользовательскиеНастройкиОтчета(ТипОтчета,СтруктураПараметров)
	СтруктураНастроек = Новый Структура;
	ОтчетОбъект = Отчеты[ТипОтчета].Создать();
	
	ПользовательскиеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
		Для Каждого ПараметрСКД Из ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ПараметрСКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда  
				Если строка(ПараметрСКД.Параметр) = ЭлПараметр.Ключ Тогда 
					ПараметрСКД.Значение = ЭлПараметр.Значение;
					ПараметрСКД.Использование = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;    
	КонецЦикла;
	
	Возврат ПользовательскиеНастройки;
КонецФункции


// Добавляет отбор в коллекцию отборов компоновщика или группы отборов.
//
// Параметры:
//	ЭлементСтруктуры - КомпоновщикНастроекКомпоновкиДанных, НастройкиКомпоновкиДанных, 
//                     ОтборКомпоновкиДанных - Элемент структуры.
//	Поле - Строка - имя поля, по которому добавляется отбор.
//	Значение - Произвольный - Значение отбора.
//	ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнений компоновки данных (по умолчанию: Равно).
//	Использование - Булево - Признак использования отбора (по умолчанию: Истина).
//  ВПользовательскиеНастройки - Булево - Признак добавления отбора в пользовательские настройки.
//
// Возвращаемое значение:
//	ЭлементОтбораКомпоновкиДанных - Добавленный элемент отбора.
//
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение = Неопределено, ВидСравнения = Неопределено, Использование = Истина, ВПользовательскиеНастройки = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
		
		Если ВПользовательскиеНастройки Тогда
			Для Каждого ЭлементНастройки Из ЭлементСтруктуры.ПользовательскиеНастройки.Элементы Цикл	
				Если ЭлементНастройки.ИдентификаторПользовательскойНастройки = ЭлементСтруктуры.Настройки.Отбор.ИдентификаторПользовательскойНастройки Тогда
					Отбор = ЭлементНастройки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.Использование  = Использование;
	НовыйЭлемент.ЛевоеЗначение  = Поле;
	НовыйЭлемент.ВидСравнения   = ВидСравнения;
	НовыйЭлемент.ПравоеЗначение = Значение;
	
	Возврат НовыйЭлемент;
	
КонецФункции
// Возвращает значение параметра компоновки данных.
//
// Параметры:
//  Настройки - НастройкиКомпоновкиДанных, ПользовательскиеНастройкиКомпоновкиДанных, КомпоновщикНастроекКомпоновкиДанных, 
//              КоллекцияЗначенийПараметровКомпоновкиДанных, ОформлениеКомпоновкиДанных - 
//              Настройки, в которых происходит поиск параметра. Не поддерживает тип ДанныеРасшифровкиКомпоновкиДанных.
//  Параметр - Строка, ПараметрКомпоновкиДанных - Имя параметра СКД, для которого нужно вернуть значение параметра.
//
// Возвращаемое значение:
//	ПараметрКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных - Искомый параметр.
//	
Функция ПолучитьПараметр(Настройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из Настройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = Настройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Настройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(Настройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = Настройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции
&НаСервере
Функция КритическоеОборудование()

Возврат БлокиИнформационнойПанели.КритическоеОборудование();	

КонецФункции // 
&НаКлиенте
Процедура ОчиститьПользовательскиеОтборы(ОбластьНастроек)
	Настройки=ОбластьНастроек.КомпоновщикНастроек.ПользовательскиеНастройки;
	Для каждого Настройка Из Настройки.Элементы Цикл
            Если ТипЗнч(Настройка) = Тип("ОтборКомпоновкиДанных") Тогда
                Настройка.Элементы.Очистить();
			ИначеЕсли  ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
	            Настройка.Использование=Ложь;
			КонецЕсли;
        КонецЦикла; 
КонецПроцедуры


// -- rarus yukuzi 23.08.2021
