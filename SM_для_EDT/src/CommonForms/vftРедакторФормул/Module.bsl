
&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	ОчиститьСообщения();
	Результаты = РезультатыРедактирования(Формула, Ложь);
	Если Результаты <> Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Проверка формулы завершена успешно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПоказательВФормулу(Команда)
	Если Элементы.Показатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВФормулу("["+Элементы.Показатели.ТекущиеДанные.Идентификатор+"]");	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСлеш(Команда)
	ДобавитьВФормулу("/")	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПлюс(Команда)
	ДобавитьВФормулу("+")
КонецПроцедуры

&НаКлиенте
Процедура Ок(Команда)
	ВыбратьИЗакрыть();	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВертикальныйРазделитель(Команда)
ДобавитьВФормулу("|")	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Модифицированность = Ложь;
	Закрыть();	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ОчиститьСообщения();
	Результаты = РезультатыРедактирования(Формула);
	
	Если Результаты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть(Результаты);
	
КонецПроцедуры

&НаСервере
Функция РезультатыРедактирования(Формула, ДополнятьРезультаты = Истина)
	
	Результаты = Новый Структура;
	Результаты.Вставить("Формула", Формула);
	
	ПараметрыВыполненияФормулы = ПараметрыВыполненияФормулы(Формула);

	Если ПараметрыВыполненияФормулы = Неопределено Тогда
		Возврат Неопределено
	Иначе
		Возврат Результаты;
	КонецЕсли;
	
КонецФункции

Функция ПараметрыВыполненияФормулы(Знач Формула, ПроверятьФормулу = Истина) Экспорт
	Отказ = Ложь;	
	
	Если Не ЗначениеЗаполнено(Формула) Тогда
		Если Не ПроверятьФормулу Тогда
			Возврат Неопределено;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Формула не заполнена'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		// Получим  из формулы идентификаторы используемых показателей
		ИдентификаторыПоказателейФормулы = vftШаблоныРДО.ИдентификаторыПоказателейФормулы(Формула);
		// Проверим существование показателей
		ПоказателиФормулы = ПоказателиПоИдентификаторам(ИдентификаторыПоказателейФормулы);
		Если ПоказателиФормулы = Неопределено Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда

		// Проверим правильность составления формулы
		ФормулаДляВыполнения = ФормулаДляВыполнения(Формула, ИдентификаторыПоказателейФормулы);
		//ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателейФормулы, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено
	Иначе
		Возврат Новый Структура("ФормулаДляВыполнения, ПоказателиФормулы", ФормулаДляВыполнения, ПоказателиФормулы) 
	КонецЕсли;
	
КонецФункции

Функция ФормулаДляВыполнения(Формула, ИдентификаторыПоказателей)
	ФормулаДляВыполнения = "";
	
	НачалоСлова = 1;
	Для Позиция = 1 По СтрДлина(Формула) Цикл
		КодСимвола = КодСимвола(Формула, Позиция);
		Если vftШаблоныРДО.ЭтоРазделительСлов(КодСимвола) И НЕ ЭтоСлужебныйСимвол(КодСимвола) Тогда
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			ФормулаДляВыполнения = ФормулаДляВыполнения + Сред(Формула, Позиция, 1);
			НачалоСлова = Позиция + 1;
		ИначеЕсли ЭтоСлужебныйСимвол(КодСимвола) Тогда 
			ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей);

	Возврат ФормулаДляВыполнения
КонецФункции

Функция ЭтоСлужебныйСимвол(КодСимвола)
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 91, 91)); 		// символ "["
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 93, 93)); 		// символ "]"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 123, 123)); 		// символ "{"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 124, 124)); 		// символ "|"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 125, 125)); 		// символ "}"

	
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Процедура ДописатьТекущееСловоВФормулуДляВыполнения(Формула, ФормулаДляВыполнения, Позиция, НачалоСлова, ИдентификаторыПоказателей)
 	Если Позиция <> НачалоСлова Тогда
		Слово = Сред(Формула, НачалоСлова, Позиция - НачалоСлова);
		Если ИдентификаторыПоказателей.Найти(Слово) <> Неопределено Тогда
			ФормулаДляВыполнения = ФормулаДляВыполнения + "ИсходныеДанные." + Слово;
		иначе
			ФормулаДляВыполнения = ФормулаДляВыполнения + Слово;
		КонецЕсли;
	КонецЕсли;               
КонецПроцедуры


Процедура ПроверитьВыполнимостьФормулы(ФормулаДляВыполнения, ИдентификаторыПоказателей, Отказ = Ложь)
	
	// Подготовим структуру для выполнения формулы
	ГСЧ = Новый ГенераторСлучайныхЧисел;
	ИсходныеДанные = Новый Структура;
	Для каждого Показатель Из ИдентификаторыПоказателей Цикл
		ИсходныеДанные.Вставить(Показатель, ГСЧ.СлучайноеЧисло(1,9));
	КонецЦикла;
	
	Попытка 
		Результат = Вычислить(ФормулаДляВыполнения);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При проверке вычисления по формуле возникла ошибка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецПопытки
	
КонецПроцедуры

Функция ПоказателиПоИдентификаторам(ИдентификаторыПоказателей)
	
	Отказ = Ложь;
	
	ПоказателиВр = Новый Массив;
	Для Каждого Идентификатор Из ИдентификаторыПоказателей Цикл
		// Это должен быть показатель
		Показатель = ПоказательПоИдентификатору(Идентификатор);
		Если Не ЗначениеЗаполнено(Показатель) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось найти показатель по идентификатору %1'"), Идентификатор);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
			Продолжить;
		КонецЕсли;
		ПоказателиВр.Добавить(Показатель);
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат Неопределено
	иначе	
		Возврат ПоказателиВр
	КонецЕсли;
	
КонецФункции

Функция ПоказательПоИдентификатору(Идентификатор, УчитыватьРегистр = Ложь) Экспорт
	
	Таблица = Документы.vftРДО.ПолучитьРеквизитыРДО();
	Если Таблица.Найти(Идентификатор, "Идентификатор")<>Неопределено Тогда
		Возврат Идентификатор;	
	КонецЕсли; 
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьВФормулу(Идентификатор)
	УстановитьТекстВПозициюКурсора(Идентификатор)	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекстВПозициюКурсора(Текст = "")
	
	НачальнаяСтрокаВыделения = 0; 
	НачальнаяКолонкаВыделения = 0; 
	КонечнаяСтрокаВыделения = 0; 
	КонечнаяКолонкаВыделения = 0;
	
	//Получим текущую позицию курсора
	Элементы.Формула.ПолучитьГраницыВыделения(НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения, КонечнаяСтрокаВыделения, КонечнаяКолонкаВыделения);
	
	Если ПустаяСтрока(Текст) Тогда
		НачальнаяКолонкаВыделения = НачальнаяКолонкаВыделения + СтрДлина(Формула);
	иначе
		Элементы.Формула.ВыделенныйТекст = Текст;
		Модифицированность = Истина;
		
		//Установим курсор после вставленного текста 
		НачальнаяКолонкаВыделения = НачальнаяКолонкаВыделения + СтрДлина(Текст);
	КонецЕсли;
	
	Элементы.Формула.УстановитьГраницыВыделения(НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения, НачальнаяСтрокаВыделения, НачальнаяКолонкаВыделения);
	
КонецПроцедуры


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Формула = Параметры.Формула;
	Показатели.Загрузить(Документы.vftРДО.ПолучитьРеквизитыРДО());
КонецПроцедуры


&НаКлиенте
Процедура ПоказателиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Показатели.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВФормулу("["+Элементы.Показатели.ТекущиеДанные.Идентификатор+"]");
КонецПроцедуры


&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьТекстВПозициюКурсора();
КонецПроцедуры


&НаКлиенте
Процедура КомандаФигСкобкаОтк(Команда)
	ДобавитьВФормулу("{");	
КонецПроцедуры


&НаКлиенте
Процедура КомандаФигСкобкаЗак(Команда)
	ДобавитьВФормулу("}");
КонецПроцедуры


&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если Не ЭтаФорма.Модифицированность Тогда
		Возврат;
	Иначе
		ПодтвердитьЗакрытиеФормы(Отказ)
	КонецЕсли;
КонецПроцедуры



&НаКлиенте
Процедура ПодтвердитьЗакрытиеФормы(Отказ)
	
	Отказ=Истина;	
	Оповещение = Новый ОписаниеОповещения("ПодтвердитьЗакрытиеФормыЗавершение", ЭтаФорма);
	//Если ПустаяСтрока(Параметры.ТекстПредупреждения) Тогда
	ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
	//Иначе
	//	ТекстВопроса = Параметры.ТекстПредупреждения;
	//КонецЕсли;
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена,0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьЗакрытиеФормыЗавершение(Ответ, Параметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ВыбратьИЗакрыть();
	ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
		
		ЭтаФорма.Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
	Иначе
		
		ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура КомандаОбратныйСлеш(Команда)
	ДобавитьВФормулу("\");	
КонецПроцедуры

