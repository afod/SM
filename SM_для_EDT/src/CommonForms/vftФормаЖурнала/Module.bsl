
&НаКлиенте
Процедура РейсПриИзменении(Элемент)
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ТаблицаНовая.Отбор, "Рейс", Рейс, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Рейс));
	Если ЗначениеЗаполнено(Рейс) Тогда
		ПолучитьНаборЗаписей();		
	КонецЕсли;
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
	УстановитьВидимостьДоступность();
	// -- rarus Камаев П.В. 03.04.2020
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	//++ rarus markim toir	

	НастройкиВосстановлены = ЗначениеЗаполнено(ДатаАктуальности) и ПлановыйПериод > 0 и ЗначениеЗаполнено(Периодичность);
	
	Если НЕ НастройкиВосстановлены Тогда
		ДатаАктуальности         = ТекущаяДата();
		ПлановыйПериод           = 5;
		Периодичность            = Перечисления.Периодичность.Год;
		ЗаполнитьТаблицуПриоритетностиОР();
	КонецЕсли;
	
	Дата = ТекущаяДата();
	
	Период.ДатаНачала = НачалоГода(ТекущаяДата());
	Период.ДатаОкончания = КонецМесяца(ТекущаяДата());
	
	//-- rarus markim toir
	
	// ++ rarus Камаев П.В. 30.03.2020 Задача № 20645
	УстановитьВидимостьДоступность();
	// -- rarus Камаев П.В. 30.03.2020
	
	// ++ rarus markim 08.07.2020 
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРейсов, "ПометкаУдаления", Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.СписокРейсовПоказыватьУдаленные.Пометка);
	// -- rarus markim 08.07.2020

	// ++ rarus Камаев П.В. 29.09.2020 Задача № 24459
	мПриниматьДанныеПриЗапуске = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПриниматьДанныеПриЗапуске", "ПриниматьДанныеПриЗапуске");
	Если мПриниматьДанныеПриЗапуске = Неопределено Тогда
		//++ rarus isaeva 12.03.2021
		//ПриниматьДанныеПриЗапуске = Истина;
		ПриниматьДанныеПриЗапуске = Ложь;
		//-- rarus isaeva 12.03.2021
	Иначе
		ПриниматьДанныеПриЗапуске = мПриниматьДанныеПриЗапуске;
	КонецЕсли;
	мПередаватьДанныеПриВыходе = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПередаватьДанныеПриВыходе", "ПередаватьДанныеПриВыходе");
	Если мПередаватьДанныеПриВыходе = Неопределено Тогда
		//++ rarus isaeva 12.03.2021
		//ПередаватьДанныеПриВыходе = Истина;
		ПередаватьДанныеПриВыходе = Ложь;
		//-- rarus isaeva 12.03.2021
	Иначе
		ПередаватьДанныеПриВыходе = мПередаватьДанныеПриВыходе;
	КонецЕсли;
	глПередаватьДанныеПриВыходе = ПередаватьДанныеПриВыходе;
	// -- rarus Камаев П.В. 29.09.2020
	
	// ++ rarus selmik 09.11.2020
	ВыделениеКритическихРабот =Истина;	
	Если ЦветКритическихРабот = Новый Цвет(0, 0, 0) Тогда
		ЦветКритическихРабот = WebЦвета.Розовый;
	КонецЕсли;
	
	ЕстьКлассическийТоир = Ложь;
	
	Если ЗначениеЗаполнено(ОсновноеСудно) Тогда
		ПараметрыФункциональнойОпции = Новый Структура("Судно", ОсновноеСудно);
		ЕстьКлассическийТоир = ПолучитьФункциональнуюОпцию("рарусИспользоватьКлассическийТОИР", ПараметрыФункциональнойОпции);
	Иначе
		ЕстьКлассическийТоир = ПолучитьФункциональнуюОпцию("рарусИспользоватьКлассическийТОИР");
	КонецЕсли;
	
	Если Не ЕстьКлассическийТоир Тогда
		Элементы.ТОиР.Видимость = Ложь;
	КонецЕсли;
		
	//Если Константы.рарусПроцентВремениДоСледующейРаботыППР.Получить() = 0 Тогда
	//	// Значение по умолчанию 80
	//	Константы.рарусПроцентВремениДоСледующейРаботыППР.Установить(80);
	//КонецЕсли;
	// ++ rarus selmik 09.11.2020
	
	// ++ rarus Камаев П.В. 02.04.2021 Задача № 28365
	ЭтоПолноправныйПользовательИБ = vftОбщегоНазначенияВызовСервера.ЭтоПолноправныйПользовательИБ();
	// -- rarus Камаев П.В. 02.04.2021

КонецПроцедуры

// ++ rarus Камаев П.В. 29.09.2020 Задача № 24459
&НаКлиенте
Процедура ПриниматьДанныеПриЗапускеПриИзменении(Элемент)
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПриниматьДанныеПриЗапуске", "ПриниматьДанныеПриЗапуске", ПриниматьДанныеПриЗапуске);
КонецПроцедуры

&НаКлиенте
Процедура ПередаватьДанныеПриВыходеПриИзменении(Элемент)
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПередаватьДанныеПриВыходе", "ПередаватьДанныеПриВыходе", ПередаватьДанныеПриВыходе);
	глПередаватьДанныеПриВыходе = ПередаватьДанныеПриВыходе;
КонецПроцедуры
// -- rarus Камаев П.В. 29.09.2020

// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	// ++ rarus Камаев П.В. 13.05.2020 Задача № 21491
	////Для ННФ показывается только РС
	// Если рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(ОсновноеСудно) Тогда
	//	Элементы.ПутевойЖурналРС.Видимость = Истина;
	//	Элементы.ПутевойЖурналДок.Видимость	= Ложь;
	//КонецЕсли;
	//
	////Для СГФ показывается только список документов Рейс
	//Если рарусОбщегоНазначенияВызовСервера.ЭтоСудноСГФ(ОсновноеСудно) Тогда
		Элементы.ПутевойЖурналРС.Видимость = Ложь;
		Элементы.ПутевойЖурналДок.Видимость	= Истина;
	//КонецЕсли;
	ЭтоГлавныйУзел = vftОбщегоНазначения.ЭтоГлавныйУзел(); 
	Элементы.СписокРейсовОбменГУ.Видимость		= ЭтоГлавныйУзел;
	Элементы.СписокРейсовОбменСудно.Видимость	= НЕ ЭтоГлавныйУзел;
	// -- rarus Камаев П.В. 13.05.2020
		
	//Нормы видны только для ННФ
	ЭтоСудноННФ = рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Рейс.Судно);
	Элементы.ТаблицаПройденноеРасстояниеНорма.Видимость = ЭтоСудноННФ;
	Элементы.ТаблицаХодовоеВремяНорма.Видимость			= ЭтоСудноННФ;
	Элементы.ТаблицаХодовоеВремяНормаВывод.Видимость	= ЭтоСудноННФ;

	// ++ rarus Камаев П.В. 04.06.2020 Задача № 22119
	Элементы.РегистрацияОбмена.Видимость = НЕ ЭтоГлавныйУзел;
	// -- rarus Камаев П.В. 04.06.2020
	// ++ rarus Камаев П.В. 13.08.2020 Задача № 23225 
	Элементы.СписокРейсовНомер.Видимость = НЕ ЭтоГлавныйУзел;
	// -- rarus Камаев П.В. 13.08.2020
	
	// ++ rarus Камаев П.В. 29.09.2020 Задача № 24459
	Элементы.ПриниматьДанныеПриЗапуске.Видимость = НЕ ЭтоГлавныйУзел;
	Элементы.ПередаватьДанныеПриВыходе.Видимость = НЕ ЭтоГлавныйУзел;
	// -- rarus Камаев П.В. 29.09.2020
	
	// ++ rarus Камаев П.В. 25.11.2020 Задача № 25503
	Элементы.ОбменГУПередатьПоВсемСудам.Видимость = ЭтоГлавныйУзел И РольДоступна("ПолныеПрава");
	// -- rarus Камаев П.В. 25.11.2020
	
КонецПроцедуры
// -- rarus Камаев П.В. 03.04.2020

&НаСервере
Процедура ПолучитьНаборЗаписей()
	НаборЗаписей = РегистрыСведений.vftТаблицаДвижения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Установить(Рейс);
	НаборЗаписей.Прочитать();
	
	
	ЗначениеВДанныеФормы(НаборЗаписей,Таблица);
	
	Для каждого Строка Из Таблица Цикл
		Строка.ХодовоеВремяНормаВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Строка.ХодовоеВремяНорма);
		Строка.ХодовоеВремяФактВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Строка.ХодовоеВремяФакт);
		Строка.ВремяСтоянкиВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Строка.ВремяСтоянки);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ ЗначениеЗаполнено(ОсновноеСудно) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполнено основное судно'");
		Сообщение.Поле = "ОсновноеСудно";
		//Сообщение.УстановитьДанные(ОбъектДанных);
		Сообщение.Сообщить();
		Отказ = Истина;
	ИначеЕсли НЕ ЗначениеЗаполнено(Рейс) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Укажите текущий рейс'");
		Сообщение.Поле = "Рейс";
		//Сообщение.УстановитьДанные(ОбъектДанных);
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	// rarus_KloA_20.02.2015 < 
	//проверим можно ли добавлять признак после выгрузки
	ПараметрыВыгрузки = ПолучитьСтруктуруПараметровВыгрузкиПоРейсу(Рейс);
	Если ПараметрыВыгрузки.БылаВыгрузка И НЕ ПараметрыВыгрузки.НесколькоВыгрузок Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Уже указано отправление после выгрузки. Рейс завершен.'");
		Сообщение.Сообщить();
		Отказ = Истина;	
	КонецЕсли; 
	// rarus_KloA_20.02.2015 > 
	
	
	Если Таблица.Количество() Тогда
		ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
		ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
		Если Не ЗначениеЗаполнено(Таблица[ИндексТекущейСтроки].Окончание) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Укажите дату окончания'");
			Сообщение.Поле = "Таблица["+ИндексТекущейСтроки+"].Окончание";;
			//Сообщение.УстановитьДанные(ОбъектДанных);
			Сообщение.Сообщить();
			Отказ = Истина;	
		КонецЕсли;
	// rarus_KloA_20.08.2015 < 
	Иначе //добавим первую строку OV предыдущего рейса
		ПредыдущийРейс = ПолучитьСтруктуруПредРейса(Рейс);
		ОВ = ПолучитьВидОперацииОкончаниеВыгрузки();
		Если ПредыдущийРейс.Результат = Истина И ПредыдущийРейс.ВидОперации = ОВ Тогда
			ПерваяСтрокаОВ = Таблица.Добавить();
			ЗаполнитьЗначенияСвойств(ПерваяСтрокаОВ,ПредыдущийРейс);
			ПерваяСтрокаОВ.Отправлено = Истина;
			ПерваяСтрокаОВ.Судно = ОсновноеСудно;
			ПерваяСтрокаОВ.Рейс = Рейс;
			ПерваяСтрокаОВ.Период = ПерваяСтрокаОВ.Начало;
		ИначеЕсли ПредыдущийРейс.Результат = Истина Тогда 
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'По предыдущему рейсу не обнаружено операции отправления после выгрузки'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли; 
		
	// rarus_KloA_20.08.2015 > 
	КонецЕсли; 
	 
КонецПроцедуры

Функция ПолучитьСтруктуруПредРейса(ТекРейс)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаТекРейса", ТекРейс.ДатаНачала);
	Запрос.УстановитьПараметр("Судно", ТекРейс.Судно);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	vftРейс.Ссылка,
	               |	vftРейс.ДатаНачала КАК ДатаНачала
	               |ПОМЕСТИТЬ ПредРейс
	               |ИЗ
	               |	Документ.vftРейс КАК vftРейс
	               |ГДЕ
	               |	vftРейс.ДатаНачала < &ДатаНачалаТекРейса
	               |	И НЕ vftРейс.ПометкаУдаления
	               |	И vftРейс.Судно = &Судно
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНачала УБЫВ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	vftТаблицаДвижения.Координаты,
	               |	vftТаблицаДвижения.Начало,
	               |	vftТаблицаДвижения.Окончание,
				   |	vftТаблицаДвижения.ВидОперации,
	               |	vftТаблицаДвижения.Пункт
	               |ИЗ
	               |	РегистрСведений.vftТаблицаДвижения КАК vftТаблицаДвижения
	               |ГДЕ
	               |	vftТаблицаДвижения.Рейс В
	               |			(ВЫБРАТЬ
	               |				ПредРейс.Ссылка
	               |			ИЗ
	               |				ПредРейс КАК ПредРейс)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	vftТаблицаДвижения.Период УБЫВ";
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Истина);
		СтруктураВозврата.Вставить("Координаты", Результат[0].Координаты);
		СтруктураВозврата.Вставить("Начало", Результат[0].Начало);
		СтруктураВозврата.Вставить("Окончание", Результат[0].Окончание);
		СтруктураВозврата.Вставить("Пункт", Результат[0].Пункт);
		СтруктураВозврата.Вставить("ВидОперации", Результат[0].ВидОперации);
	Иначе
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("Результат", Ложь);
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции
 

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПараметровВыгрузкиПоРейсу(СсылкаРейс)
	СтруктураПараметров = Новый Структура("БылаВыгрузка, НесколькоВыгрузок", Ложь, СсылкаРейс.НесколькоВыгрузок);
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Рейс", СсылкаРейс);
	Запрос.УстановитьПараметр("ОперацияВыгрузка",Константы.vftОкончаниеВыгрузки.Получить());
	Запрос.Текст = "ВЫБРАТЬ
	               |	vftТаблицаДвиженияСрезПервых.Период,
	               |	vftТаблицаДвиженияСрезПервых.Рейс
	               |ПОМЕСТИТЬ ПерваяЗапись
	               |ИЗ
	               |	РегистрСведений.vftТаблицаДвижения.СрезПервых(, Рейс = &Рейс) КАК vftТаблицаДвиженияСрезПервых
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	vftТаблицаДвижения.Период,
	               |	vftТаблицаДвижения.Судно,
	               |	vftТаблицаДвижения.Рейс,
	               |	vftТаблицаДвижения.Пункт,
	               |	vftТаблицаДвижения.ВидОперации,
	               |	vftТаблицаДвижения.Координаты,
	               |	vftТаблицаДвижения.Начало,
	               |	vftТаблицаДвижения.Окончание,
	               |	vftТаблицаДвижения.Примечание,
	               |	vftТаблицаДвижения.ПройденноеРасстояниеНорма,
	               |	vftТаблицаДвижения.ПройденноеРасстояниеФакт,
	               |	vftТаблицаДвижения.ХодовоеВремяНорма,
	               |	vftТаблицаДвижения.ХодовоеВремяФакт,
	               |	vftТаблицаДвижения.ДопСведения,
	               |	vftТаблицаДвижения.ВремяСтоянки,
	               |	vftТаблицаДвижения.Отправлено
	               |ИЗ
	               |	РегистрСведений.vftТаблицаДвижения КАК vftТаблицаДвижения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПерваяЗапись КАК ПерваяЗапись
	               |		ПО vftТаблицаДвижения.Рейс = ПерваяЗапись.Рейс
	               |			И vftТаблицаДвижения.Период <> ПерваяЗапись.Период
	               |ГДЕ
	               |	vftТаблицаДвижения.Рейс = &Рейс
	               |	И vftТаблицаДвижения.ВидОперации = &ОперацияВыгрузка";
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		СтруктураПараметров.БылаВыгрузка = Истина;
	КонецЕсли; 
	
	Возврат СтруктураПараметров;
КонецФункции
 

&НаКлиенте
Процедура ТаблицаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекущиеДанные.Судно = ОсновноеСудно;
		ТекущиеДанные.Рейс = Рейс;
		Если Таблица.Количество()=1 Тогда
			ТекущиеДанные.Пункт = ПолучитьПунктОтправленияРейса(Рейс);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПунктОтправленияРейса(Рейс)
	// ++ rarus Камаев П.В. 06.04.2020 Задача № 20799
	// Возврат Рейс.ПортОтправления;
	Порты = рарусОбщегоНазначенияКлиентСервер.ПолучитьПортыРейса(Рейс.ПунктыСледования);
	Возврат Порты.ПортОтправления;
	// -- rarus Камаев П.В. 06.04.2020
КонецФункции
 

&НаКлиенте
Процедура ТаблицаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
		ПериодКорректный = ПроверитьПериод(ТекущиеДанные.Судно, ТекущиеДанные.Начало);
		// rarus_KloA_21.11.2014 < 
		Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидОперации) Тогда
			ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не верно заполнено поле'");
			Сообщение.Поле = "Таблица["+ИндексТекущейСтроки+"].ВидОперации";
			Сообщение.УстановитьДанные(Таблица);
			Сообщение.Сообщить();
			Элемент.ТекущийЭлемент = Элементы.ТаблицаВидОперации;
			// ++ rarus kloa 26.02.2018 
			Отказ=Истина;
			Модифицированность = Истина;
			// -- rarus kloa 26.02.2018 
		КонецЕсли; 
		// rarus_KloA_21.11.2014 > 
		Если ПериодКорректный Тогда
			ТекущиеДанные.Период = ТекущиеДанные.Начало;
			//Если это отметка о портах, нужно заполнить окончание
			НужнаСтоянка = ПроверитьСтоянку(ТекущиеДанные.ВидОперации);
			Если НужнаСтоянка Тогда
				ТекущиеДанные.Окончание = ТекущиеДанные.Начало;
				ТаблицаПолеОтходВремяПриИзменении(Элемент);
			иначе
				Если ЗначениеЗаполнено(ТекущиеДанные.Окончание) И ТекущиеДанные.Окончание<ТекущиеДанные.Начало Тогда
					ТекущиеДанные.Окончание = ТекущиеДанные.Начало;	
				КонецЕсли; 
			КонецЕсли;
			// ++ rarus kloa 29.03.2016  
			Если ЗначениеЗаполнено(ТекущиеДанные.ВидОперации) Тогда
				Если ЗакрытьОперацию(ТекущиеДанные.ВидОперации) Тогда
					ТекущиеДанные.Окончание = ТекущиеДанные.Начало;
					ТаблицаПолеОтходВремяПриИзменении(Элемент);
				КонецЕсли; 
			КонецЕсли; 
			// -- rarus kloa 29.03.2016
		Иначе
			ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Не верно заполнено поле'");
			Сообщение.Поле = "Таблица["+ИндексТекущейСтроки+"].Начало";
			Сообщение.УстановитьДанные(Таблица);
			Сообщение.Сообщить();
			//Элемент.ЗакончитьРедактированиеСтроки(Ложь);
			//Отказ = Истина;
			Элемент.ТекущийЭлемент = Элементы.ТаблицаНачало;
			//СтандартнаяОбработка=ложь;
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПериод(Судно, ДатаНачало)
	
	ДатаПослЗаписи = ПолучитьДатуПоследнейКорректнойЗаписи(Судно);
	Если ДатаПослЗаписи<=ДатаНачало Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
	
КонецФункции

Функция ПолучитьДатуПоследнейКорректнойЗаписи(Судно)
	Запрос  = Новый Запрос;
	Запрос.УстановитьПараметр("Судно", Судно);
	Запрос.Текст = "ВЫБРАТЬ
	               |	vftТаблицаДвиженияСрезПоследних.Период КАК Дата
	               |ИЗ
	               |	РегистрСведений.vftТаблицаДвижения.СрезПоследних(
	               |			,
	               |			Судно = &Судно
	               |				И Отправлено) КАК vftТаблицаДвиженияСрезПоследних";
	Результат = Запрос.Выполнить().Выгрузить();
	
	ВЫборка = РегистрыСведений.vftТаблицаДвижения.Выбрать(,,Новый Структура("Отправлено",Истина),"УБЫВ");
	Если Выборка.Следующий() И Выборка.Судно = Судно Тогда
		Возврат Выборка.Период;
	Иначе
		Возврат Дата('00010101');
	КонецЕсли;   
	
	
	Если Результат.Количество() Тогда
		Возврат Результат[0].Дата;
	Иначе
		Возврат Дата('00010101');
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура ТаблицаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Начало) Тогда
		ЗаписатьНабор();
		
		Если ТекущиеДанные.ПолучитьИдентификатор() = Таблица[Таблица.Количество()-1].получитьИдентификатор() Тогда
			НужнаСтоянка = ПроверитьСтоянку(ТекущиеДанные.ВидОперации);
			Если НужнаСтоянка Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьОтвет", ЭтаФорма);
				ПоказатьВопрос(ОписаниеОповещения, "После данной операции необходимо добавить обязательную операцию стоянки. Добавить?",РежимДиалогаВопрос.ДаНет, 60);
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли; 
	 
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Нет Тогда
        НоваяОперация = Таблица.Добавить();
		Новаяоперация.Начало = Элементы.Таблица.ТекущиеДанные.Окончание+1;
		НоваяОперация.Судно = ОсновноеСудно;
		Новаяоперация.Рейс = Рейс;
		НоваяОперация.Пункт = Элементы.Таблица.ТекущиеДанные.Пункт;
		ПериодКорректный = ПроверитьПериод(НоваяОперация.Судно, НоваяОперация.Начало);
		Если ПериодКорректный Тогда
			НоваяОперация.Период = НоваяОперация.Начало;
			ЗаписатьНабор();
		Иначе
			
		КонецЕсли;
    КонецЕсли; 
    

КонецПроцедуры

&НаСервере
Функция ПроверитьСтоянку(ВидОперации)
	Возврат ВидОперации.НеобходимаСтоянка;	
КонецФункции
 

&НаСервере
Процедура ЗаписатьНабор()
	 
	НаборЗаписейдляЗаписи = РегистрыСведений.vftТаблицаДвижения.СоздатьНаборЗаписей();
	НаборЗаписейДляЗаписи.Отбор.Рейс.Установить(Рейс);
	НаборЗаписейДляЗаписи.Прочитать();
	НаборЗаписейдляЗаписи.Загрузить(Таблица.Выгрузить());
	НаборЗаписейдляЗаписи.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередНачаломИзменения(Элемент, Отказ)
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	Если ТекущиеДанные.Отправлено Тогда
		Отказ = Истина;
	КонецЕсли;
	// ++ rarus kloa 26.02.2018  Еще один вариант дополнительного контроля
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидОперации) И Не Элементы.Таблица.ТекущийЭлемент.Имя = "ТаблицаВидОперации" Тогда
	//	Отказ = Истина;
	//	ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = НСтр("ru = 'Сначала заполните поле Вид операции'");
	//	Сообщение.Поле = "Таблица["+ИндексТекущейСтроки+"].ВидОперации";
	//	Сообщение.УстановитьДанные(Таблица);
	//	Сообщение.Сообщить();
	//КонецЕсли; 
	// -- rarus kloa 26.02.2018 
	// rarus_KloA_30.11.2014 < 
	Если Элементы.Таблица.ТекущийЭлемент.Имя = "ТаблицаПройденноеРасстояниеНорма" И ЗначениеЗаполнено(ТекущиеДанные.Пункт) Тогда
		Отказ = Истина;	
	КонецЕсли; 
	// rarus_KloA_30.11.2014 > 
	 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(Рейс) Тогда
		ПолучитьНаборЗаписей();		
	КонецЕсли;	
	
//++ rarus markim toir	
	Если ВидДаты = 0 Тогда
		ДатаАктуальности = ТекущаяДата();
	КонецЕсли;
	Если ТаблицаПросроченных.Количество() = 0 Тогда	 
		ТаблицаПросроченных.Добавить().Цвет = Новый Цвет(255, 102, 102);
	КонецЕсли;
	УстановитьПараметрыДинамическогоСпискаКлиент();
	УстановитьУсловноеОформление();
//-- rarus markim toir	

	// ++ rarus selmik 09.11.2020 25003
	Элементы.рарусНормативнаяИнформация.ТекущаяСтраница = Элементы.История;
		
	ПодключитьОбработчикОжидания("ОбновитьРемонты", ПериодичностьОбновленияЖурналаППР());
	// -- rarus selmik 09.11.2020 25003

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	 
	ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
	Если НЕ ПроверитьВыбранноеЗначение(ВыбранноеЗначение,ИндексТекущейСтроки) 
		// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785
		И рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(РеквизитРейса(Рейс, "Судно")) Тогда
		// -- rarus Камаев П.В. 06.04.2020
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Необходимо выбрать контрольный пункт, смежный с предыдущим";
		Сообщение.Сообщить(); 
		СтандартнаяОбработка = Ложь;	
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПроверитьВыбранноеЗначение(ВыбранныйПункт, ИндексТекущейСтроки)
	Если Таблица.Количество()=1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПредыдущаяСтрока = Таблица[ИндексТекущейСтроки-1];
	
	Если ЗначениеЗаполнено(ПредыдущаяСтрока.Пункт) Тогда
		Если ВыбранныйПункт.РекаМоре = Перечисления.vftРекаМоре.Море 
			ИЛИ ПредыдущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Море
			ИЛИ ВыбранныйПункт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO 
			ИЛИ ВыбранныйПункт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO 
			ИЛИ ПредыдущаяСтрока.Пункт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO 
			ИЛИ ПредыдущаяСтрока.Пункт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO Тогда
			Возврат Истина;
		КонецЕсли;
		
		// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785
		//МассивСмежныхПунктов = РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(ВыбранныйПункт);
		МассивСмежныхПунктов = РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(ВыбранныйПункт, Рейс.Судно);
		// -- rarus Камаев П.В. 03.04.2020
				
		Если МассивСмежныхПунктов.Найти(ПредыдущаяСтрока.Пункт)<>Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		//найдем последний заполненный пункт
		ТекущаяСтрока = Таблица[ИндексТекущейСтроки];
		ПоследнийУказанныйПункт = Справочники.vftПунктыСледования.ПустаяСсылка();
		Для каждого СтрокаЖурнала Из Таблица Цикл
			Если ЗначениеЗаполнено(СтрокаЖурнала.Пункт) И НЕ ТекущаяСтрока=СтрокаЖурнала Тогда
				ПоследнийУказанныйПункт = СтрокаЖурнала.Пункт;	
			КонецЕсли; 	
		КонецЦикла;
		Если ЗначениеЗаполнено(ПоследнийУказанныйПункт) Тогда
			Если ВыбранныйПункт.РекаМоре = Перечисления.vftРекаМоре.Море 
				ИЛИ ПоследнийУказанныйПункт.РекаМоре = Перечисления.vftРекаМоре.Море
				ИЛИ ВыбранныйПункт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO 
				ИЛИ ВыбранныйПункт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO 
				ИЛИ ПоследнийУказанныйПункт = Справочники.vftПунктыСледования.МестоПереходаСIFOнаMFO 
				ИЛИ ПоследнийУказанныйПункт = Справочники.vftПунктыСледования.МестоПереходаСMFOНаIFO Тогда
				Возврат Истина;
			КонецЕсли;
			
			// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785
			//МассивСмежныхПунктов = РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(ВыбранныйПункт);
			МассивСмежныхПунктов = РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(ВыбранныйПункт, Рейс.Судно);
			// -- rarus Камаев П.В. 03.04.2020
						
			Если МассивСмежныхПунктов.Найти(ПоследнийУказанныйПункт)<>Неопределено Тогда
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Истина;
		КонецЕсли; 
	КонецЕсли; 
	 
	
КонецФункции

&НаКлиенте
Процедура ТаблицаПунктПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
	Если ЗначениеЗаполнено(ТекущиеДанные.Пункт) Тогда
		//Посчитаем	нормы
		ЗаполнитьНормыНаСервере(ИндексТекущейСтроки);
		
		
	КонецЕсли;
	// rarus_KloA_30.11.2014 < 
	//заблокируем норму расстояния
	Элементы.ТаблицаПройденноеРасстояниеНорма.ТолькоПросмотр = ЗначениеЗаполнено(ТекущиеДанные.Пункт);
	// rarus_KloA_30.11.2014 > 
	
	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормыНаСервере(ИндексТекущейСтроки)
	Если Таблица.Количество()=1 Тогда
		Возврат;
	КонецЕсли;
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
	//Для ННФ нормы не заполняются
	Если НЕ рарусОбщегоНазначенияВызовСервера.ЭтоСудноННФ(Рейс.Судно) Тогда
		Возврат;
	КонецЕсли;
	// -- rarus Камаев П.В. 03.04.2020
	ВГрузуВБалласте = ПолучитьЗначениеГрузБалласт(ИндексТекущейСтроки);
	ПредыдущаяСтрока = Таблица[ИндексТекущейСтроки-1];
	ТекущаяСтрока = Таблица[ИндексТекущейСтроки];
	Если ЗначениеЗаполнено(ПредыдущаяСтрока.Пункт) Тогда
		
		
		// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
		//	Заполнение по регистру рарусАктуальныеНормыСледованияПоПроектамСудов
			СтруктураНорм = РегистрыСведений.рарусАктуальныеНормыСледованияПоПроектамСудов.ПолучитьНормыСледования(ТекущаяСтрока.Пункт, ПредыдущаяСтрока.Пункт,ОсновноеСудно.Проект, ВГрузуВБалласте, ОсновноеСудно);		
			ТекущаяСтрока.ХодовоеВремяНорма = СтруктураНорм.Время;
			ТекущаяСтрока.ХодовоеВремяНормаВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ТекущаяСтрока.ХодовоеВремяНорма);
			ТекущаяСтрока.ПройденноеРасстояниеНорма = СтруктураНорм.Расстояние;
		
		//Если ПредыдущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Река И ТекущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Река Тогда
		//	
		//	СтруктураНорм = РегистрыСведений.vftНормыСледования.ПолучитьНормыСледования(ТекущаяСтрока.Пункт, ПредыдущаяСтрока.Пункт,ОсновноеСудно.Проект, ВГрузуВБалласте, ОсновноеСудно);//raruskzn AydaFZ 15.11.2019 добавил Параметр ОсновноеСудно		
		//	ТекущаяСтрока.ХодовоеВремяНорма = СтруктураНорм.Время;
		//	ТекущаяСтрока.ХодовоеВремяНормаВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ТекущаяСтрока.ХодовоеВремяНорма);
		//	ТекущаяСтрока.ПройденноеРасстояниеНорма = СтруктураНорм.Расстояние;
		//	
		//	
		//ИначеЕсли (ПредыдущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Река И ТекущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Море)
		//	ИЛИ (ПредыдущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Море И ТекущаяСтрока.Пункт.РекаМоре = Перечисления.vftРекаМоре.Река) Тогда
		//	
		//	СтруктураНорм = РегистрыСведений.vftТаблицаМорскихРасстояний.ПолучитьНормыСледования(ТекущаяСтрока.Пункт,ПредыдущаяСтрока.Пункт,ОсновноеСудно.Проект,ВГрузуВБалласте, ОсновноеСудно); //raruskzn AydaFZ 15.11.2019 добавил Параметр ОсновноеСудно
		//	ТекущаяСтрока.ХодовоеВремяНорма = СтруктураНорм.Время;
		//	ТекущаяСтрока.ХодовоеВремяНормаВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(ТекущаяСтрока.ХодовоеВремяНорма);
		//	ТекущаяСтрока.ПройденноеРасстояниеНорма = СтруктураНорм.Расстояние;
		//КонецЕсли; 
		// -- rarus Камаев П.В. 03.04.2020
		
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеГрузБалласт(ИндексТекущейСтроки)
	ПредыдущаяСтрока = Таблица[ИндексТекущейСтроки-1];
	ДатаОкончанияПредСтроки = ПредыдущаяСтрока.Окончание;	
	НаборЗаписей = РегистрыСведений.vftТаблицаДвижения.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Значение = Рейс;
	НаборЗаписей.Прочитать();
	
	ТаблицаДВижения = НаборЗаписей.Выгрузить();
	Для каждого Строка Из ТаблицаДвижения Цикл
		Если Строка.ВидОперации.ЧистыеГрузовыеОперации И Строка.Период<ДатаОкончанияПредСтроки Тогда
			Возврат Истина;
			прервать;
		КонецЕсли; 	
	КонецЦикла;
	
	Возврат ЛОжь;
КонецФункции

&НаКлиенте
Процедура ТаблицаНачалоПриИзменении(Элемент)
	ПриИзмененииДатыНачала();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПолеПриходВремяПриИзменении(Элемент)
	ПриИзмененииДатыНачала();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииДатыНачала()
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Начало) Тогда
		
	КонецЕсли; 
	ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
	Если Таблица.Количество()>1 И ИндексТекущейСтроки>0 Тогда
		ДатаОкончанияПредСтроки = Таблица[ИндексТекущейСтроки-1].Окончание;
		ДатаНачалаПредСтроки = Таблица[ИндексТекущейСтроки-1].Начало;
		
		Если ТекущиеДанные.Начало <= ДатаНачалаПредСтроки Тогда
			ТекущиеДанные.Начало = ДатаОкончанияПредСтроки+1;
		КонецЕсли;
		
		ТекущиеДанные.ХодовоеВремяФакт = (ТекущиеДанные.Начало-ДатаОкончанияПредСтроки)/60;
		ТекущиеДанные.ХодовоеВремяфактВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ХодовоеВремяФакт);
		
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.Начало) И ЗначениеЗаполнено(ТекущиеДанные.Окончание) И ТекущиеДанные.Начало<=ТекущиеДанные.Окончание Тогда
		ТекущиеДанные.ВремяСтоянки = (ТекущиеДанные.Окончание-ТекущиеДанные.Начало)/60;
		ТекущиеДанные.ВремяСтоянкиВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ВремяСтоянки);
	Иначе
		ТекущиеДанные.ВремяСтоянки = 0;
		ТекущиеДанные.ВремяСтоянкиВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ВремяСтоянки);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ЗакрытьОперацию(ВидОперации)
	Если ВидОперации.Закрывать Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли; 
КонецФункции
 

&НаКлиенте
Процедура ТаблицаПройденноеРасстояниеФактПриИзменении(Элемент)
	Текущиеданные = Элементы.Таблица.ТекущиеДанные;
	ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПройденноеРасстояниеНорма) 
		И ЗначениеЗаполнено(ТекущиеДанные.ПройденноеРасстояниеФакт) И ЗначениеЗаполнено(Текущиеданные.Пункт) Тогда
		ВГрузуВБалласте = ПолучитьЗначениеГрузБалласт(ИндексТекущейСтроки);
		РассчитатьНормуВремениПоРасстоянию(ВГрузуВБалласте, ИндексТекущейСтроки);
		// rarus_KloA_30.11.2014 < 
	ИначеЕсли (НЕ ЗначениеЗаполнено(ТекущиеДанные.Пункт)) И ЗначениеЗаполнено(ТекущиеДанные.ПройденноеРасстояниеФакт) Тогда 
		ВГрузуВБалласте = ПолучитьЗначениеГрузБалласт(ИндексТекущейСтроки);
		РассчитатьНормуВремениПоРасстоянию(ВГрузуВБалласте, ИндексТекущейСтроки);
		// rarus_KloA_30.11.2014 > 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура РассчитатьНормуВремениПоРасстоянию(ГрузБалласт, ИндексТекущейСтроки)
	Если Грузбалласт Тогда
		
		Таблица[ИндексТекущейСтроки].ХодовоевремяНорма = Окр(Таблица[ИндексТекущейСтроки].ПройденноеРасстояниеФакт/ОсновноеСудно.Проект.СредняяСкоростьНаМореВГрузу, 2)*60;
		Таблица[ИндексТекущейСтроки].ХодовоеВремяНормаВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Таблица[ИндексТекущейСтроки].ХодовоеВремяНорма);
	Иначе
		Таблица[ИндексТекущейСтроки].ХодовоевремяНорма =  Окр(Таблица[ИндексТекущейСтроки].ПройденноеРасстояниеФакт/ОсновноеСудно.Проект.СредняяСкоростьНаМореВБалласте,2)*60;		
		Таблица[ИндексТекущейСтроки].ХодовоеВремяНормаВывод = vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Таблица[ИндексТекущейСтроки].ХодовоеВремяНорма);
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОкончаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	//raruskzn AydaFZ 21.11.2019{
	Если ЗначениеЗаполнено(ТекущиеДанные.Начало) 
		И ЗначениеЗаполнено(ТекущиеДанные.Окончание) 
		И ТекущиеДанные.Начало <= ТекущиеДанные.Окончание Тогда
		
		ТекущиеДанные.ВремяСтоянки = (ТекущиеДанные.Окончание-ТекущиеДанные.Начало)/60;
		ТекущиеДанные.ВремяСтоянкиВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ВремяСтоянки);
		
	Иначе
		
		ТекущиеДанные.ВремяСтоянки = 0;
		ТекущиеДанные.ВремяСтоянкиВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ВремяСтоянки);

	КонецЕсли;
	//raruskzn AydaFZ 21.11.2019}

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПолеОтходВремяПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Начало) И ЗначениеЗаполнено(ТекущиеДанные.Окончание) И ТекущиеДанные.Начало<=ТекущиеДанные.Окончание Тогда
		ТекущиеДанные.ВремяСтоянки = (ТекущиеДанные.Окончание-ТекущиеДанные.Начало)/60;
		ТекущиеДанные.ВремяСтоянкиВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ВремяСтоянки);
	Иначе
		ТекущиеДанные.ВремяСтоянки = 0;
		ТекущиеДанные.ВремяСтоянкиВывод = vftОбщегоНазначенияВызовСервера.ПолучитьВремяИзМинут(ТекущиеДанные.ВремяСтоянки);
	КонецЕсли;
КонецПроцедуры

//rarus_AfoD 26.08.2021 < 
&НаСервереБезКонтекста
Функция РеквизитРейса(РейсСсылка, РеквизитИмя)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РейсСсылка, РеквизитИмя);	
КонецФункции
//rarus_AfoD 26.08.2021 > 

&НаСервереБезКонтекста
Функция ЗначениеРекаМоре(Пункт)
	Возврат Пункт.РекаМоре;	
КонецФункции
 
&НаКлиенте
Процедура ТаблицаПриАктивизацииЯчейки(Элемент)
	Если Элемент.Имя = "Таблица" Тогда
		ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
		//АдресТаблицы = ПоместитьВоВременноеХранилище(Таблица.Выгрузить());
		
		// ++ rarus kloa 28.03.2016 
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли; 
		// -- rarus kloa 28.03.2016 
		ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
		
		Если Таблица.Количество()=1 Тогда
			Элементы.ТаблицаПункт.СписокВыбора.Очистить();
			Возврат;
		КонецЕсли;
		
		// rarus_KloA_16.11.2015 < 
		Если ИндексТекущейСтроки = 0 Тогда
			Возврат;
		КонецЕсли; 
		// rarus_KloA_16.11.2015 > 
		ПредыдущаяСтрока = Таблица[ИндексТекущейСтроки-1];
		
		
		
		//Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);	
		
		СписокВыбораДляПункта = Новый Массив;
		
		//СписокВыбораДляПункта.Добавить(Пункт);
		
		
		ПредыдущаяСтрока = Таблица[ИндексТекущейСтроки-1];
		
		Если ЗначениеЗаполнено(ПредыдущаяСтрока.Пункт) Тогда
			//СписокВыбораДляПункта = Новый СписокЗначений;
			Если ЗначениеРекаМоре(ПредыдущаяСтрока.Пункт) = ПредопределенноеЗначение("Перечисление.vftРекаМоре.Море")
				
				ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСIFOнаMFO") 
				ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСMFOНаIFO") Тогда
				
			Иначе
				
				 // ++ rarus Камаев П.В. 03.04.2020 Задача № 20785 
				 //СписокВыбораДляПункта = ПолучитьМассивСП(ПредыдущаяСтрока.Пункт);
				 СписокВыбораДляПункта = ПолучитьМассивСП(ПредыдущаяСтрока.Пункт, Рейс);
				 // -- rarus Камаев П.В. 06.04.2020
			
			КонецЕсли;
			
			
			
		Иначе
			//найдем последний заполненный пункт
			ТекущаяСтрока = Таблица[ИндексТекущейСтроки];
			ПоследнийУказанныйПункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
			СписокВыбораДляПункта = Новый СписокЗначений;
			Для каждого СтрокаЖурнала Из Таблица Цикл
				Если ЗначениеЗаполнено(СтрокаЖурнала.Пункт) И НЕ ТекущаяСтрока=СтрокаЖурнала Тогда
					ПоследнийУказанныйПункт = СтрокаЖурнала.Пункт;	
				КонецЕсли; 	
			КонецЦикла;
			Если ЗначениеЗаполнено(ПоследнийУказанныйПункт) Тогда
				Если ЗначениеРекаМоре(ПредыдущаяСтрока.Пункт) = ПредопределенноеЗначение("Перечисление.vftРекаМоре.Море")
					
					ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСIFOнаMFO") 
					ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСMFOНаIFO") Тогда
				Иначе
					// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785
					//СписокВыбораДляПункта = ПолучитьМассивСП(ПоследнийУказанныйПункт);	
					СписокВыбораДляПункта = ПолучитьМассивСП(ПоследнийУказанныйПункт, Рейс);	
					// -- rarus Камаев П.В. 06.04.2020
				КонецЕсли;
				
				
			Иначе
				
			КонецЕсли; 
		КонецЕсли;
		
		
		
		// ++ rarus kloa 26.02.2018 Добавлено условие, иначе ошибка 
		Если ТипЗнч(СписокВыбораДляПункта) = Тип("Массив") Тогда
			Элементы.ТаблицаПункт.СписокВыбора.ЗагрузитьЗначения(СписокВыбораДляПункта);		
		КонецЕсли; 
		// -- rarus kloa 26.02.2018 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидОперацииОкончаниеВыгрузки()
	Возврат Константы.vftОкончаниеВыгрузки.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивСП(Пункт, Рейс)
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785 
	//Возврат РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(Пункт);	
	Возврат РегистрыСведений.vftСвязьПунктовСледования.ПолучитьМассивСмежныхПунктов(Пункт, Рейс);
	// -- rarus Камаев П.В. 03.04.2020
КонецФункции
 

&НаСервереБезКонтекста
Функция ТаблицаПунктНачалоВыбораИзСписка(Пункт, Судно, АдресТаблицы, ИндексТекущейСтроки)
	
	
	Таблица = ПолучитьИзВременногоХранилища(АдресТаблицы);	
	
	СписокВыбораДляПункта = Новый Массив;
	
	СписокВыбораДляПункта.Добавить(Пункт);
	
	
	ПредыдущаяСтрока = Таблица[ИндексТекущейСтроки-1];
	
	Если ЗначениеЗаполнено(ПредыдущаяСтрока.Пункт) Тогда
		СписокВыбораДляПункта = Новый СписокЗначений;
		Если ПредыдущаяСтрока.Пункт.РекаМоре = ПредопределенноеЗначение("Перечисление.vftРекаМоре.Море")
			
			ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСIFOнаMFO") 
			ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСMFOНаIFO") Тогда
				
			Возврат СписокВыбораДляПункта;
		КонецЕсли;
		
		// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785 
		//МассивСмежныхПунктов = ПолучитьМассивСП(ПредыдущаяСтрока.Пункт);
		МассивСмежныхПунктов = ПолучитьМассивСП(ПредыдущаяСтрока.Пункт, Судно);
		// -- rarus Камаев П.В. 03.04.2020
		
		Возврат МассивСмежныхПунктов;
		
	Иначе
		//найдем последний заполненный пункт
		ТекущаяСтрока = Таблица[ИндексТекущейСтроки];
		ПоследнийУказанныйПункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.ПустаяСсылка");
		СписокВыбораДляПункта = Новый СписокЗначений;
		Для каждого СтрокаЖурнала Из Таблица Цикл
			Если ЗначениеЗаполнено(СтрокаЖурнала.Пункт) И НЕ ТекущаяСтрока=СтрокаЖурнала Тогда
				ПоследнийУказанныйПункт = СтрокаЖурнала.Пункт;	
			КонецЕсли; 	
		КонецЦикла;
		Если ЗначениеЗаполнено(ПоследнийУказанныйПункт) Тогда
			Если ПредыдущаяСтрока.Пункт.РекаМоре = ПредопределенноеЗначение("Перечисление.vftРекаМоре.Море")
			
			ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСIFOнаMFO") 
			ИЛИ ПредыдущаяСтрока.Пункт = ПредопределенноеЗначение("Справочник.vftПунктыСледования.МестоПереходаСMFOНаIFO") Тогда
				Возврат СписокВыбораДляПункта;;
		КонецЕсли;
			
			// ++ rarus Камаев П.В. 03.04.2020 Задача № 20785 
			//МассивСмежныхПунктов = ПолучитьМассивСП(ПоследнийУказанныйПункт);
			МассивСмежныхПунктов = ПолучитьМассивСП(ПоследнийУказанныйПункт, Судно);
			// -- rarus Камаев П.В. 03.04.2020
			
			Возврат МассивСмежныхПунктов;
		Иначе
			Возврат СписокВыбораДляПункта;
		КонецЕсли; 
	КонецЕсли;	
КонецФункции  

&НаКлиенте
Процедура ТаблицаПриАктивизацииПоля(Элемент)
	//ТекущиеДанные = Элементы.Таблица.ТекущиеДанные;
	//Если ТекущиеДанные.Отправлено Тогда
	//	Отказ = Истина;
	//КонецЕсли;
	//// ++ rarus kloa 26.02.2018 
	//Если Не ЗначениеЗаполнено(ТекущиеДанные.ВидОперации) И Не Элементы.Таблица.ТекущийЭлемент.Имя = "ТаблицаВидОперации" Тогда
	//	Отказ = Истина;
	//	ИндексТекущейСтроки = Таблица.Индекс(ТекущиеДанные);
	//	Сообщение = Новый СообщениеПользователю();
	//	Сообщение.Текст = НСтр("ru = 'Сначала заполните поле Вид операции'");
	//	Сообщение.Поле = "Таблица["+ИндексТекущейСтроки+"].ВидОперации";
	//	Сообщение.УстановитьДанные(Таблица);
	//	Сообщение.Сообщить();
	//КонецЕсли; 
	//// -- rarus kloa 26.02.2018
КонецПроцедуры
 
#Область ТОиР 

&НаКлиенте
Функция ПолучитьМассивВыделенныхСтрокРемонтов(ЭлементыРемонты)
	
	МассивВыделенныхСтрок = Новый Массив;	
	
	Для Каждого НомСтроки Из ЭлементыРемонты.ВыделенныеСтроки Цикл
		Строка = ЭлементыРемонты.ДанныеСтроки(НомСтроки);
		Если НЕ Строка = Неопределено Тогда 
			МассивВыделенныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивВыделенныхСтрок;
	
КонецФункции // ПолучитьМассивВыделенныхСтрокРемонтов()

&НаКлиенте
Процедура ВызватьОбработчикОповещения(Результат, ДопПараметры) Экспорт
	ОбработкаОповещения(ДопПараметры.ИмяСобытия, Неопределено, Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПерезаполнитьТаблицы" Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметр);
		
		УстановитьПараметрыДинамическогоСпискаКлиент();
		
		УстановитьУсловноеОформление();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьРемонты" Тогда
		Элементы.Ремонты.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьЖурналДефектов" Тогда
		Элементы.ЖурналДефектов.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаполнитьДокументОтменыПереноса" Тогда
		СоздатьДокументОтменыПереноса(Параметр, ДатаАктуальности);
		Элементы.Ремонты.Обновить();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьЗнС" Тогда
		Элементы.СнабжениеПотребностьСформирована.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СоздатьДокументОтменыПереноса(Параметр, ДатаАктуальности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	впПланГрафикППР.ОбъектРемонта КАК ОбъектРемонта,
	               |	впПланГрафикППР.ВидРемонтныхРабот КАК ВидРемонта,
	               |	впПланГрафикППР.ПланГрафик КАК Основание,
	               |	МАКСИМУМ(впАктыПоРемонтам.Регистратор) КАК Акт,
	               |	МАКСИМУМ(впЗаявкиПоРемонтам.Регистратор) КАК Заявка,
	               |	впПланГрафикППР.ОбъектРемонта.ПодразделениеИсполнитель КАК Подразделение,
	               |	ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.ДатаНачала, ЕСТЬNULL(впЗаявкиПоРемонтам.ДатаНачала, впПланГрафикППР.ДатаНачалаПлан)) КАК ДатаНачалаПлан,
	               |	ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.ДатаОкончания, ЕСТЬNULL(впЗаявкиПоРемонтам.ДатаОкончания, впПланГрафикППР.ДатаОкончанияПлан)) КАК ДатаОкончанияПлан
	               |ИЗ
	               |	РегистрСведений.впПланГрафикППР КАК впПланГрафикППР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впЗаявкиПоРемонтам КАК впЗаявкиПоРемонтам
	               |		ПО впПланГрафикППР.УникальныйИдентификатор = впЗаявкиПоРемонтам.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
	               |		ПО впПланГрафикППР.УникальныйИдентификатор = впАктыПоРемонтам.IDРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впОтмененныеПеренесенныеРемонты.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаАктуальности, ДЕНЬ), ) КАК впОтмененныеПеренесенныеРемонтыСрезПоследних
	               |		ПО впПланГрафикППР.УникальныйИдентификатор = впОтмененныеПеренесенныеРемонтыСрезПоследних.ID
	               |ГДЕ
	               |	впПланГрафикППР.УникальныйИдентификатор = &ID_Ремонта  И (НЕ ЕстьNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.Отменен, Ложь))
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впПланГрафикППР.ОбъектРемонта,
	               |	впПланГрафикППР.ПланГрафик,
	               |	впПланГрафикППР.ВидРемонтныхРабот,
	               |	впПланГрафикППР.ОбъектРемонта.ПодразделениеИсполнитель,
	               |	ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.ДатаНачала, ЕСТЬNULL(впЗаявкиПоРемонтам.ДатаНачала, впПланГрафикППР.ДатаНачалаПлан)),
	               |	ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.ДатаОкончания, ЕСТЬNULL(впЗаявкиПоРемонтам.ДатаОкончания, впПланГрафикППР.ДатаОкончанияПлан))";
	
	Запрос.УстановитьПараметр("ID_Ремонта", Параметр.ID_Ремонта);
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Если ЗначениеЗаполнено(Выборка.Акт) Тогда
		ВызватьИсключение("Для ремонта заведен акт! Операция прервана.");
		Возврат;
	КонецЕсли;
	
	НовыйДок = Документы.впЗакрытиеЗаявокИРемонтов.СоздатьДокумент();
	НовыйДок.Дата = ДатаАктуальности;
	НовыйДок.Организация = Константы.впОсновнаяОрганизация.Получить();
	НовыйДок.Подразделение = Выборка.Подразделение;
	НовыйДок.Ответственный = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(Выборка.Заявка) Тогда
		ДобСтрокаЗ = НовыйДок.ЗакрываемыеЗаявки.Добавить();
		ДобСтрокаЗ.Заявка = Выборка.Заявка;
		ДобСтрокаЗ.ИДРемонта =  Параметр.ID_Ремонта;
		ДобСтрокаЗ.ПричинаЗакрытия = ?(Параметр.ВидОперации = 0, Справочники.впПричиныЗакрытияЗаявок.ОтменаРемонта, Справочники.впПричиныЗакрытияЗаявок.ПереносРемонта);
	КонецЕсли;
	
	ДобСтрокаР = НовыйДок.ЗакрываемыеРемонты.Добавить();
	ДобСтрокаР.ID = Параметр.ID_Ремонта;
	ДобСтрокаР.ОбъектРемонта = Выборка.ОбъектРемонта;
	ДобСтрокаР.ВидРемонта = Выборка.ВидРемонта;
	Если Параметр.ВидОперации = 1 Тогда
		ДобСтрокаР.ДатаНачала = Выборка.ДатаНачалаПлан;
		ДобСтрокаР.ДатаОкончания = Выборка.ДатаОкончанияПлан;	 
		ДобСтрокаР.НоваяДатаНачала = Параметр.НоваяДатаНачала;
		ДобСтрокаР.НоваяДатаОкончания = Параметр.НоваяДатаОкончания;
	КонецЕсли;
	ДобСтрокаР.ПричинаЗакрытия = Параметр.Причина;
	ДобСтрокаР.Перенесен = Параметр.ВидОперации = 1;
	ДобСтрокаР.Отменен = Параметр.ВидОперации = 0;
	ДобСтрокаР.ДокументОснование = Выборка.Основание;
	
	// ++ rarus selmik 29.09.2021 РАIT-0023505
	ДобСтрокаР.УточнениеПричины = Параметр.УточнениеПричины;
	НовыйДок.Статус = Перечисления.СостоянияСогласования.Рассматривается; 
	// -- rarus selmik 29.09.2021 РАIT-0023505
	
	НовыйДок.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗарегистрироватьДефект(Команда)
	
	Если ПроверитьЗаполнениеОбязательныхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СоздатьДокументВыявленныйДефект(Элементы.СправочникОР.ТекущиеДанные.Ссылка);
	Если ЗначениеЗаполнено(Результат) тогда
		Номер = Результат;
		Статус = "Зарегистрирован";
		Элементы.ЖурналДефектов.Обновить();
		ОткрытьФормуЗаявкиАкта(НовыйДок, ?(БезЗаявкиНаРемонт, ПредопределенноеЗначение("Документ.впАктОВыполненииЭтапаРабот.ПустаяСсылка"), ПредопределенноеЗначение("Документ.впЗаявкаНаРемонт.ПустаяСсылка")), БезЗаявкиНаРемонт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуЗаявкиАкта(ДокВД, ДокЗаявка, ЭтоАкт = Ложь)
	
	ПараметрыОткрытия = Новый Структура("Ключ", ДокЗаявка);
	ФормаЗаявки = ПолучитьФорму(?(ЭтоАкт, "Документ.впАктОВыполненииЭтапаРабот.ФормаОбъекта", "Документ.впЗаявкаНаРемонт.ФормаОбъекта"), ПараметрыОткрытия, ЭтаФорма, ЭтаФорма);
	
	Если НЕ ЗначениеЗаполнено(ДокЗаявка) Тогда
		
		СтруктураЗаполненияЗаявкиВД = СтруктураЗаполненияЗаявкиВД(ДокВД);
		ЗаполнитьЗначенияСвойств(ФормаЗаявки.Объект, СтруктураЗаполненияЗаявкиВД, , "ИсполнителиПоРемонтам");
		Для Каждого СтрокаТаблицы из СтруктураЗаполненияЗаявкиВД.СписокДефектов Цикл
			СтрокаДобавл = ФормаЗаявки.Объект.РемонтыОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
		КонецЦикла;
		
		Для Каждого СтрокаТаблицы из СтруктураЗаполненияЗаявкиВД.ИсполнителиПоРемонтам Цикл
			СтрокаДобавл = ФормаЗаявки.Объект.ИсполнителиПоРемонтам.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
		КонецЦикла;

		
		ФормаЗаявки.Объект.ДокументыОснования.Добавить().ДокументОснование = ДокВД;
		
		ФормаЗаявки.Модифицированность = Истина;
		
	КонецЕсли;	
	
	ФормаЗаявки.Открыть();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураЗаполненияЗаявкиВД(ДокВД)
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("Дата", ДокВД.Дата+1);
	СтруктураЗаполнения.Вставить("Организация", ДокВД.Организация);
	СтруктураЗаполнения.Вставить("Подразделение", ДокВД.Подразделение);
	СтруктураЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	МассивСтр = Новый Массив;
	МассивСтрИсп = Новый Массив;
	Для Каждого СтрокаТаблицы из ДокВД.СписокДефектов Цикл
		НовСтруктура = Новый Структура;
		НовСтруктура.Вставить("ID", СтрокаТаблицы.ID);
		НовСтруктура.Вставить("ДатаНачала", ДокВД.Дата);
		НовСтруктура.Вставить("ДатаОкончания", ДокВД.Дата);
		НовСтруктура.Вставить("ОбъектРемонта", СтрокаТаблицы.ОтказавшийЭлемент);
		НовСтруктура.Вставить("КритичностьДефекта", СтрокаТаблицы.КритичностьДефекта);
		НовСтруктура.Вставить("ДокументИсточник", ДокВД);
		НовСтруктура.Вставить("ОписаниеРемонта", СтрокаТаблицы.ДефектОписание);
		НовСтруктура.Вставить("ВидРемонтныхРабот", Константы.впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить());
		
		МассивСтр.Добавить(НовСтруктура);
		
		НовСтруктура = Новый Структура;
		НовСтруктура.Вставить("РемонтыОборудования_ID", СтрокаТаблицы.ID);
		НовСтруктура.Вставить("Исполнитель", СтрокаТаблицы.ОтказавшийЭлемент.ПодразделениеИсполнитель);
		
		МассивСтрИсп.Добавить(НовСтруктура);
	КонецЦикла;
	
	СтруктураЗаполнения.Вставить("СписокДефектов", МассивСтр);   
	СтруктураЗаполнения.Вставить("ИсполнителиПоРемонтам", МассивСтрИсп); 
	Возврат СтруктураЗаполнения;
	
КонецФункции

&НаСервере 
Функция СоздатьДокументВыявленныйДефект(ОбъектРемонта)
	
	//Если ЗначениеЗаполнено(Номер) и Документы.впВыявленныеДефекты.НайтиПоНомеру(Номер, Дата) <> Неопределено Тогда
	//	ТекстСообщения = НСтр("ru = 'Регистрация дефекта уже существует на текущую дату! Документ не был создан.'");
	//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	//	Возврат Неопределено;
	//КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("Дата", Дата);
	//Если ЗначениеЗаполнено(Номер) Тогда 
	//	СтруктураЗаполнения.Вставить("Номер", Номер);
	//КонецЕсли;
	СтруктураЗаполнения.Вставить("Организация", Константы.впОсновнаяОрганизация.Получить());
	СтруктураЗаполнения.Вставить("Подразделение", ОбъектРемонта.ПодразделениеИсполнитель);
	СтруктураЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	СтруктураЗаполнения.Вставить("ДефектВыявленВПроцессе", ДефектВыявленВПроцессе);
	
	// ++ rarus selmik 14.12.2020 25003
	СтруктураЗаполнения.Вставить("ДатаУстраненияДефекта", ДатаУстраненияДефекта);
	// -- rarus selmik 14.12.2020 25003
	
	СтруктураСтрокиТЧ = Новый Структура;
	СтруктураСтрокиТЧ.Вставить("ОтказавшийЭлемент", ОбъектРемонта);
	СтруктураСтрокиТЧ.Вставить("ОбъектРемонта", ОбъектРемонта);
	СтруктураСтрокиТЧ.Вставить("ВидДефекта", ВидДефекта);
	СтруктураСтрокиТЧ.Вставить("ДефектПричина", ПричинаДефекта);
	СтруктураСтрокиТЧ.Вставить("КритичностьДефекта", КритичностьДефекта);
	СтруктураСтрокиТЧ.Вставить("ДефектОписание", ОписаниеДефекта);
	СтруктураСтрокиТЧ.Вставить("ID", Новый УникальныйИдентификатор());
	// ++ rarus selmik 16.12.2020 25003
	СтруктураСтрокиТЧ.Вставить("ДатаНачалаРемонта", ДатаУстраненияДефекта);
	// -- rarus selmik 16.12.2020 25003
	
	МассивСтрокТЧ = Новый Массив;
	МассивСтрокТЧ.Добавить(СтруктураСтрокиТЧ);
	
	СтруктураЗаполнения.Вставить("МассивСтрокТЧ", МассивСтрокТЧ);
	
	докОбъект = Документы.впВыявленныеДефекты.СоздатьДокумент();
	докОбъект.Заполнить(СтруктураЗаполнения);
	
	Попытка
		// Вначале идет запись документа без проведения, т.к. при проведении идет проверка наличия файла, а файла еще нет
		докОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи документа произошла ошибка: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		возврат Неопределено;
	КонецПопытки;
	
	НовыйДок = докОбъект.Ссылка;
	
	// ++ rarus selmik 16.12.2020 25003
	
	Если ЗначениеЗаполнено(АдресВХранилищеФайлаДефекта) Тогда
		
		СтруктураПути = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ИмяФайлаДефекта);
		
		ПараметрыФайла = РаботаСФайламиСлужебныйКлиентСервер.ПараметрыДобавленияФайла();
		ПараметрыФайла.ВладелецФайлов 		= НовыйДок;
		ПараметрыФайла.ИмяБезРасширения 	= СтруктураПути.ИмяБезРасширения;
		ПараметрыФайла.РасширениеБезТочки 	= ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураПути.Расширение);
		
		ФайлСсылкаДефект = РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайл(ПараметрыФайла, АдресВХранилищеФайлаДефекта);
		Если ЗначениеЗаполнено(ФайлСсылкаДефект) Тогда
			АдресВХранилищеФайлаДефекта = "";
			ИмяФайлаДефекта 			= "";
		Иначе
			Сообщить("Файл не присоединен к документу Выявленный дефект.");
		КонецЕсли;	
		
	КонецЕсли;
	
	Попытка
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстСообщения = НСтр("ru = 'При проведении документа произошла ошибка: '") + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		возврат Неопределено;
	КонецПопытки;
	// -- rarus selmik 16.12.2020 25003

	Возврат докОбъект.Номер;	
	
КонецФункции

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхРеквизитов()
	
	Ошибка = Ложь;
	
	масОшибок = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ДефектВыявленВПроцессе) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Дефект выявлен в процессе");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Дата) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Дата");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВидДефекта) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Вид дефекта");
	КонецЕсли;	
	Если Элементы.СправочникОР.ТекущиеДанные = неопределено Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Объект ремонта");
	КонецЕсли;
	
	Для каждого текСтрока из масОшибок Цикл
		ШаблонСообщения = НСтр("ru = 'Поле <%1> не заполнено! Документ не будет создан.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрока);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	// ++ rarus selmik 16.12.2020 25003
	Если КритичностьДефекта = ПредопределенноеЗначение("Справочник.впКритичностьДефекта.Высокая") И Не ЗначениеЗаполнено(АдресВХранилищеФайлаДефекта) Тогда
		Ошибка = Истина;
		Сообщить("Для высокой критичности дефекта, нужно обязательно добавить оценку рисков (приложить файл).");
	КонецЕсли;
	// -- rarus selmik 16.12.2020 25003
	
	Возврат Ошибка;
	
КонецФункции

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	НовыйДок = Неопределено;	
	КритичностьДефекта = Неопределено;
	ВидДефекта = Неопределено;
	ПричинаДефекта = Неопределено;
	ДефектВыявленВПроцессе = Неопределено;
	ОписаниеДефекта = "";
	
	Статус = "";
	Номер = "";
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьПоляПоДокументу(ТекДок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	впВыявленныеДефекты.Ссылка КАК НовыйДок,
	               |	впВыявленныеДефекты.Номер КАК Номер,
				   |	впВыявленныеДефекты.Дата КАК Дата,
	               |	впВыявленныеДефектыСписокДефектов.ВидДефекта КАК ВидДефекта,
	               |	впВыявленныеДефектыСписокДефектов.ДефектОписание КАК ОписаниеДефекта,
	               |	впВыявленныеДефектыСписокДефектов.ДефектПричина КАК ПричинаДефекта,
	               |	впВыявленныеДефектыСписокДефектов.КритичностьДефекта КАК КритичностьДефекта,
	               |	впВыявленныеДефекты.ДефектВыявленВПроцессе КАК ДефектВыявленВПроцессе
	               |ИЗ
	               |	Документ.впВыявленныеДефекты.СписокДефектов КАК впВыявленныеДефектыСписокДефектов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впВыявленныеДефекты КАК впВыявленныеДефекты
	               |		ПО впВыявленныеДефектыСписокДефектов.Ссылка = впВыявленныеДефекты.Ссылка
	               |ГДЕ
	               |	впВыявленныеДефекты.Ссылка = &ТекДок";

	
	Запрос.УстановитьПараметр("ТекДок", ТекДок);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтаФорма, Выборка);
////		Возврат Выборка.Номер;	
//	Иначе
//		Возврат "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОбработку(Команда)
	
	
	//Если Элементы.СправочникОР.ТекущиеДанные <> неопределено и ЗначениеЗаполнено(НайтиСуществующийДокумент(Элементы.СправочникОР.ТекущиеДанные.Ссылка)) Тогда
	//	Возврат;
	Если Элементы.ЖурналДефектов.ТекущиеДанные = неопределено Тогда
		НовыйДок = Неопределено;	
		КритичностьДефекта = Неопределено;
		ВидДефекта = Неопределено;
		ПричинаДефекта = Неопределено;
		ДефектВыявленВПроцессе = Неопределено;
		ОписаниеДефекта = "";
		
		Статус = "";
		Номер = "";
	Иначе
		ЗаполнитьПоляПоДокументу(Элементы.ЖурналДефектов.ТекущиеДанные.ВыявленныйДефект);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СправочникОРПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = неопределено Тогда
		СсылкаОтбора = ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЖурналДефектов, "ВыявленныйДефект.СписокДефектов.ОтказавшийЭлемент", СсылкаОтбора, ВидСравненияКомпоновкиДанных.Равно, , Истина,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	Иначе
		СсылкаОтбора = Элементы.СправочникОР.ТекущиеДанные.Ссылка;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(ЖурналДефектов, "ВыявленныйДефект.СписокДефектов.ОтказавшийЭлемент", СсылкаОтбора, ВидСравненияКомпоновкиДанных.ВИерархии, , Истина,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	КонецЕсли;
	
	АдресВХранилищеФайлаДефекта = "";
	ИмяФайлаДефекта 			= "";

	
	ЗакрытьОбработку(истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элемент.ТекущийЭлемент = неопределено и не Элемент.ТекущиеДанные = неопределено Тогда
		Элемент.ТекущийЭлемент.ТолькоПросмотр = ЗначениеЗаполнено(Элемент.ТекущиеДанные.Регистратор);
	КонецЕсли;
	Элементы.УчетСостоянийДатаОкончания.ТолькоПросмотр = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьНаработкуНаСервере(ОбъектРемонта)
	
	СтрокиБезРегистратора = УчетНаработки.НайтиСтроки(Новый Структура("Регистратор", ПредопределенноеЗначение("Документ.впУчетНаработкиОборудования.ПустаяСсылка")));
	Если СтрокиБезРегистратора.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет введенных новых значений наработки.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		Строка = СтрокиБезРегистратора[0];
		Если НЕ (ЗначениеЗаполнено(Строка.Показатель) и ЗначениеЗаполнено(Строка.ДатаРаботыПо)) Тогда
			ТекстСообщения = НСтр("ru = 'Проверьте заполнение показателя и даты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	нДок = СоздатьНовыйДокумент("впУчетНаработкиОборудования", "НаработкаОбъектов", Строка);
	ОбновитьПоказатели(ОбъектРемонта, "УчетНаработки");
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьСостояниеНаСервере(ОбъектРемонта)
	
	СтрокиБезРегистратора = УчетСостояний.НайтиСтроки(Новый Структура("Регистратор", ПредопределенноеЗначение("Документ.впСостоянияОбъектовРемонта.ПустаяСсылка")));
	Если СтрокиБезРегистратора.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет введенных новых значений состояния.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	ИначеЕсли СтрокиБезРегистратора.Количество() > 1 Тогда
		ТекстСообщения = НСтр("ru = 'Введено более, чем 1, новых значений состояния.'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		Строка = СтрокиБезРегистратора[0];
		Если НЕ (ЗначениеЗаполнено(Строка.ДатаОкончания) и ЗначениеЗаполнено(Строка.ВидЭксплуатации) и ЗначениеЗаполнено(Строка.ПричинаПростоя)) Тогда
			ТекстСообщения = НСтр("ru = 'Проверьте заполнение состояния, причины изменения состояния и даты.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	нДок = СоздатьНовыйДокумент("впСостоянияОбъектовРемонта", "ОбъектыРемонта", СтрокиБезРегистратора[0]);
	
	Если ЗначениеЗаполнено(нДок) Тогда
		ОбновитьПоказатели(ОбъектРемонта, "УчетСостояний");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьНовыйДокумент(ИмяДокумента, ИмяТЧ, Строка)
	
	нДок = Документы[ИмяДокумента].СоздатьДокумент();
	нДок.Подразделение = Строка.ОбъектРемонта.ПодразделениеИсполнитель;
	нДок.Организация = Константы.впОсновнаяОрганизация.Получить();
	нДок.Ответственный = Пользователи.ТекущийПользователь();
	нДок.Дата = ?(ИмяДокумента = "впУчетНаработкиОборудования", Строка.ДатаРаботыПо, Строка.ДатаОкончания);
	стрОР = нДок[ИмяТЧ].Добавить();
	ЗаполнитьЗначенияСвойств(стрОР, Строка);
	Если Строка.РаспространятьНаПодчиненных Тогда
		нДок.ПодчиненныеОбъекты.Загрузить(впОбщиеПроцедурыДокументовТОИР.ПолучитьТаблицуПодчиненныхОР(Строка.ОбъектРемонта));
	КонецЕсли;	
	
	Попытка
		нДок.Записать(РежимЗаписиДокумента.Проведение);
		Возврат нДок.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ.'") + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Возврат неопределено;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьНаработку(Команда)
	Если УчетНаработки.Количество() > 0 Тогда
		
		//RARUS-NN EvgenU № 2021_06_30 ++
		ЕстьОшибка = Ложь;
		Для Каждого СтрокаНаработка Из УчетНаработки Цикл
			Если СтрокаНаработка.НовоеЗначение < СтрокаНаработка.СтароеЗначение Тогда
				Сообщение = новый сообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Некорректное новое значение наработки, должно быть не меньше %1", Формат(СтрокаНаработка.СтароеЗначение, "ЧН=0"));
				Сообщение.Сообщить();
				ЕстьОшибка = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьОшибка Тогда
			Возврат;
		КонецЕсли;
		//RARUS-NN EvgenU " 2021_06_30 --
		
		// ++ rarus selmik 27.01.2021
		Если ВывестиСообщениеПроверкаНаработки() Тогда
			Если vftОбщегоНазначенияВызовСервера.ЭтоПолноправныйПользовательИБ() Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ЗарегистрироватьНаработкуЗавершение", ЭтотОбъект),
														"Возможно, введены некорректные показания счетчика." + Символы.ПС + 
														"Значение наработки за период с " + Формат(УчетНаработки[0].ДатаРаботыС, "ДФ=dd.MM.yyyy") + 
														" по " + Формат(УчетНаработки[0].ДатаРаботыПо, "ДФ=dd.MM.yyyy") + 
														", не должно быть меньше нуля и больше 24 часов в сутки."+ Символы.ПС +
														"Продолжить?", РежимДиалогаВопрос.ДаНет);
			Иначе
				ПоказатьПредупреждение(, 	"Введены некорректные показания счетчика." + Символы.ПС + 
											"Значение наработки за период с " + Формат(УчетНаработки[0].ДатаРаботыС, "ДФ=dd.MM.yyyy") + 
											" по " + Формат(УчетНаработки[0].ДатаРаботыПо, "ДФ=dd.MM.yyyy") + 
											",  не должно быть меньше нуля и больше 24 часов в сутки.");
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		// -- rarus selmik 27.01.2021
		
		ЗарегистрироватьНаработкуНаСервере(Элементы.СправочникОР1.ТекущиеДанные.Ссылка);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = неопределено Тогда
		Элементы.РемонтыНачатьРемонт.Доступность 			= Ложь;
		Элементы.РемонтыЗаявкаНаРемонт.Доступность 			= Ложь;
		Элементы.РемонтыВыполнитьРемонт.Доступность 		= Ложь;
		Элементы.РемонтыВыполнитьРемонт.Видимость 			= Истина;
		Элементы.РемонтыЗавершитьРемонт.Видимость 			= Ложь;
		Элементы.РемонтыОтменаПереносРемонта.Доступность 	= Ложь;
		Возврат;
	КонецЕсли;
	
	Акт 		= Неопределено;
	Завершен 	= неопределено;
	ID_Ремонта 	= Неопределено;
	Заявка 		= Неопределено;

	Элемент.ТекущиеДанные.Свойство("Акт", Акт);
	Элемент.ТекущиеДанные.Свойство("ID_Ремонта", ID_Ремонта);
	Элемент.ТекущиеДанные.Свойство("Заявка", Заявка);
	
	Элементы.РемонтыНачатьРемонт.Доступность 	= ЗначениеЗаполнено(ID_Ремонта) и НЕ ЗначениеЗаполнено(Акт);
	Элементы.РемонтыЗаявкаНаРемонт.Доступность 	= ЗначениеЗаполнено(ID_Ремонта) и НЕ ЗначениеЗаполнено(Акт) и НЕ ЗначениеЗаполнено(Заявка) и Элемент.ТекущиеДанные.Свойство("Заявка");
	Элементы.РемонтыВыполнитьРемонт.Доступность = ЗначениеЗаполнено(ID_Ремонта);
	Элементы.РемонтыЗавершитьРемонт.Доступность = ЗначениеЗаполнено(ID_Ремонта);
	
	Элементы.РемонтыЗавершитьРемонт.Видимость  	= Элементы.РемонтыЗавершитьРемонт.Доступность и ЗначениеЗаполнено(Акт);
	Элементы.РемонтыВыполнитьРемонт.Видимость  	= Не Элементы.РемонтыЗавершитьРемонт.Видимость;
	
	Элементы.РемонтыОтменаПереносРемонта.Доступность = ЗначениеЗаполнено(ID_Ремонта) и НЕ ЗначениеЗаполнено(Акт);	
	
	// ++ rarus selmik 09.11.2020 25003
	ТекущиеДанныеСтроки = Элемент.ТекущиеДанные;
		
	
	МассивЗапчастей = ЗаполнитьЗапчастиПоОбъектуРемонта(ТекущиеДанныеСтроки.ОбъектРемонта, ТекущиеДанныеСтроки.ВидРемонта);
	
	Запчасти.Очистить();
	Для Каждого Запчасть Из МассивЗапчастей Цикл			
		СтрокаЗапчасти = Запчасти.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаЗапчасти, Запчасть);			
	КонецЦикла;	
	
	МассивНаработки = ЗаполнитьНаработку(ТекущиеДанныеСтроки.ОбъектРемонта, ДатаАктуальности);
	ИтогПоНаработке = 0;
	Наработка.Очистить();
	Для Каждого ЭлементНаработка Из МассивНаработки Цикл			
		СтрокаНаработка = Наработка.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНаработка, ЭлементНаработка);	
		
		ИтогПоНаработке = ИтогПоНаработке + ЭлементНаработка.Значение;
	КонецЦикла;
	Если Наработка.Количество() > 0 Тогда
		Наработка[0].ИтогПоНаработке = ИтогПоНаработке;	
	КонецЕсли;

	МассивОперации = ПолучитьОперацииПоТехКарте(ТекущиеДанныеСтроки.ТехКарта);			
	Операции.Очистить();
	Для Каждого ЭлементОперация Из МассивОперации Цикл			
		СтрокаОперация = Операции.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОперация, ЭлементОперация);	
	КонецЦикла;
	
	МассивИнструкция = ПолучитьИнструкцииПоТехКарте(ТекущиеДанныеСтроки.ТехКарта);
	Инструкции.Очистить();
	Для Каждого ЭлементИструкция Из МассивИнструкция Цикл			
		СтрокаИнструкция = Инструкции.Добавить();
		СтрокаИнструкция.Инструкция = ЭлементИструкция;	
	КонецЦикла;	
	
	МассивМатериалов = ПолучитьМатериалыПоТехКарте(ТекущиеДанныеСтроки.ТехКарта);			
	Материалы.Очистить();
	Для Каждого ЭлементМатериал Из МассивМатериалов Цикл			
		СтрокаМатериал = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаМатериал, ЭлементМатериал);	
	КонецЦикла;
	
	МассивИнструментов = ПолучитьИнструментыПоТехКарте(ТекущиеДанныеСтроки.ТехКарта);			
	Инструменты.Очистить();
	Для Каждого ЭлементИнструмент Из МассивИнструментов Цикл			
		СтрокаИнструмент = Инструменты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИнструмент, ЭлементИнструмент);	
	КонецЦикла;	
	
	МассивИсполнителей = ПолучитьИсполнителейПоТехКарте(ТекущиеДанныеСтроки.ТехКарта);			
	ИсполнителиТехКарты.Очистить();
	Для Каждого ЭлементИсполнитель Из МассивИсполнителей Цикл			
		СтрокаИсполнитель = ИсполнителиТехКарты.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИсполнитель, ЭлементИсполнитель);	
	КонецЦикла;

	// -- rarus selmik 09.11.2020 25003
КонецПроцедуры

&НаКлиенте
Процедура УчетПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.СправочникОР1.ТекущиеДанные = неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Выберите объект ремонта!'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоказатели(ОбъектРемонта, ИмяЭлемента = Неопределено)
	
	Если ИмяЭлемента = Неопределено Тогда
		ОбновитьНаработку(ОбъектРемонта);
		ОбновитьСостояние(ОбъектРемонта);
	ИначеЕсли  ИмяЭлемента = "УчетНаработки" Тогда
		ОбновитьНаработку(ОбъектРемонта);
	Иначе
		ОбновитьСостояние(ОбъектРемонта);
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаработку(ОбъектРемонта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	впПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	впПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
	               |ПОМЕСТИТЬ вт_ТекНаработкаПериоды
	               |ИЗ
	               |	РегистрСведений.впПараметрыНаработкиОбъектовРемонта.СрезПоследних(&ДатаОкончания, ОбъектРемонта = &ОбъектРемонта) КАК впПараметрыНаработкиОбъектовРемонтаСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	впНаработкаОбъектовРемонтаСрезПоследних.НовоеЗначение КАК СтароеЗначение,
	               |	вт_ТекНаработкаПериоды.Показатель КАК Показатель,
	               |	впНаработкаОбъектовРемонтаСрезПоследних.Период КАК ДатаРаботыС,
	               |	&ДатаОкончания КАК ДатаРаботыПо,
	               |	вт_ТекНаработкаПериоды.ОбъектРемонта КАК ОбъектРемонта,
	               |	МАКСИМУМ(впУчетНаработкиОборудованияНаработкаОбъектов.РаспространятьНаПодчиненных) КАК РаспространятьНаПодчиненных
	               |ИЗ
	               |	вт_ТекНаработкаПериоды КАК вт_ТекНаработкаПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впНаработкаОбъектовРемонта.СрезПоследних(&ДатаОкончания, ) КАК впНаработкаОбъектовРемонтаСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Документ.впУчетНаработкиОборудования.НаработкаОбъектов КАК впУчетНаработкиОборудованияНаработкаОбъектов
	               |			ПО (впУчетНаработкиОборудованияНаработкаОбъектов.Ссылка = впНаработкаОбъектовРемонтаСрезПоследних.Регистратор)
	               |				И (впУчетНаработкиОборудованияНаработкаОбъектов.ОбъектРемонта = впНаработкаОбъектовРемонтаСрезПоследних.ОбъектРемонта)
	               |				И (впУчетНаработкиОборудованияНаработкаОбъектов.Показатель = впНаработкаОбъектовРемонтаСрезПоследних.Показатель)
	               |		ПО вт_ТекНаработкаПериоды.ОбъектРемонта = впНаработкаОбъектовРемонтаСрезПоследних.ОбъектРемонта
	               |			И вт_ТекНаработкаПериоды.Показатель = впНаработкаОбъектовРемонтаСрезПоследних.Показатель
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_ТекНаработкаПериоды.Показатель,
	               |	вт_ТекНаработкаПериоды.ОбъектРемонта,
	               |	впНаработкаОбъектовРемонтаСрезПоследних.Период,
	               |	впНаработкаОбъектовРемонтаСрезПоследних.НовоеЗначение
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаРаботыС УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаАктуальности));
	
	УчетНаработки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояние(ОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	впТекущееСостояниеОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	               |	впТекущееСостояниеОРСрезПоследних.Регистратор КАК Регистратор,
	               |	впТекущееСостояниеОРСрезПоследних.Период КАК ДатаОкончания,
	               |	впТекущееСостояниеОРСрезПоследних.ВидЭксплуатации КАК ВидЭксплуатации,
	               |	впТекущееСостояниеОРСрезПоследних.ПричинаПростоя КАК ПричинаПростоя,
	               |	МАКСИМУМ(впСостоянияОбъектовРемонтаОбъектыРемонта.РаспространятьНаПодчиненных) КАК РаспространятьНаПодчиненных
	               |ИЗ
	               |	РегистрСведений.впТекущееСостояниеОР.СрезПоследних(&ДатаСреза, ОбъектРемонта = &ОбъектРемонта) КАК впТекущееСостояниеОРСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впСостоянияОбъектовРемонта.ОбъектыРемонта КАК впСостоянияОбъектовРемонтаОбъектыРемонта
	               |		ПО впТекущееСостояниеОРСрезПоследних.ОбъектРемонта = впСостоянияОбъектовРемонтаОбъектыРемонта.ОбъектРемонта
	               |			И впТекущееСостояниеОРСрезПоследних.Регистратор = впСостоянияОбъектовРемонтаОбъектыРемонта.Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впТекущееСостояниеОРСрезПоследних.Период,
	               |	впТекущееСостояниеОРСрезПоследних.ОбъектРемонта,
	               |	впТекущееСостояниеОРСрезПоследних.ВидЭксплуатации,
	               |	впТекущееСостояниеОРСрезПоследних.ПричинаПростоя,
	               |	впТекущееСостояниеОРСрезПоследних.Регистратор
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаОкончания УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("ДатаСреза", КонецДня(ДатаАктуальности));
	
	УчетСостояний.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура СправочникОР1ПриАктивизацииСтроки(Элемент)
	Если НЕ Элемент.ТекущиеДанные = неопределено Тогда
		ОбновитьПоказатели(Элемент.ТекущиеДанные.Ссылка);
	Иначе
		ОбновитьПоказатели(ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьИзменениеСостояния(Команда)
	Если УчетСостояний.Количество() > 0 Тогда
		ЗарегистрироватьСостояниеНаСервере(Элементы.СправочникОР1.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущаяСтрока = Элементы.СправочникОР1.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Если СтрокаВыбрана Тогда
		сОбъектРемонта = ТекущаяСтрока.Ссылка;
	Иначе
		сОбъектРемонта = Неопределено;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.ОбъектРемонта = сОбъектРемонта;
КонецПроцедуры

&НаКлиенте
Процедура УчетСостоянийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекущаяСтрока = Элементы.СправочникОР1.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Если СтрокаВыбрана Тогда
		сОбъектРемонта = ТекущаяСтрока.Ссылка;
	Иначе
		сОбъектРемонта = Неопределено;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.ОбъектРемонта = сОбъектРемонта;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьАкт(Команда)
	
	Акт = Неопределено;
	Элементы.Ремонты.ТекущиеДанные.Свойство("Акт", Акт);
	Если НЕ ЗначениеЗаполнено(Акт) Тогда
		Сообщить("Акт не введен!");
		Возврат;
	КонецЕсли;
	Форма = ПолучитьФорму("Документ.впАктОВыполненииЭтапаРабот.ФормаОбъекта", Новый Структура("Ключ", Акт), ЭтаФорма, Акт);
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаявку(Команда)

КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонт(Команда)
	
	ТекДанные = Элементы.НормативныеРемонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		СоздатьАктЗаявкуНаСервере(ТекДанные.ОбъектРемонта, ТекДанные.ID_Ремонта, ТекДанные.ВидРемонта, ТекДанные.Основание, Ложь);
		Элементы.Ремонты.Обновить();
		Элементы.НормативныеРемонты.Обновить();
		РемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРемонт(Команда)
	
	ТекДанные = Элементы.НормативныеРемонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		СоздатьАктЗаявкуНаСервере(ТекДанные.ОбъектРемонта, ТекДанные.ID_Ремонта, ТекДанные.ВидРемонта, ТекДанные.Основание);
		Элементы.Ремонты.Обновить();
		Элементы.НормативныеРемонты.Обновить();
		РемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьАктЗаявкуНаСервере(ОбъектРемонта, ИД, ВидРемонта, Основание, ЭтоАкт = Истина)
	
	Док = Документы[?(ЭтоАкт, "впАктОВыполненииЭтапаРабот", "впЗаявкаНаРемонт")].СоздатьДокумент();
	
	СтруктураЗаполненияАкта =  СтруктураЗаполненияАкта(ОбъектРемонта, ИД, ВидРемонта, Основание, ЭтоАкт);
	ЗаполнитьЗначенияСвойств(Док, СтруктураЗаполненияАкта);
	Для Каждого КлючИЗначение из  СтруктураЗаполненияАкта.ТабличныеЧасти Цикл
		Для Каждого СтрокаТаблицы из КлючИЗначение.Значение Цикл
			СтрокаДобавл = Док[КлючИЗначение.Ключ].Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
			Если  КлючИЗначение.Ключ = "РемонтыОборудования" Тогда
				Если ЭтоАкт Тогда
					СтрокаДобавл.ДатаНачала = ДатаАктуальности;
					СтрокаДобавл.ДатаОкончания = ДатаАктуальности;
				Иначе
					МЗ = РегистрыСведений.впПланГрафикППР.СоздатьМенеджерЗаписи();
					МЗ.УникальныйИдентификатор = ИД;
					МЗ.Прочитать();
					Если МЗ.Выбран() Тогда
						СтрокаДобавл.ДатаНачала = МЗ.ДатаНачалаПлан;
						СтрокаДобавл.ДатаОкончания = МЗ.ДатаОкончанияПлан;
					Иначе
						СтрокаДобавл.ДатаНачала = ДатаАктуальности;
						СтрокаДобавл.ДатаОкончания = ДатаАктуальности;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Док.Ссылка;
		Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось создать документ: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СтруктураЗаполненияАкта(ОбъектРемонта, ИД, ВидРемонта, Основание, ЭтоАкт = Истина)
	
	СтруктураЗаполнения = Новый Структура();
	СтруктураЗаполнения.Вставить("Дата", ?(ЭтоАкт, ДатаАктуальности+2, ДатаАктуальности+1));
	СтруктураЗаполнения.Вставить("Организация", Константы.впОсновнаяОрганизация.Получить());
	СтруктураЗаполнения.Вставить("Подразделение", ОбъектРемонта.ПодразделениеИсполнитель);
	СтруктураЗаполнения.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	
	СтруктураЗаполненияТЧ = Новый Структура();
	Заявка = впОбщиеПроцедурыДокументовТОИР.НайтиЗаявкуАктПоРемонту(ИД);
	Если НЕ ЭтоАкт и НЕ Заявка = неопределено Тогда
		ВызватьИсключение("Для данного ремонта уже заведена заявка!");
	КонецЕсли;
	Если Заявка = неопределено Тогда
		//добавляем строку ремонта
		НовСтруктура = Новый Структура("ID, ОбъектРемонта, ВидРемонтныхРабот, ДокументИсточник", ИД, ОбъектРемонта, ВидРемонта, Основание);
		МассивСтр = Новый Массив;
		МассивСтр.Добавить(НовСтруктура);
		СтруктураЗаполненияТЧ.Вставить("РемонтыОборудования", МассивСтр);
		
		//добавляем строки запчастей
		МассивСтр = Новый Массив;
		НормыЗапчастей = впОбщиеПроцедурыДокументовТОИР.ПолучитьНормативыЗапчастей(ВидРемонта, ОбъектРемонта);
		Для Каждого стрНорм из НормыЗапчастей Цикл
			НовСтруктура = Новый Структура("РемонтыОборудования_ID, Количество, Номенклатура");
			ЗаполнитьЗначенияСвойств(НовСтруктура, стрНорм);
			НовСтруктура.РемонтыОборудования_ID = ИД;
			МассивСтр.Добавить(НовСтруктура);
		КонецЦикла;
		СтруктураЗаполненияТЧ.Вставить("ЗапчастиРемонта", МассивСтр);
		
		//добавляем строку исполнителя
		НовСтруктура = Новый Структура("РемонтыОборудования_ID, Исполнитель", ИД, ОбъектРемонта.ПодразделениеИсполнитель);
		МассивСтр = Новый Массив;
		МассивСтр.Добавить(НовСтруктура);
		СтруктураЗаполненияТЧ.Вставить("ИсполнителиПоРемонтам", МассивСтр);
		
		//Добавляем техкарту с затратами
		СтруктураТК =  впОбщиеПроцедурыДокументовТОИР.НайтиТехкартуОР(ВидРемонта, ОбъектРемонта);
		Если НЕ СтруктураТК = неопределено Тогда
			НовСтруктура = Новый Структура("РемонтнаяРабота, Количество, РемонтыОборудования_ID, ID, ИдентификаторТехКарты", СтруктураТК.ТехКарта, 1, ИД, Новый УникальныйИдентификатор(), СтруктураТК.ИдентификаторТК);
			МассивСтр = Новый Массив;
			МассивСтрМат = Новый Массив;
			МассивСтрИнстр = Новый Массив;
			МассивСтрТрЗ = Новый Массив;
			
			МассивСтр.Добавить(НовСтруктура);
			// ++ rarus selmik 02.02.2021
			// Было:			
			//РезультатЗапросаПоОперациям = впОбщиеПроцедурыДокументовТОИР.ПолучитьСписокОперацийТехкартыСНормативами(СтруктураТК.ТехКарта, СтруктураЗаполнения.Дата);
			// Стало:
			РезультатЗапросаПоОперациям = ПолучитьСписокОперацийТехкартыСНормативами(СтруктураТК.ТехКарта, СтруктураЗаполнения.Дата);
			// -- rarus selmik 02.02.2021
			
			СписокОпераций      = РезультатЗапросаПоОперациям[1].Выгрузить();
			МатериальныеЗатраты = РезультатЗапросаПоОперациям[3].Выгрузить();
			// ++ rarus selmik 02.02.2021
			ТрудовыеЗатраты     = РезультатЗапросаПоОперациям[6].Выгрузить();
			ИнструментыИТехника = РезультатЗапросаПоОперациям[7].Выгрузить();
			// -- rarus selmik 02.02.2021
			
			Для каждого СтрокаОперации Из СписокОпераций Цикл
				ПодчСтруктура = Новый Структура("РемонтнаяРабота, Количество, РемонтыОборудования_ID, ID, ИдентификаторТехКарты, Родитель_ID", СтрокаОперации.Операция, 1, ИД, СтрокаОперации.ID, СтрокаОперации.Операция, НовСтруктура.ID);
				МассивСтр.Добавить(ПодчСтруктура);
				
				МассивСтрок = МатериальныеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаМатериалов Из МассивСтрок Цикл
					МассивСтрМат.Добавить(Новый Структура("Количество, Номенклатура, ID, РемонтыОборудования_ID", 1, СтрокаМатериалов.Номенклатура, СтрокаОперации.ID, ИД));
				КонецЦикла; 
				
				МассивСтрок = ТрудовыеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаТрудозатрат Из МассивСтрок Цикл
					// ++ rarus selmik 02.02.2021
					МассивСтрТрЗ.Добавить(Новый Структура("Квалификация, ID, РемонтыОборудования_ID, ФизическоеЛицо, Количество", СтрокаТрудозатрат.Квалификация, СтрокаОперации.ID, ИД, СтрокаТрудозатрат.ФизическоеЛицо, СтрокаТрудозатрат.Количество));
					// -- rarus selmik 02.02.2021
				КонецЦикла;	
				
				МассивСтрок = ИнструментыИТехника.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаИИТ Из МассивСтрок Цикл
					МассивСтрИнстр.Добавить(Новый Структура("Количество, Инструмент, ID, РемонтыОборудования_ID", 1, СтрокаИИТ.Инструмент, СтрокаОперации.ID, ИД));
				КонецЦикла;	
			КонецЦикла;
			
			СтруктураЗаполненияТЧ.Вставить("РемонтныеРаботы", МассивСтр);
			СтруктураЗаполненияТЧ.Вставить("МатериальныеЗатраты", МассивСтрМат);
			СтруктураЗаполненияТЧ.Вставить("Инструменты", МассивСтрИнстр);
			СтруктураЗаполненияТЧ.Вставить("ТрудовыеЗатраты", МассивСтрТрЗ);
			
		КонецЕсли;
		
		МассивСтр = Новый Массив;
		МассивСтр.Добавить(Новый Структура("ДокументОснование", Основание));
		СтруктураЗаполненияТЧ.Вставить("ДокументыОснования", МассивСтр);

	Иначе
		
		Для Каждого ТЧ из Заявка.Метаданные().ТабличныеЧасти Цикл
			Если ТЧ.Имя = "ДокументыОснования" Тогда
				Продолжить;
			КонецЕсли;
			
			МассивСтр = Новый Массив;
			МассивТаб = Заявка[ТЧ.Имя].НайтиСтроки(Новый Структура(?(ТЧ.Имя = "РемонтыОборудования", "ID", "РемонтыОборудования_ID"), ИД));
			
			СтрокаСтруктурыТЧ = "";
			Для Каждого Реквизит из Заявка.Метаданные().ТабличныеЧасти[ТЧ.Имя].Реквизиты Цикл
				СтрокаСтруктурыТЧ = СтрокаСтруктурыТЧ + Реквизит.Имя + "," ;
			КонецЦикла;
			СтрокаСтруктурыТЧ = Лев(СтрокаСтруктурыТЧ, СтрДлина(СтрокаСтруктурыТЧ)-1);
			
			Для Каждого стрМасс из МассивТаб Цикл
				НовСтруктура = Новый Структура(СтрокаСтруктурыТЧ, );
				ЗаполнитьЗначенияСвойств(НовСтруктура, стрМасс);
				Если ТЧ.Имя = "РемонтыОборудования" Тогда
					НовСтруктура.ДокументИсточник = Заявка;
				КонецЕсли;
				МассивСтр.Добавить(НовСтруктура);
			КонецЦикла;
			СтруктураЗаполненияТЧ.Вставить(ТЧ.Имя, МассивСтр);
		КонецЦикла;
		
		МассивСтр = Новый Массив;
		МассивСтр.Добавить(Новый Структура("ДокументОснование", Заявка));
		СтруктураЗаполненияТЧ.Вставить("ДокументыОснования", МассивСтр);
		
	КонецЕсли;
	
	СтруктураЗаполнения.Вставить("ТабличныеЧасти", СтруктураЗаполненияТЧ);   
	
	Возврат СтруктураЗаполнения;
	
КонецФункции


&НаКлиенте
Процедура ЗавершитьРемонт(Команда)
	
	ТекДанные = Элементы.НормативныеРемонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
	Если ЗначениеЗаполнено(ТекДанные.Акт) Тогда
		Акт = ТекДанные.Акт;
		ОткрытьФорму("Документ.впАктОВыполненииЭтапаРабот.ФормаОбъекта", Новый Структура("Ключ", Акт), ЭтаФорма);
	Иначе
		Форма = ПолучитьФорму("Документ.впАктОВыполненииЭтапаРабот.ФормаОбъекта", , ЭтаФорма);
		СтруктураЗаполненияАкта =  СтруктураЗаполненияАкта(ТекДанные.ОбъектРемонта, ТекДанные.ID_Ремонта, ТекДанные.ВидРемонта, ТекДанные.Основание);
		ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураЗаполненияАкта);
		Для Каждого КлючИЗначение из  СтруктураЗаполненияАкта.ТабличныеЧасти Цикл
			Для Каждого СтрокаТаблицы из КлючИЗначение.Значение Цикл
				СтрокаДобавл = Форма.Объект[КлючИЗначение.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
				Если  КлючИЗначение.Ключ = "РемонтыОборудования" Тогда
					СтрокаДобавл.ДатаНачала = ДатаАктуальности;
					СтрокаДобавл.ДатаОкончания = ДатаАктуальности;
				КонецЕсли;	 
			КонецЦикла;
		КонецЦикла;

		Форма.Модифицированность = Истина;
		Форма.Открыть();
	КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьРемонтНаСервере(АктСсылка, ИД)  //от автоматического завершения отказались, но на всякий случай оставлю это здесь
	Акт = АктСсылка.ПолучитьОбъект();
	РемонтыОборудования = Акт.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИД));
	РемонтныеРаботы = Акт.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ИД));
	Для Каждого СтрокаРемонта из РемонтыОборудования Цикл
		СтрокаРемонта.Выполнено = Истина;
		СтрокаРемонта.ДатаОкончания = ДатаАктуальности;
	КонецЦикла;
	
	Для Каждого СтрокаРемонта из РемонтныеРаботы Цикл
		СтрокаРемонта.Выполнено = Истина;
		СтрокаРемонта.ПроцентВыполненияРабот = 100;
	КонецЦикла;
	
	Попытка
		Акт.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначения.СообщитьПользователю("Не удалось завершить ремонт: " + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеОтборов(Элемент)
	
	Если Элемент.Имя = "Завершен" или Элемент.Имя = "Завершен1" Тогда
		ИспользоватьОтборПоЗавершенным = Истина;
	ИначеЕсли СтрНайти(Элемент.Имя, "Заведование") > 0 Тогда
		ИспользоватьОтборПоЗаведованию = Истина;
	ИначеЕсли Элемент.Имя = "ПриоритетОР" Тогда
		ИспользоватьОтборПоПриоритетуОР = Истина;
	КонецЕсли;
	
	Сформировать(Элемент);
	
	УстановитьПараметрыДинамическогоСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСпискаКлиент()
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР1, "ДатаАктуальности", ДатаАктуальности, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "ОбъектРемонта.ПодразделениеИсполнитель", ОсновноеСудно, ВидСравненияКомпоновкиДанных.Равно, , Истина,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Заведование", Заведование, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоЗаведованию,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "Завершен", Завершен, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоЗавершенным,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СправочникОР, "Заведование", Заведование, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоЗаведованию,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СправочникОР1, "Заведование", Заведование, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоЗаведованию,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СправочникОР1, "сНаработкой", ИспользоватьОтборПоНаличиюПлановойНаработки, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоНаличиюПлановойНаработки,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СправочникОР1, "ЗабытыйОР", ИспользоватьОтборПоЗабытымОР, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоЗабытымОР,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	// ++ rarus selmik 09.11.2020 25003
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СправочникОР2, "Заведование"				, Заведование	, ВидСравненияКомпоновкиДанных.Равно, , ИспользоватьОтборПоЗаведованию	, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты, "ДатаАктуальности"	, ДатаАктуальности						, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты, "Периодичность"		, Строка(ПериодичностьЦветовоеВыделение), Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты, "КоличествоПериодов", ПлановыйПериодЦветовоеВыделение		, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты, "ПоследняяВыполненнаяИлиПросроченнаяРабота"	, ПоследняяВыполненнаяИлиПросроченнаяРабота	, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты, "ПредстоящаяРабота"							, ПредстоящаяРабота							, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты, "СледующаяНаОчередиРабота"					, СледующаяНаОчередиРабота					, Истина);
	 	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормативныеРемонты, "ДатаНормативныеРемонты"			, ДатаАктуальности							, Истина);
// -- rarus selmik 09.11.2020 25003
	//
	//Элементы.СправочникОРРодитель.Видимость = ИспользоватьОтборПоЗаведованию;
	//Элементы.СправочникОР.Отображение = ?(ИспользоватьОтборПоЗаведованию, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	//Элементы.СправочникОР1Родитель.Видимость = ИспользоватьОтборПоЗаведованию или ИспользоватьОтборПоНаличиюПлановойНаработки или ИспользоватьОтборПоЗабытымОР;
	//Элементы.СправочникОР1.Отображение = ?(ИспользоватьОтборПоЗаведованию или ИспользоватьОтборПоНаличиюПлановойНаработки или ИспользоватьОтборПоЗабытымОР, ОтображениеТаблицы.Список, ОтображениеТаблицы.Дерево);
	//
	УстановитьПараметрыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка()
																								
	Если ЗначениеЗаполнено(Периодичность) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала,"+ Строка(Периодичность)+","+СтрЗаменить(Строка(ПлановыйПериод)," ","")+") КАК ПлановыйПериод";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаАктуальности);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГлубинаПланирования = Выборка.ПлановыйПериод;
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты, "ПланируемаяДатаНачалаРемонта", ГлубинаПланирования, ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, , Истина,  РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
	
	// ++ rarus selmik 24.11.2020 25003
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты	, "ПриоритетОР", Справочники.впПриоритетыОбъектовРемонта.НайтиПоКоду(1), 
																			ВидСравненияКомпоновкиДанных.Равно, , ОтборРаботПоКритическомуОборудованию, 
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
																			
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Ремонты	, "ВидРемонтаДефекта", Константы.впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить(),
																		Истина);
																		
	Если Элементы.ТОИР.Видимость Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормативныеРемонты	, "ПроцентВремениДоСледующейРаботы", 
																			Константы.рарусПроцентВремениДоСледующейРаботыППР.Получить(),Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормативныеРемонты	, "ПроцентВремениДоСледующейРаботы",0,Истина);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР2	, "ОтборРаботПоКритическомуОборудованию", ОтборРаботПоКритическомуОборудованию
																		, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР2	, "ПриоритетОР"	, Справочники.впПриоритетыОбъектовРемонта.НайтиПоКоду(1), Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР		, "Судно"	, ОсновноеСудно, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР1	, "Судно"	, ОсновноеСудно, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР2	, "Судно"	, ОсновноеСудно, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР		, "ЭтоГлавныйУзел"	, Истина, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР1	, "ЭтоГлавныйУзел"	, Истина, Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СправочникОР2	, "ЭтоГлавныйУзел"	, Истина, Истина);
	// ++ rarus selmik 24.11.2020 25003
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЗаявки(Команда)
	
	Если Элементы.Ремонты.ТекущиеДанные = неопределено Тогда
		ПоказатьПредупреждение(, "Выберите строку таблицы!");
	КонецЕсли;
	ПараметрыПечати = Новый Структура("ОбъектыПечати, МенеджерПечати, Идентификатор, Параметры, Форма", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элементы.Ремонты.ТекущиеДанные.Заявка), "Документ.впЗаявкаНаРемонт", "Заявка", Новый Массив, ЭтаФорма);
	впПечать.ЗапроситьУПользователяДополнительныеПараметрыПередПечатью(ПараметрыПечати);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновноеСудноПриИзменении(Элемент)
	УстановитьПараметрыДинамическогоСпискаКлиент();
	// ++ rarus Камаев П.В. 03.04.2020 Задача № 20783
	Рейс = ПредопределенноеЗначение("Документ.vftРейс.ПустаяСсылка");
	УстановитьВидимостьДоступность();
	// -- rarus Камаев П.В. 03.04.2020
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОтбора(Команда)
	
	СтруктураПараметров = Новый Структура("ВидДаты, ДатаАктуальности, ПлановыйПериод, Периодичность",
	ВидДаты, ДатаАктуальности, ПлановыйПериод, Периодичность);
	
	// ++ rarus selmik 23.11.2020 25003
	СтруктураПараметров.Вставить("ВыделениеКритическихРабот"				, ВыделениеКритическихРабот);
	СтруктураПараметров.Вставить("ВыделениеПросроченныхРабот"				, ВыделениеПросроченныхРабот);
	СтруктураПараметров.Вставить("ВыделениеПредстоящихРабот"				, ВыделениеПредстоящихРабот);
	СтруктураПараметров.Вставить("ВыделениеРаботПоКритическомуОборудованию"	, ВыделениеРаботПоКритическомуОборудованию);
	СтруктураПараметров.Вставить("ЦветКритическихРабот"						, ЦветКритическихРабот);
	СтруктураПараметров.Вставить("ЦветКритическихРаботПоОборудованию"		, ЦветКритическихРаботПоОборудованию);
	СтруктураПараметров.Вставить("ЦветПредстоящихРабот"						, ЦветПредстоящихРабот);
	СтруктураПараметров.Вставить("ЦветПроспоченныхРабот"					, ЦветПроспоченныхРабот);
	СтруктураПараметров.Вставить("ПериодичностьЦветовоеВыделение"			, ПериодичностьЦветовоеВыделение);
	СтруктураПараметров.Вставить("ПлановыйПериодЦветовоеВыделение"			, ПлановыйПериодЦветовоеВыделение);
	// -- rarus selmik 23.11.2020 25003
	
	ДобавитьНастройкиЦвета(СтруктураПараметров);
	
	ФормаНастройки = ПолучитьФорму("ОбщаяФорма.впФормаНастройкиАРМ", СтруктураПараметров, ЭтаФорма, ЭтаФорма);
	ФормаНастройки.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкиЦвета(СтруктураПараметров)
	СтруктураПараметров.Вставить("ТаблицаПриоритетностиОР", ПоместитьВоВременноеХранилище(ТаблицаПриоритетностиОР.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	СтруктураПараметров.Вставить("ТаблицаПросроченных", ПоместитьВоВременноеХранилище(ТаблицаПросроченных.Выгрузить(), Новый УникальныйИдентификатор()));
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.Завершен");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(201,226,255));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	// ++ rarus selmik 23.11.2020 25003
	//ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	//ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("РемонтыПланируемаяДатаНачалаРемонта");
	//
	//ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.ПланируемаяДатаНачалаРемонта");
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	//ЭлементОтбора.ПравоеЗначение = ДатаАктуальности;
	//
	//ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.Акт");
	//ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;

	//ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ТаблицаПросроченных[0].Цвет);

	// ++ rarus selmik 23.11.2020 25003
	Если ВыделениеКритическихРабот Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("НормативныеРемонты");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НормативныеРемонты.КритичностьОперации");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКритическихРабот);	
	КонецЕсли;
	
	Если ВыделениеРаботПоКритическомуОборудованию Тогда
		//Для каждого Стр Из ТаблицаПриоритетностиОР Цикл
	// -- rarus selmik 23.11.2020 25003
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			// ++ rarus selmik 23.11.2020 25003
			// Было:
			//ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("РемонтыОбъектРемонта");
			// Стало:
			ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
			// -- rarus selmik 23.11.2020 25003
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.ПриоритетОР");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Справочники.впПриоритетыОбъектовРемонта.НайтиПоКоду(1);
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКритическихРаботПоОборудованию);
			
		//КонецЦикла;
	КонецЕсли; 

	// ++ rarus selmik 23.11.2020 25003
	Если ВыделениеПросроченныхРабот Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.РаботаПросрочена");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветПроспоченныхРабот);
	КонецЕсли;
	
	Если ВыделениеПредстоящихРабот Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.ПредстоящаяРабота");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветПредстоящихРабот);	
	КонецЕсли;
	// -- rarus selmik 23.11.2020 25003
	
	Если НЕ ИспользоватьОтборПоЗабытымОР Тогда
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("СправочникОР1");
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СправочникОР1.ЗабытыйОР");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.Лосось);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриоритетностиОР()
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впПриоритетыОбъектовРемонта.Ссылка КАК Приоритет
	|ИЗ
	|	Справочник.впПриоритетыОбъектовРемонта КАК впПриоритетыОбъектовРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	впПриоритетыОбъектовРемонта.Код";
	
	ЦветПоУмолчанию = Новый Цвет(255,255,255);
	
	Если ТаблицаПриоритетностиОР.Количество() = 0 Тогда
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Цвет"));
		РезультатЗапроса.Колонки.Добавить("Цвет",Новый ОписаниеТипов(Массив));
		
		РезультатЗапроса.ЗаполнитьЗначения(ЦветПоУмолчанию,"Цвет");
		
		ТаблицаПриоритетностиОР.Загрузить(РезультатЗапроса);
		
	Иначе 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если ТаблицаПриоритетностиОР.НайтиСтроки(Новый Структура("Приоритет", Выборка.Приоритет)).Количество() = 0 Тогда
				НС = ТаблицаПриоритетностиОР.Добавить();
				НС.Приоритет = Выборка.Приоритет;
				НС.Цвет = ЦветПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область МониторКлТОиР 

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОтборПоОРПриИзменении(Элемент)
	Элементы.ОтборПоОРВидСравнения.Доступность = ОтборПоОР;
	Элементы.ОтборПоОРЗначение.Доступность = ОтборПоОР;
		
	Сформировать(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВРПриИзменении(Элемент)
	Элементы.ОтборПоВРВидСравнения.Доступность = ОтборПоВР;
	Элементы.ОтборПоВРЗначение.Доступность = ОтборПоВР;
	Сформировать(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		Расшифровка = Расшифровки[Расшифровки.Количество()-1];
		
		Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
			//RARUS-NN EvgenU РАIT-0023372 2021_06_04 ++
			Если ДляДиаграмыГантаЗакрытиеПеренос ТОгда 
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ОбъектРемонта", Расшифровка.ОбъектРемонта);
				ПараметрыФормы.Вставить("ID", Расшифровка.ID_Ремонта);
				ПараметрыФормы.Вставить("ВидРемонта", Расшифровка.ВидРемонта);
				ПараметрыФормы.Вставить("Основание", Расшифровка.Основание);
				СписокРемонтовУжеОткрыт = Ложь;
				Оповестить("ДобавитьОбъектРемонтаДляЗакрытияПереноса", ПараметрыФормы, ЭтаФорма);
				Если СписокРемонтовУжеОткрыт Тогда
				Иначе  
					ОткрытьФорму("ОбщаяФорма.впСписокРемонтов", 
								ПараметрыФормы, ЭтаФорма);//, Объект.Ссылка);
					ЭтаФорма.Активизировать();
				КонецЕсли;
				Сообщить(СтрШаблон("Объект ремонта ""%1"" добавлен в список ремонтов для закрытия/переноса",Строка(Расшифровка.ОбъектРемонта)));
			Иначе
				//RARUS-NN EvgenU РАIT-0023372 2021_06_04 --
			Форма = ПолучитьФорму("Документ.впАктОВыполненииЭтапаРабот.ФормаОбъекта", , ЭтаФорма);
			СтруктураЗаполненияАкта =  СтруктураЗаполненияАкта(Расшифровка.ОбъектРемонта, Расшифровка.ID_Ремонта, Расшифровка.ВидРемонта, Расшифровка.Основание);
			ЗаполнитьЗначенияСвойств(Форма.Объект, СтруктураЗаполненияАкта);
			Для Каждого КлючИЗначение из  СтруктураЗаполненияАкта.ТабличныеЧасти Цикл
				Для Каждого СтрокаТаблицы из КлючИЗначение.Значение Цикл
					СтрокаДобавл = Форма.Объект[КлючИЗначение.Ключ].Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаДобавл, СтрокаТаблицы);
					Если  КлючИЗначение.Ключ = "РемонтыОборудования" Тогда
						СтрокаДобавл.ДатаНачала = ДатаАктуальности;
						СтрокаДобавл.ДатаОкончания = ДатаАктуальности;
					КонецЕсли;	 
				КонецЦикла;
			КонецЦикла;
			
			Форма.Модифицированность = Истина;
			Форма.Открыть();
				//RARUS-NN EvgenU РАIT-0023372 2021_06_04 ++
			КонецЕсли;
			//RARUS-NN EvgenU РАIT-0023372 2021_06_04 --
		Иначе
			ПоказатьЗначение(Неопределено, Расшифровка);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Расшифровки) = Тип("Структура") Тогда
		ВидРемонтаИзСтруктуры = Неопределено;
		
		Если Расшифровки.Свойство("ВидРемонта", ВидРемонтаИзСтруктуры) <> Неопределено Тогда
			ПоказатьЗначение(Неопределено, ВидРемонтаИзСтруктуры);	
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		Диаграмма.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		Диаграмма.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		Диаграмма.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		Диаграмма.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОРВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоОРВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоОРВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоОРЗначение = Неопределено Тогда
			
			ОтборПоОРЗначение = ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка");
			
		ИначеЕсли ТипЗнч(ОтборПоОРЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоОРЗначение = ?(ОтборПоОРЗначение.Количество(),ОтборПоОРЗначение[0].Значение, ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка"));
			
		КонецЕсли;
	Иначе
		Если ОтборПоОРЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоОРЗначение = Новый СписокЗначений;
			ОтборПоОРЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
			
		КонецЕсли;
	КонецЕсли;
Сформировать(Элемент);	

КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВРВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоВРВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоВРВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоВРЗначение = Неопределено Тогда
			
			ОтборПоВРЗначение = ПредопределенноеЗначение("Справочник.впВидыРемонтов.ПустаяСсылка");
			
		ИначеЕсли ТипЗнч(ОтборПоВРЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоВРЗначение = ?(ОтборПоВРЗначение.Количество(),ОтборПоВРЗначение[0].Значение, ПредопределенноеЗначение("Справочник.впВидыРемонтов.ПустаяСсылка"));
			
		КонецЕсли;
	Иначе
		Если ОтборПоВРЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоВРЗначение = Новый СписокЗначений;
			ОтборПоВРЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.впВидыРемонтов");
			
		КонецЕсли;
	КонецЕсли;
Сформировать(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	Сформировать(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СортироватьПоОР(Команда)
	СортироватьПоОР = НЕ СортироватьПоОР;
	Элементы.СортироватьПоОР.Пометка = СортироватьПоОР;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Для каждого ТочкаДиаграммы Из Диаграмма.Точки Цикл
		Диаграмма.РазвернутьТочку(ТочкаДиаграммы, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого ТочкаДиаграммы Из Диаграмма.Точки Цикл
		Диаграмма.СвернутьТочку(ТочкаДиаграммы, Истина);
	КонецЦикла;

КонецПроцедуры


&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Период)  Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заполнен период отчета!'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПостроения = ПолучитьПараметрыПостроенияДиаграммыНаКлиенте();
	
	Диаграмма.Очистить();	
	СформироватьНаСервере(Диаграмма, Истина, ПараметрыПостроения);
	РазвернутьВсе(Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	ОтображатьЗамещенные = НЕ ОтображатьЗамещенные;
	Элементы.ФормаОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакИзображение(Команда)
	
	Если Диаграмма.Точки.Количество() = 0 ИЛИ Диаграмма.Серии.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Для сохранения отчета его необходимо сформировать.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Формат PNG (*.png)|*.png|'")
		+ НСтр("ru = 'Формат BMP (*.bmp)|*.bmp|'");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("СохранитьКакИзображениеПослеВыбораФайла", ЭтотОбъект);
		ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакИзображениеПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() > 0 Тогда
		
		ИмяФайла = ВыбранныеФайлы[0];
		
		Попытка
			Картинка = Диаграмма.ПолучитьКартинку(Элементы.Диаграмма.Ширина*50, Элементы.Диаграмма.Высота*120, ФорматКартинки[Прав(ИмяФайла,3)]);
			Картинка.Записать(ИмяФайла);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать файл!'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ПечатьДиаграммы(Команда)
	
 //   ПараметрыПостроения = ПолучитьПараметрыПостроенияДиаграммыНаКлиенте();
 //   ТабДок = ПолучитьТабличныйДокумент(ПараметрыПостроения);
 //   ТабДок.ТолькоПросмотр = Истина;
 //   ТабДок.ОтображатьЗаголовки = Ложь;
 //
 //   ИдентификаторПечатнойФормы = "Сводная диаграмма графиков ППР";
 //   КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
 //   ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
 //   ПечатнаяФорма.СинонимМакета = "Сводная диаграмма графиков ППР";
 //   ПечатнаяФорма.ТабличныйДокумент = ТабДок;
 //   ПечатнаяФорма.ИмяФайлаПечатнойФормы = "Сводная диаграмма графиков ППР";
 //
 //   УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,,ЭтаФорма);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПолучитьПараметрыПостроенияДиаграммыНаКлиенте()
	
	//СтруктураПараметров = Новый Структура(
	//	"ИспользоватьОтборПоЗаведованию,Заведование,
	//	|ИспользоватьОтборПоЗавершенным,Завершен,
	//	|ИспользоватьОтборПоПриоритетуОР,ПриоритетОР,
	//	|ДатаНач,ДатаКон,
	//	|СортироватьПоОР");
	//
	//ЗаполнитьЗначенияСвойств(СтруктураПараметров,ЭтаФорма);
	//
	//Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура СформироватьНаСервере(ЭлементВыводаДиаграммы, ДиаграммаДляОтчета, ПараметрыПостроения, МакетОтчета = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблОбъектовРем.ОбъектРемонта КАК ОбъектРемонтныхРабот,
	|	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ТаблОбъектовРем.ДатаНачалаПлан КАК ДатаНач,
	|	ТаблОбъектовРем.Завершен КАК Завершен,
	|	ТаблОбъектовРем.ДатаОкончанияПлан КАК ДатаКон,
	|	ТаблОбъектовРем.ПланГрафик КАК ДокументППР,
	|	ТаблОбъектовРем.УникальныйИдентификатор КАК ID,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачСт,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаКонСт,
	|	ЛОЖЬ КАК ЗамещенСт,
	|	ЛОЖЬ КАК ЕстьВЗ,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	0 КАК НомерОР
	|ИЗ
	|	РегистрСведений.впПланГрафикППР КАК ТаблОбъектовРем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впЗаявкиПоРемонтам КАК впЗаявкиПоРемонтам
	|			ПО (ТаблОбъектовРем.УникальныйИдентификатор = впЗаявкиПоРемонтам.IDРемонта
	|					И впЗаявкиПоРемонтам.Регистратор.РемонтнаяВедомость)
	|ГДЕ
	|	НЕ ТаблОбъектовРем.удален
	|	И ТаблОбъектовРем.ДатаНачалаПлан МЕЖДУ &ПолеВводаДатаНачала И &ПолеВводаДатаКонца и впЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL 
	|	 &&БлокОтборов
	|
	|УПОРЯДОЧИТЬ ПО
	|	&&БлокУпорядочиваний";
	
	// ++ rarus selmik 11.01.2020	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблОбъектовРем.ОбъектРемонта КАК ОбъектРемонтныхРабот,
	|	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	|	ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.ДатаНачала, ТаблОбъектовРем.ДатаНачалаПлан) КАК ДатаНач,
	|	ТаблОбъектовРем.Завершен КАК Завершен,
	|	ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.ДатаОкончания, ТаблОбъектовРем.ДатаОкончанияПлан) КАК ДатаКон,
	|	ТаблОбъектовРем.ПланГрафик КАК ДокументППР,
	|	ТаблОбъектовРем.УникальныйИдентификатор КАК ID,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачСт,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаКонСт,
	|	ЛОЖЬ КАК ЗамещенСт,
	|	ЛОЖЬ КАК ЕстьВЗ,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	0 КАК НомерОР,
	|	впАктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Акт
	|ИЗ
	|	РегистрСведений.впПланГрафикППР КАК ТаблОбъектовРем
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впЗаявкиПоРемонтам КАК впЗаявкиПоРемонтам
	|		ПО ТаблОбъектовРем.УникальныйИдентификатор = впЗаявкиПоРемонтам.IDРемонта
	|			И (впЗаявкиПоРемонтам.Регистратор.РемонтнаяВедомость)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот.РемонтыОборудования КАК впАктОВыполненииЭтапаРаботРемонтыОборудования
	|		ПО ТаблОбъектовРем.УникальныйИдентификатор = впАктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|			И (впАктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впОтмененныеПеренесенныеРемонты.СрезПоследних КАК впОтмененныеПеренесенныеРемонтыСрезПоследних
	|		ПО ТаблОбъектовРем.УникальныйИдентификатор = впОтмененныеПеренесенныеРемонтыСрезПоследних.ID
	|ГДЕ
	|	НЕ ТаблОбъектовРем.Удален
	|	И ТаблОбъектовРем.ДатаНачалаПлан МЕЖДУ &ПолеВводаДатаНачала И &ПолеВводаДатаКонца
	|	И впЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
	|	И НЕ ЕСТЬNULL(впОтмененныеПеренесенныеРемонтыСрезПоследних.Отменен, ЛОЖЬ)
	|	 &&БлокОтборов
	|
	|УПОРЯДОЧИТЬ ПО
	|	&&БлокУпорядочиваний";

	// -- rarus selmik 11.01.2020
	
	БлокОтборов = "";
	Если ИспользоватьОтборПоЗаведованию Тогда
		БлокОтборов = БлокОтборов + " И	 
		|  ТаблОбъектовРем.ОбъектРемонта.Заведование = &ПолеВводаЗаведование";			
		
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	БлокОтборов = БлокОтборов + " И	 
	|  ТаблОбъектовРем.ОбъектРемонта.ПодразделениеИсполнитель = &ПолеВводаПодразделениеИсполнитель";
	////////////////////////////////////////////////////////////////////////////
	Если ИспользоватьОтборПоЗавершенным Тогда
		БлокОтборов = БлокОтборов + " И	 
		|  ТаблОбъектовРем.Завершен = &ПолеВводаЗавершен";
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	Если ИспользоватьОтборПоПриоритетуОР Тогда
		БлокОтборов = БлокОтборов + " И	 
		|  ТаблОбъектовРем.ОбъектРемонта.Приоритет = &ПолеВводаПриоритет";
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////
	БлокУпорядочиваний = "";
	Если СортироватьПоОР И НЕ ДиаграммаДляОтчета Тогда
	    БлокУпорядочиваний = БлокУпорядочиваний + "ОбъектРемонтныхРабот.Наименование";
	Иначе
	    БлокУпорядочиваний = БлокУпорядочиваний + "ВидРемонтныхРабот.Наименование";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("ПолеВводаЗаведование", Заведование);
	Запрос.УстановитьПараметр("ПолеВводаПодразделениеИсполнитель", ОсновноеСудно);
	Запрос.УстановитьПараметр("ПолеВводаЗавершен",    Завершен);
	Запрос.УстановитьПараметр("ПолеВводаПриоритет",    ПриоритетОР);
	Запрос.УстановитьПараметр("ПолеВводаДатаНачала",    Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПолеВводаДатаКонца",     Период.ДатаОкончания);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтборов",БлокОтборов);
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокУпорядочиваний",БлокУпорядочиваний);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Если ДиаграммаДляОтчета Тогда
			
			ЭлементВыводаДиаграммы.Обновление = Ложь;
			
			ПостроитьДиаграммуГантаДляППР(ДатаАктуальности, ЭлементВыводаДиаграммы,РезультатЗапроса.Выгрузить(),,,,Ложь,,ДиаграммаДляОтчета,СортироватьПоОР);
		
		Иначе
			
			РезультатТЧ = РезультатЗапроса.Выгрузить();
			
			Область = МакетОтчета.ПолучитьОбласть("Шапка");
			ЭлементВыводаДиаграммы.Вывести(Область);
			
			СписокХранения = Новый СписокЗначений;
			
			Для каждого СтрокаТаблицы из РезультатТЧ Цикл
				Если СписокХранения.НайтиПоЗначению(СтрокаТаблицы.ОбъектРемонтныхРабот) = Неопределено Тогда
					СписокХранения.Добавить(СтрокаТаблицы.ОбъектРемонтныхРабот);			
				КонецЕсли;	
			КонецЦикла;
			
			МассивОбъектов = СписокХранения.ВыгрузитьЗначения();
			
			ШиринаТаблицы = Область.ШиринаТаблицы;
			
			МассивВременныхИнтервалов = Новый Массив;
			ПериодКонРасчетный = КонецМесяца(Период.ДатаОкончания);
			ТемпДата = НачалоМесяца(Период.ДатаНачала);
			ПериодовВОтчете = 0;
			СледующийМесяц = Истина;
			Пока СледующийМесяц Цикл
				Область = МакетОтчета.ПолучитьОбласть("СтолбецДня");
				ОбластьОформления = Область.Область("Знач");
				
				Область.Параметры.НомИнтервала = НазваниеМесяцаСтрокойПадежное(Месяц(ТемпДата)) + Символы.ПС + Сред(ТемпДата, 7, 4); 
				ЭлементВыводаДиаграммы.Присоединить(Область);
				
				ЕдиничныйИнтервал = Новый Структура;
				ЕдиничныйИнтервал.Вставить("НачИнт",НачалоМесяца(ТемпДата));
				ЕдиничныйИнтервал.Вставить("КонИнт",КонецМесяца(ТемпДата));	
				МассивВременныхИнтервалов.Добавить(ЕдиничныйИнтервал);

				ТемпДата = ДобавитьМесяц(ТемпДата, 1);
				Если ТемпДата > ПериодКонРасчетный Тогда
					СледующийМесяц = Ложь;		
				КонецЕсли;	
				
				ПериодовВОтчете = ПериодовВОтчете + 1;
			КонецЦикла;
			
			ШиринаТаблицы = ШиринаТаблицы + ПериодовВОтчете * Область.ШиринаТаблицы;
			
			НСТР = 1;
			Для Каждого СтрокаТЧ Из МассивОбъектов Цикл
				
				Область = МакетОтчета.ПолучитьОбласть("СтрокаЗаполнения");
				
				ФорматнаяОбласть = Область.Область("НаимПрим");
				ФорматнаяОбласть.Примечание.Текст = СтрокаТЧ.ПлановыйГрафикРаботы.Наименование;
				
				Область.Параметры.НПП = НСТР;
				Область.Параметры.НаименовОбъекта = СтрокаТЧ;
				
				ЭлементВыводаДиаграммы.Вывести(Область);
				
				Условие = Новый Структура;
				Условие.Вставить("ОбъектРемонтныхРабот", СтрокаТЧ);
				
				НайденныеСтроки = РезультатТЧ.НайтиСтроки(Условие);
				Для Сч = 1 по  МассивВременныхИнтервалов.Количество() Цикл
					
					БуфГод = "";
					ТекущийПериодНач = МассивВременныхИнтервалов[Сч - 1].НачИнт;
					ТекущийПериодКон = МассивВременныхИнтервалов[Сч - 1].КонИнт;
					
					Область = МакетОтчета.ПолучитьОбласть("ЗначенияДня");
					ОбластьФормат =  Область.Область();
					
					Для Каждого ОбъектСравнения Из НайденныеСтроки Цикл
						
						Если ОбъектСравнения.ДатаКон < ОбъектСравнения.ДатаНач Тогда
							КонечнаяДата = КонецДня(ОбъектСравнения.ДатаНач);
						Иначе
							КонечнаяДата = ОбъектСравнения.ДатаКон;
						КонецЕсли;
						
						Если  ((ТекущийПериодКон >= ОбъектСравнения.ДатаНач) И (ТекущийПериодНач <= КонечнаяДата)) Или
							((ТекущийПериодКон > ОбъектСравнения.ДатаНач) И (ТекущийПериодНач <= КонечнаяДата)) Тогда
							
							ОбластьФормат.ЦветФона = Новый Цвет(255, 251, 240);
							
							ПредставлениеВидаРемонта = ОбъектСравнения.ВидРемонтныхРабот;
							БуфГод = БуфГод + ПредставлениеВидаРемонта + ", ";			
							
							ОбластьФормат.Примечание.Текст =  ОбластьФормат.Примечание.Текст + ПредставлениеВидаРемонта +
							" (" + Лев(ОбъектСравнения.ДатаНач, 10) + " - " + Лев(ОбъектСравнения.ДатаКон, 10) + ") " + Символы.ПС;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Область.Параметры.заполнение = Лев(БуфГод, СтрДлина(БуфГод) - 2);
					ЭлементВыводаДиаграммы.Присоединить(Область);
					
				КонецЦикла;
				
				НСТР = НСТР + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДиаграммаДляОтчета Тогда
		
		ЭлементВыводаДиаграммы.АвтоОпределениеПолногоИнтервала = Ложь;
	 	ЭлементВыводаДиаграммы.УстановитьПолныйИнтервал(Период.ДатаНачала, Период.ДатаОкончания);  
	 	ЭлементВыводаДиаграммы.ОтображатьЛегенду = Ложь;
		ЭлементВыводаДиаграммы.Обновление = Истина;

	КонецЕсли;
	
КонецПроцедуры


// Процедура выполняет построение диагрммы Ганта для графика ППР
//
// Параметры:
//  Диаграмма - Диаграмма - диаграмма Ганта.
//  ТаблицаДанныхППР - ТаблицаЗначений - таблица значений исходных данных.
//  СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//  ОтображатьИерархию - Булево - отображать иерархию.
//  ИспользоватьИерархию - Булево - использовать иерархию.
//  РезультатЗапроса - РезультатЗапроса - результат запроса.
//  ЭтоКорректировка - Булево - Это корректировка.
//  Редактировать - Булево - редактировать.
//  ИспользоватьРасшифровку - Булево - использовать расшифровку.
//  ДиаграммаДляОтчета - Булево - это для диаграммы.
//  СортироватьПоНаименованию - Булево - выполнить сортировку по наименованию.
//
&НаСервереБезКонтекста
Процедура ПостроитьДиаграммуГантаДляППР(ДатаАктуальности, Диаграмма, ТаблицаДанныхППР, СтруктураИерархии = Неопределено, ОтображатьИерархию = Ложь, ИспользоватьИерархию = Ложь, РезультатЗапроса = Неопределено, ЭтоКорректировка = Ложь, Редактировать = Истина, ИспользоватьРасшифровку = Ложь, ДиаграммаДляОтчета = Ложь, СортироватьПоНаименованию = Истина) Экспорт 
	
	//////////////////////////////////////////////////////
	ТекДата = ТекущаяДата();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	
	ОписаниеТ = новый ОписаниеТипов(МассивТипов);
	
	ЕстьЦепочки = ТаблицаДанныхППР.Колонки.Найти("Цепочка") <> Неопределено;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьДвиженияПоВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьДвиженияПоВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьДвиженияПоВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ID") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ID",Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36)));
		ТаблицаДанныхППР.ЗаполнитьЗначения("","ID");
	КонецЕсли;
	
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	
	СерияРемонт = Диаграмма.Серии.Добавить();
	СерияРемонт.Текст = "График ремонта";
	СерияРемонт.ДополнительныйЦвет = WebЦвета.Черный;
	
	СтруктураЦветов = Новый Структура("ЦветВыполненного, ЦветПросроченного, ЦветЗапланированного");
	СтруктураЦветов.ЦветВыполненного 			= WebЦвета.ЗеленаяЛужайка;
	СтруктураЦветов.ЦветПросроченного 			= WebЦвета.Лосось;
	СтруктураЦветов.ЦветЗапланированного 		= WebЦвета.Васильковый;
	
	
	Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ID,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.Завершен,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ID,
		|	ТаблицаДанныхППР.Завершен,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот)
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) 
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот.Наименование,
				|	ДатаНач,
				|	ДатаКон 
		|ИТОГИ ПО
		|	ОбъектРемонтныхРабот, ВидРемонтныхРабот";
		
		// ++ rarus selmik 25.11.2020 25003	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК Справочник.впОбъектыРемонта) КАК ОбъектРемонтныхРабот,
		|	ВЫРАЗИТЬ(ТаблицаДанныхППР.ВидРемонтныхРабот КАК Справочник.впВидыРемонтов) КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР КАК ДокументППР,
		|	ТаблицаДанныхППР.ID КАК ID,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.Завершен КАК Завершен,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт КАК ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт КАК ДатаКонСт,
		|	ТаблицаДанныхППР.Акт КАК Акт
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ
		|	ТаблицаДанныхППР.ДатаНач > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР КАК ДокументППР,
		|	ТаблицаДанныхППР.ID КАК ID,
		|	ТаблицаДанныхППР.Завершен КАК Завершен,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт КАК ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт КАК ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот) КАК ОбъектРемонтныхРаботПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот) КАК ВидРемонтныхРаботПредставление,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель КАК ОбъектРемонтныхРаботРодительИерархия,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРаботИерархия,
		|	ТаблицаДанныхППР.Акт КАК Акт
		|ПОМЕСТИТЬ ВТ_Объединение
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель,
		|	NULL
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель <> ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель,
		|	NULL
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель.Родитель,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель,
		|	NULL
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель.Родитель.Родитель,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель.Родитель,
		|	NULL
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель.Родитель.Родитель.Родитель <> ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Объединение.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ВТ_Объединение.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ВТ_Объединение.ДокументППР КАК ДокументППР,
		|	ВТ_Объединение.ID КАК ID,
		|	ВТ_Объединение.Завершен КАК Завершен,
		|	ВТ_Объединение.ДатаНач КАК ДатаНач,
		|	ВТ_Объединение.ДатаКон КАК ДатаКон,
		|	ВТ_Объединение.ДатаНачСт КАК ДатаНачСт,
		|	ВТ_Объединение.ДатаКонСт КАК ДатаКонСт,
		|	ВТ_Объединение.ОбъектРемонтныхРаботПредставление КАК ОбъектРемонтныхРаботПредставление,
		|	ВТ_Объединение.ВидРемонтныхРаботПредставление КАК ВидРемонтныхРаботПредставление,
		|	ВТ_Объединение.ОбъектРемонтныхРаботРодительИерархия КАК ОбъектРемонтныхРаботРодительИерархия,
		|	ВТ_Объединение.ОбъектРемонтныхРаботИерархия КАК ОбъектРемонтныхРаботИерархия,
		|	ВТ_Объединение.Акт КАК Акт
		|ИЗ
		|	ВТ_Объединение КАК ВТ_Объединение
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВТ_Объединение.ОбъектРемонтныхРаботИерархия.Наименование,
		|	ВТ_Объединение.ОбъектРемонтныхРабот.Наименование,
		|	ВТ_Объединение.ВидРемонтныхРабот.Наименование,
		|	ВТ_Объединение.ДатаНач,
		|	ВТ_Объединение.ДатаКон";
			
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			ТаблицаКонечныхДанных = Результат.Выгрузить();
			
			ТаблицаДанныхРодителей = ТаблицаКонечныхДанных.Скопировать(, "ОбъектРемонтныхРаботРодительИерархия, ОбъектРемонтныхРаботИерархия");
			ТаблицаДанныхРодителей.Свернуть("ОбъектРемонтныхРаботРодительИерархия, ОбъектРемонтныхРаботИерархия");
			
			ПустойРодитель = Справочники.впОбъектыРемонта.ПустаяСсылка();
			
			ВывестиИерархиюВДиаграмму(Диаграмма, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, ПустойРодитель, СерияРемонт,, ДатаАктуальности);
			
		КонецЕсли;
		
		// -- rarus selmik 25.11.2020 25003
			
КонецПроцедуры // ПостроитьДиаграммуГантаДляППР()

&НаСервереБезКонтекста
Процедура ВывестиЧастьГрафикаПервыйВариант(ДатаАктуальности, ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать)
	ТочкаВРР = ТочкаОРР.Точки.Добавить();
	ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
	
	Если ЭтоКорректировка Тогда
		// корректировка
		ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
		ТочкаВРРСт.Текст = "План до корректировки";
	КонецЕсли;
	
	Выборка = ВыборкаПоВР.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Выборка.ДатаНач;
		Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет   = ?(Выборка.ДатаНач < ДатаАктуальности,  СтруктураЦветов.ЦветПросроченного, СтруктураЦветов.ЦветЗапланированного);
		
		Если Выборка.Завершен Тогда
			Интервал.Цвет   = СтруктураЦветов.ЦветВыполненного;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТочкуВидаРемонта(ТочкаОР, ВидРемонта)
	
	ТочкаВР = Неопределено;
	
	Для Каждого Точка1 Из ТочкаОР.Точки Цикл
		Если Точка1.Расшифровка = ВидРемонта Тогда
			ТочкаВР = Точка1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТочкаВР = Неопределено Тогда
		ТочкаВР = ТочкаОР.Точки.Добавить();
		ТочкаВР.Текст = СокрЛП(ВидРемонта);
		ТочкаВР.Расшифровка = ВидРемонта;
	КонецЕсли;
	
	Возврат ТочкаВР;
		
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьИнтервалВДиаграмму(Диаграмма, СтрокаДанных, Серия, Точка, ДатаАктуальности)
	
	ТекДата = ТекущаяДата();
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	Интервал = Значение.Добавить();
	
	Интервал.Начало = СтрокаДанных.ДатаНач;
	Интервал.Конец  = КонецДня(?(СтрокаДанных.ДатаКон > СтрокаДанных.ДатаНач, СтрокаДанных.ДатаКон, СтрокаДанных.ДатаНач + 3600));
	Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);

	Если ЗначениеЗаполнено(СтрокаДанных.Акт) Тогда
		Интервал.Расшифровка = СтрокаДанных.Акт;
		Интервал.Цвет =  WebЦвета.ЗеленаяЛужайка;
	Иначе
		Интервал.Цвет = ?(КонецДня(СтрокаДанных.ДатаКон) < КонецДня(ДатаАктуальности), WebЦвета.Лосось, WebЦвета.Васильковый);
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ОбъектРемонта", СтрокаДанных.ОбъектРемонтныхРабот);
		СтруктураЗаполнения.Вставить("ВидРемонта"	, СтрокаДанных.ВидРемонтныхРабот);
		СтруктураЗаполнения.Вставить("ID_Ремонта"	, СтрокаДанных.ID);
		СтруктураЗаполнения.Вставить("Основание"	, СтрокаДанных.ДокументППР);
		
		Интервал.Расшифровка = СтруктураЗаполнения;
	КонецЕсли;
	
	СкопироватьИнтервалВверхПоТочкамДиаграммы(Диаграмма, Интервал, Серия, Точка.Родитель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СкопироватьИнтервалВверхПоТочкамДиаграммы(Диаграмма, КопируемыйИнтервал, Серия, Точка)
	
	Значение = Диаграмма.ПолучитьЗначение(Точка, Серия);
	Интервал = Значение.Добавить();
	
	Интервал.Начало = КопируемыйИнтервал.Начало;
	Интервал.Конец  = КопируемыйИнтервал.Конец;
	Интервал.Текст  = КопируемыйИнтервал.Текст;
	
	
	Если ТипЗнч(Точка.Родитель) = Тип("ТочкаДиаграммыГанта") Тогда
		СкопироватьИнтервалВверхПоТочкамДиаграммы(Диаграмма, КопируемыйИнтервал, Серия, Точка.Родитель);
	КонецЕсли;
	Интервал.Цвет = КопируемыйИнтервал.Цвет;
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокумент(ПараметрыПостроения)
	//
	//ТД = Новый ТабличныйДокумент;
	//
	//МакетОтчета = Отчеты.впСводнаяДиаграммаГрафиковППР.ПолучитьМакет("Макет");
	//
	//ЗаголовокМакета = МакетОтчета.ПолучитьОбласть("Заголовок|Параметры");
	//ЗаголовокМакета.Параметры.ДатаНачала = Формат(ДатаНач, "ДФ=dd.MM.yyyy");
	//ЗаголовокМакета.Параметры.ДатаОкончания = Формат(ДатаКон, "ДФ=dd.MM.yyyy");	
	//ТД.Вывести(ЗаголовокМакета);
	//
	//Отступ = МакетОтчета.ПолучитьОбласть("Отступ");
	//ТД.Вывести(Отступ);
	//
	//ВыводитьОтсутп = Ложь;
	//
	//Если ОтборПоОР И ЗначениеЗаполнено(ОтборПоОРЗначение) Тогда
	//	
	//	ОбъектРемонтаПараметр = МакетОтчета.ПолучитьОбласть("ОбъектРемонта|Параметры");
	//	ОбъектРемонтаПараметр.Параметры.ОбъектРемонта = ОтборПоОРЗначение;
	//	ОбъектРемонтаПараметр.Параметры.ВидСравнения = ОтборПоОРВидСравнения;
	//	ТД.Вывести(ОбъектРемонтаПараметр);
	//	ВыводитьОтсутп = Истина;
	//	
	//КонецЕсли;
	//
	//Если ОтборПоВР И ЗначениеЗаполнено(ОтборПоВРЗначение) Тогда
	//	
	//	ВидРемонтаПараметр = МакетОтчета.ПолучитьОбласть("ВидРемонта|Параметры");
	//	ВидРемонтаПараметр.Параметры.ВидРемонта = ОтборПоВРЗначение;
	//	ВидРемонтаПараметр.Параметры.ВидСравнения = ОтборПоВРВидСравнения;
	//	ТД.Вывести(ВидРемонтаПараметр);
	//	ВыводитьОтсутп = Истина;
	//	
	//КонецЕсли;
	//
	//
	//Если ВыводитьОтсутп Тогда
	//	ТД.Вывести(Отступ);
	//КонецЕсли;
	//
	//ВыводитьОтсутп = Ложь;
	//
	//Если Не ПодразделениеИсполнитель.Пустая() Тогда
	//	
	//	ПодразделениеИсполнительПараметр = МакетОтчета.ПолучитьОбласть("ПодразделениеИсполнитель|Параметры");
	//	ПодразделениеИсполнительПараметр.Параметры.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
	//	ТД.Вывести(ПодразделениеИсполнительПараметр);
	//	ВыводитьОтсутп = Истина;
	//	
	//КонецЕсли;
	//
	//Если ВыводитьОтсутп Тогда
	//	ТД.Вывести(Отступ);
	//КонецЕсли;
	//
	//СформироватьНаСервере(ТД, Ложь, ПараметрыПостроения, МакетОтчета);
	//
	//ТД.ПолеСверху = 5;
	//ТД.ПолеСлева = 5;
	//ТД.ПолеСправа = 5;
	//ТД.ПолеСнизу = 5;
	//ТД.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	//
	//Возврат ТД;
	//
КонецФункции

&НаСервере 
Процедура ПриЗакрытииНаСервере()
	струкПараметров = Новый Структура(
		"ОтборПоОР, ОтборПоОРВидСравнения, ОтборПоОРЗначение, ОтборПоВР, ОтборПоВРВидСравнения, 
			|ОтборПоВРЗначение, ПодразделениеИсполнитель",
		ОтборПоОР, ОтборПоОРВидСравнения, ОтборПоОРЗначение, ОтборПоВР, ОтборПоВРВидСравнения, 
			ОтборПоВРЗначение, ПодразделениеИсполнитель);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастрйокиТОиР", "ПараметрыОтчета_СводнаяДиаграммаГрафиковППР", струкПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Формирование названия месяца с учетом падежа (именительный и родительный).
//
// Параметры:
// 	НомерМесяца - номер месяца в году.
//		Падеж - указание паджа, в котором нужно сформировать название месяца
//				("Имен" - именительный, по-умолчанию; "Род" - родительный).
//
// Возвращаемое значение:
// 		Строка, название месяца с учетом падежа.
//  
&НаСервереБезКонтекста
Функция НазваниеМесяцаСтрокойПадежное(Знач НомерМесяца, Знач Падеж="Имен")
    если Падеж="Род" тогда
     если НомерМесяца=1 тогда
    	Возврат "января";
     иначеЕсли НомерМесяца=2 тогда
    	Возврат "февраля";
     иначеЕсли НомерМесяца=3 тогда
    	Возврат "марта";
     иначеЕсли НомерМесяца=4 тогда
    	Возврат "апреля";
     иначеЕсли НомерМесяца=5 тогда
    	Возврат "мая";
     иначеЕсли НомерМесяца=6 тогда
    	Возврат "июня";
     иначеЕсли НомерМесяца=7 тогда
    	Возврат "июля";
     иначеЕсли НомерМесяца=8 тогда
    	Возврат "августа";
     иначеЕсли НомерМесяца=9 тогда
    	Возврат "сентября";
     иначеЕсли НомерМесяца=10 тогда
    	Возврат "октября";
     иначеЕсли НомерМесяца=11 тогда
    	Возврат "ноября";
      иначеЕсли НомерМесяца=12 тогда
    	Возврат "декабря";
      конецЕсли;
   конецЕсли;
   если Падеж="Имен" тогда
     если НомерМесяца=1 тогда
    	Возврат "январь";
     иначеЕсли НомерМесяца=2 тогда
    	Возврат "февраль";
     иначеЕсли НомерМесяца=3 тогда
    	Возврат "март";
     иначеЕсли НомерМесяца=4 тогда
    	Возврат "апрель";
     иначеЕсли НомерМесяца=5 тогда
    	Возврат "май";
     иначеЕсли НомерМесяца=6 тогда
    	Возврат "июнь";
     иначеЕсли НомерМесяца=7 тогда
    	Возврат "июль";
     иначеЕсли НомерМесяца=8 тогда
    	Возврат "август";
     иначеЕсли НомерМесяца=9 тогда
    	Возврат "сентябрь";
     иначеЕсли НомерМесяца=10 тогда
    	Возврат "октябрь";
     иначеЕсли НомерМесяца=11 тогда
    	Возврат "ноябрь";
      иначеЕсли НомерМесяца=12 тогда
    	Возврат "декабрь";	
      конецЕсли;
   конецЕсли;
   
КонецФункции

&НаКлиенте
Процедура ЖурналДефектовПриАктивизацииСтроки(Элемент)
	ЗакрытьОбработкуИзДефектов(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЖурналДефектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя =  "ЖурналДефектовЗаявка" Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуЗаявкиАкта(Элемент.ТекущиеДанные.ВыявленныйДефект, ?(БезЗаявкиНаРемонт, Элемент.ТекущиеДанные.Акт, Элемент.ТекущиеДанные.Заявка), БезЗаявкиНаРемонт);
	ИначеЕсли Поле.Имя =  "ЖурналДефектовАкт" Тогда
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Акт) Тогда
			ПоказатьЗначение(, Элемент.ТекущиеДанные.Акт);
		КонецЕсли;
		//RARUS-NN EvgenU № 2021_06_30 ++
	Иначе
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВыявленныйДефект) Тогда
			ПоказатьЗначение(, Элемент.ТекущиеДанные.ВыявленныйДефект);
		КонецЕсли;
		//RARUS-NN EvgenU " 2021_06_30 --
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчетНаработкиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчетСостоянийВидЭксплуатацииПриИзменении(Элемент)
	Элементы.УчетСостояний.ТекущиеДанные.ДатаОкончания = ДатаАктуальности;
КонецПроцедуры

&НаКлиенте
Процедура ОтменаПереносРемонта(Команда)
	
	ТекДанные = Элементы.НормативныеРемонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("ID_Ремонта", ТекДанные.ID_Ремонта);
		ФормаОтменыПереноса = ПолучитьФорму("ОбщаяФорма.впОтменаПереносРемонта", СтруктураПараметров, ЭтаФорма, ЭтаФорма);
		ФормаОтменыПереноса.Открыть();
	КонецЕсли;
	
КонецПроцедуры

//RARUS-NN EvgenU РАIT-0023372 2021_06_04 ++
&НаКлиенте
Процедура ОтменаПереносРемонтаГрупповая(Команда)
	
	ТекДанные = Элементы.СправочникОР2.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ОбъектРемонта", ТекДанные.Ссылка);
		ОткрытьФорму("ОбщаяФорма.впСписокРемонтов", 
					ПараметрыФормы, Элементы.СправочникОР2);//, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры //RARUS-NN EvgenU РАIT-0023372 2021_06_04 --

// ++ rarus Камаев П.В. 14.05.2020 Задача № 21489
&НаКлиенте
Процедура ОбменГУПередать(Команда)
	Если НЕ vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока=Элементы.СписокРейсов.ТекущаяСтрока;
	Судно = ПолучитьСудно(ТекСтрока);
	Если ТекСтрока=Неопределено Тогда
		Сообщение = новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрано судно для обмена!";
		Сообщение.Сообщить();
		//ПоказатьПредупреждение(,"Не выбрано судно для обмена!", 30, "Внимание!");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Судно) Тогда
		Сообщение = новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрано судно для обмена!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	УзелСудна = ПолучитьУзелСудна(Судно);
	Если ЗначениеЗаполнено(УзелСудна) Тогда
		ПараметрыПомощника = Новый Структура;	
		ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", Ложь);
		ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  0);
		ПараметрыПомощника.Вставить("ИспользоватьПрием", Ложь);
		ПараметрыПомощника.Вставить("ИспользоватьОтправку", Истина);
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(УзелСудна, ЭтаФорма, , Истина, ВспомогательныеПараметры);
	Иначе
		Сообщение = новый СообщениеПользователю;
		Сообщение.Текст = "Не найден узел обмена для судна """ + Судно + """!";
		Сообщение.Сообщить();
	КонецЕсли;
	//ОбменГУПередатьНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьУзелСудна(Судно)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("Судно", Судно);
	Запрос.Текст = "ВЫБРАТЬ
	|	ПолныйСуда.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Полный.Суда КАК ПолныйСуда
	|ГДЕ
	|	ПолныйСуда.Судно = &Судно
	|	И НЕ ПолныйСуда.Ссылка.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьСудно(мРейс)
	
	Возврат мРейс.Судно
	
КонецФункции

&НаСервере
Процедура ОбменГУПринятьНаСервере()
	Если НЕ vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
	
	Выборка = ПланыОбмена.Полный.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ЭтотУзел Тогда
			Если Выборка.Суда.Количество() Тогда
				Судно = Выборка.Суда[0].Судно;
				Если ЗначениеЗаполнено(Судно) Тогда
					рарусОбщегоНазначенияВызовСервера.ОбменССудном(Судно, Истина);	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбменГУПринять(Команда)
 
    Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект);	
 
    ПоказатьВопрос(Оповещение, "Будут загружены данные по всем судам, продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);    
 
КонецПроцедуры
   
&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
		ДлительнаяОперация = ВыполнитьФоновоеЗаданиеНаСервере();
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		//ПараметрыОжидания.Интервал = 10;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется прием данных с судов.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполнено", ЭтотОбъект),
		ПараметрыОжидания);
    КонецЕсли;	
 
КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере()
            
	СтруктураПараметров = Новый Структура;	
    
    ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
    ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Прием данных из судов.'");

    ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
        "рарусОбщегоНазначенияВызовСервера.ОбменГУПринять",
        СтруктураПараметров,
        ПараметрыВыполнения);
    Возврат ДлительнаяОперация;
	    
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполнено(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
        Возврат;
    ИначеЕсли Результат.Статус = "Ошибка" Тогда
        Возврат;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		//++ rarus isaeva 07.06.2021
		//Передача после Приема в ЦБ не требуется
		
		//// ++ rarus Камаев П.В. 14.12.2020 Задача № 25915
		////После успешного приема запускаем передачу
		//ДопПараметры = новый Структура;
		//ПослеЗакрытияВопросаОПередаче(КодВозвратаДиалога.Да, ДопПараметры);
		//// -- rarus Камаев П.В. 14.12.2020
		
		//-- rarus isaeva 07.06.2021
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбменСудноПередать(Команда)
	
	рарусОбщегоНазначенияКлиент.ОбменСудноПередать(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбменСудноПринять(Команда)
	
	// ++ rarus Камаев П.В. 14.12.2020 Задача № 25915
	//рарусОбщегоНазначенияКлиент.ОбменСудноПринять(ЭтаФорма);
	//После приема-передача
	рарусОбщегоНазначенияКлиент.ОбменСудно(ЭтаФорма, Истина, Истина);
	// -- rarus Камаев П.В. 14.12.2020
	
КонецПроцедуры
// -- rarus Камаев П.В. 14.05.2020

// ++ rarus Чернавин Г.К 05.06.2020 
&НаСервереБезКонтекста
Процедура СписокРейсовПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого Строка Из Строки Цикл
		Строка.Значение.Данные.НомерБезПрефикса = Документы.vftРейс.НомерБезПрефикса(Строка.Значение.Данные.НомерБезПрефикса);
	КонецЦикла;
КонецПроцедуры
// -- rarus Чернавин Г.К 05.06.2020

// ++ rarus markim 08.07.2020 
&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	Элементы.СписокРейсовПоказыватьУдаленные.Пометка=не Элементы.СписокРейсовПоказыватьУдаленные.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокРейсов, "ПометкаУдаления", Ложь, ВидСравненияКомпоновкиДанных.Равно, , не Элементы.СписокРейсовПоказыватьУдаленные.Пометка);
КонецПроцедуры
// -- rarus markim 08.07.2020 

// ++ rarus Камаев П.В. 29.09.2020 Задача № 24459
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	//Если НЕ ПередачаДанныхВЦБПроизводился Тогда
	//	Если ЗавершениеРаботы = Истина Тогда
	//		Отказ = Истина;
	//		СтандартнаяОбработка = Ложь;
	//		//ТекстПредупреждения = "Закрытие формы приведёт к потере несохранённых данных!";
	//		//ПодключитьОбработчикОжидания("СохранениеНесохраненныхДанных", 1, Истина);
	//		оповещение = новый ОписаниеОповещения("СохранениеНесохраненныхДанных", ЭтотОбъект);
	//		ПоказатьОповещениеПользователя("ттт", оповещение);
	//		//ПоказатьВопрос(,,,
	//	КонецЕсли
	//КонецЕсли
	
	// ++ rarus Камаев П.В. 06.10.2020 Задача № 24459 
	// ++ rarus Камаев П.В. 02.04.2021 Задача № 28365
	// Добавил условие Не полные права
	Если глПередаватьДанныеПриВыходе И НЕ ПередачаДанныхВЦБПроизводился И НЕ глЭтоГлавныйУзел И ЗавершениеРаботы И НЕ ЭтоПолноправныйПользовательИБ Тогда
		// -- rarus Камаев П.В. 02.04.2021
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		ТекстПредупреждения = "Для отправки данных в центральную базу судового модуля нажмите ""Продолжить работу"".";
		ПодключитьОбработчикОжидания("ВыполнитьПередачуДанныхВГлавныйУзел", 0.1, Истина);
		Возврат;
	КонецЕсли;
	//ПередачаДанныхВЦБПроизводился = Ложь;
	// -- rarus Камаев П.В. 06.10.2020
КонецПроцедуры
 
&НаКлиенте
Процедура ВыполнитьПередачуДанныхВГлавныйУзел() Экспорт
	
	рарусОбщегоНазначенияВызовСервера.ВыполнитьОбменСГлавнымУзлом(Ложь);
	ПередачаДанныхВЦБПроизводился = Истина;
	ЗавершитьРаботуСистемы(Ложь);
	
КонецПроцедуры
// -- rarus Камаев П.В. 29.09.2020

// ++ rarus Камаев П.В. 25.11.2020 Задача № 25503
&НаКлиенте
Процедура ОбменГУПередатьПоВсемСудам(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПередаче", ЭтотОбъект);	
 
    ПоказатьВопрос(Оповещение, "Будут переданы данные всем судам, продолжить?", РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Да);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопросаОПередаче(Результат, Параметры) Экспорт
 
    Если Результат = КодВозвратаДиалога.Да Тогда
		ДлительнаяОперация = ВыполнитьФоновоеЗаданиеПередачиНаСервере();
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
		ПараметрыОжидания.ВыводитьСообщения = Истина;
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Выполняется передача данных на суда.'");
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
		ДлительнаяОперация,
		Новый ОписаниеОповещения("ВыполнитьПроцедуруФоновоВыполненоПередача", ЭтотОбъект),
		ПараметрыОжидания);
		//МассивСудов = ПолучитьМассивСудовКОбменуДанными();;
		//Для каждого Судно Из МассивСудов Цикл
		//	
		//	УзелСудна = ПолучитьУзелСудна(Судно);
		//	Если ЗначениеЗаполнено(УзелСудна) Тогда
		//		ПараметрыПомощника = Новый Структура;	
		//		ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", Ложь);
		//		ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  0);
		//		ПараметрыПомощника.Вставить("ИспользоватьПрием", Ложь);
		//		ПараметрыПомощника.Вставить("ИспользоватьОтправку", Истина);
		//		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		//		ПараметрыПомощника.Вставить("ЗакрытьПриУспешнойСинхронизации", Истина);
		//		
		//		ВспомогательныеПараметры = Новый Структура;
		//		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		//		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(УзелСудна, ЭтаФорма, , Истина, ВспомогательныеПараметры);
		//	КонецЕсли;	
		//КонецЦикла;
    КонецЕсли;	
 
КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеПередачиНаСервере()
            
	СтруктураПараметров = Новый Структура;
    
    ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
    ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Передача данных на суда.'");

    ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
        "рарусОбщегоНазначенияВызовСервера.ОбменГУПередать",
        СтруктураПараметров,
        ПараметрыВыполнения);
		
    Возврат ДлительнаяОперация;
	    
КонецФункции

&НаКлиенте
Процедура ВыполнитьПроцедуруФоновоВыполненоПередача(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		Возврат;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьМассивСудовКОбменуДанными()
	
	МассивСудов = новый Массив;
	
	Если НЕ vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат МассивСудов
	КонецЕсли;
	
	ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	Запрос.Текст = "ВЫБРАТЬ
	|	Полный.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.Полный КАК Полный
	|ГДЕ
	|	НЕ Полный.ПометкаУдаления И Полный.Ссылка <> &ЭтотУзел";
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоИтераций = Выборка.Количество();
	Сч = 1;
	Пока Выборка.Следующий() Цикл
		
		мПланОбмена = Выборка.Ссылка;
		Если мПланОбмена.Суда.Количество() Тогда
			Судно = мПланОбмена.Суда[0].Судно;
			
			Если МассивСудов.Найти(Судно) = Неопределено Тогда
				МассивСудов.Добавить(Судно);	
			КонецЕсли;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	Возврат МассивСудов
КонецФункции

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Процедура ВывестиИерархиюВДиаграмму(Диаграмма, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, ТекущийРодитель, Серия, ТочкаРодителя = Неопределено, ДатаАктуальности)
	
	СтрокиПодчиненных = ТаблицаДанныхРодителей.НайтиСтроки(Новый Структура("ОбъектРемонтныхРаботРодительИерархия", ТекущийРодитель));
	
	Для каждого Строка из СтрокиПодчиненных Цикл
		Если ТочкаРодителя = Неопределено Тогда
			НоваяТочкаОР = Диаграмма.Точки.Добавить();
		Иначе
			НоваяТочкаОР = ТочкаРодителя.Точки.Добавить();
		КонецЕсли;
		
		НоваяТочкаОР.Текст = СокрЛП(Строка.ОбъектРемонтныхРаботИерархия);
		НоваяТочкаОР.Расшифровка = Строка.ОбъектРемонтныхРаботИерархия;
		
		СтрокиКонечныхДанных = ТаблицаКонечныхДанных.НайтиСтроки(Новый Структура("ОбъектРемонтныхРабот", Строка.ОбъектРемонтныхРаботИерархия));
		Для каждого СтрокаДанных из СтрокиКонечныхДанных Цикл
			ТочкаВР = ПолучитьТочкуВидаРемонтаНовая(НоваяТочкаОР, СтрокаДанных.ВидРемонтныхРабот, СтрокаДанных.ОбъектРемонтныхРабот);
			ДобавитьИнтервалВДиаграмму(Диаграмма, СтрокаДанных, Серия, ТочкаВР, ДатаАктуальности);
		КонецЦикла;
		
		ВывестиИерархиюВДиаграмму(Диаграмма, ТаблицаДанныхРодителей, ТаблицаКонечныхДанных, Строка.ОбъектРемонтныхРаботИерархия, Серия, НоваяТочкаОР, ДатаАктуальности);
	КонецЦикла;
	
КонецПроцедуры // -- rarus selmik 27.10.2020 25003

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ПолучитьТочкуВидаРемонтаНовая(ТочкаОР, ВидРемонта, ОбъектРемонта)
	
	ТочкаВР = Неопределено;
	
	Для Каждого Точка1 Из ТочкаОР.Точки Цикл
		Если Точка1.Расшифровка.ВидРемонта 		= ВидРемонта 
			И Точка1.Расшифровка.ОбъектРемонта 	= ОбъектРемонта Тогда
			ТочкаВР = Точка1;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТочкаВР = Неопределено Тогда
		ТочкаВР = ТочкаОР.Точки.Добавить();
		ТочкаВР.Текст = СокрЛП(ВидРемонта);
		
		РасшифровкаСтруктура = Новый Структура;
		РасшифровкаСтруктура.Вставить("ВидРемонта"		, ВидРемонта);
		РасшифровкаСтруктура.Вставить("ОбъектРемонта"	, ОбъектРемонта);
		
		ТочкаВР.Расшифровка = РасшифровкаСтруктура;
	КонецЕсли;
	
	Возврат ТочкаВР;
		
КонецФункции  // -- rarus selmik 27.10.2020 25003
// -- rarus Камаев П.В. 25.11.2020

#КонецОбласти

#КонецОбласти 

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура ЗарегистрироватьНаработкуЗавершение(РезультатВопроса, ПараметрыЗаписи) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗарегистрироватьНаработкуНаСервере(Элементы.СправочникОР1.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры // -- rarus selmik 27.01.2021

// ++ rarus selmik 27.01.2021
&НаСервере
Функция ВывестиСообщениеПроверкаНаработки()
	ВременнаяТаблица = УчетНаработки.Выгрузить(,"ДатаРаботыПо, ДатаРаботыС, НовоеЗначение, СтароеЗначение").СкопироватьКолонки();
	
	Для Каждого СтрокаНаработки Из УчетНаработки Цикл
		Если ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыС) И ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыПо) И СтрокаНаработки.НовоеЗначение > 0 Тогда
			Если СтрокаНаработки.ДатаРаботыС = СтрокаНаработки.ДатаРаботыПо И СтрокаНаработки.Наработка > 0 И СтрокаНаработки.Наработка <= 24 Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	
	Для Каждого СтрокаНаработки Из УчетНаработки Цикл
		Если ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыС) И ЗначениеЗаполнено(СтрокаНаработки.ДатаРаботыПо) И СтрокаНаработки.НовоеЗначение > 0 Тогда
			СтрокаВТ = ВременнаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВТ, СтрокаНаработки);
		КонецЕсли;
	КонецЦикла;
	
	Если ВременнаяТаблица.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(ДанныеФормы.ДатаРаботыС, ДанныеФормы.ДатаРаботыПо, ЧАС) КАК ЧасовМеждуДатами,
		|	ДанныеФормы.НовоеЗначение - ДанныеФормы.СтароеЗначение КАК РазностьЗначений
		|ПОМЕСТИТЬ Вт_ПредварительнаяВыборка
		|ИЗ
		|	&ДанныеФормы КАК ДанныеФормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Вт_ПредварительнаяВыборка.ЧасовМеждуДатами КАК ЧасовМеждуДатами,
		|	Вт_ПредварительнаяВыборка.РазностьЗначений КАК РазностьЗначений
		|ИЗ
		|	Вт_ПредварительнаяВыборка КАК Вт_ПредварительнаяВыборка
		|ГДЕ
		|	(Вт_ПредварительнаяВыборка.РазностьЗначений > Вт_ПредварительнаяВыборка.ЧасовМеждуДатами
		|			ИЛИ Вт_ПредварительнаяВыборка.ЧасовМеждуДатами = 0
		|			ИЛИ Вт_ПредварительнаяВыборка.РазностьЗначений <= 0)";
		
		Запрос.УстановитьПараметр("ДанныеФормы", ВременнаяТаблица);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;			
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции // -- rarus selmik 27.01.2021

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ЗаполнитьНаработку(ОбъектРемонта, ДатаАктуальностиНаработки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(впНаработкаОбъектовРемонтаСрезПоследних.НовоеЗначение) КАК Значение,
	|	впНаработкаОбъектовРемонтаСрезПоследних.Показатель КАК Показатель
	|ПОМЕСТИТЬ Вт_МаксимальныеЗначения
	|ИЗ
	|	РегистрСведений.впНаработкаОбъектовРемонта.СрезПоследних(&НаДату, ОбъектРемонта = &ОбъектРемонта) КАК впНаработкаОбъектовРемонтаСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	впНаработкаОбъектовРемонтаСрезПоследних.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впНаработкаОбъектовРемонтаСрезПоследних.Период КАК Период,
	|	впНаработкаОбъектовРемонтаСрезПоследних.Регистратор КАК Регистратор,
	|	впНаработкаОбъектовРемонтаСрезПоследних.Показатель КАК Показатель,
	|	впНаработкаОбъектовРемонтаСрезПоследних.НовоеЗначение КАК Значение
	|ИЗ
	|	РегистрСведений.впНаработкаОбъектовРемонта.СрезПоследних(
	|			&НаДату,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И (НовоеЗначение, Показатель) В
	|					(ВЫБРАТЬ
	|						Вт_МаксимальныеЗначения.Значение КАК Значение,
	|						Вт_МаксимальныеЗначения.Показатель КАК Показатель
	|					ИЗ
	|						Вт_МаксимальныеЗначения КАК Вт_МаксимальныеЗначения)) КАК впНаработкаОбъектовРемонтаСрезПоследних";
				   
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("НаДату", КонецДня(ДатаАктуальностиНаработки));
	
	Результат = Запрос.Выполнить();
	
	Возврат рарусОбщегоНазначенияСервер.РезультатЗапросаВМассивСтруктур(Результат);
		
КонецФункции // -- rarus selmik 27.10.2020 25003


// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ПолучитьИсполнителейПоТехКарте(ТехКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехКартыТрудовыеЗатраты.Квалификация КАК Квалификация,
	|	СУММА(впТехКартыТрудовыеЗатраты.Количество) КАК Количество
	|ИЗ
	|	Справочник.впТехКарты.ТрудовыеЗатраты КАК впТехКартыТрудовыеЗатраты
	|ГДЕ
	|	впТехКартыТрудовыеЗатраты.Ссылка = &ТехКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	впТехКартыТрудовыеЗатраты.Квалификация";
	
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Результат = Запрос.Выполнить();
	
	Возврат рарусОбщегоНазначенияСервер.РезультатЗапросаВМассивСтруктур(Результат);

КонецФункции // -- rarus selmik 27.10.2020 25003

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ПолучитьИнструментыПоТехКарте(ТехКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехКартыИнструментыИТехника.Инструмент КАК Инструмент,
	|	СУММА(впТехКартыИнструментыИТехника.Количество) КАК Количество
	|ИЗ
	|	Справочник.впТехКарты.ИнструментыИТехника КАК впТехКартыИнструментыИТехника
	|ГДЕ
	|	впТехКартыИнструментыИТехника.Ссылка = &ТехКарта
	|
	|СГРУППИРОВАТЬ ПО
	|	впТехКартыИнструментыИТехника.Инструмент";
	
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Результат = Запрос.Выполнить();
	
	Возврат рарусОбщегоНазначенияСервер.РезультатЗапросаВМассивСтруктур(Результат);

КонецФункции // -- rarus selmik 27.10.2020 25003


// ++ rarus selmik 09.11.2020 25003
Функция ЗаполнитьЗапчастиПоОбъектуРемонта(ОбъектРемонта, ВидРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впНормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	|	впНормыЗапчастейНаОбъектыРемонта.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.впНормыЗапчастейНаОбъектыРемонта КАК впНормыЗапчастейНаОбъектыРемонта
	|ГДЕ
	|	впНормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И впНормыЗапчастейНаОбъектыРемонта.ВидРемонта = &ВидРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта"	, ОбъектРемонта);
	Запрос.УстановитьПараметр("ВидРемонта"		, ВидРемонта);

	
	Результат = Запрос.Выполнить();
	
	Возврат рарусОбщегоНазначенияСервер.РезультатЗапросаВМассивСтруктур(Результат);

КонецФункции // -- rarus selmik 27.10.2020 25003

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ПолучитьМатериалыПоТехКарте(ТехКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	впТехКартыМатериальныеЗатраты.Количество КАК Количество
	|ИЗ
	|	Справочник.впТехКарты.МатериальныеЗатраты КАК впТехКартыМатериальныеЗатраты
	|ГДЕ
	|	впТехКартыМатериальныеЗатраты.Ссылка = &ТехКарта";
	
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Результат = Запрос.Выполнить();
	
	Возврат рарусОбщегоНазначенияСервер.РезультатЗапросаВМассивСтруктур(Результат);

КонецФункции // -- rarus selmik 27.10.2020 25003

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ПолучитьОперацииПоТехКарте(ТехКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехКартыСписокОпераций.Операция КАК Операция,
	|	впТехКартыСписокОпераций.Продолжительность КАК Продолжительность,
	|	впТехКартыСписокОпераций.Количество КАК Количество
	|ИЗ
	|	Справочник.впТехКарты.СписокОпераций КАК впТехКартыСписокОпераций
	|ГДЕ
	|	впТехКартыСписокОпераций.Ссылка = &ТехКарта";
	
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Результат = Запрос.Выполнить();
	
	Возврат рарусОбщегоНазначенияСервер.РезультатЗапросаВМассивСтруктур(Результат);

КонецФункции // -- rarus selmik 27.10.2020 25003

// ++ rarus selmik 27.10.2020 25003
&НаСервереБезКонтекста
Функция ПолучитьИнструкцииПоТехКарте(ТехКарта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехКартыПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.впТехКартыПрисоединенныеФайлы КАК впТехКартыПрисоединенныеФайлы
	|ГДЕ
	|	впТехКартыПрисоединенныеФайлы.ВладелецФайла = &ТехКарта";
	
	Запрос.УстановитьПараметр("ТехКарта", ТехКарта);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Новый Массив;
	Иначе
		Возврат Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;

КонецФункции // -- rarus selmik 27.10.2020 25003

// ++ rarus selmik 02.02.2021
&НаСервере
Функция ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта, ДатаДокумента = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впТехКартыСписокОпераций.ID КАК ID,
	|	впТехКартыСписокОпераций.Операция КАК Операция,
	|	впТехКартыСписокОпераций.Количество КАК Количество,
	|	впТехКартыСписокОпераций.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокОпераций_Данные
	|ИЗ
	|	Справочник.впТехКарты.СписокОпераций КАК впТехКартыСписокОпераций
	|ГДЕ
	|	впТехКартыСписокОпераций.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОпераций.ID КАК ID,
	|	СписокОпераций.Операция КАК Операция,
	|	СписокОпераций.Количество КАК Количество
	|ИЗ
	|	СписокОпераций_Данные КАК СписокОпераций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокОпераций.ID КАК ID,
	|	СписокОпераций.Операция КАК Операция,
	|	СписокОпераций.Количество КАК Количество,
	|	СписокОпераций.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокОпераций
	|ИЗ
	|	СписокОпераций_Данные КАК СписокОпераций
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СписокОпераций.Операция) = ТИП(Справочник.впТехнологическиеОперации)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	Операция,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впТехКартыМатериальныеЗатраты.ID КАК ID,
	|	впТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	впТехКартыМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	впТехКартыМатериальныеЗатраты.Количество КАК Количество
	|ИЗ
	|	СписокОпераций КАК СписокОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.МатериальныеЗатраты КАК впТехКартыМатериальныеЗатраты
	|		ПО СписокОпераций.ID = впТехКартыМатериальныеЗатраты.ID
	|			И СписокОпераций.Операция = впТехКартыМатериальныеЗатраты.Операция
	|			И СписокОпераций.Ссылка = впТехКартыМатериальныеЗатраты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впТехКартыТрудовыеЗатраты.Квалификация КАК Квалификация,
	|	ЕСТЬNULL(рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизическоеЛицо
	|ПОМЕСТИТЬ Вт_ФизЛицаПоКвалификацииВсе
	|ИЗ
	|	СписокОпераций КАК СписокОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ТрудовыеЗатраты КАК впТехКартыТрудовыеЗатраты
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусСоответствиеПользователяФизическомуЛицу.СрезПоследних(&НаДату, ) КАК рарусСоответствиеПользователяФизическомуЛицуСрезПоследних
	|			ПО впТехКартыТрудовыеЗатраты.Квалификация = рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.Заведование
	|		ПО СписокОпераций.ID = впТехКартыТрудовыеЗатраты.ID
	|			И СписокОпераций.Операция = впТехКартыТрудовыеЗатраты.Операция
	|			И СписокОпераций.Ссылка = впТехКартыТрудовыеЗатраты.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	впТехКартыТрудовыеЗатраты.Квалификация,
	|	ЕСТЬNULL(рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ФизЛицаПоКвалификацииВсе.Квалификация КАК Квалификация,
	|	Вт_ФизЛицаПоКвалификацииВсе.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ Вт_ФизЛицаПоКвалификации
	|ИЗ
	|	Вт_ФизЛицаПоКвалификацииВсе КАК Вт_ФизЛицаПоКвалификацииВсе
	|ГДЕ
	|	(Вт_ФизЛицаПоКвалификацииВсе.Квалификация, Вт_ФизЛицаПоКвалификацииВсе.ФизическоеЛицо) В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ВСЁ.Квалификация,
	|				ВСЁ.ФизическоеЛицо
	|			ИЗ
	|				Вт_ФизЛицаПоКвалификацииВсе КАК ВСЁ
	|			ГДЕ
	|				ВСЁ.Квалификация = Вт_ФизЛицаПоКвалификацииВсе.Квалификация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впТехКартыТрудовыеЗатраты.ID КАК ID,
	|	впТехКартыТрудовыеЗатраты.Количество КАК Количество,
	|	впТехКартыТрудовыеЗатраты.Квалификация КАК Квалификация,
	|	Вт_ФизЛицаПоКвалификации.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	СписокОпераций КАК СписокОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ТрудовыеЗатраты КАК впТехКартыТрудовыеЗатраты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_ФизЛицаПоКвалификации КАК Вт_ФизЛицаПоКвалификации
	|			ПО впТехКартыТрудовыеЗатраты.Квалификация = Вт_ФизЛицаПоКвалификации.Квалификация
	|		ПО СписокОпераций.ID = впТехКартыТрудовыеЗатраты.ID
	|			И СписокОпераций.Операция = впТехКартыТрудовыеЗатраты.Операция
	|			И СписокОпераций.Ссылка = впТехКартыТрудовыеЗатраты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впТехКартыИнструментыИТехника.ID КАК ID,
	|	впТехКартыИнструментыИТехника.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	впТехКартыИнструментыИТехника.Инструмент КАК Инструмент,
	|	впТехКартыИнструментыИТехника.Количество КАК Количество
	|ИЗ
	|	СписокОпераций КАК СписокОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ИнструментыИТехника КАК впТехКартыИнструментыИТехника
	|		ПО СписокОпераций.ID = впТехКартыИнструментыИТехника.ID
	|			И СписокОпераций.Операция = впТехКартыИнструментыИТехника.Операция
	|			И СписокОпераций.Ссылка = впТехКартыИнструментыИТехника.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКарта);
	
	Если ДатаДокумента = Неопределено Тогда
		Запрос.УстановитьПараметр("НаДату", Дата(1,1,1));
	Иначе
		Запрос.УстановитьПараметр("НаДату", ДатаДокумента);
	КонецЕсли;
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции // -- rarus selmik 02.02.2021

&НаКлиенте
Процедура СтраницыТОиРПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница.Имя = "МониторКлТОиР" Тогда
		Сформировать(Элемент);
	ИначеЕсли ТекущаяСтраница.Имя = "СтраницаСнабжение" Тогда
		ЗаполнитьТаблицуСнабжениеПотребностьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТаблицуСнабжениеПотребностьНаСервере()
	
	СнабжениеПотребность.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	впЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	впЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	СУММА(впЗаявкаНаРемонтМатериальныеЗатраты.Количество) КАК Количество,
	               |	впЗаявкаНаРемонтМатериальныеЗатраты.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ вт_заявки
	               |ИЗ
	               |	Документ.впЗаявкаНаРемонт.МатериальныеЗатраты КАК впЗаявкаНаРемонтМатериальныеЗатраты
	               |ГДЕ
	               |	НЕ впЗаявкаНаРемонтМатериальныеЗатраты.Ссылка.РемонтнаяВедомость
	               |	И впЗаявкаНаРемонтМатериальныеЗатраты.Ссылка.Проведен
	               |	И впЗаявкаНаРемонтМатериальныеЗатраты.Ссылка.Подразделение = &Судно
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	впЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID,
	               |	впЗаявкаНаРемонтМатериальныеЗатраты.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	впЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	               |	впЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID,
	               |	СУММА(впЗаявкаНаРемонтЗапчастиРемонта.Количество),
	               |	впЗаявкаНаРемонтЗапчастиРемонта.Ссылка
	               |ИЗ
	               |	Документ.впЗаявкаНаРемонт.ЗапчастиРемонта КАК впЗаявкаНаРемонтЗапчастиРемонта
	               |ГДЕ
	               |	НЕ впЗаявкаНаРемонтЗапчастиРемонта.Ссылка.РемонтнаяВедомость
	               |	И впЗаявкаНаРемонтЗапчастиРемонта.Ссылка.Проведен
	               |	И впЗаявкаНаРемонтЗапчастиРемонта.Ссылка.Подразделение = &Судно
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	               |	впЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID,
	               |	впЗаявкаНаРемонтЗапчастиРемонта.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	впАктыПоРемонтам.IDРемонта КАК IDРемонта,
	               |	СУММА(впАктыПоРемонтам.ПроцентВыполнения) КАК ПроцентВыполнения
	               |ПОМЕСТИТЬ вт_акты
	               |ИЗ
	               |	РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
	               |ГДЕ
	               |	впАктыПоРемонтам.IDРемонта В
	               |			(ВЫБРАТЬ
	               |				вт.РемонтыОборудования_ID
	               |			ИЗ
	               |				вт_заявки КАК вт)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впАктыПоРемонтам.IDРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	впЗаявкиНаСнабжение.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт,
	               |	впЗаявкиНаСнабжение.Номенклатура КАК Номенклатура,
	               |	СУММА(впЗаявкиНаСнабжение.Количество) КАК Количество
	               |ПОМЕСТИТЬ вт_СформированныеПотребности
	               |ИЗ
	               |	РегистрСведений.впЗаявкиНаСнабжение КАК впЗаявкиНаСнабжение
	               |ГДЕ
	               |	впЗаявкиНаСнабжение.ЗаявкаНаРемонт В
	               |			(ВЫБРАТЬ
	               |				вт.Ссылка
	               |			ИЗ
	               |				вт_Заявки КАК вт)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	впЗаявкиНаСнабжение.ЗаявкаНаРемонт,
	               |	впЗаявкиНаСнабжение.Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_заявки.Номенклатура КАК Номенклатура,
	               |	СУММА(вт_заявки.Количество) КАК Потребность,
	               |	вт_заявки.Ссылка КАК Основание
	               |ПОМЕСТИТЬ вт_потребность
	               |ИЗ
	               |	вт_заявки КАК вт_заявки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_акты КАК вт_акты
	               |		ПО вт_заявки.РемонтыОборудования_ID = вт_акты.IDРемонта
	               |			И (ЕСТЬNULL(вт_акты.ПроцентВыполнения, 0) >= 100)
	               |ГДЕ
	               |	вт_акты.IDРемонта ЕСТЬ NULL
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_заявки.Номенклатура,
	               |	вт_заявки.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_заявки.Номенклатура КАК Номенклатура,
	               |	вт_заявки.Ссылка КАК Основание,
	               |	МИНИМУМ(впЗаявкаНаРемонтРемонтыОборудования.ДатаНачала) КАК ДатаОтгрузки
	               |ПОМЕСТИТЬ вт_ДатаОтгрузки
	               |ИЗ
	               |	вт_заявки КАК вт_заявки
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаРемонт.РемонтыОборудования КАК впЗаявкаНаРемонтРемонтыОборудования
	               |		ПО вт_заявки.Ссылка = впЗаявкаНаРемонтРемонтыОборудования.Ссылка
	               |			И вт_заявки.РемонтыОборудования_ID = впЗаявкаНаРемонтРемонтыОборудования.ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	вт_заявки.Номенклатура,
	               |	вт_заявки.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	вт_потребность.Номенклатура КАК Номенклатура,
	               |	вт_потребность.Потребность КАК Потребность,
	               |	вт_потребность.Основание КАК Основание,
	               // ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
				   |	ВЫБОР
				   |		КОГДА &ИспользоватьИмущественныйУчет
				   |			ТОГДА ЕСТЬNULL(рарусИмуществоНаСудахОстатки.КоличествоОстаток, 0)
				   |		ИНАЧЕ 0
				   |	КОНЕЦ КАК Остаток,
				   //|	ЕСТЬNULL(впТоварыНаСкладахОстатки.ВНаличииОстаток, 0) КАК Остаток,
	               // -- rarus atyutyakin 28.02.2021
	               |	ЕСТЬNULL(вт_СформированныеПотребности.Количество, 0) КАК СформированнаяПотребность,
	               |	вт_ДатаОтгрузки.ДатаОтгрузки КАК ДатаОтгрузки
	               |ИЗ
	               |	вт_потребность КАК вт_потребность
				   // ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.рарусИмуществоНаСудах.Остатки(&ДатаАктуальности, 
				   |				&ИспользоватьИмущественныйУчет
				   |				И Склад = &СкладСудна
				   |				И Статус В (
				   |					ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе),
				   |					ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ))) КАК рарусИмуществоНаСудахОстатки
	               |		ПО вт_потребность.Номенклатура = рарусИмуществоНаСудахОстатки.Номенклатура
				   //|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыНаСкладах.Остатки(&ДатаАктуальности, Судно = &Судно) КАК впТоварыНаСкладахОстатки
				   //|		ПО вт_потребность.Номенклатура = впТоварыНаСкладахОстатки.Номенклатура
				   // -- rarus atyutyakin 28.02.2021
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_СформированныеПотребности КАК вт_СформированныеПотребности
	               |		ПО вт_потребность.Номенклатура = вт_СформированныеПотребности.Номенклатура
	               |			И вт_потребность.Основание = вт_СформированныеПотребности.ЗаявкаНаРемонт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ вт_ДатаОтгрузки КАК вт_ДатаОтгрузки
	               |		ПО вт_потребность.Номенклатура = вт_ДатаОтгрузки.Номенклатура
	               |			И вт_потребность.Основание = вт_ДатаОтгрузки.Основание
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	вт_потребность.Основание.Дата,
	               |	вт_потребность.Основание.Ссылка,
	               |	Номенклатура,
	               |	Потребность УБЫВ";
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
	Запрос.УстановитьПараметр("Судно", ОсновноеСудно);
	// ++ rarus atyutyakin 28.02.2021  [ФТ.ИМ.02.01]
	Запрос.УстановитьПараметр("СкладСудна", рарусОбщегоНазначенияСервер.СкладСудна(ОсновноеСудно));
	
	ПараметрыФО = Новый Структура("Период, Судно", ДатаАктуальности, ОсновноеСудно);
	Запрос.УстановитьПараметр("ИспользоватьИмущественныйУчет", 
		рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчет(ПараметрыФО));
	// -- rarus atyutyakin 28.02.2021
	
	ТаблицаУчтенныхОстатков = Новый ТаблицаЗначений();
	ТаблицаУчтенныхОстатков.Колонки.Добавить("Номенклатура");
	ТаблицаУчтенныхОстатков.Колонки.Добавить("Остаток");
	
	СтрокиДляУдаления = Новый Массив;
	СтрТаб = неопределено;
	СтрокаУчтенныйОстаток = неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрТаб = СнабжениеПотребность.Добавить();
		ЗаполнитьЗначенияСвойств(СтрТаб, Выборка, "Номенклатура, Потребность, СформированнаяПотребность, Основание, ДатаОтгрузки");
		СтрТаб.ОстатокОбщий = Выборка.Остаток;
		СтрокаУчтенныйОстаток = ТаблицаУчтенныхОстатков.Найти(Выборка.Номенклатура, "Номенклатура");
		Если СтрокаУчтенныйОстаток = неопределено Тогда
			СтрокаУчтенныйОстаток = ТаблицаУчтенныхОстатков.Добавить();
			СтрокаУчтенныйОстаток.Номенклатура = Выборка.Номенклатура;
			СтрокаУчтенныйОстаток.Остаток = 0;
		КонецЕсли;
		СтрТаб.Остаток = Мин(СтрТаб.Потребность, СтрТаб.ОстатокОбщий - СтрокаУчтенныйОстаток.Остаток);
		СтрТаб.КЗаказу = СтрТаб.Потребность - СтрТаб.Остаток - Выборка.СформированнаяПотребность;
		Если СтрТаб.КЗаказу = 0 и Выборка.СформированнаяПотребность > 0 Тогда
			СтрокиДляУдаления.Добавить(СтрТаб);
		КонецЕсли;
		СтрокаУчтенныйОстаток.Остаток = СтрокаУчтенныйОстаток.Остаток + СтрТаб.Остаток;
		
	КонецЦикла;
	
	Для Каждого СтрокаДляУдаления из СтрокиДляУдаления Цикл
		СнабжениеПотребность.удалить(СнабжениеПотребность.Индекс(СтрокаДляУдаления));
	КонецЦикла;
	
	ТаблицаДляОбработки = СнабжениеПотребность.Выгрузить();
	ТаблицаДляОбработки.Свернуть("Номенклатура, ОстатокОбщий", "Остаток");
	Для Каждого СтрОбработки из ТаблицаДляОбработки Цикл
		Если  СтрОбработки.ОстатокОбщий > СтрОбработки.Остаток Тогда
			СтрокиСнабжениеПотребность = СнабжениеПотребность.НайтиСтроки(Новый Структура("Номенклатура", СтрОбработки.Номенклатура));
			СтрокиСнабжениеПотребность[СтрокиСнабжениеПотребность.Количество() - 1].Остаток = СтрокиСнабжениеПотребность[СтрокиСнабжениеПотребность.Количество() - 1].Остаток + СтрОбработки.ОстатокОбщий - СтрОбработки.Остаток;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявкуНаСнабжениеДляРемонта(Команда)
	Если СоздатьЗнСНаСервере() Тогда
		Элементы.СнабжениеПотребностьСформирована.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаПрочая(Команда)
	
	Форма = ПолучитьФорму("Документ.впЗаявкаНаСнабжение.ФормаОбъекта", , ЭтаФорма, "ЗаявкаНаСнабжение");
	Форма.Объект.Подразделение = ОсновноеСудно;
	Форма.Объект.Дата = ДатаАктуальности;
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере 
Функция СоздатьЗнСНаСервере()
	
	МассивСтрок = СнабжениеПотребность.НайтиСтроки(Новый Структура("Пометка", Истина));
	ТаблицаСнабжениеПотребность = СнабжениеПотребность.Выгрузить(МассивСтрок, "Основание, Номенклатура, КЗаказу, ДатаОтгрузки");
	МассивСтрок0 = ТаблицаСнабжениеПотребность.НайтиСтроки(Новый Структура("КЗаказу", 0));

	Для Каждого СтрМассива0 из МассивСтрок0 Цикл
		ТаблицаСнабжениеПотребность.Удалить(СтрМассива0);
	КонецЦикла;
		
	Если ТаблицаСнабжениеПотребность.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для создания заявки необходимо отметить хотя бы одну потребность");
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаМатериалов= ТаблицаСнабжениеПотребность.Скопировать(, "Основание, Номенклатура, КЗаказу, ДатаОтгрузки");
	ТаблицаМатериалов.Сортировать("Основание, Номенклатура");
	ПредСтрТМ = неопределено;
	оЗаявкаНаСнабжение = неопределено;
	
	Для Каждого СтрТМ из ТаблицаМатериалов Цикл
		
		Если ПредСтрТМ = неопределено или НЕ ПредСтрТМ.Основание = СтрТМ.Основание Тогда
			Если НЕ  оЗаявкаНаСнабжение = неопределено Тогда
				Попытка 
					оЗаявкаНаСнабжение.Записать(РежимЗаписиДокумента.Проведение);
					ЗаполнитьТаблицуСнабжениеПотребностьНаСервере();
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
				КонецПопытки;
			КонецЕсли;
			
			оЗаявкаНаСнабжение = Документы.впЗаявкаНаСнабжение.СоздатьДокумент();
			оЗаявкаНаСнабжение.Организация = Константы.впОсновнаяОрганизация.Получить();
			оЗаявкаНаСнабжение.Подразделение = ОсновноеСудно;
			оЗаявкаНаСнабжение.Ответственный = Пользователи.ТекущийПользователь();
			оЗаявкаНаСнабжение.Дата = ДатаАктуальности;
			стрТаб = оЗаявкаНаСнабжение.ДокументыОснования.Добавить(); 
			стрТаб.ДокументОснование = СтрТМ.Основание;
		КонецЕсли;	
		
		стрТаб = оЗаявкаНаСнабжение.МатериалыИРаботы.Добавить(); 
		стрТаб.Номенклатура = СтрТМ.Номенклатура;
		стрТаб.Количество = СтрТМ.КЗаказу;   
		стрТаб.ДатаОтгрузки = СтрТМ.ДатаОтгрузки;   
		СтрТаб.ID = Новый УникальныйИдентификатор();
		СтрТаб.ВариантОбеспечения = Перечисления.ВариантыОбеспечения.НеТребуется;
		ПредСтрТМ = СтрТМ;
		
	КонецЦикла;
	
	Попытка 
		оЗаявкаНаСнабжение.Записать(РежимЗаписиДокумента.Проведение);
		ЗаполнитьТаблицуСнабжениеПотребностьНаСервере();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПотребности(Команда)
	ЗаполнитьТаблицуСнабжениеПотребностьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СнабжениеПотребностьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗначениеПоля = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, "СнабжениеПотребность", "")];
	
	Если ТипЗнч(ЗначениеПоля) = Тип("ДокументСсылка.впЗаявкаНаРемонт") или ТипЗнч(ЗначениеПоля) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ЗначениеПоля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СнабжениеПотребностьСформированаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ЗначениеПоля = Элемент.ТекущиеДанные[СтрЗаменить(Поле.Имя, "СнабжениеПотребностьСформирована", "")];
	
	Если ТипЗнч(ЗначениеПоля) = Тип("ДокументСсылка.впЗаявкаНаРемонт") или ТипЗнч(ЗначениеПоля) = Тип("ДокументСсылка.впЗаявкаНаСнабжение") или ТипЗнч(ЗначениеПоля) = Тип("СправочникСсылка.Номенклатура") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ЗначениеПоля);
	КонецЕсли;

КонецПроцедуры

// ++ rarus selmik 09.11.2020 25003
&НаКлиенте
Процедура СправочникОР2ПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.СправочникОР2.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Если СтрокаВыбрана Тогда
		сОбъектРемонта = ТекущаяСтрока.Ссылка;
	Иначе
		сОбъектРемонта = Неопределено;
	КонецЕсли;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Ремонты				, "ОбъектРемонта"			, сОбъектРемонта, 
																			ВидСравненияКомпоновкиДанных.Равно, , СтрокаВыбрана,  
																			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(НормативныеРемонты, "ОбъектРемонта", сОбъектРемонта, Истина); 	
	
	Операции.Очистить();
	Инструкции.Очистить();
	Материалы.Очистить();
	Инструменты.Очистить();
	ИсполнителиТехКарты.Очистить();
	Запчасти.Очистить();
	Наработка.Очистить();
	
	Элементы.Ремонты.ТекущаяСтрока = 1;
	
	АктивироватьСтрокуНормативныеРемонты = Ложь;
	Если Элементы.НормативныеРемонты.ТекущаяСтрока = 1 Тогда
		АктивироватьСтрокуНормативныеРемонты = Истина;
	КонецЕсли;
	
	Элементы.НормативныеРемонты.ТекущаяСтрока = 1;
	
	Если АктивироватьСтрокуНормативныеРемонты Тогда
		РемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);
	КонецЕсли;
	
КонецПроцедуры // -- rarus selmik 09.11.2020 25003

// ++ rarus selmik 09.11.2020 25003
&НаКлиенте
Процедура НормативнаяИнформацияПоказатьСкрыть(Команда)
	Элементы.рарусНормативнаяИнформация.Видимость = Не Элементы.рарусНормативнаяИнформация.Видимость;
КонецПроцедуры // -- rarus selmik 09.11.2020 25003

// ++ rarus selmik 09.11.2020 25003
&НаКлиенте
Процедура РемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ИмяРеквизита = СтрЗаменить(Поле.Имя, "Ремонты", "");
	Попытка
		ПоказатьЗначение(, Элемент.ТекущиеДанные[ИмяРеквизита]);
	Исключение
	КонецПопытки;
КонецПроцедуры  // -- rarus selmik 09.11.2020 25003

// ++ rarus selmik 16.12.2020 25003
&НаКлиенте
Процедура ДобавитьФайлКДефекту(Команда)
	ПриложениеФайлаОповещение(ЭтотОбъект);
КонецПроцедуры	// -- rarus selmik 16.12.2020 25003

// ++ rarus selmik 16.12.2020 25003
&НаКлиенте
Процедура ПриложениеФайлаОповещение(ЭтотОбъект)
    
    Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);    
    НачатьПомещениеФайла(Оповещение, , , Истина, УникальныйИдентификатор);
    
КонецПроцедуры	// -- rarus selmik 16.12.2020 25003

// ++ rarus selmik 16.12.2020 25003
&НаКлиенте
Процедура ОбработатьВыборФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
    
    //Если пользователь отказался от выбора файла, то закрываем форму
	Если Не Результат Тогда
		АдресВХранилищеФайлаДефекта = "";
		ИмяФайлаДефекта 			= "";
        Возврат;
	КонецЕсли;
	
	АдресВХранилищеФайлаДефекта = Адрес;
	ИмяФайлаДефекта 			= ВыбранноеИмяФайла;
    
    //ЗаписатьВложениеНаСервере(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры);
        
КонецПроцедуры	// -- rarus selmik 16.12.2020 25003

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура УчетНаработкиНовоеЗначениеПриИзменении(Элемент)
	
	СтрокаНаработки = Элементы.УчетНаработки.ТекущиеДанные;
		
	Если ЗначениеЗаполнено(СтрокаНаработки.СтароеЗначение) И ЗначениеЗаполнено(СтрокаНаработки.НовоеЗначение) Тогда
		СтрокаНаработки.Наработка = СтрокаНаработки.НовоеЗначение - СтрокаНаработки.СтароеЗначение;
	КонецЕсли;
		
КонецПроцедуры // ++ rarus selmik 27.01.2021

// ++ rarus selmik 27.01.2021
&НаКлиенте
Процедура УчетНаработкиНаработкаПриИзменении(Элемент)
	
	СтрокаНаработки = Элементы.УчетНаработки.ТекущиеДанные;	
	СтрокаНаработки.НовоеЗначение = СтрокаНаработки.Наработка + СтрокаНаработки.СтароеЗначение;
	
КонецПроцедуры // ++ rarus selmik 27.01.2021

&НаКлиенте
Процедура ЗакрытьОбработкуИзДефектов(Команда)
	
	Если Элементы.ЖурналДефектов.ТекущиеДанные = неопределено Тогда
		НовыйДок = Неопределено;	
		Статус = "";
		Номер = "";
	Иначе
		ЗаполнитьПоляПоДокументу(Элементы.ЖурналДефектов.ТекущиеДанные.ВыявленныйДефект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

// ++ rarus selmik 25.03.2021
&НаСервереБезКонтекста
Функция ПериодичностьОбновленияЖурналаППР()
	ПериодичностьОбновленияЖурналаППР = Константы.рарусПериодичностьОбновленияЖурналаППР.Получить();
	
	Если ПериодичностьОбновленияЖурналаППР = 0 Тогда
		// Значение по умолчанию 40 секунд
		ПериодичностьОбновленияЖурналаППР = 40;
		Константы.рарусПериодичностьОбновленияЖурналаППР.Установить(ПериодичностьОбновленияЖурналаППР);
	КонецЕсли;
	
	Возврат ПериодичностьОбновленияЖурналаППР;
КонецФункции // ++ rarus selmik 25.03.2021


// ++ rarus selmik 25.03.2021
&НаКлиенте
Процедура ОбновитьРемонты()
	ТекущаяСтрока = Элементы.СправочникОР2.ТекущиеДанные;

	Если Не (ТекущаяСтрока = Неопределено) Тогда
		Элементы.Ремонты.Обновить();
		Элементы.НормативныеРемонты.Обновить();
	КонецЕсли;
	
КонецПроцедуры // ++ rarus selmik 25.03.2021

 


 
