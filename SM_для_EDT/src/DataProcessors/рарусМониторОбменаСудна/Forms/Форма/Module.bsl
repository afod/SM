#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)

	Объект.ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	Если Объект.ОсновноеСудно = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка") Тогда
		//Если в справочнике одно судно, оно и будет основным
		Объект.ОсновноеСудно = ЗапросПоСудам();
		Если Объект.ОсновноеСудно = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка") Тогда
			Отказ = Истина;
			ОповещениеОВыбореОсновногоСудна = Новый ОписаниеОповещения("ВыборОсновногоСудна", ЭтаФорма);
			ПоказатьВопрос(ОповещениеОВыбореОсновногоСудна, "В программе не выбрано основное судно! Необходимо отметить судно основным и повторно открыть Монитор обмена", РежимДиалогаВопрос.ОК,,,"Внимание!");
		КонецЕсли;
	КонецЕсли;
	
	МаксимальныйРазмерФайлаДляСпутника = МаксимальныйРазмерФайлаДляСпутника();
	ДанныеРегистрацииВСети = ПолучитьРегистрациюВСетиНаСервере();
	Объект.РегионРегистрации = ДанныеРегистрацииВСети.СтрокаРегистрации;
	Скорость = ДанныеРегистрацииВСети.Скорость;
	Единица = ДанныеРегистрацииВСети.Единица;
	ЭтоСпутник = ДанныеРегистрацииВСети.ЭтоСпутник;
	Объект.ВариантОбмена = ?(ЭтоСпутник, 1, 2);
	Элементы.ВниманиеСпутник.Видимость = ЭтоСпутник;
	Объект.РасписаниеОбмена = "Не настроено";
	
	ЗаполнитьПолеРезультатовОбмена();
	ЗаполнитьТаблицыПодготовленныхДанных();
	ЗаполнитьДанныеКОбмену();
	// ++ rarus makole 2021-09-16
	Объект.ВерсияКонфигурацииЦБ = ВерсияКонфигурацииЦБ(Объект.ГлавныйУзел);
	// -- rarus makole 2021-09-16
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаксимальныйРазмерФайлаДляСпутника()
	Возврат Константы.рарусМаксимальныйРазмерФайлаДляСпутника.Получить();
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Не ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Отказ = Истина;
		ОбщегоНазначения.СообщитьПользователю("Форма не предназначена для использования в главном узле");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантОбменаПриИзменении(Элемент)
	
	ПроверитьЗаписатьЛогСменыВарианта(Объект.ВариантОбмена);
	Если Объект.ВариантОбмена = 3 Тогда
		Элементы.ГруппаГотовностьКОбмену.Доступность = Ложь;
		Элементы.ЗапроситьНаБерегу.Доступность = Ложь;
		Элементы.ДанныеКОбменуВыгружать.ТолькоПросмотр = Истина;
		Объект.РасписаниеОбмена = НастройкиРасписанияОбмена(); 
	Иначе 
		Элементы.ГруппаГотовностьКОбмену.Доступность = Истина;
		Элементы.ЗапроситьНаБерегу.Доступность = Истина;
		Элементы.ДанныеКОбменуВыгружать.ТолькоПросмотр = Ложь;
		Объект.РасписаниеОбмена = "Не настроено";
	КонецЕсли;
	
	Элементы.ВыполнитьОбмен.Доступность = НЕ (ЭтоСпутник И Объект.ВариантОбмена = 3);
	Элементы.ВыполнитьОбменСОтбором.Доступность = НЕ (ЭтоСпутник И Объект.ВариантОбмена = 3);
	
	ЗаполнитьТаблицыПодготовленныхДанных();
	ЗаполнитьДанныеКОбмену();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиРасписанияОбмена()
	
	МассивЗаданийОбмена = РегламентныеЗадания.ПолучитьРегламентныеЗадания(новый Структура("Метаданные", Метаданные.РегламентныеЗадания["СинхронизацияДанных"]));
	ТекстРасписание = "Не настроено";
	РасписаниеАктивно = ЛОЖЬ;
	ЕстьНастройка = ЛОЖЬ;
	Если МассивЗаданийОбмена.Количество() Тогда
		ТекстРасписание = Строка(МассивЗаданийОбмена[0].Расписание);
		РасписаниеАктивно = Строка(МассивЗаданийОбмена[0].Использование);
		ЕстьНастройка = ИСТИНА;
	КонецЕсли;
	ТекстАктивностиРасписания = ?(Не РасписаниеАктивно И ЕстьНастройка, ", отключено", "");
	Возврат  СтрШаблон("%1%2", ТекстРасписание, ТекстАктивностиРасписания);
	
КонецФункции

&НаКлиенте
Процедура ПодготовленоКОтправкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные.ВидОбъекта = ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.СлужебныеДанные") Тогда
		ПоказыватьСлужебныеДанные = НЕ ПоказыватьСлужебныеДанные
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКОбменуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(,Элемент.ТекущиеДанные.Объект);
КонецПроцедуры

&НаКлиенте
Процедура ДанныеКОбменуВыгружатьПриИзменении(Элемент)
	
	Если Элементы.ДанныеКОбмену.ТекущиеДанные.Выгружать = 2 Тогда // Для ручного выбора нужно только 2 состояния 
		Элементы.ДанныеКОбмену.ТекущиеДанные.Выгружать = 0
	КонецЕсли;
	
	ДанныеОбъекта = ОпределитьДанныеОбъекта(Элементы.ДанныеКОбмену.ТекущиеДанные.Объект);
	ОбработатьСтрокуКВыгрузке(ДанныеОбъекта);
	Объект.ПодготовленоКОтправке.Сортировать("Приоритет");
	ОбъемКВыгрузке = Объект.ПодготовленоКОтправке.Итог("Объем");
	Объект.ОжидаемоеВремяВыгрузки = ?(Скорость = 0, 5, 5 + ОбъемКВыгрузке / ?(Единица = 1, Скорость, Скорость * 1024) * 8);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПолеРезультатовОбмена()
	
	// РезультатыОбмена - Структура с ключами: ГлавныйУзел, НомерОтправленного, НомерПринятого, 	
	// ДатаЗагрузки, ДатаВыгрузки, УспешноЗагружено, УспешноВыгружено, ОшибкаЗагрузки, ОшибкаВыгрузки
	РезультатыОбмена = ПолучитьРезультатыОбмена(Объект.ОсновноеСудно);
	Объект.ГлавныйУзел = РезультатыОбмена.ГлавныйУзел;
	
	ПроверитьЗаписатьЛогСменыВарианта(Объект.ВариантОбмена, СтрШаблон("Автосмена при открытии Монитора обмена. Текущая регистрация судна: %1", Объект.РегионРегистрации));
	
	ОтправкаУспешна = РезультатыОбмена.УспешноВыгружено;
	ПолучениеУспешно = РезультатыОбмена.УспешноЗагружено;
		
	Объект.ДатаПоследнейОтправки = РезультатыОбмена.ДатаВыгрузки;
	Объект.ДатаПоследнегоПолучения = РезультатыОбмена.ДатаЗагрузки;
	Объект.НомерПоследнегоОтправленного = РезультатыОбмена.НомерОтправленного;
	Объект.НомерПоследнегоПолученного = РезультатыОбмена.НомерПринятого;
	
	УстановитьВидДатыОбмена();
	
	// ++ rarus makole 2021-03-26 [Задача № 27965]
	ПроверитьОтбразитьИзменениеКонфигурацииВГлавномУзле();
	// -- rarus makole 2021-03-26 [Задача № 27965]
	
КонецПроцедуры

// ++ rarus makole 2021-03-26 [Задача № 27965]
&НаКлиенте
Процедура ПроверитьОтбразитьИзменениеКонфигурацииВГлавномУзле()
	
	ВерсияКонфигурацииУзла = рарусОбщегоНазначенияВызовСервера.ВерсияКонфигурацииПлатформы();
	Если Объект.ВерсияКонфигурацииЦБ <> ""
		И ВерсияКонфигурацииУзла.НомерВерсии <> Объект.ВерсияКонфигурацииЦБ Тогда
		Элементы.НадписьКонфигурацияОбновилась.Видимость = Истина
	Иначе
		Элементы.НадписьКонфигурацияОбновилась.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры
// -- rarus makole 2021-03-26 [Задача № 27965]

&НаСервере
Процедура ЗаполнитьТаблицыПодготовленныхДанных()
	СохраненныеДанные = ПолучитьСохраненныеДанныеНаСервере(Объект.ГлавныйУзел, Объект.ВариантОбмена);
	Объект.ПодготовленоКЗагрузке.Загрузить(СохраненныеДанные);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСохраненныеДанныеНаСервере(Узел, Вариант)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.ВидОбъекта КАК ВидОбъекта,
		|	рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.Количество КАК Количество,
		|	рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.Размер КАК Объем,
		|	ВЫБОР
		|		КОГДА рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.рарусВидыОбъектовДляСинхронизации.КритичныеДанные)
		|			ТОГДА 1
		|		КОГДА рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.рарусВидыОбъектовДляСинхронизации.Документы)
		|			ТОГДА 2
		|		КОГДА рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.рарусВидыОбъектовДляСинхронизации.Справочники)
		|			ТОГДА 3
		|		КОГДА рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.рарусВидыОбъектовДляСинхронизации.Файлы)
		|			ТОГДА 4
		|		КОГДА рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.ВидОбъекта = ЗНАЧЕНИЕ(Перечисление.рарусВидыОбъектовДляСинхронизации.СлужебныеДанные)
		|			ТОГДА 5
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	РегистрСведений.рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле КАК рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле
		|ГДЕ
		|	рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.Узел = &Узел
		|	И рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.Вариант = &Вариант
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("Вариант", Вариант);
	
	СохраненныеДанные = Запрос.Выполнить().Выгрузить();
	СохраненныеДанные.Колонки.Удалить("Порядок");
	
	Возврат СохраненныеДанные;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьЗаписатьЛогСменыВарианта(ВариантОбмена, Ответственный = Неопределено)
	
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена.Полный.ЭтотУзел(), "Код");
	// Ответственный - это или пользователь, или причина строкой
	Если Ответственный = Неопределено Тогда
		Ответственный = Пользователи.ТекущийПользователь()
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусЛогСменыВариантаСинхронизацииСрезПоследних.Вариант КАК Вариант
	|ИЗ
	|	РегистрСведений.рарусЛогСменыВариантаСинхронизации.СрезПоследних(&Период, КодУзла = &КодУзла) КАК рарусЛогСменыВариантаСинхронизацииСрезПоследних";
	Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("КодУзла", КодУзла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.Вариант <> ВариантОбмена Тогда
			РегистрыСведений.рарусЛогСменыВариантаСинхронизации.ЗаписатьСобытие(КодУзла, ВариантОбмена, Ответственный);
		КонецЕсли;
	Иначе
		РегистрыСведений.рарусЛогСменыВариантаСинхронизации.ЗаписатьСобытие(КодУзла, ВариантОбмена, Ответственный);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидДатыОбмена()
	
	Если ОтправкаУспешна Тогда
		Элементы.ДатаПоследнейОтправки.Гиперссылка = Ложь;
		ИнформацияОбОшибкеОтправки = "";
	Иначе 
		Элементы.ДатаПоследнейОтправки.Гиперссылка = Истина;
	КонецЕсли;
	
	Если ПолучениеУспешно Тогда
		Элементы.ДатаПоследнегоПолучения.Гиперссылка = Ложь;
		ИнформацияОбОшибкеОтправки = "";
	Иначе 
		Элементы.ДатаПоследнегоПолучения.Гиперссылка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОсновногоСудна(Ответ,ДопПараметры) Экспорт
	ОткрытьФорму("Справочник.vftСуда.Форма.ФормаСписка");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапросПоСудам()
	//Если в справочнике одно судно, оно и будет основным
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	vftСуда.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.vftСуда КАК vftСуда
	|ГДЕ
	|	vftСуда.ПометкаУдаления = ЛОЖЬ
	|	И vftСуда.ЭтоГруппа = ЛОЖЬ";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Количество() = 1 Тогда
		Результат.Следующий();
		Возврат Результат.Ссылка;
	Иначе
		Возврат ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка");
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРезультатыОбмена(Судно)
	
	ГлавныйУзел = Константы.ГлавныйУзел.Получить();
	Ответ = Новый Структура("ГлавныйУзел, НомерОтправленного, НомерПринятого, ДатаЗагрузки, ДатаВыгрузки, УспешноЗагружено, УспешноВыгружено, ОшибкаЗагрузки, ОшибкаВыгрузки",
						ГлавныйУзел, 0, 0, Дата("00010101"), Дата("00010101"), Ложь, Ложь, "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Полный.НомерОтправленного КАК НомерОтправленного,
		|	Полный.НомерПринятого КАК НомерПринятого,
		|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаЗагрузки,
		|	NULL КАК ДатаВыгрузки,
		|	ВЫБОР
		|		КОГДА СостоянияУспешныхОбменовДанными.ДатаОкончания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УспешноЗагружено,
		|	ЛОЖЬ КАК УспешноВыгружено,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(рарусРегистрацияОбмена.Описание КАК СТРОКА(500)), """") КАК ОшибкаЗагрузки,
		|	NULL КАК ОшибкаВыгрузки
		|ПОМЕСТИТЬ ВТ_ДанныеОбмена
		|ИЗ
		|	ПланОбмена.Полный КАК Полный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
		|			ПО СостоянияОбменовДанными.УзелИнформационнойБазы = СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы
		|				И СостоянияОбменовДанными.ДатаОкончания = СостоянияУспешныхОбменовДанными.ДатаОкончания
		|				И СостоянияОбменовДанными.ДействиеПриОбмене = СостоянияУспешныхОбменовДанными.ДействиеПриОбмене
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусРегистрацияОбмена КАК рарусРегистрацияОбмена
		|			ПО СостоянияОбменовДанными.ДатаОкончания = рарусРегистрацияОбмена.Дата
		|				И (рарусРегистрацияОбмена.Судно = &Судно)
		|		ПО (Полный.Ссылка = &ГлавныйУзел)
		|			И Полный.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
		|			И (СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Полный.НомерОтправленного,
		|	Полный.НомерПринятого,
		|	NULL,
		|	СостоянияОбменовДанными.ДатаОкончания,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА СостоянияУспешныхОбменовДанными.ДатаОкончания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(рарусРегистрацияОбмена.Описание КАК СТРОКА(500)), """")
		|ИЗ
		|	ПланОбмена.Полный КАК Полный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
		|			ПО СостоянияОбменовДанными.УзелИнформационнойБазы = СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы
		|				И СостоянияОбменовДанными.ДатаОкончания = СостоянияУспешныхОбменовДанными.ДатаОкончания
		|				И СостоянияОбменовДанными.ДействиеПриОбмене = СостоянияУспешныхОбменовДанными.ДействиеПриОбмене
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусРегистрацияОбмена КАК рарусРегистрацияОбмена
		|			ПО СостоянияОбменовДанными.ДатаОкончания = рарусРегистрацияОбмена.Дата
		|				И (рарусРегистрацияОбмена.Судно = &Судно)
		|		ПО (Полный.Ссылка = &ГлавныйУзел)
		|			И Полный.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
		|			И (СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеОбмена.НомерОтправленного КАК НомерОтправленного,
		|	ВТ_ДанныеОбмена.НомерПринятого КАК НомерПринятого,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ДатаЗагрузки) КАК ДатаЗагрузки,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ДатаВыгрузки) КАК ДатаВыгрузки,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.УспешноЗагружено) КАК УспешноЗагружено,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.УспешноВыгружено) КАК УспешноВыгружено,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ОшибкаЗагрузки) КАК ОшибкаЗагрузки,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ОшибкаВыгрузки) КАК ОшибкаВыгрузки
		|ИЗ
		|	ВТ_ДанныеОбмена КАК ВТ_ДанныеОбмена
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеОбмена.НомерОтправленного,
		|	ВТ_ДанныеОбмена.НомерПринятого";
	
	Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
	Запрос.УстановитьПараметр("Судно", Судно);
	
	ВыборкаПоРезультатам = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоРезультатам.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Ответ, ВыборкаПоРезультатам);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьРегистрациюВСетиНаСервере()
	Возврат рарусСинхронизацияССудном.ПолучитьРегистрациюВСети();
КонецФункции

&НаКлиенте
Процедура ОбновитьРегистрациюСуднаВСети(Команда)
	
	ДанныеРегистрацииВСети = ПолучитьРегистрациюВСетиНаСервере();
	Объект.РегионРегистрации = ДанныеРегистрацииВСети.СтрокаРегистрации;
	Скорость = ДанныеРегистрацииВСети.Скорость;
	Единица = ДанныеРегистрацииВСети.Единица;
	
	ЭтоСпутник = ДанныеРегистрацииВСети.ЭтоСпутник;
	Объект.ВариантОбмена = ?(ЭтоСпутник, 1, 2);
	Элементы.ВниманиеСпутник.Видимость = ЭтоСпутник;
	
	ЗаполнитьТаблицыПодготовленныхДанных();
	ЗаполнитьДанныеКОбмену();
	
	ПроверитьЗаписатьЛогСменыВарианта(Объект.ВариантОбмена, СтрШаблон("Смена варианта при обновлении регистрации судна. Текущая регистрация: %1", Объект.РегионРегистрации));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСБерега(НомерВарианта, ОсновноеСудно)
	
	ПараметрыПодключения = ПолучитьПараметрыПодключения(ОсновноеСудно);
	СтруктураОтвета = ПолучитьОтветСервиса(ПараметрыПодключения, СтрШаблон("%1SI/%2/%3/%4/%5",	
																		ПараметрыПодключения.СтрокаHTTPЗапроса,
																		НомерВарианта,
																		ПараметрыПодключения.КодУзла, 
																		ПараметрыПодключения.НомерОтправленного, 
																		ПараметрыПодключения.НомерПринятого));
	// Снимем с регистрации объекты, полученные на берегу																	
	МассивНомеровОтЦентра = СтрРазделить(СтруктураОтвета.io,";",Истина);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыПодключения.Узел, Число(МассивНомеровОтЦентра[0]));
	
	Возврат СтруктураОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВыборкуНомеровСообщений(СсылкаУзла)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Полный.НомерОтправленного КАК НомерОтправленного,
		|	Полный.НомерПринятого КАК НомерПринятого
		|ИЗ
		|	ПланОбмена.Полный КАК Полный
		|ГДЕ
		|	Полный.Ссылка = &СсылкаУзлаКорреспондента";
	Запрос.УстановитьПараметр("СсылкаУзлаКорреспондента", СсылкаУзла);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

#Область СлужебныеДанныеСБерега

&НаКлиенте
Процедура ЗапроситьНаБерегу(Команда)
	
	// ++ rarus makole 2021-09-13 [ВПIT-0030171]
	ПроверитьБлокировкуВнешнихРесурсов();
	// -- rarus makole 2021-09-13 [ВПIT-0030171]
	
	ДлительнаяОперация = ДанныеСБерегаВФоне(Объект.ВариантОбмена, Объект.ОсновноеСудно, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ПараметрыОжидания.Интервал = 2;
    ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение служебных данных из центральной базы'");

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗапроситьНаБерегуЗавершение", ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеСБерегаВФоне(ВариантОбмена, ОсновноеСудно, УникальныйИдентификатор)
	
	ПараметрыПроцедуры = Новый Структура("НомерВарианта, ОсновноеСудно", ВариантОбмена, ОсновноеСудно);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);

	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.рарусМониторОбменаСудна.ПолучитьДанныеСБерега", 
     		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗапроситьНаБерегуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Статус = "Выполнено" Тогда
		ЗакончитьЗагрузкуСлужебныхДанныхНаСервере(Результат.АдресРезультата);
		ЗаполнитьДанныеКОбмену();
		Элементы.НадписьСостояниеОбмена.Заголовок = "СЛУЖЕБНЫЙ ВЫПОЛНЕН";
	ИначеЕсли Результат = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось получить данные с берега. Процесс прерван");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Получение служебных данных с берега", "Ошибка", "Процесс прерван");
		Элементы.НадписьСостояниеОбмена.Заголовок = "СЛУЖЕБНЫЙ ПРЕРВАН";
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось получить данные с берега." + Символы.ПС + Результат.КраткоеПредставлениеОшибки);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Получение служебных данных с берега", "Ошибка", Результат.ПодробноеПредставлениеОшибки);
		Элементы.НадписьСостояниеОбмена.Заголовок = "СЛУЖЕБНЫЙ ОШИБКА";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьЗагрузкуСлужебныхДанныхНаСервере(АдресДанныхСБерега)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ОбработатьСлужебныеДанные(АдресДанныхСБерега);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

#КонецОбласти

#Область ДанныеКОбмену

&НаКлиенте
Процедура ЗаполнитьДанныеКОбмену()
	
	// ++ rarus makole 2021-05-07
	ОбновитьПовторноИспользуемыеЗначения();
	// -- rarus makole 2021-05-07
	
	ДлительнаяОперация = ЗаполнитьДанныеКОбменуВФоне(Объект.ГлавныйУзел, Объект.ВариантОбмена, Объект.ДанныеКОбмену, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ПараметрыОжидания.Интервал = 2;
    ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Подготовка списка выгружаемых объектов'");

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьДанныеКОбменуЗавершение", ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеКОбменуВФоне(ГлавныйУзел, ВариантОбмена, Знач ДанныеКОбмену, УникальныйИдентификатор)
	
	ДанныеКОбмену.Очистить();
	ТЗДанныеКОбмену = ДанныеКОбмену.Выгрузить();
	
	ПараметрыПроцедуры = Новый Структура("ГлавныйУзел, ВариантОбмена, ДанныеКОбмену", ГлавныйУзел, ВариантОбмена, ТЗДанныеКОбмену);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);

	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.рарусМониторОбменаСудна.ПолучитьДанныеКОбмену", 
     		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеКОбменуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Статус = "Выполнено" Тогда
		ЗакончитьЗаполнениеДанныхКОбмену(Результат.АдресРезультата);
		ЗаполнитьВыгружаемыеДанные(Объект.ГлавныйУзел, Объект.ВариантОбмена);
	ИначеЕсли Результат = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось заполнить таблицу выгружаемых объектов. Процесс прерван");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Заполнение таблицы выгружаемых объектов", "Ошибка", "Процесс прерван");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось заполнить таблицу выгружаемых объектов." + Символы.ПС + Результат.КраткоеПредставлениеОшибки);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Заполнение таблицы выгружаемых объектов", "Ошибка", Результат.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьЗаполнениеДанныхКОбмену(АдресРезультата)
	СтруктураРезультата = ПолучитьИзВременногоХранилища(АдресРезультата);
	Объект.ДанныеКОбмену.Очистить();
	Объект.ДанныеКОбмену.Загрузить(СтруктураРезультата.ДанныеКОбмену);
	// ++ rarus makole 2021-05-07
	//АдресРезультатаЗапроса = ПоместитьВоВременноеХранилище(СтруктураРезультата.ПакетИзменений);
	// -- rarus makole 2021-05-07
КонецПроцедуры

#КонецОбласти

#Область ВыгружаемыеДанные

&НаКлиенте
Процедура ЗаполнитьВыгружаемыеДанные(Узел, Вариант)
	
	ДлительнаяОперация = ЗаполнитьВыгружаемыеДанныеВФоне(Объект.ГлавныйУзел, Объект.ВариантОбмена, Объект.ПодготовленоКОтправке, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
    ПараметрыОжидания.Интервал = 2;
    ПараметрыОжидания.ВыводитьСообщения = Истина;
	
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Заполнение сводной таблицы к отправке'");

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьВыгружаемыеДанныеЗавершение", ЭтотОбъект);
    ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьВыгружаемыеДанныеВФоне(ГлавныйУзел, ВариантОбмена, Знач ПодготовленоКОтправке, УникальныйИдентификатор)
	
	ПодготовленоКОтправке.Очистить();
	ТЗПодготовленоКОтправке = ПодготовленоКОтправке.Выгрузить();
	
	ПараметрыПроцедуры = Новый Структура("Узел, Вариант, ПодготовленоКОтправке", ГлавныйУзел, ВариантОбмена, ТЗПодготовленоКОтправке);
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);

	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.рарусМониторОбменаСудна.ЗаполнитьВыгружаемыеДанные", 
     		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВыгружаемыеДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура")
		И Результат.Статус = "Выполнено" Тогда
		ЗакончитьЗаполнениеВыгружаемыхДанных(Результат.АдресРезультата);
		ОбъемКВыгрузке = Объект.ПодготовленоКОтправке.Итог("Объем");
		ОбъемКЗагрузке = Объект.ПодготовленоКЗагрузке.Итог("Объем");
		Объект.ОжидаемоеВремяВыгрузки = ?(Скорость = 0, 5, 5 + ОбъемКВыгрузке / ?(Единица = 1, Скорость, Скорость * 1024) * 8);
		Объект.ОжидаемоеВремяЗагрузки = ?(Скорость = 0, 5, 5 + ОбъемКЗагрузке / ?(Единица = 1, Скорость, Скорость * 1024) * 8);
		ЗаполнитьПолеРезультатовОбмена();
	ИначеЕсли Результат = Неопределено Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось заполнить сводную таблицу подготовленных к отправке. Процесс прерван");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Заполнение таблицы подготовленных к отправке", "Ошибка", "Процесс прерван");
	Иначе
		ОбщегоНазначенияКлиент.СообщитьПользователю("Не удалось заполнить сводную таблицу подготовленных к отправке." + Символы.ПС + Результат.КраткоеПредставлениеОшибки);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Заполнение таблицы подготовленных к отправке", "Ошибка", Результат.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗакончитьЗаполнениеВыгружаемыхДанных(АдресРезультата)
	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
	Объект.ПодготовленоКОтправке.Очистить();
	Объект.ПодготовленоКОтправке.Загрузить(Результат);
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ВыполнитьОбменНаСервере(Вариант)
	
	ДатаНачалаВыгрузки = ТекущаяДатаСеанса();
	ПараметрыПодключения = ПолучитьПараметрыПодключения(Объект.ОсновноеСудно);
	мИмяКомпьютера = ИмяКомпьютера();
	СтруктураКВыгрузке = рарусСинхронизацияССудном.ПолучитьОбъектыКВыгрузке(ПараметрыПодключения.Узел, Вариант);
	ДополнитьСтруктуруОтмеченнымиОбъектами(СтруктураКВыгрузке);
	СтруктураПередачи = Новый Структура("io, oo, PCName", СтрШаблон("%1;%2;%3",
										ПараметрыПодключения.НомерОтправленного + 1,
										ПараметрыПодключения.НомерПринятого,
										Вариант),
										СтруктураКВыгрузке.ОбъектыКВыгрузке,
										мИмяКомпьютера);
										
	// ++ rarus makole 2021-06-29
	// Для установки номера отправленного сообщения 
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		рарусСинхронизацияССудном.ЗаблокироватьУзел(ПараметрыПодключения.Узел);
		ОбъектУзла = ПараметрыПодключения.Узел.ПолучитьОбъект();
		ОбъектУзла.НомерОтправленного = ПараметрыПодключения.НомерОтправленного + 1;
		ОбъектУзла.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Блокировка узла плана обмена'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// ++ rarus makole 2021-06-29
		рарусСинхронизацияССудном.ЗафиксироватьРезультатыОбменаВРегистрах(ПараметрыПодключения.Узел,
																	Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
																	Перечисления.РезультатыВыполненияОбмена.Ошибка,
																	ДатаНачалаВыгрузки,
																	ТекущаяДатаСеанса(),
																	ПараметрыПодключения.НомерОтправленного + 1,
																	мИмяКомпьютера);
		// -- rarus makole 2021-06-29
      	ВызватьИсключение("Не удалось установить новый номер отправляемого сообщения в узле судна, повторите попытку позднее");
	КонецПопытки;
	
	ПланыОбмена.ВыбратьИзменения(ПараметрыПодключения.Узел, ПараметрыПодключения.НомерОтправленного + 1);
	рарусСинхронизацияССудном.ЗарегистрироватьНевыгруженные(ПараметрыПодключения.Узел, СтруктураКВыгрузке.МассивДляПовторнойРегистрации);
	// -- rarus makole 2021-06-29
	
	СтруктураОтвета = ОтправитьПолучитьОтветСервиса(ПараметрыПодключения, 
													СтрШаблон("%1DIP/%2",	
													ПараметрыПодключения.СтрокаHTTPЗапроса, 
													ПараметрыПодключения.КодУзла),
													СтруктураПередачи);
													
	ДатаНачалаЗагрузки = ТекущаяДатаСеанса();
	
	// ++ rarus makole 2021-09-16
	Если СтруктураОтвета.Свойство("Ошибка") Тогда
		рарусСинхронизацияССудном.ЗафиксироватьРезультатыОбменаВРегистрах(ПараметрыПодключения.Узел,
																	Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
																	Перечисления.РезультатыВыполненияОбмена.Ошибка,
																	ДатаНачалаВыгрузки,
																	ДатаНачалаЗагрузки,
																	ПараметрыПодключения.НомерПринятого,
																	мИмяКомпьютера);
		ВызватьИсключение(СтруктураОтвета.Ошибка);
	КонецЕсли;
	// -- rarus makole 2021-09-16
													
	
	// ++ rarus makole 2021-06-29
	рарусСинхронизацияССудном.ЗафиксироватьРезультатыОбменаВРегистрах(ПараметрыПодключения.Узел,
																Перечисления.ДействияПриОбмене.ВыгрузкаДанных,
																Перечисления.РезультатыВыполненияОбмена.Выполнено,
																ДатаНачалаВыгрузки,
																ДатаНачалаЗагрузки,
																ПараметрыПодключения.НомерОтправленного + 1,
																мИмяКомпьютера);
	// -- rarus makole 2021-06-29
	
	МассивНомеровОтЦентра = СтрРазделить(СтруктураОтвета.io,";",Истина);
													
	// Снимем с регистрации объекты, полученные на берегу																	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПараметрыПодключения.Узел, Число(МассивНомеровОтЦентра[0]));

	рарусСинхронизацияССудном.ОбработатьМассивЗагруженныхОбъектов(СтруктураОтвета.oo, ПараметрыПодключения.Узел);
	
	// ++ rarus makole 2021-06-29
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	
	Попытка
		рарусСинхронизацияССудном.ЗаблокироватьУзел(ПараметрыПодключения.Узел);
		ОбъектУзла = ПараметрыПодключения.Узел.ПолучитьОбъект();
		ОбъектУзла.НомерПринятого = Число(МассивНомеровОтЦентра[1]);
		ОбъектУзла.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Блокировка узла плана обмена'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		// ++ rarus makole 2021-06-29
		рарусСинхронизацияССудном.ЗафиксироватьРезультатыОбменаВРегистрах(ПараметрыПодключения.Узел,
																	Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
																	Перечисления.РезультатыВыполненияОбмена.Ошибка,
																	ДатаНачалаЗагрузки,
																	ТекущаяДатаСеанса(),
																	Число(МассивНомеровОтЦентра[1]),
																	мИмяКомпьютера);
		// -- rarus makole 2021-06-29
      	ВызватьИсключение("Не удалось установить новый номер полученного сообщения в узле судна, повторите попытку позднее");
	КонецПопытки;
	// -- rarus makole 2021-06-29
	
	// ++ rarus makole 2021-03-26 [Задача № 27965]
	Объект.ВерсияКонфигурацииЦБ = СтруктураОтвета.ver;
	// -- rarus makole 2021-03-26 [Задача № 27965]
	
	ДатаОкончанияЗагрузки = ТекущаяДатаСеанса();
	
	// ++ rarus makole 2021-06-29
	рарусСинхронизацияССудном.ЗафиксироватьРезультатыОбменаВРегистрах(ПараметрыПодключения.Узел,
																Перечисления.ДействияПриОбмене.ЗагрузкаДанных,
																Перечисления.РезультатыВыполненияОбмена.Выполнено,
																ДатаНачалаЗагрузки,
																ДатаОкончанияЗагрузки,
																Число(МассивНомеровОтЦентра[1]),
																мИмяКомпьютера);
	// -- rarus makole 2021-06-29
	
	// ++ rarus makole 2021-03-30
	// После выполнения выгрузки надо обработать статусы отправки у объектов
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне("");
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ДлительныеОперации.ВыполнитьПроцедуру(ПараметрыВыполненияВФоне, "РегистрыСведений.рарусСостоянияОтправкиОбъектов.ОбработатьСтатусыОтправленныхДокументов");
	// -- rarus makole 2021-03-30
									
КонецПроцедуры

&НаСервере
Процедура ДополнитьСтруктуруОтмеченнымиОбъектами(СтруктураКВыгрузке)
	
	СтрокиСОтключеннойВыгрузкой = Объект.ДанныеКОбмену.НайтиСтроки(Новый Структура("ВыгружатьПоПравилу, Выгружать", 1, 0));
	СтрокиСоВключеннойВыгрузкой = Объект.ДанныеКОбмену.НайтиСтроки(Новый Структура("ВыгружатьПоПравилу, Выгружать", 0, 1));
	
	Если СтрокиСОтключеннойВыгрузкой.Количество() > 0
		ИЛИ СтрокиСоВключеннойВыгрузкой.Количество() > 0 Тогда
		
		Для каждого ОтключеннаяСтрока Из СтрокиСОтключеннойВыгрузкой Цикл
			КоличествоВыгружаемых = СтруктураКВыгрузке.ОбъектыКВыгрузке.Количество();
			Если ТипЗнч(ОтключеннаяСтрока.Объект) = Тип("Строка") Тогда
				Для ИндексВМассивеВыгружаемых = 0 По КоличествоВыгружаемых - 1 Цикл
					Если ТипЗнч(СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых]) = Тип("Структура")
						И ОтключеннаяСтрока.ПолноеИмяТипа = СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых].ИмяТипа Тогда
						// Добавим объект в массив к повторной регистрации
						СтруктураКВыгрузке.МассивДляПовторнойРегистрации.Добавить(СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых]);
						// Удалим объект из массива к выгрузке
						СтруктураКВыгрузке.ОбъектыКВыгрузке.Удалить(ИндексВМассивеВыгружаемых);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для ИндексВМассивеВыгружаемых = 0 По КоличествоВыгружаемых - 1 Цикл
					Если ТипЗнч(СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых]) = Тип("Структура")
						И СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых].Свойство("Ссылка")
						И ОтключеннаяСтрока.Объект = СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых].Ссылка Тогда
						// Добавим объект в массив к повторной регистрации
						СтруктураКВыгрузке.МассивДляПовторнойРегистрации.Добавить(СтруктураКВыгрузке.ОбъектыКВыгрузке[ИндексВМассивеВыгружаемых]);
						// Удалим объект из массива к выгрузке
						СтруктураКВыгрузке.ОбъектыКВыгрузке.Удалить(ИндексВМассивеВыгружаемых);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ВключеннаяСтрока Из СтрокиСоВключеннойВыгрузкой Цикл
			КоличествоПовторноРегистрируемых = СтруктураКВыгрузке.МассивДляПовторнойРегистрации.Количество();
			Если ТипЗнч(ВключеннаяСтрока.Объект) = Тип("Строка") Тогда
				Для ИндексВМассивеПовторных = 0 По КоличествоПовторноРегистрируемых - 1 Цикл
					Если ТипЗнч(СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных]) = Тип("Структура")
						И ВключеннаяСтрока.ПолноеИмяТипа = СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных].ИмяТипа Тогда
						// Добавим объект в массив к выгрузке
						СтруктураКВыгрузке.ОбъектыКВыгрузке.Добавить(СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных]);
						// Удалим объект из массива к повторной регистрации
						СтруктураКВыгрузке.МассивДляПовторнойРегистрации.Удалить(ИндексВМассивеПовторных);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для ИндексВМассивеПовторных = 0 По КоличествоПовторноРегистрируемых - 1 Цикл
					Если ТипЗнч(СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных]) = Тип("Структура")
						И СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных].Свойство("Ссылка")
						И ВключеннаяСтрока.Объект = СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных].Ссылка Тогда
						// Добавим объект в массив к выгрузке
						СтруктураКВыгрузке.ОбъектыКВыгрузке.Добавить(СтруктураКВыгрузке.МассивДляПовторнойРегистрации[ИндексВМассивеПовторных]);
						// Удалим объект из массива к повторной регистрации
						СтруктураКВыгрузке.МассивДляПовторнойРегистрации.Удалить(ИндексВМассивеПовторных);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		рарусСинхронизацияССудном.ДобавитьДвоичныеДанные(СтруктураКВыгрузке.ОбъектыКВыгрузке, СтруктураКВыгрузке.МассивДляПовторнойРегистрации);
		
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)
	
	// ++ rarus makole 2021-09-13 [ВПIT-0030171]
	ПроверитьБлокировкуВнешнихРесурсов();
	// -- rarus makole 2021-09-13 [ВПIT-0030171]
	
	Если Объект.ВариантОбмена <> 3 
		И МаксимальныйРазмерФайлаДляСпутника <> 0
		И Объект.ПодготовленоКОтправке.Итог("Объем") >= МаксимальныйРазмерФайлаДляСпутника Тогда
		
		ОповещениеОВыбореПриПревышенииОбъема = Новый ОписаниеОповещения("ОбработкаВыбораПриПревышенииОбъема", ЭтаФорма);
		ПоказатьВопрос(ОповещениеОВыбореПриПревышенииОбъема, СтрШаблон("Объём выгружаемых данных составляет %1 Кбайт, при максимально допустимом объёме %2 Кбайт. Рекомендуется уменьшить размер передаваемых файлов либо исключить некоторые объекты из выгрузки.
																		|Продолжить?", Объект.ПодготовленоКОтправке.Итог("Объем"), МаксимальныйРазмерФайлаДляСпутника),РежимДиалогаВопрос.ДаНет,,,"Внимание!");
		
	//ИначеЕсли 
	Иначе
		ЗапуститьОбмен();
	КонецЕсли;
		
КонецПроцедуры

// ++ rarus makole 2021-09-13 [ВПIT-0030171]
// Не разрешать обмен на копии
&НаКлиенте
Процедура ПроверитьБлокировкуВнешнихРесурсов()
	
	Если РаботаСВнешнимиРесурсамиЗаблокирована() Тогда
		ВызватьИсключение("Работа с внешними ресурсами заблокирована");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РаботаСВнешнимиРесурсамиЗаблокирована()
	Возврат БлокировкаРаботыСВнешнимиРесурсами.РаботаСВнешнимиРесурсамиЗаблокирована();
КонецФункции
// -- rarus makole 2021-09-13 [ВПIT-0030171]

&НаКлиенте
Процедура ЗапуститьОбмен()
		
	Элементы.НадписьСостояниеОбмена.Заголовок = "ИДЁТ ОБМЕН";
	Если Объект.ВариантОбмена = 1 
		Или Объект.ВариантОбмена = 2 Тогда
		ВыполнитьОбменНаСервере(Объект.ВариантОбмена);
		Объект.ПодготовленоКЗагрузке.Очистить();
		ЗаполнитьДанныеКОбмену();
		СохранитьИнформациюОПодготовленныхКЗагрузке(Объект.ГлавныйУзел, Объект.ВариантОбмена, Объект.ПодготовленоКЗагрузке);
	Иначе
		ВыполнитьОбменВРИБ()
	КонецЕсли;

	ЗаполнитьПолеРезультатовОбмена();
	Элементы.НадписьСостояниеОбмена.Заголовок = "ОБМЕН ЗАВЕРШЁН";
	// ++ rarus makole 2021-04-02
	Оповестить("ВыполненОбменДанными");
	// -- rarus makole 2021-04-02		
КонецПроцедуры	

&НаКлиенте
Процедура ОбработкаВыбораПриПревышенииОбъема(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗапуститьОбмен();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыПодключения(ОсновноеСудно)
	
	ГлавныйУзел = Константы.ГлавныйУзел.Получить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Полный_ЭтотУзел.Код КАК Код,
		|	Полный_ГлавныйУзел.НомерОтправленного КАК НомерОтправленного,
		|	Полный_ГлавныйУзел.НомерПринятого КАК НомерПринятого,
		|	&Судно КАК Судно,
		|	vftВнешниеДанные.WSИмяСервиса КАК Хост,
		|	vftВнешниеДанные.WSURLВебСервиса КАК СтрокаHTTPЗапроса,
		|	vftВнешниеДанные.WSИмяПользователя КАК ИмяПользователя,
		|	vftВнешниеДанные.WSПароль КАК Пароль,
		|	vftВнешниеДанные.WSПорт КАК Порт
		|ИЗ
		|	ПланОбмена.Полный КАК Полный_ГлавныйУзел
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланОбмена.Полный КАК Полный_ЭтотУзел
		|		ПО (Полный_ЭтотУзел.ЭтотУзел = ИСТИНА)
		|			И (Полный_ГлавныйУзел.Ссылка = &ГлавныйУзел)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.vftВнешниеДанные КАК vftВнешниеДанные
		|		ПО (vftВнешниеДанные.Судно = &Судно)
		|			И (vftВнешниеДанные.HTTPСервис = ИСТИНА)";
	
	Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
	Запрос.УстановитьПараметр("Судно", ОсновноеСудно);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КодУзла 			= СокрЛП(Выборка.Код);
		НомерОтправленного 	= Выборка.НомерОтправленного;
		НомерПринятого 		= Выборка.НомерПринятого;
		Хост				= Выборка.Хост;
		Порт				= Выборка.Порт;
		СтрокаHTTPЗапроса	= Выборка.СтрокаHTTPЗапроса;
		ИмяПользователя		= Выборка.ИмяПользователя;
		Пароль				= Выборка.Пароль;
	Иначе
		ВызватьИсключение("Не найдены настройки подключения к Http-сервису");
	КонецЕсли;
	
	Возврат Новый Структура("Узел, КодУзла, НомерОтправленного, НомерПринятого, Хост, Порт, СтрокаHTTPЗапроса, ИмяПользователя, Пароль",
							ГлавныйУзел, КодУзла, НомерОтправленного, НомерПринятого, Хост, Порт, СтрокаHTTPЗапроса, ИмяПользователя, Пароль);
КонецФункции

&НаСервереБезКонтекста
Функция ОтправитьПолучитьОтветСервиса(ПараметрыПодключения, СтрокаHTTPЗапроса, СтруктураПередачи)
	
	ПараметрыФайлаЗапроса = рарусСинхронизацияССудном.ПолучитьФайлОтветаHttpСервиса(СтруктураПередачи);
	
	ВременныйКаталог = ПараметрыФайлаЗапроса.ВременныйКаталог;

	// Соединение с сервисом
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Хост, ПараметрыПодключения.Порт,ПараметрыПодключения.ИмяПользователя, ПараметрыПодключения.Пароль);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаHTTPЗапроса);
	
	//Подготовка отправки	
	ДвоичныеДанныеОтправки = Новый ДвоичныеДанные(ПараметрыФайлаЗапроса.ПолноеИмяАрхивногоФайла);
	HTTPЗапрос.Заголовки.Вставить("Content-Disposition", СтрШаблон("attachment; filename=""%1""", ПараметрыФайлаЗапроса.ИмяАрхивногоФайла));
	HTTPЗапрос.Заголовки.Вставить("Content-Type", "application/octet-stream");
	HTTPЗапрос.УстановитьТелоИзДвоичныхДанных(ДвоичныеДанныеОтправки);	
	
	ОтветAPI = Соединение.ОтправитьДляОбработки(HTTPЗапрос);
	
	// Проверка ответа на ошибки
	Если ОтветAPI.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации("Ответ http-сервиса", УровеньЖурналаРегистрации.Ошибка,,,
						СтрШаблон("Код состояния %1
						|Текст ошибки: %2", ОтветAPI.КодСостояния, ОтветAPI.ПолучитьТелоКакСтроку()));
		
		ВызватьИсключение("Не удалось получить ответ сервера,
						|подробности см. в Журнале регистрации");
	КонецЕсли;
	
	// Получение и распаковка архива ответа
	ДвоичныеДанныеОтвета = ОтветAPI.ПолучитьТелоКакДвоичныеДанные();
	мЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеОтвета.ОткрытьПотокДляЧтения(),"1");
	Если мЧтениеZipФайла.Элементы.Количество() = 1 Тогда
		ИмяВременногоФайла = мЧтениеZipФайла.Элементы.Получить(0).ИсходноеИмя
	Иначе
		Возврат Неопределено
	КонецЕсли;
	мЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	мЧтениеZipФайла.Закрыть();
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.ОткрытьФайл(ВременныйКаталог + ИмяВременногоФайла);
	
	мСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	
	// ++ rarus makole 2021-09-16
	//СтруктураОтвета = мСериализаторXDTO.ПрочитатьJSON(мЧтениеJSON);
	Попытка
		СтруктураОтвета = мСериализаторXDTO.ПрочитатьJSON(мЧтениеJSON);
	Исключение
	  	ЗаписьЖурналаРегистрации(НСтр("ru = 'Чтение сообщения от ЦБ'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Новый Структура("Ошибка", "Не удалось прочитать сообщение от центральной базы, возможно, была изменена структура хранения данных. Рекомендуется выполнить полную синхронизацию");
	КонецПопытки;
	// -- rarus makole 2021-09-16

	//Удаление временного каталога
	Попытка
	   ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	Исключение
	   ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление каталога временных файлов'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
   	КонецПопытки;
   
   Возврат СтруктураОтвета;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОтветСервиса(ПараметрыПодключения, СтрокаHTTPЗапроса)
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();

	// Соединение с сервисом
	Соединение = Новый HTTPСоединение(ПараметрыПодключения.Хост, ПараметрыПодключения.Порт,ПараметрыПодключения.ИмяПользователя, ПараметрыПодключения.Пароль);
	HTTPЗапрос = Новый HTTPЗапрос(СтрокаHTTPЗапроса);
	ОтветAPI = Соединение.Получить(HTTPЗапрос);
	
	// Проверка ответа на ошибки
	Если ОтветAPI.КодСостояния <> 200 Тогда
		ЗаписьЖурналаРегистрации("Ответ http-сервиса", УровеньЖурналаРегистрации.Ошибка,,,
						СтрШаблон("Код состояния %1
						|Текст ошибки: %2", ОтветAPI.КодСостояния, ОтветAPI.ПолучитьТелоКакСтроку()));
		
		ВызватьИсключение("Не удалось получить ответ сервера,
						|подробности см. в Журнале регистрации");
	КонецЕсли;
	
	// Получение и распаковка архива ответа
	ДвоичныеДанныеОтвета = ОтветAPI.ПолучитьТелоКакДвоичныеДанные();
	мЧтениеZipФайла = Новый ЧтениеZipФайла(ДвоичныеДанныеОтвета.ОткрытьПотокДляЧтения(),"1");
	Если мЧтениеZipФайла.Элементы.Количество() = 1 Тогда
		ИмяВременногоФайла = мЧтениеZipФайла.Элементы.Получить(0).ИсходноеИмя
	Иначе
		Возврат Неопределено
	КонецЕсли;
	мЧтениеZipФайла.ИзвлечьВсе(ВременныйКаталог, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	мЧтениеZipФайла.Закрыть();
	
	мЧтениеJSON = Новый ЧтениеJSON;
	мЧтениеJSON.ОткрытьФайл(ВременныйКаталог + ИмяВременногоФайла);
	
	мСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	СтруктураОтвета = мСериализаторXDTO.ПрочитатьJSON(мЧтениеJSON);

	//Удаление временного каталога
	Попытка
	   ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
	Исключение
	   ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление каталога временных файлов'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
   	КонецПопытки;
   
   	Возврат СтруктураОтвета;
	
КонецФункции

&НаКлиенте
Процедура ДатаПоследнейОтправкиНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ИнформацияОбОшибкеОтправки);
КонецПроцедуры

&НаКлиенте
Процедура ДатаПоследнегоПолученияНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, ИнформацияОбОшибкеЗагрузки);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьИнформациюОПодготовленныхКЗагрузке(Узел, Вариант, Знач ТЧДанныеКСохранению)
	
	ДанныеКСохранению = ТЧДанныеКСохранению.Выгрузить();
	НаборЗаписей = РегистрыСведений.рарусОбъектыПодготовленныеКЗагрузкеВГлавномУзле.СоздатьНаборЗаписей(); 

	НаборЗаписей.Отбор.Узел.Установить(Узел); 
	НаборЗаписей.Отбор.Вариант.Установить(Вариант); 

	Для каждого СтрокаКСохранению Из ДанныеКСохранению Цикл
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.Узел = Узел; 
		НоваяЗапись.Вариант = Вариант; 
		НоваяЗапись.ВидОбъекта = СтрокаКСохранению.ВидОбъекта; 
		НоваяЗапись.Количество = СтрокаКСохранению.Количество;
		НоваяЗапись.Размер = СтрокаКСохранению.Объем;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеКОтправке(Команда)
	
	ЗаполнитьДанныеКОбмену();
	ОбъемКВыгрузке = Объект.ПодготовленоКОтправке.Итог("Объем");
	Объект.ОжидаемоеВремяВыгрузки = ?(Скорость = 0, 0, ОбъемКВыгрузке / ?(Единица = 1, Скорость, Скорость * 1024) * 8);
	
КонецПроцедуры

#Область ТиповойОбменРИБ

&НаКлиенте
Процедура ВыполнитьОбменВРИБ()
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УзелОбмена",     Объект.ГлавныйУзел);
	ДополнительныеПараметры.Вставить("ИмяПланаОбмена", "Полный");

	ДополнительныеПараметры.Вставить("ЭтоОбменСПриложениемВСервисе", Ложь);
	ДополнительныеПараметры.Вставить("ОбластьДанныхКорреспондента");

	ДополнительныеПараметры.Вставить("ИспользоватьДопОтборы",                   Ложь);
	ДополнительныеПараметры.Вставить("ДоступнаИнтерактивнаяОтправка",           Ложь);
	ДополнительныеПараметры.Вставить("ВариантОбменаДанными",                    "ПолучениеИОтправка");
	ДополнительныеПараметры.Вставить("ПолученоСообщениеДляСопоставленияДанных", Ложь);
	ДополнительныеПараметры.Вставить("ЗапускОбменаИзКорреспондента",            Ложь);

	ОписаниеПродолжения = Новый ОписаниеОповещения("ПродолжитьВыполнениеСинхронизации", ЭтотОбъект, ДополнительныеПараметры);
		
	ПроверитьСовместимостьПравилКонвертации(ОписаниеПродолжения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникИнтерактивнойСинхронизации(ДополнительныеПараметры)
	
	ПараметрыПомощника = Новый Структура;
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ДополнительныеПараметры.ЭтоОбменСПриложениемВСервисе);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  ДополнительныеПараметры.ОбластьДанныхКорреспондента);
	
	ПараметрыПомощника.Вставить("ОтправитьДанные", Не ДополнительныеПараметры.ЗапускОбменаИзКорреспондента);
	
	ПараметрыПомощника.Вставить("РежимДополненияВыгрузки",
		ДополнительныеПараметры.ИспользоватьДопОтборы Или ДополнительныеПараметры.ВариантОбменаДанными = "ПолучениеИОтправка");
	
	ПараметрыПомощника.Вставить("НастройкаРасписания", Ложь);
	
	ВспомогательныеПараметры = Новый Структура;
	ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
	
	ОбменДаннымиКлиент.ОткрытьПомощникСопоставленияОбъектовОбработкаКоманды(ДополнительныеПараметры.УзелОбмена,
		ЭтотОбъект, ВспомогательныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПомощникАвтоматическойСинхронизации(ДополнительныеПараметры)
	
	ПараметрыПомощника = Новый Структура;	
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", ДополнительныеПараметры.ЭтоОбменСПриложениемВСервисе);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  ДополнительныеПараметры.ОбластьДанныхКорреспондента);
		
	ВспомогательныеПараметры = Новый Структура;
	ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		
	ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(ДополнительныеПараметры.УзелОбмена,
		ЭтотОбъект, , Истина, ВспомогательныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьВыполнениеСинхронизации(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.ПолученоСообщениеДляСопоставленияДанных Тогда
		
		ОткрытьПомощникИнтерактивнойСинхронизации(ДополнительныеПараметры);
			
	Иначе
		
		Если Не ДополнительныеПараметры.ДоступнаИнтерактивнаяОтправка
			Или (ДополнительныеПараметры.ВариантОбменаДанными = "Синхронизация"
				И Не ДополнительныеПараметры.ИспользоватьДопОтборы) Тогда
			
			ОткрытьПомощникАвтоматическойСинхронизации(ДополнительныеПараметры);
			
		Иначе
			
			ОткрытьПомощникИнтерактивнойСинхронизации(ДополнительныеПараметры);
				
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСовместимостьПравилКонвертации(ОбработкаПродолжения)
	
	ОписаниеОшибки = Неопределено;
	Если ПравилаКонвертацииСовместимыСТекущейВерсией(ОбработкаПродолжения.ДополнительныеПараметры.ИмяПланаОбмена, ОписаниеОшибки) Тогда
		
		ВыполнитьОбработкуОповещения(ОбработкаПродолжения);
		
	Иначе
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("ПерейтиКЗагрузкеПравил", НСтр("ru = 'Загрузить правила'"));
		Если ОписаниеОшибки.ВидОшибки <> "НекорректнаяКонфигурация" Тогда
			Кнопки.Добавить("Продолжить", НСтр("ru = 'Продолжить'"));
		КонецЕсли;
		Кнопки.Добавить("Отмена", НСтр("ru = 'Отмена'"));
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаПродолжения", ОбработкаПродолжения);
		ДополнительныеПараметры.Вставить("ИмяПланаОбмена",       ОбработкаПродолжения.ДополнительныеПараметры.ИмяПланаОбмена);
		
		Оповещение = Новый ОписаниеОповещения("ПослеПроверкиПравилКонвертацииНаСовместимость", ЭтотОбъект, ДополнительныеПараметры);
		
		ПараметрыФормы = СтандартныеПодсистемыКлиент.ПараметрыВопросаПользователю();
		ПараметрыФормы.Картинка = ОписаниеОшибки.Картинка;
		ПараметрыФормы.ПредлагатьБольшеНеЗадаватьЭтотВопрос = Ложь;
		Если ОписаниеОшибки.ВидОшибки = "НекорректнаяКонфигурация" Тогда
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных не может быть выполнена'");
		Иначе
			ПараметрыФормы.Заголовок = НСтр("ru = 'Синхронизация данных может быть выполнена некорректно'");
		КонецЕсли;
		
		СтандартныеПодсистемыКлиент.ПоказатьВопросПользователю(Оповещение, ОписаниеОшибки.ТекстОшибки, Кнопки, ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена, ОписаниеОшибки)
	
	ДанныеОПравилах = Неопределено;
	Если Не ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ДанныеОПравилах) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПравилаДляОбменаДанными.ПравилаКонвертацииСовместимыСТекущейВерсией(ИмяПланаОбмена,
		ОписаниеОшибки, ДанныеОПравилах);
		
КонецФункции

&НаСервере
Функция ПравилаКонвертацииЗагруженыИзФайла(ИмяПланаОбмена, ИнформацияОПравилах)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПравилаДляОбменаДанными.ПравилаЗачитанные,
	|	ПравилаДляОбменаДанными.ВидПравил
	|ИЗ
	|	РегистрСведений.ПравилаДляОбменаДанными КАК ПравилаДляОбменаДанными
	|ГДЕ
	|	ПравилаДляОбменаДанными.ИмяПланаОбмена = &ИмяПланаОбмена
	|	И ПравилаДляОбменаДанными.ИсточникПравил = ЗНАЧЕНИЕ(Перечисление.ИсточникиПравилДляОбменаДанными.Файл)
	|	И ПравилаДляОбменаДанными.ПравилаЗагружены = ИСТИНА
	|	И ПравилаДляОбменаДанными.ВидПравил = ЗНАЧЕНИЕ(Перечисление.ВидыПравилДляОбменаДанными.ПравилаКонвертацииОбъектов)");
	Запрос.УстановитьПараметр("ИмяПланаОбмена", ИмяПланаОбмена);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СтруктураПравил = Выборка.ПравилаЗачитанные.Получить().Конвертация;
		
		ИнформацияОПравилах = Новый Структура;
		ИнформацияОПравилах.Вставить("ИмяКонфигурации",              СтруктураПравил.Источник);
		ИнформацияОПравилах.Вставить("ВерсияКонфигурации",           СтруктураПравил.ВерсияКонфигурацииИсточника);
		ИнформацияОПравилах.Вставить("СинонимКонфигурацииВПравилах", СтруктураПравил.СинонимКонфигурацииИсточника);
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

&НаСервереБезКонтекста
Функция ОпределитьДанныеОбъекта(ВыбранныйОбъект)
	
	ТипОбъекта = ТипЗнч(ВыбранныйОбъект);
	Если ТипОбъекта = Тип("Строка") Тогда
		Возврат Новый Структура("ВидОбъекта, Приоритет",
					ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.СлужебныеДанные"),
					5);
	КонецЕсли;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипОбъекта);
	
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		Возврат Новый Структура("ВидОбъекта, Приоритет", 
					ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.Документы"),
					2);
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта)
		И НЕ Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(ТипОбъекта) Тогда
		Возврат Новый Структура("ВидОбъекта, Приоритет",
					ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.Справочники"),
					3);
	ИначеЕсли Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(ТипОбъекта) Тогда
		Возврат Новый Структура("ВидОбъекта, Приоритет",
					ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.Файлы"),
					4);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьСтрокуКВыгрузке(ДанныеОбъекта)
	
	ИзменяемаяСтрокаМассив = Объект.ПодготовленоКОтправке.НайтиСтроки(Новый Структура("ВидОбъекта", ДанныеОбъекта.ВидОбъекта));
	Если Элементы.ДанныеКОбмену.ТекущиеДанные.Выгружать = 1 Тогда
		Если ИзменяемаяСтрокаМассив.Количество() = 0 Тогда
			ИзменяемаяСтрока = Объект.ПодготовленоКОтправке.Добавить();
			ИзменяемаяСтрока.ВидОбъекта = ДанныеОбъекта.ВидОбъекта;
			ИзменяемаяСтрока.Количество = 1;
			ИзменяемаяСтрока.Объем = Элементы.ДанныеКОбмену.ТекущиеДанные.Объем;
			ИзменяемаяСтрока.Приоритет = ДанныеОбъекта.Приоритет;
		Иначе
			ИзменяемаяСтрока = ИзменяемаяСтрокаМассив[0];
			ИзменяемаяСтрока.Количество = ИзменяемаяСтрока.Количество + 1;
			ИзменяемаяСтрока.Объем = ИзменяемаяСтрока.Объем + Элементы.ДанныеКОбмену.ТекущиеДанные.Объем;
		КонецЕсли;
	ИначеЕсли Элементы.ДанныеКОбмену.ТекущиеДанные.Выгружать = 0 Тогда
		ИзменяемаяСтрока = ИзменяемаяСтрокаМассив[0];
		ИзменяемаяСтрока.Количество = ИзменяемаяСтрока.Количество - 1;
		ИзменяемаяСтрока.Объем = ИзменяемаяСтрока.Объем - Элементы.ДанныеКОбмену.ТекущиеДанные.Объем;
	КонецЕсли;
	
	СсылкаНаОбъект = Элементы.ДанныеКОбмену.ТекущиеДанные.Объект;
	// ++ rarus makole 2021-05-07
	//ДанныеСвязанныхОбъектов = ДанныеСвязанных(СсылкаНаОбъект, АдресРезультатаЗапроса);
	ДанныеСвязанныхОбъектов = ДанныеСвязанных(СсылкаНаОбъект, Объект.ГлавныйУзел, Объект.ВариантОбмена);
	// -- rarus makole 2021-05-07
	
	Если ДанныеСвязанныхОбъектов = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Для каждого СвязанныйОбъект Из ДанныеСвязанныхОбъектов Цикл
		
		Если ТипЗнч(СвязанныйОбъект) = Тип("Структура") Тогда
			ВидОбъекта = ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.СлужебныеДанные");
			РазмерОбъекта = СвязанныйОбъект.Размер;
			СтрокаВОтправляемыхМассив = Объект.ДанныеКОбмену.НайтиСтроки(Новый Структура("ПолноеИмяТипа", СвязанныйОбъект.ИмяТипа));
		ИначеЕсли СтрНачинаетсяС(СвязанныйОбъект.ИмяТипа, "Документ") Тогда
			ВидОбъекта = ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.Документы");
			СтрокаВОтправляемыхМассив = Объект.ДанныеКОбмену.НайтиСтроки(Новый Структура("Объект", СвязанныйОбъект.Ссылка));
			РазмерОбъекта = ?(СтрокаВОтправляемыхМассив.Количество(), СтрокаВОтправляемыхМассив[0].Объем, 0);
		ИначеЕсли СтрНачинаетсяС(СвязанныйОбъект.ИмяТипа, "Справочник") Тогда
			ВидОбъекта = ПредопределенноеЗначение("Перечисление.рарусВидыОбъектовДляСинхронизации.Справочники");
			СтрокаВОтправляемыхМассив = Объект.ДанныеКОбмену.НайтиСтроки(Новый Структура("Объект", СвязанныйОбъект.Ссылка));
			РазмерОбъекта = ?(СтрокаВОтправляемыхМассив.Количество(), СтрокаВОтправляемыхМассив[0].Объем, 0);
		Иначе
			Продолжить;					
		КонецЕсли;	
		
		ИзменяемаяСтрокаМассив = Объект.ПодготовленоКОтправке.НайтиСтроки(Новый Структура("ВидОбъекта", ВидОбъекта));
		
		Если Элементы.ДанныеКОбмену.ТекущиеДанные.Выгружать = 1 Тогда // Флаг "Выгружать" установили
			// Обработка строки подготовленного к отправке
			Если ИзменяемаяСтрокаМассив.Количество() = 0 Тогда
				ИзменяемаяСтрока = Объект.ПодготовленоКОтправке.Добавить();
				ИзменяемаяСтрока.ВидОбъекта = ВидОбъекта;
				ИзменяемаяСтрока.Количество = 1;
				ИзменяемаяСтрока.Объем = РазмерОбъекта;
				ИзменяемаяСтрока.Приоритет = 5;
			Иначе
				ИзменяемаяСтрока = ИзменяемаяСтрокаМассив[0];
				ИзменяемаяСтрока.Количество = ИзменяемаяСтрока.Количество + 1;
				ИзменяемаяСтрока.Объем = ИзменяемаяСтрока.Объем + РазмерОбъекта;
			КонецЕсли;
			// Обработка строки данных к выгрузке
			Если СтрокаВОтправляемыхМассив.Количество() Тогда
				ОбщийРазмер = СтрокаВОтправляемыхМассив[0].Объем;
				// ++ rarus makole 2021-05-07
				//Если РазмерОбъекта = ОбщийРазмер Тогда
				СтрокаВОтправляемыхМассив[0].ОставшийсяОбъем = СтрокаВОтправляемыхМассив[0].ОставшийсяОбъем + РазмерОбъекта;
				Если СтрокаВОтправляемыхМассив[0].ОставшийсяОбъем = ОбщийРазмер Тогда
				// -- rarus makole 2021-05-07
					СтрокаВОтправляемыхМассив[0].Выгружать = 1
				Иначе
					СтрокаВОтправляемыхМассив[0].Выгружать = 2
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Элементы.ДанныеКОбмену.ТекущиеДанные.Выгружать = 0 Тогда // Флаг "Выгружать" сняли
			ИзменяемаяСтрока = ИзменяемаяСтрокаМассив[0];
			ИзменяемаяСтрока.Количество = ИзменяемаяСтрока.Количество - 1;
			ИзменяемаяСтрока.Объем = ИзменяемаяСтрока.Объем - РазмерОбъекта;
			Если СтрокаВОтправляемыхМассив.Количество() Тогда
				ОбщийРазмер = СтрокаВОтправляемыхМассив[0].Объем;
				// ++ rarus makole 2021-05-07
				//Если РазмерОбъекта = ОбщийРазмер Тогда
				СтрокаВОтправляемыхМассив[0].ОставшийсяОбъем = СтрокаВОтправляемыхМассив[0].ОставшийсяОбъем - РазмерОбъекта;
				Если СтрокаВОтправляемыхМассив[0].ОставшийсяОбъем = 0 Тогда
				// -- rarus makole 2021-05-07
					СтрокаВОтправляемыхМассив[0].Выгружать = 0
				Иначе
					СтрокаВОтправляемыхМассив[0].Выгружать = 2
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервереБезКонтекста
// ++ rarus makole 2021-05-07
//Функция ДанныеСвязанных(СсылкаНаОбъект, АдресРезультатаЗапроса)
Функция ДанныеСвязанных(СсылкаНаОбъект, Узел, Вариант)
// -- rarus makole 2021-05-07

	ЕстьСвязанныеОбъекты = рарусОбщегоНазначенияСервер.ЕстьСвязанныеОбъекты(СсылкаНаОбъект);
	ОбъектыКДополнению = Неопределено;
	Если ЕстьСвязанныеОбъекты Тогда
		МенеджерСвязанного = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект);
		СвязанныеОбъекты = МенеджерСвязанного.СвязанныеДанные(СсылкаНаОбъект);
		// ++ rarus makole 2021-05-07
		//РезультатЗапроса = ПолучитьИзВременногоХранилища(Строка(АдресРезультатаЗапроса));
		РезультатЗапроса = рарусСинхронизацияССудномПовтИсп.ПолучитьВыборкуИзменений(Узел, Вариант, Истина);
		// -- rarus makole 2021-05-07
		ПоследнийИндексМассива = РезультатЗапроса.Количество() - 1;
		ОбъектыКДополнению = Новый Массив;
		
		Для каждого СвязанныйОбъект Из СвязанныеОбъекты Цикл
			Если СвязанныйОбъект.Свойство("Ссылка") Тогда
				ОбъектыКДополнению.Добавить(Новый Структура("ИмяТипа, Ссылка", СвязанныйОбъект.ИмяТипа, СвязанныйОбъект.Ссылка))
			ИначеЕсли СтрНачинаетсяС(СвязанныйОбъект.ИмяТипа, "Регистр") Тогда
				Для НомерПакета = 2 По ПоследнийИндексМассива Цикл // Регистры в выборке начинаются с пакета 2
					ВыборкаПоРегистрам = РезультатЗапроса[НомерПакета].Выбрать();
					Если ВыборкаПоРегистрам.Следующий() Тогда // Записи содержат итоги, первая - итоговая, можно использовать для определения типа
						Если ВыборкаПоРегистрам.Тип = СвязанныйОбъект.ИмяТипа Тогда 
							Пока ВыборкаПоРегистрам.НайтиСледующий(СвязанныйОбъект.Отбор) Цикл
								Если ВыборкаПоРегистрам.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
									СвязаннаяЗапись = Новый Структура("ИмяТипа, Размер", ВыборкаПоРегистрам.Тип, Окр((ВыборкаПоРегистрам.РазмерВФайле) / 1024,2,РежимОкругления.Окр15как20));
									ОбъектыКДополнению.Добавить(СвязаннаяЗапись);
								КонецЕсли;
							КонецЦикла;
							Прервать;
						КонецЕсли;	
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбъектыКДополнению;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВерсияКонфигурацииЦБ(Узел)
	Возврат РегистрыСведений.рарусВерсииКонфигурации.ВерсияКонфигурацииУзла(Узел);
КонецФункции