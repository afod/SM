///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура СформироватьРасход(СтруктураПараметров, РезультатОбработки, ТаблицаДляОбработки, ТаблицаНесписанных) Экспорт
	
	// В таблицах накапливаем данные для отдельных документов на каждую категорию и вид операции Расхода ТМЦ
	ТаблицаСписанияЗабаланс = Новый ТаблицаЗначений;
	ТаблицаСписанияЗабаланс.Колонки.Добавить("Номенклатура");
	ТаблицаСписанияЗабаланс.Колонки.Добавить("Количество");
	ТаблицаСписанияБУ 		= ТаблицаСписанияЗабаланс.СкопироватьКолонки();
	ТаблицаСписанияСклад 	= ТаблицаСписанияЗабаланс.СкопироватьКолонки();
	ТаблицаНесписанных		= ТаблицаСписанияЗабаланс.СкопироватьКолонки();
	СтруктураДляКатегории 	= Новый Структура("ТаблицаСписанияЗабаланс, ТаблицаСписанияБУ, ТаблицаСписанияСклад",
											ТаблицаСписанияЗабаланс, 
											ТаблицаСписанияБУ,
											ТаблицаСписанияСклад);
	СтруктураПараметров.Вставить("Склад", рарусОбщегоНазначенияСервер.СкладСудна(СтруктураПараметров.ОсновноеСудно));
	ВыборкаКатегории = ПолучитьОстаткиПоКатегориям(ТаблицаДляОбработки,, СтруктураПараметров.Склад);
	КонтролироватьОстатки = рарусИмущественныйУчетСервер.КонтролироватьОстаткиТМЦ(Новый Структура("Период, Судно", ТекущаяДатаСеанса(), СтруктураПараметров.ОсновноеСудно));
	
	Пока ВыборкаКатегории.Следующий() Цикл
		
		СтруктураДляКатегории.ТаблицаСписанияЗабаланс.Очистить();
		СтруктураДляКатегории.ТаблицаСписанияБУ.Очистить();
		СтруктураДляКатегории.ТаблицаСписанияСклад.Очистить();
		
		ВыборкаНоменклатура = ВыборкаКатегории.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаНоменклатура.Следующий() Цикл
			
			ПодготовитьТаблицыДокументовПоНоменклатуре(ТаблицаДляОбработки, ТаблицаНесписанных, СтруктураДляКатегории, ВыборкаНоменклатура, РезультатОбработки, КонтролироватьОстатки);
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение из СтруктураДляКатегории Цикл
			
			Если КлючИЗначение.Значение.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;

			Если КлючИЗначение.Ключ = "ТаблицаСписанияЗабаланс" Тогда
				ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.ИзВыданного")
			ИначеЕсли КлючИЗначение.Ключ = "ТаблицаСписанияБУ" Тогда
				ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.БУ");
			Иначе
				ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада");
			КонецЕсли;
			
			СФормироватьДокументРасхода(СтруктураПараметров, ВидОперации, КлючИЗначение.Значение, РезультатОбработки);
			
			Если РезультатОбработки.Отказ = Истина Тогда
				Возврат
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПодготовитьТаблицыДокументовПоНоменклатуре(ТаблицаДляОбработки, ТаблицаНесписанных, СтруктураДляКатегории, ВыборкаНоменклатура, РезультатОбработки, КонтролироватьОстатки)
	
	СтрокиОбработки = ТаблицаДляОбработки.НайтиСтроки(Новый Структура("Номенклатура", ВыборкаНоменклатура.Номенклатура));
	// Может быть несколько строк, учтём общее количество
	Количество = 0;
	ПустойТекстОшибки = НЕ ЗначениеЗаполнено(РезультатОбработки.ТекстОшибки);
	Для каждого СтрокаНоменклатуры Из СтрокиОбработки Цикл
		Количество = Количество + СтрокаНоменклатуры.Количество
	КонецЦикла;

	Если Количество = 0 Тогда
		СтрокаНесписанных = ТаблицаНесписанных.Добавить();
		СтрокаНесписанных.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		СтрокаНесписанных.Количество = 0;
		РезультатОбработки.ТекстОшибки = РезультатОбработки.ТекстОшибки + ?(ПустойТекстОшибки, "", Символы.ПС) + СтрШаблон("По номенклатуре %1 не указано количество", Строка(ВыборкаНоменклатура.Номенклатура));
		Возврат;
	КонецЕсли;

	ВыборкаОстатки = ВыборкаНоменклатура.Выбрать();

	Пока ВыборкаОстатки.Следующий()
		И Количество > 0 Цикл
		
		Если ВыборкаОстатки.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование") Тогда
			СтрокаСписания = СтруктураДляКатегории.ТаблицаСписанияЗабаланс.Добавить()
		ИначеЕсли ВыборкаОстатки.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ") Тогда
			СтрокаСписания = СтруктураДляКатегории.ТаблицаСписанияБУ.Добавить()
		ИначеЕсли ВыборкаОстатки.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе") Тогда
			СтрокаСписания = СтруктураДляКатегории.ТаблицаСписанияСклад.Добавить()
		Иначе 
			// Нет остатков, номенклатура в документ не попадает
			Прервать;
		КонецЕсли;
		
		СтрокаСписания.Номенклатура = ВыборкаОстатки.Номенклатура;
		СтрокаСписания.Количество = Мин(Количество, ВыборкаОстатки.КоличествоОстаток);
		
		Количество = Количество - СтрокаСписания.Количество;
		
	КонецЦикла;

	Если Количество > 0 И НЕ КонтролироватьОстатки Тогда
		// При отключенном контроле остатков всю нехватающую к списанию номенклатуру отнесём на склад
		СтрокаСписания = СтруктураДляКатегории.ТаблицаСписанияСклад.Добавить();
		СтрокаСписания.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		СтрокаСписания.Количество = Количество;
		СтруктураДляКатегории.ТаблицаСписанияСклад.Свернуть("Номенклатура", "Количество");
		РезультатОбработки.ТекстОшибки = РезультатОбработки.ТекстОшибки + ?(ПустойТекстОшибки, "", Символы.ПС) + СтрШаблон("По номенклатуре %1 не хватает %2 ед. для списания со склада", Строка(ВыборкаНоменклатура.Номенклатура), Количество);
	ИначеЕсли Количество > 0 Тогда
		СтрокаНесписанных = ТаблицаНесписанных.Добавить();
		СтрокаНесписанных.Номенклатура = ВыборкаНоменклатура.Номенклатура;
		СтрокаНесписанных.Количество = Количество;
		РезультатОбработки.ТекстОшибки = РезультатОбработки.ТекстОшибки + ?(ПустойТекстОшибки, "", Символы.ПС) + СтрШаблон("По номенклатуре %1 не хватает %2 ед. для списания со склада", Строка(ВыборкаНоменклатура.Номенклатура), Количество);
	КонецЕсли;
			
КонецПроцедуры

// Возвращает выборку остатков ТМЦ в имущественном учете, отсортированную для формирования списания с итогами по Категории и Номенклатуре 
//
// Параметры:
//  ТаблицаНоменклатуры  - ТаблицаЗначений - таблица с обязательной типизированной колонкой Номенклатура
//                 по которой будут получены остатки
//  Период  - Дата, Неопределено - период получения остатков
//  Склад  - СправочникСсылка.Склады, Неопределено - склад судна, по которому получаем остатки
//
// Возвращаемое значение:
//   ВыборкаИзРезультатаЗапроса   - выборка с полями Номенклатура, Категория, Качество, Статус, КоличествоОстаток
//
Функция ПолучитьОстаткиПоКатегориям(ТаблицаНоменклатуры, Период = Неопределено, Склад = Неопределено)
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса()
	КонецЕсли;
	
	Если Склад = Неопределено Тогда
		Склад = рарусОбщегоНазначенияСервер.СкладСудна(рарусОбщегоНазначенияСервер.ОсновноеСудно())
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНоменклатуры.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТ_ИсходнаяТаблица
		|ИЗ
		|	&ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	рарусИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
		|	рарусИмуществоНаСудахОстатки.Статус КАК Статус,
		|	рарусИмуществоНаСудахОстатки.Склад КАК Склад,
		|	рарусИмуществоНаСудахОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ПОМЕСТИТЬ ВТ_Остатки
		|ИЗ
		|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
		|			&Период,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_ИсходнаяТаблица.Номенклатура КАК Номенклатура
		|					ИЗ
		|						ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица)
		|				И Склад = &Склад
		|				И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе))) КАК рарусИмуществоНаСудахОстатки
		|ГДЕ
		|	рарусИмуществоНаСудахОстатки.КоличествоОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	спрНоменклатура.Ссылка КАК Номенклатура,
		|	спрНоменклатура.Категория КАК Категория,
		|	спрНоменклатура.Качество КАК Качество,
		|	ЕСТЬNULL(ВТ_Остатки.Статус, НЕОПРЕДЕЛЕНО) КАК Статус,
		|	ЕСТЬNULL(ВТ_Остатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ВЫБОР
		|		КОГДА ВТ_Остатки.Статус = ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование)
		|			ТОГДА 1
		|		КОГДА ВТ_Остатки.Статус = ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ)
		|			ТОГДА 2
		|		КОГДА ВТ_Остатки.Статус = ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК Порядок
		|ИЗ
		|	ВТ_ИсходнаяТаблица КАК ВТ_ИсходнаяТаблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
		|		ПО ВТ_ИсходнаяТаблица.Номенклатура = ВТ_Остатки.Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК спрНоменклатура
		|		ПО ВТ_ИсходнаяТаблица.Номенклатура = спрНоменклатура.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок
		|ИТОГИ ПО
		|	Категория,
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

Процедура СФормироватьДокументРасхода(СтруктураПараметров, ВидОперации, ТаблицаДанных, РезультатОбработки)
	
	ДокументРасхода = Документы.рарусРасходТМЦ.СоздатьДокумент();
	ДокументРасхода.Заполнить(Неопределено);
	ЗаполнитьЗначенияСвойств(ДокументРасхода, СтруктураПараметров, "Склад, Комментарий");
	ДокументРасхода.ВидОперации = ВидОперации;
	
	Для Каждого Строка Из ТаблицаДанных Цикл
		Если Строка.Количество > 0 Тогда
			СтрокаТЧ = ДокументРасхода.ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокументРасхода.Записать(РежимЗаписиДокумента.Проведение);
		рарусИмущественныйУчетВызовСервера.УстановитьСтатусЗарегистрированоКОтправке(ДокументРасхода.Ссылка);
	Исключение
		РезультатОбработки.Отказ = Истина;
		РезультатОбработки.ТекстОшибки = РезультатОбработки.ТекстОшибки + Символы.ПС + ОписаниеОшибки();
		РезультатОбработки.ЗаголовокОшибки = "Не удалось записать документ";
	КонецПопытки;
	
	//Создание файла//
	Если СтруктураПараметров.ЕстьПриложенныеФайлы Тогда
		Если Не РезультатОбработки.Отказ Тогда
			Для Каждого ПриложенныйФайл Из СтруктураПараметров.СведенияОФайлах Цикл
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.АвторизованныйПользователь);
				ПараметрыФайла.Вставить("ВладелецФайлов", ДокументРасхода.Ссылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ПриложенныйФайл.СведенияОФайле.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ПриложенныйФайл.СведенияОФайле.РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				ПараметрыФайла.Вставить("ГруппаФайлов", Неопределено);
				ПараметрыФайла.Вставить("Служебный", Ложь);
				РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПриложенныйФайл.СведенияОФайле.АдресВременногоХранилищаФайла);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
