
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// ++ rarus PleA 22.04.2021 [номерзадачи]
	Если Параметры.Свойство("Заголовок") тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;	
	// -- rarus PleA
	
	// ++ rarus makole 2021-08-09 [РАIT-0023494]
	// Контроль остатков ТМЦ
	Параметры.Свойство("Судно", Судно);
	Если рарусИмущественныйУчетСервер.КонтролироватьОстаткиТМЦ(Новый Структура("Период, Судно", ТекущаяДата(), Судно)) Тогда
		УстановитьТекстЗапросаСпискаСОтборомПоОстаткамТМЦ(СписокНоменклатура, Судно, ТолькоСОстатками)
	Иначе
		Элементы.ТолькоСОстатками.Видимость = Ложь;
	КонецЕсли;
	// -- rarus makole 2021-08-09 [РАIT-0023494]
	
	ПараметрОтбораНоменклатуры = Неопределено;
	Если Параметры.Свойство("ОтборНоменклатуры", ПараметрОтбораНоменклатуры) И ПараметрОтбораНоменклатуры <> Неопределено Тогда
		ЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.Использование = Истина;
		
		ОтборНоменклатуры.ЗагрузитьЗначения(ПараметрОтбораНоменклатуры);
		
		ЭлементОтбора.ПравоеЗначение = ОтборНоменклатуры; 		
		
		Элементы.ОтобразитьВсюНоменклатуру.Видимость = Истина;				
	Иначе
		ОтобразитьВсюНоменклатуру = Истина;
	КонецЕсли;
	
	// ++ rarus PleA 19.04.2021 [РАIT-0023282]
	ОтборПоТипуНоменклатуры = Неопределено;
	Параметры.Свойство("ОтборПоТипуНоменклатуры", ОтборПоТипуНоменклатуры);
	
	Если ЗначениеЗаполнено(ОтборПоТипуНоменклатуры) тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокНоменклатура, "ТипНоменклатуры", ОтборПоТипуНоменклатуры, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборПоТипуНоменклатуры.Количество() > 0));
				
	КонецЕсли;	
	
	// ++ rarus makole 2021-08-09
	// перенёс выше, используется как параметр ФО
	//Параметры.Свойство("Судно", Судно);
	// -- rarus makole 2021-08-09
	
	//rarus_AfoD 31.08.2021 < 
	ОтборПоКатегорииНоменклатуры = Неопределено;
	Параметры.Свойство("ОтборПоКатегорииНоменклатуры", ОтборПоКатегорииНоменклатуры);
	
	Если ЗначениеЗаполнено(ОтборПоКатегорииНоменклатуры) тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокНоменклатура, "Категория", ОтборПоКатегорииНоменклатуры, 
				ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоКатегорииНоменклатуры", (ОтборПоКатегорииНоменклатуры.Количество() > 0));
				
	КонецЕсли;	
	//rarus_AfoD 31.08.2021 > 
	
	УстановитьОтборОбъектовРемонтаПоСудну();		
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьОтборВСпискеНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если фПеренестиВДокумент или Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ВопросПриЗакрытии Тогда
		Отказ = Истина;
		Если Не ЗавершениеРаботы Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
			ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Подобранная номенклатура не перенесена. Перенести?'"), РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		фПеренестиВДокумент = Истина;
	КонецЕсли;

	Если Результат <> КодВозвратаДиалога.Отмена Тогда 
		ВопросПриЗакрытии = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                     
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если фПеренестиВДокумент И Не ЗавершениеРаботы Тогда
		ЗакрытьСПереносом();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	фПеренестиВДокумент = Истина;
	Закрыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры
&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	УстановитьОтборВСпискеНоменклатуры();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатура

&НаКлиенте
Процедура СписокНоменклатураПриАктивизацииСтроки(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
//{{MRG[ <-> ]
	//	СписокНоменклатураВыборЗавершение(1,Новый Структура("ТекДанные", ТекДанные));
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		// ++ rarus makole 2021-05-06
//}}MRG[ <-> ]
//{{MRG[ <-> ]
//		Если ЭтоЗаблокированнаяНоменклатура(ТекДанные.Номенклатура) Тогда
//			рарусНоменклатураКлиент.ВыборЗаблокированнойНоменклатуры(ЭтаФорма, ТекДанные.Номенклатура, СтандартнаяОбработка);
//		Иначе
//		// -- rarus makole 2021-05-06
//			СписокНоменклатураВыборЗавершение(1,Новый Структура("ТекДанные", ТекДанные));
//		КонецЕсли; // ++ rarus makole 2021-05-06
//}}MRG[ <-> ]

		Если ЭтоЗаблокированнаяНоменклатура(ТекДанные.Номенклатура) Тогда
			рарусНоменклатураКлиент.ВыборЗаблокированнойНоменклатуры(ЭтаФорма, ТекДанные.Номенклатура, СтандартнаяОбработка);
		Иначе
			СписокНоменклатураВыборЗавершение(1,Новый Структура("ТекДанные", ТекДанные));
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатураВыборЗавершение(Значение, ДополнительныеПараметры) Экспорт
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	Если Значение = Неопределено ИЛИ Значение = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НайС = Объект.Корзина.НайтиСтроки(Новый структура("Номенклатура", ТекДанные.Номенклатура));
	Если НайС.Количество() = 0 Тогда
		нс = Объект.Корзина.Добавить();
		нс.Номенклатура = ТекДанные.Номенклатура;
		нс.Количество = 1;
	Иначе
		текСтрока = НайС[0];
		// ++ rarus makole 2021-10-05
		текСтрока.Количество = текСтрока.Количество + 1;
		// -- rarus makole 2021-10-05
	КонецЕсли;

КонецПроцедуры
//{{MRG[ <-> ]
//// -- rarus makole 2021-05-06
//}}MRG[ <-> ]

&НаКлиенте
Процедура ОтобразитьВсюНоменклатуруПриИзменении(Элемент)
	Если ОтобразитьВсюНоменклатуру Тогда
		УдалитьОтборНоменклатуры();
	Иначе
		УстановитьОтборНоменклатуры();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНоменклатуры()

	ЭлементОтбора = СписокНоменклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));			
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Номенклатура");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = ОтборНоменклатуры;

	//Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	//Для каждого ЭлементОтбора Из СписокНоменклатура.Отбор.Элементы Цикл
	//	Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
	//		ЭлементОтбора.Использование = Истина;
	//		Прервать;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОтборНоменклатуры()

	Поле = Новый ПолеКомпоновкиДанных("Номенклатура");
	Для каждого ЭлементОтбора Из СписокНоменклатура.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = Поле Тогда
			СписокНоменклатура.Отбор.Элементы.Удалить(ЭлементОтбора);
			//ЭлементОтбора.Использование = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// ++ rarus makole 2021-05-06
&НаСервереБезКонтекста
Функция ЭтоЗаблокированнаяНоменклатура(ВыбраннаяСтрока)
	
	Возврат рарусНоменклатураСервер.ЭтоЗаблокированнаяНоменклатура(ВыбраннаяСтрока);
	
КонецФункции 

&НаКлиенте
Процедура ВыборЗаблокированнойЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> Неопределено И РезультатВопроса.Значение = "ВыбратьЗаблокированную" Тогда
		
		// ++ rarus makole 2021-10-05
		//ОповеститьОВыбореНоменклатуры(ДополнительныеПараметры.Номенклатура);
		СписокНоменклатураВыборЗавершение(1, Новый Структура("ТекДанные", ДополнительныеПараметры));
		// -- rarus makole 2021-10-05
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОВыбореНоменклатуры(Номенклатура)
	
	ОповеститьОВыборе(Номенклатура);
	
КонецПроцедуры	

// ++ rarus makole 2021-08-09 [РАIT-0023494]
// Контроль остатков ТМЦ&НаКлиенте
&НаКлиенте
Процедура ТолькоСОстаткамиПриИзменении(Элемент)
	ОбновитьПараметрыСпискаНоменклатуры();
	Элементы.СписокНоменклатура.Обновить();
КонецПроцедуры
// -- rarus makole 2021-08-09 [РАIT-0023494]

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьОтборВСпискеНоменклатуры()

	Если Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено ИЛИ ИспользоватьФильтры = Ложь Тогда
		ОтборПоИерархииНоменклатуры = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		ОтборПоИерархииНоменклатуры = Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтборПоИерархииНоменклатуры) Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "Родитель", ОтборПоИерархииНоменклатуры, 
			ВидСравненияКомпоновкиДанных.ВИерархии, "Родитель", Ложь, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	Иначе
	
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СписокНоменклатура, "Родитель", ОтборПоИерархииНоменклатуры, 
			ВидСравненияКомпоновкиДанных.ВИерархии, "Родитель", Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);
		
	КонецЕсли;
		
	Попытка
		Элементы.СписокНоменклатура.ТекущаяСтрока = 1;
	Исключение
	КонецПопытки;
	СписокНоменклатураПриАктивизацииСтроки(Элементы.СписокНоменклатура);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьТзВоВременноеХранилище()
	Номенклатура = Объект.Корзина.Выгрузить();
	АдресНоменклатуруВХранилище = ПоместитьВоВременноеХранилище(Номенклатура, УникальныйИдентификатор);
	Возврат АдресНоменклатуруВХранилище;
КонецФункции

&НаКлиенте 
Процедура ЗакрытьСПереносом()
	Если Объект.Корзина.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	АдресНоменклатуруВХранилище = ПоместитьТзВоВременноеХранилище();
	ОповеститьОВыборе(АдресНоменклатуруВХранилище);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьФильтрыПриИзменении(Элемент)
	ИспользоватьФильтрыПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииПриИзменении(Элемент)
	ИспользоватьФильтры = Истина;
	ВариантНавигацииПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВариантНавигацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаСервере
Процедура ИспользоватьФильтрыПриИзмененииНаСервере()
	впОбщиеПроцедурыДокументовТОИР.ПриИзмененииИспользованияФильтров(ЭтаФорма);
КонецПроцедуры

&НаСервере
Процедура ВариантНавигацииПриИзмененииНаСервере()
	впОбщиеПроцедурыДокументовТОИР.ПриИзмененииИспользованияФильтров(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНоменклатуру(Команда)
	ТекущиеДанные = Элементы.СписокНоменклатура.ТекущиеДанные;	
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", СтруктураПараметров);
	КонецЕсли; 
КонецПроцедуры

// ++ rarus selmik 05.03.2021
&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтроки(Элемент)
	Если ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или ВидНоменклатуры = ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатуры = ТекущиеДанные.Ссылка;

	Если Не ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);

КонецПроцедуры // -- rarus selmik 05.03.2021

// ++ rarus selmik 05.03.2021
&НаКлиенте
Процедура ВидыНоменклатурыПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.ВидыНоменклатуры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ВидНоменклатурыПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры // -- rarus selmik 05.03.2021

// ++ rarus selmik 05.03.2021
&НаСервере
Процедура ВидНоменклатурыПриИзмененииНаСервере()
	
	Если ВидНоменклатуры = ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;

	ВидНоменклатурыДоИзменения = ВидНоменклатуры;
	
	// Сброс отбора
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокНоменклатура, "ВидНоменклатуры", ВидНоменклатуры, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВидуНоменклатуры", Ложь);
		
	ЗаполнитьДеревоОтборовНоменклатуры();
	
	впОбщиеПроцедурыДокументовТОИР.УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(ЭтаФорма);
КонецПроцедуры // -- rarus selmik 05.03.2021
	
Процедура ЗаполнитьДеревоОтборовНоменклатуры()
	
	ДеревоОтборовРеквизит = РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборовРеквизит.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборовНоменклатуры(ЭтаФорма, ДеревоОтборовРеквизит);
		
	ЗначениеВРеквизитФормы(ДеревоОтборовРеквизит, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборовРеквизит)
	
	СтруктураЗапроса = ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(Ложь, Ложь, Ложь,Новый ТаблицаЗначений());
	ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса;
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат
	КонецЕсли;
	
	ЗапросПоДеревуОтборов = Новый Запрос;
	ЗапросПоДеревуОтборов.Текст = ТекстЗапроса;
	ЗапросПоДеревуОтборов.УстановитьПараметр("ВидНоменклатуры",   Форма.ВидНоменклатуры);
	
	ВыборкаПоСвойствам = ЗапросПоДеревуОтборов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСвойствам.Следующий() Цикл
		
		ВыборкаПоРеквизитам = ВыборкаПоСвойствам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаПоРеквизитам.ТипЗначениеОтбора) <> Тип("Булево") Тогда
				МетаданныеСвойства = Метаданные.НайтиПоТипу(ВыборкаПоРеквизитам.ТипЗначениеОтбора);
				
				Если МетаданныеСвойства = Неопределено ИЛИ Не ПравоДоступа("Чтение", МетаданныеСвойства) Тогда
					Продолжить
				КонецЕсли;
			КонецЕсли;	
			
			ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
			
			Если ВыборкаЗначения.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;     
			
			СтрокаРеквизита = ДеревоОтборовРеквизит.Строки.Добавить();
			СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
			
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);
			ВыборкаЗначения.Следующий();
			
			СтрокаРеквизита.Представление = ВыборкаЗначения.ПредставлениеРеквизита;
			ВыборкаЗначения.Сбросить();
			
			Пока ВыборкаЗначения.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число")
					Или ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
					
					СтрокаРеквизита.ИнтервалОт            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
					СтрокаРеквизита.ИнтервалДо            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
					СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ОтборДоступен         = Истина;
					СтрокаРеквизита.ЗначениеОтбора        = ВыборкаЗначения.ЗначениеОтбора;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					
					Прервать;
					
				ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
					
					СтрокаРеквизита.ИмяРеквизита   = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ОтборДоступен  = Истина;
					СтрокаРеквизита.ЗначениеОтбора = Истина;
					СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
					
					Прервать;
					
				ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
					
					СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
					СтрокаРеквизита.ОтборДоступен         = Истина;
					СтрокаРеквизита.ЗначениеОтбора        = "";
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					
					Прервать;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаЗначения.ЗначениеОтбора) Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
				
				СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаЗначения.ОтборДоступен = Истина;
				
			КонецЦикла;
			
			Если СтрокаРеквизита.Строки.Количество() = 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
				ДеревоОтборовРеквизит.Строки.Удалить(СтрокаРеквизита);
			ИначеЕсли СтрокаРеквизита.Строки.Количество() > 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
				СтрокаРеквизита.Строки.Сортировать("Представление");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Возвращает структуру - текст запроса по дереву свойств вида номенклатуры
// и массив имен реквизитов номенклатуры по которым выполняется построение дерева свойств.
//
// Параметры:
//	ЕстьОтборПоРеквизитам (Булево) - признак наличия отбора по реквизитам,
//	ЕстьОтборПоДопРеквизитам (Булево) - признак наличия отбора по доп.реквизитам,
//	ЕстьОтборПоСегменту (Булево) - признак наличия отбора по сегменту.
//	РеквизитыБыстрогоОтбораНоменклатуры (Таблица значений) - таблица реквизитами быстрого отбора.
//
// Возвращаемое значение:
//	Структура.
//		- ТекстЗапроса (Строка) - текст запроса,
//		- МассивЗначений (Массив) - массив имен реквизитов номенклатуры у которых ссылочный тип.
//
&НаСервере
Функция ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(ЕстьОтборПоРеквизитам, ЕстьОтборПоДопРеквизитам, ЕстьОтборПоСегменту, РеквизитыБыстрогоОтбораНоменклатуры)
	
	Если ЕстьОтборПоРеквизитам Тогда
		
		РеквизитыНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты;
		
		ТекстВыбораРеквизитов                 = "";
		ТекстСвойстваНоменклатуры			  = "";
		ТекстВыбораРеквизитовПримитивныхТипов = "";
		
		МассивИменРеквизитов = Новый Массив;
		
		Для Каждого РеквизитНоменклатуры Из РеквизитыНоменклатуры Цикл
			
			Если РеквизитыБыстрогоОтбораНоменклатуры.Найти(РеквизитНоменклатуры.Имя, "ИмяРеквизита") <> Неопределено Тогда
				
				Если Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
					
					ТекстСвойстваНоменклатуры = ?(ТекстСвойстваНоменклатуры = "", "", ТекстСвойстваНоменклатуры + ",") + "
					|	СправочникНоменклатура." + РеквизитНоменклатуры.Имя;					
					
					ТекстВыбораРеквизитов = ТекстВыбораРеквизитов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА СправочникНоменклатура." + РеквизитНоменклатуры.Имя;
					
					МассивИменРеквизитов.Добавить(РеквизитНоменклатуры.Имя);
					
				Иначе
					
					Если РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка")) Тогда
						ЗначениеПоУмолчанию = """""";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата")) Тогда
						ЗначениеПоУмолчанию = "ДАТАВРЕМЯ(1,1,1)";
						
					ИначеЕсли  РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число")) Тогда
						ЗначениеПоУмолчанию = "0";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
						ЗначениеПоУмолчанию = "ЛОЖЬ";
						
					КонецЕсли;
					
					ТекстВыбораРеквизитовПримитивныхТипов = ТекстВыбораРеквизитовПримитивныхТипов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА " + ЗначениеПоУмолчанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапросаПоСпискуСвойств = "
	|ВЫБРАТЬ
	|	ТаблицаРеквизитовОтбора.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаРеквизитовОтбора.Свойство               КАК Свойство,
	|	ТаблицаРеквизитовОтбора.ИмяРеквизита           КАК ИмяРеквизита,
	|	ТаблицаРеквизитовОтбора.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ТаблицаРеквизитовОтбора.ЭтоДопРеквизит         КАК ЭтоДопРеквизит,
	|	ТаблицаРеквизитовОтбора.ТипЗначения            КАК ТипЗначения
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	&ТаблицаРеквизитов КАК ТаблицаРеквизитовОтбора
	|;";
	
	ТекстЗапросаЗначенийДопРеквизитов = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	| 	ЛОЖЬ 										 КАК ТипЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК ИмяРеквизита,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
	|	И НоменклатураДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств
	|			ГДЕ
	|				СписокСвойств.ЭтоДопРеквизит)
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаЗначенийДопРеквизитов = СтрЗаменить(ТекстЗапросаЗначенийДопРеквизитов, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоДопРеквизитам = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки                          КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита               КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Свойство       КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	| 	ЛОЖЬ 											   КАК ТипЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.ИмяРеквизита   КАК ИмяРеквизита,
	|	НоменклатураДополнительныеРеквизиты.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	НоменклатураДополнительныеРеквизиты.Отбор          КАК Отбор
	|ИЗ
	|	СписокЗначенийОтбора КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО НоменклатураДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И СписокСвойств.ТипЗначения <> ""Строка""
	|	И СписокСвойств.ТипЗначения <> ""Дата""
	|	И СписокСвойств.ТипЗначения <> ""Число""
	|	И СписокСвойств.ТипЗначения <> ""Булево""";
	
	ТекстЗапросаПоДопРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки                       КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита            КАК ПредставлениеРеквизита,
	|	СписокСвойств.Свойство                          КАК Свойство,
	|	ВЫБОР
	|		КОГДА СписокСвойств.ТипЗначения = ""Строка""
	|			ТОГДА """"
	|		КОГДА СписокСвойств.ТипЗначения = ""Дата""
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СписокСвойств.ТипЗначения = ""Число""
	|			ТОГДА 0
	|		КОГДА СписокСвойств.ТипЗначения = ""Булево""
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ                                           КАК ЗначениеОтбора,
	| 	ЛОЖЬ 											КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита                      КАК ИмяРеквизита,
	|	СписокСвойств.ЭтоДопРеквизит                    КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И (СписокСвойств.ТипЗначения = ""Строка""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Дата""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Число""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Булево"")";
	
	ТекстОбъединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаПоСвойствамНоменклатуры = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ" + ТекстСвойстваНоменклатуры + "
	|ПОМЕСТИТЬ СвойстваНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстЗапросаПоРеквизитам = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита КАК Свойство,
	|	" + ?(ТекстВыбораРеквизитов = "","NULL","ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ") + "                                  КАК ЗначениеОтбора,
	|	" + ?(ТекстВыбораРеквизитов = "","ТИПЗНАЧЕНИЯ(NULL)","ТИПЗНАЧЕНИЯ(ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ)") + "                                  КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита КАК ИмяРеквизита,
	|	ЛОЖЬ КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваНоменклатуры КАК СправочникНоменклатура
	|		ПО (Истина)
	|ГДЕ
	|	НЕ СписокСвойств.ЭтоДопРеквизит
	|";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаПоСвойствамНоменклатуры = СтрЗаменить(ТекстЗапросаПоСвойствамНоменклатуры, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки              КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита   КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита   КАК Свойство,
	|	" + ?(ТекстВыбораРеквизитовПримитивныхТипов = "","NULL","ВЫБОР" + ТекстВыбораРеквизитовПримитивныхТипов + "
	|	КОНЕЦ") + "                                  КАК ЗначениеОтбора,
	| 	ЛОЖЬ 								   КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита             КАК ИмяРеквизита,
	|	ЛОЖЬ                                   КАК ЭтоДопРеквизит,
	|	ЛОЖЬ                                   КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	(Не СписокСвойств.ЭтоДопРеквизит)";
	
	ТекстИтогов = "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство,
	|	ТипЗначениеОтбора";
	
	ТекстЗапросаПоДереву = "";
	
	Если ЕстьОтборПоРеквизитам И Не ЕстьОтборПоДопРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаПоСвойствамНоменклатуры + ТекстЗапросаПоРеквизитам + ТекстОбъединения + 
		ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И Не ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоСвойствамНоменклатуры + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстОбъединения + ТекстЗапросаПоРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ТекстЗапроса, МассивЗначений", ТекстЗапросаПоДереву, МассивИменРеквизитов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// ++ rarus PleA 21.04.2021 [РАIT-0023282]
&НаКлиенте
Процедура ИерархияОбъектовРемонтаПриАктивизацииСтроки(Элемент)
	
	Если Не ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("УстановитьОтборПоОбъектуРемонтаПриАктивизацииСтроки",0.1, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоОбъектуРемонтаПриАктивизацииСтроки()
	
	Если Элементы.ИерархияОбъектовРемонта.ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоОбъектуРемонта(Элементы.ИерархияОбъектовРемонта.ТекущиеДанные.Ссылка);
		
КонецПроцедуры
 

&НаСервере
Процедура УстановитьОтборПоОбъектуРемонта(ОбъектРемонта)
	
	рарусНоменклатураСервер.УстановитьОтборПоОбъектуРемонта(ЭтотОбъект, ОбъектРемонта);
	
КонецПроцедуры
 
&НаСервере
Процедура УстановитьОтборОбъектовРемонтаПоСудну()
		
	Если ЗначениеЗаполнено(Судно) тогда
		ОсновноеСудно = Судно;
	Иначе	
		ОсновноеСудно = рарусОбщегоНазначенияСервер.ОсновноеСудно();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновноеСудно) тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ИерархияОбъектовРемонта, "ПодразделениеИсполнитель", ОсновноеСудно, 
			ВидСравненияКомпоновкиДанных.Равно, , Истина);
		
	КонецЕсли;

КонецПроцедуры

// -- rarus PleA

// ++ rarus makole 2021-08-09 [РАIT-0023494]
// Контроль остатков ТМЦ 
&НаСервереБезКонтекста
Процедура УстановитьТекстЗапросаСпискаСОтборомПоОстаткамТМЦ(СписокНоменклатура, Судно, ТолькоСОстатками)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	СправочникНоменклатура.Артикул КАК Артикул,
	               |	СправочникНоменклатура.Ссылка КАК Номенклатура,
	               |	СправочникНоменклатура.Родитель КАК Родитель,
	               |	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
	               |	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	СправочникНоменклатура.НаименованиеНаАнглийском КАК НаименованиеНаАнглийском,
	               |	СправочникНоменклатура.рспбКодMDG КАК КодMDG,
	               |	СправочникНоменклатура.СтатусНоменклатуры КАК СтатусНоменклатуры,
	               |	СправочникНоменклатура.Код КАК Код,
	               |	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
				   |	СправочникНоменклатура.Категория КАК Категория,
	               |	ЕСТЬNULL(рарусИмуществоНаСудахОстатки.КоличествоОстаток, 0) КАК ОстатокНаСкладе
	               |ПОМЕСТИТЬ СписокНом
	               |ИЗ
	               |	Справочник.Номенклатура КАК СправочникНоменклатура
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.рарусИмуществоНаСудах.Остатки(
	               |				,
	               |				Склад = &СкладСудна
				   // ++ rarus makole 2021-10-04 [РАIT-0023495]
				   // Доработка отдельных механизмов по учёту и списанию ТМЦ на судах 
				   //|					И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование))) КАК рарусИмуществоНаСудахОстатки
				   |					И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ))) КАК рарусИмуществоНаСудахОстатки
				   // -- rarus makole 2021-10-04 [РАIT-0023495]
	               |		ПО рарусИмуществоНаСудахОстатки.Номенклатура = СправочникНоменклатура.Ссылка
	               |ГДЕ
	               |	СправочникНоменклатура.ЭтоГруппа = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА &ТолькоСОстатками = ИСТИНА
	               |				ТОГДА ЕСТЬNULL(рарусИмуществоНаСудахОстатки.КоличествоОстаток, 0) > 0
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокНом.Артикул КАК Артикул,
	               |	СписокНом.Номенклатура КАК Номенклатура,
	               |	СписокНом.Родитель КАК Родитель,
	               |	СписокНом.ПометкаУдаления КАК ПометкаУдаления,
	               |	СписокНом.ВидНоменклатуры КАК ВидНоменклатуры,
	               |	СписокНом.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	СписокНом.НаименованиеНаАнглийском КАК НаименованиеНаАнглийском,
	               |	СписокНом.КодMDG КАК КодMDG,
	               |	СписокНом.СтатусНоменклатуры КАК СтатусНоменклатуры,
	               |	СписокНом.Код КАК Код,
	               |	СписокНом.ТипНоменклатуры КАК ТипНоменклатуры,
				   |	СписокНом.Категория КАК Категория,
	               |	СписокНом.ОстатокНаСкладе КАК ОстатокНаСкладе
	               |ИЗ
	               |	СписокНом КАК СписокНом";
	
	 СписокНоменклатура.ТекстЗапроса = ТекстЗапроса;
	 СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("СкладСудна", рарусОбщегоНазначенияСервер.СкладСудна(Судно));
	 СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ТолькоСОстатками", ТолькоСОстатками);
	 
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыСпискаНоменклатуры()
	 СписокНоменклатура.Параметры.УстановитьЗначениеПараметра("ТолькоСОстатками", ТолькоСОстатками);
КонецПроцедуры
// -- rarus makole 2021-08-09 [РАIT-0023494]


//rarus_AfoD 31.08.2021 < 
&НаКлиенте
Процедура КатегорииПриАктивизацииСтроки(Элемент)
	
	Если ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Или Категория = ТекущиеДанные.Ссылка Тогда
		Возврат;
	КонецЕсли;
	
	Категория = ТекущиеДанные.Ссылка;

	Если Не ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
		
	ПодключитьОбработчикОжидания("КатегорииПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);

КонецПроцедуры 

&НаКлиенте
Процедура КатегорииПриАктивизацииСтрокиОбработчикОжидания()
	
	ТекущиеДанные = Элементы.Категории.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		КатегорияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура КатегорияПриИзмененииНаСервере()
	
	Если Категория = КатегорияДоИзменения Тогда
		Возврат;
	КонецЕсли;

	КатегорияДоИзменения = Категория;
	
	// Сброс отбора
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокНоменклатура, "Категория", Категория, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПокатегории", Ложь);
		
	//ЗаполнитьДеревоОтборовНоменклатуры();
	
	впОбщиеПроцедурыДокументовТОИР.УстановитьОтборКатегории(ЭтаФорма);
	
КонецПроцедуры 
//rarus_AfoD 31.08.2021 > 

#КонецОбласти