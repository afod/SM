#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = Обработки.рарусЖурналСообщенийСУБ.КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек                = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	//ИспользуемыеТипыДокументов = Новый Массив;
	//ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.vftАнализСУБ"));
	//ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.vftСообщениеОПотенциальномИнциденте"));
	//ИспользуемыеТипыДокументов.Добавить(Тип("СправочникСсылка.vftДокладыОНесоответствии"));
	//ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка.vftДокладОСостоянииБезопасности"));

	//// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	//ПараметрыРазмещения.Источники = Новый ОписаниеТипов(ИспользуемыеТипыДокументов);
	//ПараметрыРазмещения.КоманднаяПанель = Элементы.СписокКоманднаяПанель;
	//ПараметрыРазмещения.ПрефиксГрупп = "Список";	
	//ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект,ПараметрыРазмещения);
	//// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
			
	УстановитьОтборыДинамическогоСписка();
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
			
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьЖурналДокументов" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборПоСтатусамПриИзменении(Элемент)
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидДокументаПриИзменении(Элемент)
	
	ПриИзмененииОтбора();

КонецПроцедуры

&НаКлиенте
Процедура ГруппыСудовПриИзменении(Элемент)
	
	рарусСУБКлиент.УстановитьПараметрГруппаСудов(Список, ГруппыСудов);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборГруппыСудовОчистка(Элемент, СтандартнаяОбработка)
	
	рарусСУБКлиент.УстановитьПараметрГруппаСудов(Список, ГруппыСудов);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ДокументыСУБ";
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Список

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСоздатьСообщение(Команда)
	
	ИмяДокумента ="vftСообщениеОПотенциальномИнциденте";
	СоздатьДокумент(ИмяДокумента);

КонецПроцедуры

&НаКлиенте
Процедура СписокСоздатьАнализСУБ(Команда)
	
	ИмяДокумента ="vftАнализСУБ";
	СоздатьДокумент(ИмяДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСоздатьДокладОСостоянииБезопасности(Команда)
	
	ИмяДокумента ="vftДокладОСостоянииБезопасности";
	СоздатьДокумент(ИмяДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокСоздатьДокладОНесоответствии(Команда)
	
	ЗначенияЗаполнения ="";
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.vftДокладыОНесоответствии.Форма.ФормаЭлементаСУБ");

КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьСнятьПометкуУдаления(Команда)
	
	ОбщегоНазначенияУТКлиент.УстановитьПометкуУдаленияДокумента(Элементы.Список, Заголовок);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	//СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

&НаКлиенте
Процедура СообщениеОПотенциальномИнцидентеWord(Команда)
	
	МассивТД = vftОбщиеПроцедурыДокументовСервер.ПолучитьТабличныеДокументыДокладОНесоответвтии(ПолучитьМассивВыделенныхДокументовСписка());
	
	vftОбщиеПроцедурыДокументовКлиент.СохранитьТабличныеДокументыВDOCX(МассивТД,"Документ.VftСообщениеОПотенциальномИнциденте.ПФ_DOC_СообщениеОПотенциальномИнциденте");

КонецПроцедуры

&НаКлиенте
Процедура СообщениеОПотенциальномИнцидентe(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.VftСообщениеОПотенциальномИнциденте", "СообщениеОПотенциальномИнциденте", 
			ПолучитьМассивВыделенныхДокументовСписка(), ЭтаФорма);
	

КонецПроцедуры

&НаКлиенте
Процедура АнализСУБ(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.vftАнализСУБ", "АнализСУБ", 
			ПолучитьМассивВыделенныхДокументовСписка(), ЭтаФорма);
	   
КонецПроцедуры

&НаКлиенте
Процедура АнализСУБWord(Команда)
	
	МассивТД = vftОбщиеПроцедурыДокументовСервер.ПолучитьТабличныеДокументыАнализСУБ(ПолучитьМассивВыделенныхДокументовСписка());
	
	vftОбщиеПроцедурыДокументовКлиент.СохранитьТабличныеДокументыВDOCX(МассивТД,"Документ.vftАнализСУБ.ПФ_DOC_АнализСУБ",1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокладОСостоянииБезопасностиWord(Команда)
	
	МассивТД = vftОбщиеПроцедурыДокументовСервер.ПолучитьТабличныеДокладОСостоянииБезопасности(ПолучитьМассивВыделенныхДокументовСписка());
	
	vftОбщиеПроцедурыДокументовКлиент.СохранитьТабличныеДокументыВDOCX(МассивТД,"Документ.vftДокладОСостоянииБезопасности.ПФ_DOC_ДокладОСостоянииБезопасности");

КонецПроцедуры

&НаКлиенте
Процедура ДокладОСостоянииБезопасности(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.vftДокладОСостоянииБезопасности", "ДокладОСостоянииБезопасности", 
				ПолучитьМассивВыделенныхДокументовСписка(), ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДокладОНесоответствии(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.vftДокладыОНесоответствии", "ДокладОНесоответствииСУБ", 
				ПолучитьМассивВыделенныхДокументовСписка(), ЭтаФорма);

КонецПроцедуры
			
&НаКлиенте
Процедура РешениеПоДокладу(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.vftДокладыОНесоответствии", "РешениеПоДокладуСУБ", 
	                 ПолучитьМассивВыделенныхДокументовСписка(), ЭтаФорма);
		
КонецПроцедуры
			
&НаКлиенте
Процедура ДонесениеОбУстранении(Команда)
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Справочник.vftДокладыОНесоответствии", "ДонесениеОбУстраненииНесоответствия", 
	                 ПолучитьМассивВыделенныхДокументовСписка(), ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокладОНесоответствииWord(Команда)
	
	ОписаниеКоманды = Новый Структура; 
	ОписаниеКоманды.Вставить("Идентификатор", "ДокладОНесоответствииСУБMicrosoftWord");
	
	ОбъектыПечати  = ПолучитьМассивВыделенныхДокументовСписка();
		
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	рарусСУБКлиент.ПечатьДокладаОНесоответствииСУБWord(ОписаниеКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеПоДокладуСУБWord(Команда) 
	
	ОписаниеКоманды = Новый Структура; 
	ОписаниеКоманды.Вставить("Идентификатор", "РешениеПоДокладуСУБMicrosoftWord");
	
	ОбъектыПечати  = ПолучитьМассивВыделенныхДокументовСписка();
		
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	рарусСУБКлиент.ПечатьДокладаОНесоответствииСУБWord(ОписаниеКоманды);
	
КонецПроцедуры

&НаКлиенте
Процедура ДонесениеОбУстраненииWord(Команда)
	
	ОписаниеКоманды = Новый Структура; 
	ОписаниеКоманды.Вставить("Идентификатор", "ДонесениеОбУстраненииСУБMicrosoftWord");
	
	ОбъектыПечати  = ПолучитьМассивВыделенныхДокументовСписка();
	
	ОписаниеКоманды.Вставить("ОбъектыПечати", ОбъектыПечати);
	
	рарусСУБКлиент.ПечатьДокладаОНесоответствииСУБWord(ОписаниеКоманды);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура СоздатьДокумент(ИмяДокумента)
	
	ЗначенияЗаполнения ="";
	СтруктураПараметров = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Документ." + ИмяДокумента + ".ФормаОбъекта", СтруктураПараметров);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.рарусЖурналСообщенийСУБ.Форма.ФормаСписка", КлючНазначенияИспользования);

	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		СписокИнтервал = Настройки.СписокИнтервал;                    
		ОтборОрганизация = Настройки.Статус;
		ОтборВидДокумента = Настройки.ВидДокумента;
		ОтборГруппыСудов = Настройки.ГруппыСудов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()
			
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Статус",
		Статус,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(Статус));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ВидДокумента",
		ВидДокумента,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ВидДокумента));
				
	 			
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	рарусСУБСервер.УстановитьУсловноеОформление(ЭтаФорма);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "СписокДата");
		
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"СписокИнтервал,
		|ВидДокумента,
		|ГруппыСудов,
		|Статус";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.рарусЖурналСообщенийСУБ.Форма.ФормаСписка", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивВыделенныхДокументовСписка()
	
	МассивДокументов = Новый массив;	
	ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
	
	Для каждого ЭлементСписка Из ВыделенныеСтроки Цикл
		
		МассивДокументов.Добавить(Элементы.Список.ДанныеСтроки(ЭлементСписка).Ссылка);
		
	КонецЦикла;

	Возврат МассивДокументов;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьЭлемент(Список) Экспорт
	
	ТекущиеДанные = Список.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Ссылка) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


