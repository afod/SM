//Обработчики формы//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьВидимость();
	
	СохраненныйОтбор = Новый Структура("ВидПрихода,НомерЗаявки,Отправитель,НомерРаспоряжения,ДатаРаспоряжения");
	ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
	
	НайтиРаспоряженияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Если СтруктураПараметров <> Неопределено Тогда
		Результат = ОприходоватьНаСервере(СтруктураПараметров);
		Если Результат.Отказ Тогда
			ПоказатьПредупреждение(, Результат.ТекстОшибки ,,Результат.ЗаголовокОшибки);
		Иначе
			ПодключитьОбработчикОжидания("НайтиРаспоряженияОжидание", 1, Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	Если НЕ ЗначениеЗаполнено(ОсновноеСудно) Тогда
		ТекстСообщения = "Не указано основное судно(справочник <Суда>)";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	ПраваяПанельОтключена = Истина;
	// ++ rarus yukuzi 23.12.2020   // Снабжение ТОИР 2 Приоритет
	ПараметрыФО = Новый Структура;
	ПараметрыФО.Вставить("Судно", ОсновноеСудно);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

	// -- rarus yukuzi 23.12.2020
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеОтбора(Элемент)
	
	Если ЗагружаемаяНоменклатура.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ИзменениеОтбораЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Выбранные строки будут очищены", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да, "По выбранному отбору уже выбраны строки");
	Иначе
		ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
		НайтиРаспоряженияНаСервере();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ИзменениеОтбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
		НайтиРаспоряженияНаСервере();
	Иначе
		ВосстановитьОтбор();
	КонецЕсли;		
		
КонецПроцедуры
&НаКлиенте
Процедура ВосстановитьОтбор()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныйОтбор, "НомерЗаявки,НомерРаспоряжения,ДатаРаспоряжения,ВидПрихода");
	ДоступныеТипы = Новый Массив;
	Если ВидПрихода = "" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	ИначеЕсли ВидПрихода = "ОтКонтрагента" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ИначеЕсли ВидПрихода = "СоСклада" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	КонецЕсли;
	ОписаниеТипов = Новый ОписаниеТипов(ДоступныеТипы);
	Элементы.Отправитель.ОграничениеТипа = ОписаниеТипов;

	Отправитель = СохраненныйОтбор.Отправитель;
	
КонецПроцедуры
	


//Команды
&НаКлиенте
Процедура НайтиРаспоряжения(Команда)
	НайтиРаспоряженияНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура НайтиРаспоряженияОжидание()
	НайтиРаспоряженияНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура Оприходовать(Команда)
	
	Если ЕстьВыбранныеСтрокиРаспоряжений() Тогда
		Если ОприходованиеПоЗаказу(ЗагружаемаяНоменклатура[0].Распоряжение) Тогда
			Оповещение = Новый ОписаниеОповещения("ОприходоватьЗавершение", ЭтотОбъект);
			ПараметрыФормы = Новый Структура("UID", УникальныйИдентификатор);
			ИмяФормыОформления = Лев(ИмяФормы, СтрДлина(ИмяФормы)-5) + "ФормаДополнительныхДанных";
			ОткрытьФорму(ИмяФормыОформления, ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			// ++ rarus PleA 05.04.2021 [номерзадачи]
			//СтруктураПараметров = Новый Структура();
			//СтруктураПараметров.Вставить("ДатаВходящегоДокумента", "");
			//СтруктураПараметров.Вставить("НомерВходящегоДокумента", "");
			//СтруктураПараметров.Вставить("Комментарий", "");
			//СтруктураПараметров.Вставить("СведенияОФайлах", Новый Массив);
			//СтруктураПараметров.Вставить("ЕстьПриложенныеФайлы", Ложь);
			//ОприходоватьНаСервере(СтруктураПараметров);
			//
			//ПодключитьОбработчикОжидания("НайтиРаспоряженияОжидание", 1, Истина);
			
			Оповещение = Новый ОписаниеОповещения("ОприходоватьЗавершение", ЭтотОбъект);
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("UID", УникальныйИдентификатор);
			ПараметрыФормы.Вставить("ВидПриходаПеремещение", Истина);
			
			ИмяФормыОформления = Лев(ИмяФормы, СтрДлина(ИмяФормы)-5) + "ФормаДополнительныхДанных";
			ОткрытьФорму(ИмяФормыОформления, ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
			// -- rarus PleA
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, "Отсутствуют выбранные строки" ,,"Ошибка");
	КонецЕсли;

КонецПроцедуры

//Обработчики элементов формы//
&НаКлиенте
Процедура ВидПриходаПриИзменении(Элемент)
	
	ДоступныеТипы = Новый Массив;
	Если ВидПрихода = "" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	ИначеЕсли ВидПрихода = "ОтКонтрагента" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ИначеЕсли ВидПрихода = "СоСклада" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	КонецЕсли;
	ОписаниеТипов = Новый ОписаниеТипов(ДоступныеТипы);
	Элементы.Отправитель.ОграничениеТипа = ОписаниеТипов;
	Отправитель = ОписаниеТипов.ПривестиЗначение(Отправитель);
	
	ИзменениеОтбора(Элемент);
	
КонецПроцедуры
&НаКлиенте
Процедура ТаблицаРаспоряженийВыбраноПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаРаспоряжений.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Выбрано", ТекущаяСтрока.Выбрано);
	СтруктураПараметров.Вставить("Заявка", ТекущаяСтрока.Заявка);
	СтруктураПараметров.Вставить("Отправитель", ТекущаяСтрока.Отправитель);
	СтруктураПараметров.Вставить("Распоряжение", ТекущаяСтрока.Распоряжение);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	
	Если СтруктураПараметров.Выбрано Тогда
		ДобавитьДанныеРаспоряженияВПоступление(СтруктураПараметров);
	Иначе
		УдалитьДанныеРаспоряженияИзПоступления(СтруктураПараметров);
	КонецЕсли;
	
	Если СтруктураПараметров.Отказ Тогда
		ПоказатьПредупреждение(, "Документ прихода можно оформить только по одному распоряжению" ,,"Ошибка");
		ТекущаяСтрока.Выбрано = Не ТекущаяСтрока.Выбрано;
	КонецЕсли;
	
	ИзменитьВидимость();
		
КонецПроцедуры
&НаКлиенте
Процедура ИзменитьВидимость()
	
	ВыбранныхСтрок = ЗагружаемаяНоменклатура.Количество();
	Элементы.ГруппаТоварыКПоступлению.Видимость = ВыбранныхСтрок > 0;
	Элементы.ТаблицаРаспоряженийОформитьПриход.Видимость = ВыбранныхСтрок > 0;
	Элементы.НадписьПодобраноСтрок.Заголовок = "Подобрано строк: " + ВыбранныхСтрок;
	Если ВыбранныхСтрок = 0 Тогда
		Элементы.ГруппаТоварыКПоступлению.Заголовок = "Подбор строк поступления";
		ТаблицаДокументовПриемки.Очистить();
	Иначе
		Элементы.ГруппаТоварыКПоступлению.Заголовок = ?(РазрешеноИзменениеСоставаПоступления(ЗагружаемаяНоменклатура[0].Распоряжение), "Товары поступления по заказу (изменение состава разрешено)", "Товары поступления по заказу (изменение состава не разрешено)");
	КонецЕсли;
	
	Если ПраваяПанельОтключена Тогда
		Элементы.ГруппаДанныхПраво.Видимость = Ложь;
	Иначе
		Элементы.ГруппаДанныхПраво.Видимость = ПоказатьДокументыПриемкиТМЦ;
	КонецЕсли;
	
	// ++ rarus makole 2021-06-10 [РАIT-0023374]
	// Учёт номенклатуры разного качества 
	Элементы.ЗагружаемаяНоменклатураНоменклатураКачество.Видимость = рарусИмущественныйУчетВызовСервера.ИспользуетсяКачествоТоваров();
	// -- rarus makole 2021-06-10 [РАIT-0023374]
	
КонецПроцедуры
&НаКлиенте
Процедура ТаблицаРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРаспоряжений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Выбрано = НЕ ТекущиеДанные.Выбрано;
		ТаблицаРаспоряженийВыбраноПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагружаемаяНоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемаяНоменклатура.ТекущиеДанные;
	// ++ rarus yukuzi 22.03.2021    // 
	//Если ТекущиеДанные.Количество > ТекущиеДанные.КоличествоОстаток  Тогда
	Если ТекущиеДанные.Количество > ТекущиеДанные.КоличествоОстаток и не  ТекущиеДанные.ДопускаетсяТолеранс Тогда
	// -- rarus yukuzi 22.03.2021
	
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоОстаток;
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура НадписьДокументыПриемкиТМЦНажатие(Элемент)
	
	Если ПраваяПанельОтключена Тогда
		ОткрытьФорму("Документ.впПриходТМЦ.ФормаСписка");
	Иначе
		ПоказатьДокументыПриемкиТМЦ = НЕ ПоказатьДокументыПриемкиТМЦ;
		Элементы.НадписьДокументыПриемкиТМЦ.Заголовок = ?(ПоказатьДокументыПриемкиТМЦ, "Скрыть документы приемки ТМЦ", "Показать документы приемки ТМЦ");
		ЗагружаемаяНоменклатураПриАктивизацииСтроки(Элемент);
	
		ИзменитьВидимость();
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ЗагружаемаяНоменклатураПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемаяНоменклатура.ТекущиеДанные;
	Если ПоказатьДокументыПриемкиТМЦ Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаполнитьДокументыПриемкиТМЦ(ТекущиеДанные.Распоряжение, ТекущиеДанные.Заявка, ТекущиеДанные.Номенклатура);
		Иначе
			ТаблицаДокументовПриемки.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ЗагружаемаяНоменклатураКоличество.ТолькоПросмотр = ЗапрещеноРедактированиеКоличества(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ТаблицаДокументовПриемкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДокументовПриемки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ОткрытьФорму("Документ.впПриходТМЦ.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Документ));
	КонецЕсли;
	
КонецПроцедуры
&НаСервереБезКонтекста
Функция ЗапрещеноРедактированиеКоличества(Распоряжение)
	
	Возврат ТипЗнч(Распоряжение) = Тип("ДокументСсылка.впПеремещениеТоваров");
	
КонецФункции
&НаСервереБезКонтекста
Функция РазрешеноИзменениеСоставаПоступления(Распоряжение)
	
	Возврат ТипЗнч(Распоряжение) = Тип("ДокументСсылка.впЗаказПоставщику");
	
КонецФункции
&НаСервереБезКонтекста
Функция ОприходованиеПоЗаказу(ДокументРаспоряжение)
	
	Возврат ТипЗнч(ДокументРаспоряжение) = Тип("ДокументСсылка.впЗаказПоставщику");
	
КонецФункции

//Заполнение списка распоряжений//
&НаСервере
Процедура НайтиРаспоряженияНаСервере()
	
	ВыбиратьЗаказыПоставщику = ВидПрихода <> "СоСклада";
	ВыбиратьПеремещения = ВидПрихода <> "ОтКонтрагента";
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	впЗаказПоставщикуТМЦ.Заявка КАК Заявка,
	                      |	впЗаказПоставщикуТМЦ.Ссылка.Ссылка КАК Распоряжение,
	                      |	впЗаказПоставщикуТМЦ.Ссылка.Контрагент КАК Отправитель
	                      |ПОМЕСТИТЬ ВыбранныеРаспоряжения
	                      |ИЗ
	                      |	Документ.впЗаказПоставщику.ТМЦ КАК впЗаказПоставщикуТМЦ
	                      |ГДЕ
	                      |	&ВыбиратьЗаказыПоставщику
	                      |	И впЗаказПоставщикуТМЦ.Судно = &ОсновноеСудно
	                      |	И впЗаказПоставщикуТМЦ.Заявка.НомерСудовойЗаявки ПОДОБНО &НомерЗаявки
	                      |	И впЗаказПоставщикуТМЦ.Ссылка.Номер ПОДОБНО &НомерРаспоряжения
	                      |	И НАЧАЛОПЕРИОДА(впЗаказПоставщикуТМЦ.Ссылка.Дата, ДЕНЬ) = &ДатаРаспоряжения
	                      |	И впЗаказПоставщикуТМЦ.Ссылка.Контрагент = &Отправитель
	                      |	И впЗаказПоставщикуТМЦ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	впЗаказПоставщикуТМЦ.Заявка,
	                      |	впЗаказПоставщикуТМЦ.Ссылка.Ссылка,
	                      |	впЗаказПоставщикуТМЦ.Ссылка.Контрагент
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	впПеремещениеТоваровТМЦ.Заявка,
	                      |	впПеремещениеТоваровТМЦ.Ссылка,
	                      |	впПеремещениеТоваровТМЦ.Ссылка.СкладОтправитель
	                      |ИЗ
	                      |	Документ.впПеремещениеТоваров.ТМЦ КАК впПеремещениеТоваровТМЦ
	                      |ГДЕ
	                      |	&ВыбиратьПеремещения
	                      |	И впПеремещениеТоваровТМЦ.Ссылка.СкладПолучатель = &ОсновноеСудно
	                      |	И впПеремещениеТоваровТМЦ.Заявка.НомерСудовойЗаявки ПОДОБНО &НомерЗаявки
	                      |	И впПеремещениеТоваровТМЦ.Ссылка.Номер ПОДОБНО &НомерРаспоряжения
	                      |	И впПеремещениеТоваровТМЦ.Ссылка.Дата = &ДатаРаспоряжения
	                      |	И впПеремещениеТоваровТМЦ.Ссылка.СкладОтправитель = &Отправитель
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	впПеремещениеТоваровТМЦ.Заявка,
	                      |	впПеремещениеТоваровТМЦ.Ссылка,
	                      |	впПеремещениеТоваровТМЦ.Ссылка.СкладОтправитель
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ВыбранныеРаспоряжения.Заявка КАК Заявка,
	                      |	ВыбранныеРаспоряжения.Заявка.НомерСудовойЗаявки КАК НомерСудовойЗаявки,
	                      |	ВыбранныеРаспоряжения.Распоряжение КАК Распоряжение,
	                      |	ВыбранныеРаспоряжения.Отправитель КАК Отправитель,
	                      |	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) <> 0 КАК ЕстьНепринятое,
	                      |	ВыбранныеРаспоряжения.Распоряжение.Комментарий КАК КомментарийРаспоряжения
	                      |ИЗ
	                      |	ВыбранныеРаспоряжения КАК ВыбранныеРаспоряжения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению.Остатки(
	                      |				&Период,
	                      |				Судно = &ОсновноеСудно
	                      |					И Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК впТоварыКПоступлениюОстатки
	                      |		ПО ВыбранныеРаспоряжения.Заявка = впТоварыКПоступлениюОстатки.Заявка
	                      |			И ВыбранныеРаспоряжения.Распоряжение = впТоварыКПоступлениюОстатки.Распоряжение
	                      |ГДЕ
	                      |	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) > 0");
	Если Не ЗначениеЗаполнено(НомерЗаявки) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впЗаказПоставщикуТМЦ.Заявка.НомерСудовойЗаявки ПОДОБНО &НомерЗаявки", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впПеремещениеТоваровТМЦ.Заявка.НомерСудовойЗаявки ПОДОБНО &НомерЗаявки", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(НомерРаспоряжения) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впЗаказПоставщикуТМЦ.Ссылка.Номер ПОДОБНО &НомерРаспоряжения", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впПеремещениеТоваровТМЦ.Ссылка.Номер ПОДОБНО &НомерРаспоряжения", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаРаспоряжения) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НАЧАЛОПЕРИОДА(впЗаказПоставщикуТМЦ.Ссылка.Дата, ДЕНЬ) = &ДатаРаспоряжения", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впПеремещениеТоваровТМЦ.Ссылка.Дата = &ДатаРаспоряжения", "");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отправитель) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впЗаказПоставщикуТМЦ.Ссылка.Контрагент = &Отправитель", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И впПеремещениеТоваровТМЦ.Ссылка.СкладОтправитель = &Отправитель", "");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВыбиратьЗаказыПоставщику", ВыбиратьЗаказыПоставщику);
	Запрос.УстановитьПараметр("ВыбиратьПеремещения", ВыбиратьПеремещения);
	Запрос.УстановитьПараметр("НомерЗаявки", "%" + НомерЗаявки + "%");
	Запрос.УстановитьПараметр("НомерРаспоряжения", "%" + НомерРаспоряжения + "%");
	Запрос.УстановитьПараметр("ДатаРаспоряжения", НачалоДня(ДатаРаспоряжения));
	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);
	
	ТаблицаРаспоряжений.Очистить();
	ЗагружаемаяНоменклатура.Очистить();
	
	ВыбранныеРаспоряжения = ВыполнитьПоискПоСтрокеПоиска(Запрос.Выполнить().Выгрузить());
		
	Для Каждого СтрокаРаспоряжения Из ВыбранныеРаспоряжения Цикл
		Если СтрокаРаспоряжения.ЕстьНепринятое Или ПоказыватьОформленные Тогда
			Строка = ТаблицаРаспоряжений.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаРаспоряжения);
			Строка.ВидПрихода = ?(ТипЗнч(СтрокаРаспоряжения.Распоряжение) = Тип("ДокументСсылка.впЗаказПоставщику"), "От контрагента", "Со склада");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Заполнение ТЧ номенклатуры для поступления//
&НаСервере
Процедура ДобавитьДанныеРаспоряженияВПоступление(СтруктураПараметров)
	
	Если РазрешеноДобавлениеРаспоряженияВЗагружаемуюНоменклатуру(СтруктураПараметров.Распоряжение) Тогда
		ДанныеРаспоряженияПоОтбору = ДанныеРаспоряженияПоОтбору(СтруктураПараметров, ОсновноеСудно);
		Пока ДанныеРаспоряженияПоОтбору.Следующий() Цикл
			Если ДанныеРаспоряженияПоОтбору.КоличествоОстаток > 0 ИЛИ ПоказыватьОформленные Тогда
				Строка = ЗагружаемаяНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, ДанныеРаспоряженияПоОтбору);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтруктураПараметров.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Процедура УдалитьДанныеРаспоряженияИзПоступления(СтруктураПараметров)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Отбор = Новый Структура("Заявка,Распоряжение", СтруктураПараметров.Заявка, СтруктураПараметров.Распоряжение);
	Для Каждого Строка Из ЗагружаемаяНоменклатура.НайтиСтроки(Отбор) Цикл
		МассивУдаляемыхСтрок.Добавить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ЗагружаемаяНоменклатура.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Функция РазрешеноДобавлениеРаспоряженияВЗагружаемуюНоменклатуру(Распоряжение)
	
	РазрешеноДобавлениеРаспоряжения = Ложь;
	Таблица = ЗагружаемаяНоменклатура.Выгрузить(,"Распоряжение");
	Таблица.Свернуть("Распоряжение");
	ВыгружаемыеРаспоряжения = Таблица.ВыгрузитьКолонку("Распоряжение");
	Если ВыгружаемыеРаспоряжения.Количество() = 0 Тогда
		РазрешеноДобавлениеРаспоряжения = Истина;
	ИначеЕсли ВыгружаемыеРаспоряжения.Количество() = 1 И ВыгружаемыеРаспоряжения[0] = Распоряжение Тогда
		РазрешеноДобавлениеРаспоряжения = Истина;
	КонецЕсли;
	
	Возврат РазрешеноДобавлениеРаспоряжения;
	
КонецФункции
&НаСервереБезКонтекста
Функция ДанныеРаспоряженияПоОтбору(СтруктураПараметров, ОсновноеСудно)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	впЗаказПоставщикуТМЦ.Ссылка КАК Распоряжение,
	                      |	впЗаказПоставщикуТМЦ.Номенклатура КАК Номенклатура,
	                      |	впЗаказПоставщикуТМЦ.Заявка КАК Заявка,
	                      |	СУММА(впЗаказПоставщикуТМЦ.Количество) КАК Количество,
	                      |	впЗаказПоставщикуТМЦ.КодСтроки КАК КодСтроки
	                      |ПОМЕСТИТЬ ДанныеРаспоряжения
	                      |ИЗ
	                      |	Документ.впЗаказПоставщику.ТМЦ КАК впЗаказПоставщикуТМЦ
	                      |ГДЕ
	                      |	впЗаказПоставщикуТМЦ.Заявка = &Заявка
	                      |	И впЗаказПоставщикуТМЦ.Ссылка = &Распоряжение
	                      |	И впЗаказПоставщикуТМЦ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	                      |	И впЗаказПоставщикуТМЦ.Судно = &ОсновноеСудно
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	впЗаказПоставщикуТМЦ.Ссылка,
	                      |	впЗаказПоставщикуТМЦ.Заявка,
	                      |	впЗаказПоставщикуТМЦ.Номенклатура,
	                      |	впЗаказПоставщикуТМЦ.КодСтроки
	                      |
	                      |ОБЪЕДИНИТЬ ВСЕ
	                      |
	                      |ВЫБРАТЬ
	                      |	впПеремещениеТоваровТМЦ.Ссылка,
	                      |	впПеремещениеТоваровТМЦ.Номенклатура,
	                      |	впПеремещениеТоваровТМЦ.Заявка,
	                      |	СУММА(впПеремещениеТоваровТМЦ.Количество),
	                      |	впПеремещениеТоваровТМЦ.КодСтроки
	                      |ИЗ
	                      |	Документ.впПеремещениеТоваров.ТМЦ КАК впПеремещениеТоваровТМЦ
	                      |ГДЕ
	                      |	впПеремещениеТоваровТМЦ.Заявка = &Заявка
	                      |	И впПеремещениеТоваровТМЦ.Ссылка = &Распоряжение
	                      |	И впПеремещениеТоваровТМЦ.Ссылка.СкладПолучатель = &ОсновноеСудно
	                      |
	                      |СГРУППИРОВАТЬ ПО
	                      |	впПеремещениеТоваровТМЦ.Номенклатура,
	                      |	впПеремещениеТоваровТМЦ.Заявка,
	                      |	впПеремещениеТоваровТМЦ.Ссылка,
	                      |	впПеремещениеТоваровТМЦ.КодСтроки
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ
	                      |	ДанныеРаспоряжения.Распоряжение КАК Распоряжение,
	                      |	ДанныеРаспоряжения.Номенклатура КАК Номенклатура,
	                      |	ДанныеРаспоряжения.КодСтроки КАК КодСтроки,
	                      |	ДанныеРаспоряжения.Номенклатура.рспбКодMDG КАК НоменклатураКодMDG,
	                      |	ДанныеРаспоряжения.Заявка КАК Заявка,
	                      |	ДанныеРаспоряжения.Количество КАК КоличествоРаспоряжение,
	                      |	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	                      |	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) КАК Количество
	                      |ИЗ
	                      |	ДанныеРаспоряжения КАК ДанныеРаспоряжения
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению.Остатки(
	                      |				&Период,
	                      |				Заявка = &Заявка
	                      |					И Распоряжение = &Распоряжение
	                      |					И Судно = &ОсновноеСудно) КАК впТоварыКПоступлениюОстатки
	                      |		ПО ДанныеРаспоряжения.Распоряжение = впТоварыКПоступлениюОстатки.Распоряжение
	                      |			И ДанныеРаспоряжения.Заявка = впТоварыКПоступлениюОстатки.Заявка
	                      |			И ДанныеРаспоряжения.Номенклатура = впТоварыКПоступлениюОстатки.Номенклатура
	                      |			И ДанныеРаспоряжения.КодСтроки = впТоварыКПоступлениюОстатки.КодСтроки");
	Запрос.УстановитьПараметр("Заявка", СтруктураПараметров.Заявка);
	Запрос.УстановитьПараметр("Распоряжение", СтруктураПараметров.Распоряжение);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);
	
	//// ++ rarus yukuzi 23.12.2020   // Снабжение ТОИР 2 Приоритет
	//Если ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалТОИРСнабжение2Приоритет") тогда
	//	Запрос.Текст=ПолучитьТекстЗапросаСАналогами();
	//КонецЕсли;
	//// -- rarus yukuzi 23.12.2020
	// ++ rarus yukuzi 21.01.2021   // Снабжение ТОИР 2 Приоритет
	Если ПолучитьФункциональнуюОпцию("рарусИспользоватьСудовоеСнабжение") тогда
		Запрос.Текст=ПолучитьТекстЗапросаСАналогами();
	КонецЕсли;
	// -- rarus yukuzi 21.01.2021
	

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции
// ++ rarus yukuzi 23.12.2020   // Снабжение ТОИР 2 Приоритет
&НаСервереБезКонтекста
Функция ПолучитьТекстЗапросаСАналогами()
	// ++ rarus yukuzi 22.03.2021    // 
	Текст=	"ВЫБРАТЬ
	      	|	впЗаказПоставщикуТМЦ.Ссылка КАК Распоряжение,
	      	|	впЗаказПоставщикуТМЦ.Номенклатура КАК Номенклатура,
	      	|	впЗаказПоставщикуТМЦ.Заявка КАК Заявка,
	      	|	СУММА(впЗаказПоставщикуТМЦ.Количество) КАК Количество,
	      	|	впЗаказПоставщикуТМЦ.КодСтроки КАК КодСтроки,
	      	|	впЗаказПоставщикуТМЦ.Ссылка.рарусДопускаетсяТолеранс КАК рарусДопускаетсяТолеранс,
	      	|	впЗаказПоставщикуТМЦ.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения,
	      	|	впЗаказПоставщикуТМЦ.Упаковка КАК Упаковка
	      	|ПОМЕСТИТЬ ДанныеРаспоряжения
	      	|ИЗ
	      	|	Документ.впЗаказПоставщику.ТМЦ КАК впЗаказПоставщикуТМЦ
	      	|ГДЕ
	      	|	впЗаказПоставщикуТМЦ.Заявка = &Заявка
	      	|	И впЗаказПоставщикуТМЦ.Ссылка = &Распоряжение
	      	|	И впЗаказПоставщикуТМЦ.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	      	|	И впЗаказПоставщикуТМЦ.Судно = &ОсновноеСудно
	      	|
	      	|СГРУППИРОВАТЬ ПО
	      	|	впЗаказПоставщикуТМЦ.Ссылка,
	      	|	впЗаказПоставщикуТМЦ.Заявка,
	      	|	впЗаказПоставщикуТМЦ.Номенклатура,
	      	|	впЗаказПоставщикуТМЦ.КодСтроки,
	      	|	впЗаказПоставщикуТМЦ.Ссылка.рарусДопускаетсяТолеранс,
	      	|	впЗаказПоставщикуТМЦ.Номенклатура.ЕдиницаИзмерения,
	      	|	впЗаказПоставщикуТМЦ.Упаковка
	      	|
	      	|ОБЪЕДИНИТЬ ВСЕ
	      	|
	      	|ВЫБРАТЬ
	      	|	впПеремещениеТоваровТМЦ.Ссылка,
	      	|	впПеремещениеТоваровТМЦ.Номенклатура,
	      	|	впПеремещениеТоваровТМЦ.Заявка,
	      	|	СУММА(впПеремещениеТоваровТМЦ.Количество),
	      	|	впПеремещениеТоваровТМЦ.КодСтроки,
	      	|	ЛОЖЬ,
	      	|	впПеремещениеТоваровТМЦ.Номенклатура.ЕдиницаИзмерения,
	      	|	NULL
	      	|ИЗ
	      	|	Документ.впПеремещениеТоваров.ТМЦ КАК впПеремещениеТоваровТМЦ
	      	|ГДЕ
	      	|	впПеремещениеТоваровТМЦ.Заявка = &Заявка
	      	|	И впПеремещениеТоваровТМЦ.Ссылка = &Распоряжение
	      	|	И впПеремещениеТоваровТМЦ.Ссылка.СкладПолучатель = &ОсновноеСудно
	      	|
	      	|СГРУППИРОВАТЬ ПО
	      	|	впПеремещениеТоваровТМЦ.Номенклатура,
	      	|	впПеремещениеТоваровТМЦ.Заявка,
	      	|	впПеремещениеТоваровТМЦ.Ссылка,
	      	|	впПеремещениеТоваровТМЦ.КодСтроки,
	      	|	впПеремещениеТоваровТМЦ.Номенклатура.ЕдиницаИзмерения
	      	|
	      	|ИНДЕКСИРОВАТЬ ПО
	      	|	Заявка,
	      	|	Номенклатура,
	      	|	Распоряжение,
	      	|	КодСтроки
	      	|;
	      	|
	      	|////////////////////////////////////////////////////////////////////////////////
	      	|ВЫБРАТЬ
	      	|	ДанныеРаспоряжения.Заявка КАК Заявка,
	      	|	ДанныеРаспоряжения.Номенклатура КАК Номенклатура,
	      	|	МАКСИМУМ(впЗаявкаНаСнабжениеМатериалыИРаботы.Аналог) КАК Аналог,
	      	|	МАКСИМУМ(впЗаявкаНаСнабжениеМатериалыИРаботы.НоменклатураПоставщика) КАК НоменклатураПоставщика
	      	|ПОМЕСТИТЬ втНоменклатураИАналог
	      	|ИЗ
	      	|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК впЗаявкаНаСнабжениеМатериалыИРаботы
	      	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеРаспоряжения КАК ДанныеРаспоряжения
	      	|		ПО впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка = ДанныеРаспоряжения.Заявка
	      	|			И впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура = ДанныеРаспоряжения.Номенклатура
	      	|
	      	|СГРУППИРОВАТЬ ПО
	      	|	ДанныеРаспоряжения.Заявка,
	      	|	ДанныеРаспоряжения.Номенклатура
	      	|
	      	|ИНДЕКСИРОВАТЬ ПО
	      	|	Заявка,
	      	|	Номенклатура
	      	|;
	      	|
	      	|////////////////////////////////////////////////////////////////////////////////
	      	|ВЫБРАТЬ
	      	|	ДанныеРаспоряжения.Распоряжение КАК Распоряжение,
	      	|	ДанныеРаспоряжения.Номенклатура КАК Номенклатура,
	      	|	ДанныеРаспоряжения.КодСтроки КАК КодСтроки,
	      	|	ДанныеРаспоряжения.Номенклатура.рспбКодMDG КАК НоменклатураКодMDG,
	      	|	ДанныеРаспоряжения.Заявка КАК Заявка,
	      	|	ДанныеРаспоряжения.Количество КАК КоличествоРаспоряжение,
	      	|	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	      	|	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) КАК Количество,
	      	|	ЕСТЬNULL(втНоменклатураИАналог.Аналог, ЛОЖЬ) КАК Аналог,
	      	|	ЕСТЬNULL(втНоменклатураИАналог.НоменклатураПоставщика, ЗНАЧЕНИЕ(Справочник.рарусНоменклатураПоставщиков.ПустаяСсылка)) КАК НоменклатураПоставщика,
	      	|	ДанныеРаспоряжения.рарусДопускаетсяТолеранс КАК ДопускаетсяТолеранс,
	      	|	ДанныеРаспоряжения.НоменклатураЕдиницаИзмерения КАК ЕдиницаИзмерения,
	      	|	ДанныеРаспоряжения.Упаковка КАК Упаковка
	      	|ИЗ
	      	|	ДанныеРаспоряжения КАК ДанныеРаспоряжения
	      	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению.Остатки(
	      	|				&Период,
	      	|				Заявка = &Заявка
	      	|					И Распоряжение = &Распоряжение
	      	|					И Судно = &ОсновноеСудно) КАК впТоварыКПоступлениюОстатки
	      	|		ПО ДанныеРаспоряжения.Распоряжение = впТоварыКПоступлениюОстатки.Распоряжение
	      	|			И ДанныеРаспоряжения.Заявка = впТоварыКПоступлениюОстатки.Заявка
	      	|			И ДанныеРаспоряжения.Номенклатура = впТоварыКПоступлениюОстатки.Номенклатура
	      	|			И ДанныеРаспоряжения.КодСтроки = впТоварыКПоступлениюОстатки.КодСтроки
	      	|		ЛЕВОЕ СОЕДИНЕНИЕ втНоменклатураИАналог КАК втНоменклатураИАналог
	      	|		ПО ДанныеРаспоряжения.Заявка = втНоменклатураИАналог.Заявка
	      	|			И ДанныеРаспоряжения.Номенклатура = втНоменклатураИАналог.Номенклатура";
	// -- rarus yukuzi 22.03.2021
	

Возврат Текст;

КонецФункции 
// -- rarus yukuzi 23.12.2020

//Формирование документа ПоступлениеТМЦ//
&НаСервере
Функция ОприходоватьНаСервере(СтруктураПараметров)
	
	РезультатОбработки = Новый Структура("Отказ,ТекстОшибки,ЗаголовокОшибки", Ложь, "", "");
	
	//Формирование документа поступления//
	ДокументПоступления = Документы.впПриходТМЦ.СоздатьДокумент();
	ДокументПоступления.ДатаВходящегоДокумента = СтруктураПараметров.ДатаВходящегоДокумента;
	ДокументПоступления.НомерВходящегоДокумента = СтруктураПараметров.НомерВходящегоДокумента;
	ДокументПоступления.Комментарий = СтруктураПараметров.Комментарий;
	ДокументПоступления.Распоряжение = ЗагружаемаяНоменклатура[0].Распоряжение;
	ДокументПоступления.Заполнить(Неопределено);
	Для Каждого Строка Из ЗагружаемаяНоменклатура Цикл
		Если Строка.Количество > 0 Тогда
			СтрокаТЧ = ДокументПоступления.ТМЦ.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
		КонецЕсли;
	КонецЦикла;
	
	// ++ rarus makole 2021-06-15 [РАIT-0023374]
	// Учёт номенклатуры разного качества 
	Если ЕстьНеНоваяНоменклатура(ДокументПоступления.Распоряжение) Тогда
		ДокументПоступления.ОприходованиеБывшегоВУпотреблении = Истина;
		ДокументПоступления.ВидОперации = Перечисления.рарусВидыОперацийПриходаТМЦ.ОприходованиеИзлишков;
	КонецЕсли;
	// -- rarus makole 2021-06-15 [РАIT-0023374]
	
	Попытка
		ДокументПоступления.Записать(РежимЗаписиДокумента.Проведение);
		// ++ rarus makole 2021-04-22 [Задача № 28687]
		// По списаниям ТМЦ, автоматически создаваемым в класс. ТОИР автоматически включать отправку 
		// на берег при создании и проведении. Для прихода сделал аналогично
		рарусИмущественныйУчетВызовСервера.УстановитьСтатусЗарегистрированоКОтправке(ДокументПоступления.Ссылка);
		// -- rarus makole 2021-04-22 [Задача № 28687]
	Исключение
		РезультатОбработки.Отказ = Истина;
		РезультатОбработки.ТекстОшибки = ОписаниеОшибки();
		РезультатОбработки.ЗаголовокОшибки = "Не удалось записать документ";
	КонецПопытки;
	
	//Создание файла//
	Если СтруктураПараметров.ЕстьПриложенныеФайлы Тогда
		Если Не РезультатОбработки.Отказ Тогда
			Для Каждого ПриложенныйФайл Из СтруктураПараметров.СведенияОФайлах Цикл
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.АвторизованныйПользователь);
				ПараметрыФайла.Вставить("ВладелецФайлов", ДокументПоступления.Ссылка);
				ПараметрыФайла.Вставить("ИмяБезРасширения", ПриложенныйФайл.СведенияОФайле.ИмяБезРасширения);
				ПараметрыФайла.Вставить("РасширениеБезТочки", ПриложенныйФайл.СведенияОФайле.РасширениеБезТочки);
				ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
				ПараметрыФайла.Вставить("ГруппаФайлов", Неопределено);
				ПараметрыФайла.Вставить("Служебный", Ложь);
				Результат = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПриложенныйФайл.СведенияОФайле.АдресВременногоХранилищаФайла);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции
&НаСервере
Функция ЕстьВыбранныеСтрокиРаспоряжений()
	
	ЕстьВыбранныеСтроки = Ложь;
	Для Каждого Строка Из ЗагружаемаяНоменклатура Цикл
		Если Строка.Количество > 0 Тогда
			ЕстьВыбранныеСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ЕстьВыбранныеСтроки;
	
КонецФункции

//Отображение документов приемки//
&НаСервере
Процедура ЗаполнитьДокументыПриемкиТМЦ(Распоряжение, Заявка, Номенклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	впТоварыКПоступлениюОбороты.Регистратор КАК Документ,
	                      |	впТоварыКПоступлениюОбороты.КоличествоРасход КАК Количество
	                      |ИЗ
	                      |	РегистрНакопления.впТоварыКПоступлению.Обороты(
	                      |			,
	                      |			,
	                      |			Регистратор,
	                      |			Заявка = &Заявка
	                      |				И Распоряжение = &Распоряжение
	                      |				И Номенклатура = &Номенклатура
	                      |				И Судно = &ОсновноеСудно) КАК впТоварыКПоступлениюОбороты");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);
	
	ТаблицаДокументовПриемки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗагружаемаяНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружаемаяНоменклатура.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , ,Истина));
	
	//
	// ++ rarus yukuzi 26.03.2021    // 
	УстановитьОформлениеЕдиницИзмерения();
	// -- rarus yukuzi 26.03.2021

КонецПроцедуры

Функция ВыполнитьПоискПоСтрокеПоиска(ВходящиеДанные)
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) тогда
		Возврат ВходящиеДанные;
	КонецЕсли;
	
	Возврат ВыполнитьПоискСКД(ВходящиеДанные, СтрокаПоиска);
	
КонецФункции

Функция ВыполнитьПоискСКД(ВходящиеДанные, ПараметрПоиска)
		
	// Программно делаем вывод результата в таблицу значений
	Результат = Новый ТаблицаЗначений;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетПоиска");
	
	ИсточникДоступныхНастроекКомпоновкиДанных  = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	КомпановщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	// парметры и отборы                                                                                  
	КомпановщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ПараметрПоиска", ПараметрПоиска);
	//                                                                                                                                   , использование
		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		КомпановщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ВходящиеДанные", ВходящиеДанные);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборы);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции	

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоиск()
	
	Перем Оповещение;
	
	Если ЗагружаемаяНоменклатура.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ИзменениеОтбораЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Выбранные строки будут очищены", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да, "По выбранному отбору уже выбраны строки");
	Иначе
		ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
		НайтиРаспоряженияНаСервере();
	КонецЕсли;
	
	рарусОбщегоНазначенияСМКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.СтрокаПоиска, СтрокаПоиска);

КонецПроцедуры

&НаКлиенте
Процедура ПоискВыполнить(Команда)
	
	ВыполнитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	
	//ПодключитьОбработчикОжидания("ВыполнитьПоиск",0.1, Истина);
	
КонецПроцедуры

// ++ rarus yukuzi 26.03.2021    
&НаСервере
Процедура УстановитьОформлениеЕдиницИзмерения()
	ИмяПоляВводаЕдиницИзмерения = "ЗагружаемаяНоменклатураЕдиницаИзмерения";
	ПутьКПолюОтбора = "ЗагружаемаяНоменклатура.Упаковка";
	УО = ЭтаФорма.УсловноеОформление;
	ЭлементыФормы = ЭтаФорма.Элементы;
	ЭлементУсловногоОформления = УО.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ИмяПоляВводаЕдиницИзмерения].Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюОтбора);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	
КонецПроцедуры
// -- rarus yukuzi 26.03.2021

// ++ rarus yukuzi 24.02.2021   // ФТ.СНБ.02. Задача_Штрихкодирование
&НаКлиенте
Процедура ПечатьОбщихЭтикеток(Команда)
	ТабДок = СформироватьТабДок(Истина); 
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ЭтикеткиОбщие");    
    КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок; 
    КоллекцияПечатныхФорм[0].СинонимМакета = "Этикетки (общие этикетки  на позиции номенклатуры)";  
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ПечатьОтдельныхЭтикеток(Команда)
	ТабДок = СформироватьТабДок(Ложь); 
    КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("ЭтикеткиОтдельные");    
    КоллекцияПечатныхФорм[0].ТабличныйДокумент = ТабДок; 
    КоллекцияПечатныхФорм[0].СинонимМакета = "Этикетки (отдельные этикетки на каждую единицу номенклатуры)";  
    УправлениеПечатьюКлиент.ПечатьДокументов(КоллекцияПечатныхФорм,Неопределено,ЭтаФорма);

КонецПроцедуры

&НаСервере
Функция СформироватьТабДок(ОтображатьКоличество)
Возврат рарусШтрихкодирование.СформироватьПечатнуюФормуЭтикетка(ДанныеДляПечатиЭтикетки( ОтображатьКоличество), "ОбщиеМакеты.ПФ_MXL_Этикетки", Истина, ОтображатьКоличество);


КонецФункции 

&НаСервере
Функция ДанныеДляПечатиЭтикетки( ОтображатьКоличество=Истина) Экспорт
	
//	Запрос = Новый Запрос(
//	"ВЫБРАТЬ
//|	втЗагружаемаяНоменклатура.Номенклатура КАК Номенклатура,
//|	втЗагружаемаяНоменклатура.Заявка КАК Заявка,
//|	втЗагружаемаяНоменклатура.Количество КАК Количество,
//|	втЗагружаемаяНоменклатура.Распоряжение  КАК Распоряжение,
//|	&ОсновноеСудно КАК Судно
//|ПОМЕСТИТЬ втДок
//|ИЗ
//|	&ЗагружаемаяНоменклатура КАК втЗагружаемаяНоменклатура
//|
//|ИНДЕКСИРОВАТЬ ПО
//|	Номенклатура
//|;
//|
//|////////////////////////////////////////////////////////////////////////////////
//|ВЫБРАТЬ
//|	МАКСИМУМ(рарусШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
//|	рарусШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
//|ПОМЕСТИТЬ втШК
//|ИЗ
//|	втДок КАК втДок
//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.рарусШтрихкодыНоменклатуры КАК рарусШтрихкодыНоменклатуры
//|		ПО втДок.Номенклатура = рарусШтрихкодыНоменклатуры.Номенклатура
//|
//|СГРУППИРОВАТЬ ПО
//|	рарусШтрихкодыНоменклатуры.Номенклатура
//|
//|ИНДЕКСИРОВАТЬ ПО
//|	Номенклатура
//|;
//|
//|////////////////////////////////////////////////////////////////////////////////
//|ВЫБРАТЬ
//|	втДок.Номенклатура КАК Номенклатура,
//|	ВЫРАЗИТЬ(втДок.Заявка КАК Документ.впЗаявкаНаСнабжение).Номер КАК НомерЗаявкиНаВнутреннееПотребление,
//|	втДок.Судно КАК Судно,
//|	ВЫРАЗИТЬ(втДок.Заявка КАК Документ.впЗаявкаНаСнабжение).НомерСудовойЗаявки КАК НомерСудовойЗаявки,
//|	ВЫРАЗИТЬ(втДок.Распоряжение КАК Документ.впЗаказПоставщику).Номер КАК НомерЗаказаПоставщику,
////|	втДок.НомерЗаказаПоставщику КАК НомерЗаказаПоставщику,
//|	ВЫБОР
//|		КОГДА &ОтображатьКоличество
//|			ТОГДА втДок.Количество
//|		ИНАЧЕ 1
//|	КОНЕЦ КАК Количество,
//|	ВЫБОР
//|		КОГДА НЕ &ОтображатьКоличество
//|			ТОГДА втДок.Количество
//|		ИНАЧЕ 1
//|	КОНЕЦ КАК КоличествоПечати,
//|	ПРЕДСТАВЛЕНИЕ(втДок.Номенклатура) КАК НоменклатураПредставление,
//|	ПРЕДСТАВЛЕНИЕ(втДок.Судно) КАК СудноПредставление,
//|	ЕСТЬNULL(втШК.Штрихкод, """") КАК Штрихкод
//|ИЗ
//|	втДок КАК втДок
//|		ЛЕВОЕ СОЕДИНЕНИЕ втШК КАК втШК
//|		ПО втДок.Номенклатура = втШК.Номенклатура
//|
//|УПОРЯДОЧИТЬ ПО
//|	втДок.Заявка");
Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	втЗагружаемаяНоменклатура.Номенклатура КАК Номенклатура,
	|	втЗагружаемаяНоменклатура.Заявка КАК Заявка,
	|	втЗагружаемаяНоменклатура.Количество КАК Количество,
	|	втЗагружаемаяНоменклатура.Распоряжение КАК Распоряжение,
	|	&ОсновноеСудно КАК Судно
	|ПОМЕСТИТЬ втДок
	|ИЗ
	|	&ЗагружаемаяНоменклатура КАК втЗагружаемаяНоменклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(рарусШтрихкодыНоменклатуры.Штрихкод) КАК Штрихкод,
	|	рарусШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ втШК
	|ИЗ
	|	втДок КАК втДок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.рарусШтрихкодыНоменклатуры КАК рарусШтрихкодыНоменклатуры
	|		ПО втДок.Номенклатура = рарусШтрихкодыНоменклатуры.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	рарусШтрихкодыНоменклатуры.Номенклатура
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураДополнительныеРеквизиты.Ссылка КАК Номенклатура,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоКаталожныйНомер)
	|				ТОГДА НоменклатураДополнительныеРеквизиты.Значение
	|		КОНЕЦ) КАК ДопРекв_КаталожныйНомер,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоМодель)
	|				ТОГДА НоменклатураДополнительныеРеквизиты.Значение
	|		КОНЕЦ) КАК ДопРекв_Модель,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоПроизводитель)
	|				ТОГДА НоменклатураДополнительныеРеквизиты.Значение
	|		КОНЕЦ) КАК ДопРекв_Производитель,
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры КАК ВидНоменклатуры
	|ПОМЕСТИТЬ втДопРеквизиты
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка В
	|			(ВЫБРАТЬ
	|				втДок.Номенклатура КАК Номенклатура
	|			ИЗ
	|				втДок КАК втДок)
	|	И (НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоКаталожныйНомер)
	|			ИЛИ НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоМодель)
	|			ИЛИ НоменклатураДополнительныеРеквизиты.Свойство В (&СвойствоПроизводитель))
	|
	|СГРУППИРОВАТЬ ПО
	|	НоменклатураДополнительныеРеквизиты.Ссылка,
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДок.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(втДок.Заявка КАК Документ.впЗаявкаНаСнабжение).Номер КАК НомерЗаявкиНаВнутреннееПотребление,
	|	втДок.Судно КАК Судно,
	|	ВЫРАЗИТЬ(втДок.Заявка КАК Документ.впЗаявкаНаСнабжение).НомерСудовойЗаявки КАК НомерСудовойЗаявки,
	|	ВЫРАЗИТЬ(втДок.Распоряжение КАК Документ.впЗаказПоставщику).Номер КАК НомерЗаказаПоставщику,
	|	ВЫБОР
	|		КОГДА &ОтображатьКоличество
	|			ТОГДА втДок.Количество
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА НЕ &ОтображатьКоличество
	|			ТОГДА втДок.Количество
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК КоличествоПечати,
	|	ПРЕДСТАВЛЕНИЕ(втДок.Номенклатура) КАК НоменклатураПредставление,
	|	ПРЕДСТАВЛЕНИЕ(втДок.Судно) КАК СудноПредставление,
	|	ЕСТЬNULL(втШК.Штрихкод, """") КАК Штрихкод,
	|	втДопРеквизиты.ДопРекв_КаталожныйНомер КАК НомерКаталога,
	|	втДопРеквизиты.ДопРекв_Модель КАК ОборудованиеПредставление,
	|	втДопРеквизиты.ДопРекв_Производитель КАК ПроизводительПредставление,
	|	ПРЕДСТАВЛЕНИЕ(втДопРеквизиты.ВидНоменклатуры) КАК ТипОборудованияПредставление
	|ИЗ
	|	втДок КАК втДок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втШК КАК втШК
	|		ПО втДок.Номенклатура = втШК.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДопРеквизиты КАК втДопРеквизиты
	|		ПО втДок.Номенклатура = втДопРеквизиты.Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	втДок.Заявка");
	
	Запрос.УстановитьПараметр("ЗагружаемаяНоменклатура", ЗагружаемаяНоменклатура.Выгрузить());
	рарусШтрихкодирование.ПараметрыЗапросаПоДопреквизитам(Запрос);

	Запрос.УстановитьПараметр("ОтображатьКоличество", ОтображатьКоличество);
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции


// -- rarus yukuzi 24.02.2021

// ++ rarus makole 2021-06-15 [РАIT-0023374]
// Учёт номенклатуры разного качества 
&НаСервере
Функция ЕстьНеНоваяНоменклатура(Распоряжение)
	
	Если ТипЗнч(Распоряжение) = Тип("ДокументСсылка.впПеремещениеТоваров") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров") Тогда
		
		МассивНоменклатуры = ЗагружаемаяНоменклатура.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.Качество КАК Качество
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Ссылка В(&МассивНоменклатуры)
			|	И Номенклатура.Качество <> ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый)";
		
		Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);
		
		РезультатЗапроса = Запрос.Выполнить();
	
		Возврат НЕ РезультатЗапроса.Пустой();
		
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции
// -- rarus makole 2021-06-15 [РАIT-0023374]




