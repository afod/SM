#Область СобытияФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИзменитьВидимость();
	
	СохраненныйОтбор = Новый Структура("ВидПрихода,НомерЗаявки,Отправитель,НомерРаспоряжения,ДатаРаспоряжения");
	ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОприходоватьЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	Если СтруктураПараметров <> Неопределено Тогда
		Результат = ОприходоватьНаСервере(СтруктураПараметров);
		Если Результат.Отказ Тогда
			ПоказатьПредупреждение(, Результат.ТекстОшибки ,,Результат.ЗаголовокОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	Если НЕ ЗначениеЗаполнено(ОсновноеСудно) Тогда
		ТекстСообщения = "Не указано основное судно(справочник <Суда>)";
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		Отказ = Истина;
	КонецЕсли;
	
	ПраваяПанельОтключена = Истина;
	
	Если Не Отказ тогда
		НайтиРаспоряженияНаСервере();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеОтбора(Элемент)
	
	Если ЗагружаемаяНоменклатура.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ИзменениеОтбораЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Выбранные строки будут очищены", РежимДиалогаВопрос.ДаНет,0,КодВозвратаДиалога.Да, "По выбранному отбору уже выбраны строки");
	Иначе
		ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
		НайтиРаспоряженияНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменениеОтбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЗначенияСвойств(СохраненныйОтбор, ЭтотОбъект);
		НайтиРаспоряженияНаСервере();
	Иначе
		ВосстановитьОтбор();
	КонецЕсли;		
		
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьОтбор()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныйОтбор, "НомерЗаявки,НомерРаспоряжения,ДатаРаспоряжения,ВидПрихода");
	ДоступныеТипы = Новый Массив;
	Если ВидПрихода = "" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	ИначеЕсли ВидПрихода = "ОтКонтрагента" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ИначеЕсли ВидПрихода = "СоСклада" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	КонецЕсли;
	ОписаниеТипов = Новый ОписаниеТипов(ДоступныеТипы);
	Элементы.Отправитель.ОграничениеТипа = ОписаниеТипов;

	Отправитель = СохраненныйОтбор.Отправитель;
	
КонецПроцедуры

#КонецОбласти 

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗагружаемаяНоменклатура.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗагружаемаяНоменклатура.Количество");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , ,Истина));
	
	//
	
КонецПроцедуры	
//Команды
&НаКлиенте
Процедура НайтиРаспоряжения(Команда)
	НайтиРаспоряженияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьУслуги(Команда)
	
	Если ЕстьВыбранныеСтрокиРаспоряжений() Тогда
		Оповещение = Новый ОписаниеОповещения("ОприходоватьЗавершение", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("UID", ЭтаФорма.УникальныйИдентификатор);
		ИмяФормыОформления = Лев(ЭтаФорма.ИмяФормы, СтрДлина(ИмяФормы)-5) + "ФормаДополнительныхДанных";
		ОткрытьФорму(ИмяФормыОформления, ПараметрыФормы,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПоказатьПредупреждение(, "Отсутствуют выбранные строки" ,,"Ошибка");
	КонецЕсли;

КонецПроцедуры

//Обработчики элементов формы//
&НаКлиенте
Процедура ВидПриходаПриИзменении(Элемент)
	
	ДоступныеТипы = Новый Массив;
	Если ВидПрихода = "" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	ИначеЕсли ВидПрихода = "ОтКонтрагента" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Контрагенты"));
	ИначеЕсли ВидПрихода = "СоСклада" Тогда
		ДоступныеТипы.Добавить(Тип("СправочникСсылка.Склады"));
	КонецЕсли;
	ОписаниеТипов = Новый ОписаниеТипов(ДоступныеТипы);
	Элементы.Отправитель.ОграничениеТипа = ОписаниеТипов;
	Отправитель = ОписаниеТипов.ПривестиЗначение(Отправитель);
	
	ИзменениеОтбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаспоряженийВыбраноПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаРаспоряжений.ТекущиеДанные;
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Выбрано", ТекущаяСтрока.Выбрано);
	СтруктураПараметров.Вставить("Заявка", ТекущаяСтрока.Заявка);
	СтруктураПараметров.Вставить("Отправитель", ТекущаяСтрока.Отправитель);
	СтруктураПараметров.Вставить("Распоряжение", ТекущаяСтрока.Распоряжение);
	СтруктураПараметров.Вставить("Отказ", Ложь);
	
	Если СтруктураПараметров.Выбрано Тогда
		ДобавитьДанныеРаспоряженияВПоступление(СтруктураПараметров);
	Иначе
		УдалитьДанныеРаспоряженияИзПоступления(СтруктураПараметров);
	КонецЕсли;
	
	Если СтруктураПараметров.Отказ Тогда
		ПоказатьПредупреждение(, "Документ прихода можно оформить только по одному распоряжению" ,,"Ошибка");
		ТекущаяСтрока.Выбрано = Не ТекущаяСтрока.Выбрано;
	КонецЕсли;
	
	ИзменитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидимость()
	
	ВыбранныхСтрок = ЗагружаемаяНоменклатура.Количество();
	Элементы.ГруппаТоварыКПоступлению.Видимость = ВыбранныхСтрок > 0;
	Элементы.ТаблицаРаспоряженийОформитьПриход.Видимость = ВыбранныхСтрок > 0;
	Элементы.НадписьПодобраноСтрок.Заголовок = "Подобрано строк: " + ВыбранныхСтрок;
	Если ВыбранныхСтрок = 0 Тогда
		Элементы.ГруппаТоварыКПоступлению.Заголовок = "Подбор строк поступления";
		ТаблицаДокументовПриемки.Очистить();
	Иначе
		Элементы.ГруппаТоварыКПоступлению.Заголовок = ?(РазрешеноИзменениеСоставаПоступления(ЗагружаемаяНоменклатура[0].Распоряжение), "Товары поступления по заказу (изменение состава разрешено)", "Товары поступления по заказу (изменение состава не разрешено)");
	КонецЕсли;
	
	Если ПраваяПанельОтключена Тогда
		Элементы.ГруппаДанныхПраво.Видимость = Ложь;
	Иначе
		Элементы.ГруппаДанныхПраво.Видимость = ПоказатьДокументыПриемкиТМЦ;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаРаспоряженийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаРаспоряжений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Выбрано = НЕ ТекущиеДанные.Выбрано;
		ТаблицаРаспоряженийВыбраноПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемаяНоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемаяНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные.Количество > ТекущиеДанные.КоличествоОстаток Тогда
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоОстаток;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьДокументыПриемкиТМЦНажатие(Элемент)
	
	Если ПраваяПанельОтключена Тогда
		ОткрытьФорму("Документ.рарусАктВыполненныхРаботОказанныхУслуг.ФормаСписка");
	Иначе
		ПоказатьДокументыПриемки = НЕ ПоказатьДокументыПриемки;
		Элементы.НадписьДокументыПриемки.Заголовок = ?(ПоказатьДокументыПриемки, "Скрыть документы отражения", "Показать документы отражения");
		ЗагружаемаяНоменклатураПриАктивизацииСтроки(Элемент);
	
		ИзменитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагружаемаяНоменклатураПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ЗагружаемаяНоменклатура.ТекущиеДанные;
	Если ПоказатьДокументыПриемкиТМЦ Тогда
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаполнитьДокументыПриемкиТМЦ(ТекущиеДанные.Распоряжение, ТекущиеДанные.Заявка, ТекущиеДанные.Номенклатура);
		Иначе
			ТаблицаДокументовПриемки.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Элементы.ЗагружаемаяНоменклатураКоличество.ТолькоПросмотр = ЗапрещеноРедактированиеКоличества(ТекущиеДанные.Распоряжение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДокументовПриемкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТаблицаДокументовПриемки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Документ) Тогда
		ОткрытьФорму("Документ.впПриходТМЦ.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Документ));
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗапрещеноРедактированиеКоличества(Распоряжение)
	
	Возврат ТипЗнч(Распоряжение) = Тип("ДокументСсылка.впПеремещениеТоваров");
	
КонецФункции

&НаСервереБезКонтекста
Функция РазрешеноИзменениеСоставаПоступления(Распоряжение)
	
	Возврат ТипЗнч(Распоряжение) = Тип("ДокументСсылка.впЗаказПоставщику");
	
КонецФункции

//Заполнение списка распоряжений//
&НаСервере
Процедура НайтиРаспоряженияНаСервере()
	
	ДанныеОтбора = РаспоряженияПоОтбору();
	
	Если ДанныеОтбора.Колонки.Количество() = 0 тогда  
		
		ОбщегоНазначения.СообщитьПользователю("Нет прав для получения данных по распоряжениям. 
			|Обратитесь к администратору");  
		
		Возврат;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Заявка КАК Заявка,
	|	ВЫРАЗИТЬ(Т.Распоряжение КАК Документ.впЗаказПоставщику) КАК Распоряжение,
	|	Т.Контрагент КАК Контрагент,
	|	Т.НомерСудовойЗаявки КАК НомерСудовойЗаявки
	|ПОМЕСТИТЬ ДанныеОтбора
	|ИЗ
	|	&ДанныеОтбора КАК Т
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОтбора.Заявка КАК Заявка,
	|	ДанныеОтбора.НомерСудовойЗаявки КАК НомерСудовойЗаявки,
	|	ДанныеОтбора.Распоряжение КАК Распоряжение,
	|	ДанныеОтбора.Контрагент КАК Отправитель,
	|	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) > 0 КАК ЕстьНепринятое,
	|	ДанныеОтбора.Распоряжение.Комментарий КАК КомментарийРаспоряжения
	|ИЗ
	|	ДанныеОтбора КАК ДанныеОтбора
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению.Остатки(
	|				&Период,
	|				Судно = &ОсновноеСудно
	|					И Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)) КАК впТоварыКПоступлениюОстатки
	|		ПО ДанныеОтбора.Заявка = впТоварыКПоступлениюОстатки.Заявка
	|			И ДанныеОтбора.Распоряжение = впТоварыКПоступлениюОстатки.Распоряжение";
	
	Запрос.УстановитьПараметр("ДанныеОтбора", ДанныеОтбора);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);
	
	ТаблицаРаспоряжений.Очистить();
	ЗагружаемаяНоменклатура.Очистить();
	
	ВыбранныеРаспоряжения = Запрос.Выполнить().Выбрать();
	Пока ВыбранныеРаспоряжения.Следующий() Цикл
		Если ВыбранныеРаспоряжения.ЕстьНепринятое Или ПоказыватьОформленные Тогда
			Строка = ТаблицаРаспоряжений.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыбранныеРаспоряжения);			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РаспоряженияПоОтбору()
	
	Результат = Новый ТаблицаЗначений;   
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ДанныеРаспоряжений");
	
	ИсточникДоступныхНастроекКомпоновкиДанных  = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	КомпановщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастроек.Инициализировать(ИсточникДоступныхНастроекКомпоновкиДанных);
	КомпановщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	УстановитьПредопределенныеПараметрыДанных(КомпановщикНастроек);

	ЗаполнитьПользовательскийОтбор(КомпановщикНастроек);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных,
		КомпановщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьПредопределенныеПараметрыДанных(КомпановщикНастроек)
	
	КомпановщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидПотребности", рарусЗаявкаНаСнабжениеСервер.ВидПотребностиУслуги());

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПользовательскийОтбор(Знач КомпановщикНастроек)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпановщикНастроек.Настройки.Отбор, 
		"НомерСудовойЗаявки", 
		НомерЗаявки, 
		ВидСравненияКомпоновкиДанных.Содержит,,
		ЗначениеЗаполнено(НомерЗаявки)
		);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпановщикНастроек.Настройки.Отбор, 
		"Номер", 
		НомерРаспоряжения, 
		ВидСравненияКомпоновкиДанных.Содержит,,
		ЗначениеЗаполнено(НомерРаспоряжения)
		);	
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		КомпановщикНастроек.Настройки.Отбор, 
		"Контрагент", 
		Отправитель, 
		ВидСравненияКомпоновкиДанных.Равно,,
		ЗначениеЗаполнено(Отправитель)
		);	
	
КонецПроцедуры
 
//Заполнение ТЧ номенклатуры для поступления//
&НаСервере
Процедура ДобавитьДанныеРаспоряженияВПоступление(СтруктураПараметров)
	
	Если РазрешеноДобавлениеРаспоряженияВЗагружаемуюНоменклатуру(СтруктураПараметров.Распоряжение) Тогда
		ДанныеРаспоряженияПоОтбору = ДанныеРаспоряженияПоОтбору(СтруктураПараметров, ОсновноеСудно);
		Пока ДанныеРаспоряженияПоОтбору.Следующий() Цикл
			Если ДанныеРаспоряженияПоОтбору.КоличествоОстаток > 0 ИЛИ ПоказыватьОформленные Тогда
				Строка = ЗагружаемаяНоменклатура.Добавить();
				ЗаполнитьЗначенияСвойств(Строка, ДанныеРаспоряженияПоОтбору);
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтруктураПараметров.Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеРаспоряженияИзПоступления(СтруктураПараметров)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Отбор = Новый Структура("Заявка,Распоряжение", СтруктураПараметров.Заявка, СтруктураПараметров.Распоряжение);
	Для Каждого Строка Из ЗагружаемаяНоменклатура.НайтиСтроки(Отбор) Цикл
		МассивУдаляемыхСтрок.Добавить(Строка);
	КонецЦикла;
	
	Для Каждого Строка Из МассивУдаляемыхСтрок Цикл
		ЗагружаемаяНоменклатура.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция РазрешеноДобавлениеРаспоряженияВЗагружаемуюНоменклатуру(Распоряжение)
	
	РазрешеноДобавлениеРаспоряжения = Ложь;
	Таблица = ЗагружаемаяНоменклатура.Выгрузить(,"Распоряжение");
	Таблица.Свернуть("Распоряжение");
	ВыгружаемыеРаспоряжения = Таблица.ВыгрузитьКолонку("Распоряжение");
	Если ВыгружаемыеРаспоряжения.Количество() = 0 Тогда
		РазрешеноДобавлениеРаспоряжения = Истина;
	ИначеЕсли ВыгружаемыеРаспоряжения.Количество() = 1 И ВыгружаемыеРаспоряжения[0] = Распоряжение Тогда
		РазрешеноДобавлениеРаспоряжения = Истина;
	КонецЕсли;
	
	Возврат РазрешеноДобавлениеРаспоряжения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДанныеРаспоряженияПоОтбору(СтруктураПараметров, ОсновноеСудно)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	впЗаказПоставщикуТМЦ.Ссылка КАК Распоряжение,
	|	впЗаказПоставщикуТМЦ.Номенклатура КАК Номенклатура,
	|	впЗаказПоставщикуТМЦ.Заявка КАК Заявка,
	|	СУММА(впЗаказПоставщикуТМЦ.Количество) КАК Количество,
	|	впЗаказПоставщикуТМЦ.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ДанныеРаспоряжения
	|ИЗ
	|	Документ.впЗаказПоставщику.ТМЦ КАК впЗаказПоставщикуТМЦ
	|ГДЕ
	|	впЗаказПоставщикуТМЦ.Заявка = &Заявка
	|	И впЗаказПоставщикуТМЦ.Ссылка = &Распоряжение
	|
	|СГРУППИРОВАТЬ ПО
	|	впЗаказПоставщикуТМЦ.Ссылка,
	|	впЗаказПоставщикуТМЦ.Заявка,
	|	впЗаказПоставщикуТМЦ.Номенклатура,
	|	впЗаказПоставщикуТМЦ.КодСтроки
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРаспоряжения.Распоряжение КАК Распоряжение,
	|	ДанныеРаспоряжения.Номенклатура КАК Номенклатура,
	|	ДанныеРаспоряжения.КодСтроки КАК КодСтроки,
	|	ДанныеРаспоряжения.Номенклатура.рспбКодMDG КАК НоменклатураКодMDG,
	|	ДанныеРаспоряжения.Заявка КАК Заявка,
	|	ДанныеРаспоряжения.Количество КАК КоличествоРаспоряжение,
	|	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(впТоварыКПоступлениюОстатки.КоличествоОстаток, 0) КАК Количество
	|ИЗ
	|	ДанныеРаспоряжения КАК ДанныеРаспоряжения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению.Остатки(
	|				&Период,
	|				Заявка = &Заявка
	|					И Распоряжение = &Распоряжение
	|					И Судно = &ОсновноеСудно) КАК впТоварыКПоступлениюОстатки
	|		ПО ДанныеРаспоряжения.Распоряжение = впТоварыКПоступлениюОстатки.Распоряжение
	|			И ДанныеРаспоряжения.Заявка = впТоварыКПоступлениюОстатки.Заявка
	|			И ДанныеРаспоряжения.Номенклатура = впТоварыКПоступлениюОстатки.Номенклатура
	|			И ДанныеРаспоряжения.КодСтроки = впТоварыКПоступлениюОстатки.КодСтроки";
	
	Запрос.УстановитьПараметр("Заявка", СтруктураПараметров.Заявка);
	Запрос.УстановитьПараметр("Распоряжение", СтруктураПараметров.Распоряжение);
	Запрос.УстановитьПараметр("Период", ТекущаяДата());
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);

	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

//Формирование документа ПоступлениеТМЦ//
&НаСервере
Функция ОприходоватьНаСервере(СтруктураПараметров)
	
	РезультатОбработки = Новый Структура("Отказ,ТекстОшибки,ЗаголовокОшибки", Ложь, "", "");
	
	//Формирование документа поступления//
	ДокументПоступления = Документы.рарусАктВыполненныхРаботОказанныхУслуг.СоздатьДокумент();
	ДокументПоступления.Дата = ТекущаяДата();
	ДокументПоступления.Заполнить(Неопределено);
	ДокументПоступления.ДатаВходящегоДокумента = СтруктураПараметров.ДатаВходящегоДокумента;
	ДокументПоступления.НомерВходящегоДокумента = СтруктураПараметров.НомерВходящегоДокумента;
	ДокументПоступления.Комментарий = СтруктураПараметров.Комментарий;
	ДокументПоступления.ЗаказПоставщику = ЗагружаемаяНоменклатура[0].Распоряжение;
	ДокументПоступления.Основание	= ЗагружаемаяНоменклатура[0].Заявка;
	Для Каждого Строка Из ЗагружаемаяНоменклатура Цикл
		Если Строка.Количество > 0 Тогда
			СтрокаТЧ = ДокументПоступления.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ, Строка);
			СтрокаТЧ.КоличествоУпаковок = СтрокаТЧ.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ДокументПоступления.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		РезультатОбработки.Отказ = Истина;
		РезультатОбработки.ТекстОшибки = ОписаниеОшибки();
		РезультатОбработки.ЗаголовокОшибки = "Не удалось записать документ";
	КонецПопытки;
	
	//Создание файла//
	Если Не РезультатОбработки.Отказ Тогда
		Для Каждого ПриложенныйФайл Из СтруктураПараметров.СведенияОФайлах Цикл
			ПараметрыФайла = Новый Структура;
			ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.АвторизованныйПользователь);
			ПараметрыФайла.Вставить("ВладелецФайлов", ДокументПоступления.Ссылка);
			ПараметрыФайла.Вставить("ИмяБезРасширения", ПриложенныйФайл.СведенияОФайле.ИмяБезРасширения);
			ПараметрыФайла.Вставить("РасширениеБезТочки", ПриложенныйФайл.СведенияОФайле.РасширениеБезТочки);
			ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", ТекущаяУниверсальнаяДата());
			ПараметрыФайла.Вставить("ГруппаФайлов", Неопределено);
			ПараметрыФайла.Вставить("Служебный", Ложь);
			Результат = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПриложенныйФайл.СведенияОФайле.АдресВременногоХранилищаФайла);
			
			// ++ rarus makole 2021-04-23
			//Удаление временного файла
			Если ПриложенныйФайл.ПутьКВременномуФайлу = "" Тогда
				Продолжить
			КонецЕсли;
			
			Попытка
				УдалитьФайлы(ПриложенныйФайл.ПутьКВременномуФайлу);
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Стандартные подсистемы'", ОбщегоНазначения.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось удалить временный файл ""%1"" по причине:
							|%2'"),
						ПриложенныйФайл.ПутьКВременномуФайлу,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			КонецПопытки;
			// -- rarus makole 2021-04-23		
		КонецЦикла;
	КонецЕсли;
	
	НайтиРаспоряженияНаСервере();
	
	Возврат РезультатОбработки;
	
КонецФункции

&НаСервере
Функция ЕстьВыбранныеСтрокиРаспоряжений()
	
	ЕстьВыбранныеСтроки = Ложь;
	Для Каждого Строка Из ЗагружаемаяНоменклатура Цикл
		Если Строка.Количество > 0 Тогда
			ЕстьВыбранныеСтроки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ЕстьВыбранныеСтроки;
	
КонецФункции

//Отображение документов приемки//
&НаСервере
Процедура ЗаполнитьДокументыПриемкиТМЦ(Распоряжение, Заявка, Номенклатура)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	впТоварыКПоступлениюОбороты.Регистратор КАК Документ,
	                      |	впТоварыКПоступлениюОбороты.КоличествоРасход КАК Количество
	                      |ИЗ
	                      |	РегистрНакопления.впТоварыКПоступлению.Обороты(
	                      |			,
	                      |			,
	                      |			Регистратор,
	                      |			Заявка = &Заявка
	                      |				И Распоряжение = &Распоряжение
	                      |				И Номенклатура = &Номенклатура
	                      |				И Судно = &ОсновноеСудно) КАК впТоварыКПоступлениюОбороты");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Распоряжение", Распоряжение);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("ОсновноеСудно", ОсновноеСудно);
	
	ТаблицаДокументовПриемки.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры










