#Область ОписаниеПеременных
#КонецОбласти

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ТекущийМакет="МакетПоМинимальнымЗапасам";
	ИнициализироватьКомпоновщикНастроек();
	ОсновноеСудно= vftОбщегоНазначения.ПолучитьОсновноеСудно();
	Судно = ОсновноеСудно;
	ЕстьИмУчет=Ложь;
	Если ЗначениеЗаполнено(Судно) тогда
		ПараметрыФункциональнойОпции = Новый Структура("Судно", Судно);
		ЕстьИмУчет=ПолучитьФункциональнуюОпцию("рарусИспользоватьИмущественныйУчет", ПараметрыФункциональнойОпции);
	иначе
		ЕстьИмУчет=ПолучитьФункциональнуюОпцию("рарусИспользоватьИмущественныйУчет");
	КонецЕсли;
	ОтразитьОтборСпискаЗаявок(ЭтаФорма);
	УстановитьУсловноеОформлениеНаСервере();
	
КонецПроцедуры
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если не ЕстьИмУчет тогда
		ПоказатьПредупреждение(,"Для работы АРМ необходимо включение имущественного учета на судне!");
		Отказ=Истина;
	КонецЕсли;	
	КВыгрузке=2;
	ИнициализироватьВариантВыгрузки(КВыгрузке);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура КВыгрузкеПриИзменении(Элемент)
	ИнициализироватьВариантВыгрузки(КВыгрузке);
	
	// ++ rarus bushni 24.08.2021 ФТ.АН.01.32
	ВывестиКолонкиПоАналогам();
	// -- rarus bushni 24.08.2021	
КонецПроцедуры
&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	ПолучитьСписокНаСервере();
КонецПроцедуры
&НаСервере
Процедура ЗаявкаНаРемонтПриИзмененииНаСервере()
	УстановитьПараметрНаСервере(ЭтаФорма,"ЗаявкаНаРемонт",ЗаявкаНаРемонт);
	ПолучитьСписокНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ЗаявкаНаРемонтПриИзменении(Элемент)
	ЗаявкаНаРемонтПриИзмененииНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура СудноПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Судно) тогда
		УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрСудно",Судно);
	Иначе
		УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрСудно",Судно, ложь);
		
	КонецЕсли;
	ПолучитьСписокНаСервере();
	ОтразитьОтборСпискаЗаявок(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ГоризонтПланированияППРПриИзменении(Элемент)
	УстановитьПараметрНаСервере(ЭтаФорма,"ДатаНачала",ГоризонтПланированияППР.ДатаНачала);
	УстановитьПараметрНаСервере(ЭтаФорма,"ДатаКонца",ГоризонтПланированияППР.ДатаОкончания);
	ПолучитьСписокНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура ВариантППРПриИзменении(Элемент)
	ИзменениеВариантаППР();
	
	// ++ rarus bushni 24.08.2021 ФТ.АН.01.32
	ВывестиКолонкиПоАналогам();
	// -- rarus bushni 24.08.2021	
КонецПроцедуры

&НаСервере
Процедура ОбъектРемонтаПриИзмененииНаСервере()
	если ЗначениеЗаполнено(ОбъектРемонта) тогда
		УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрОбъектРемонта",ОбъектРемонта);
	Иначе
		УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрОбъектРемонта",ОбъектРемонта, Ложь);
	КонецЕсли;
	
	ПолучитьСписокНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаПриИзменении(Элемент)
	ОбъектРемонтаПриИзмененииНаСервере();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНоменклатуры
&НаКлиенте

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура УстановитьОтметку(Команда)
	ИзменитьОтметку( Истина);
КонецПроцедуры
&НаКлиенте
Процедура СнятьОтметку(Команда)
	ИзменитьОтметку( Ложь);
	
КонецПроцедуры
&НаКлиенте
Процедура ОтметитьВыделенные(Команда)
	Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоНоменклатуры.ВыделенныеСтроки Цикл
		СтрокаТаблицыЗначений = Элементы.ДеревоНоменклатуры.ДанныеСтроки(ВыделеннаяСтрока);
		СтрокаТаблицыЗначений.Отметка=Истина;
		
	КонецЦикла;
КонецПроцедуры
&НаКлиенте
Процедура СформироватьЗаявкуНаСнабжение(Команда)
	ЗначенияЗаполнения=СтруктураДляЗаполненияЗаявки();
	ТекстОшибки="";
	Если ЗначенияЗаполнения.Свойство("Основание")  тогда
		ТекстОшибки=ПроверкаЗаявокНаСнабжение(ЗначенияЗаполнения.Основание);
	КонецЕсли;	
	Если не ТекстОшибки="" тогда
		Режим = РежимДиалогаВопрос.ДаНет;
		ПараметрыЗаписи = Новый Структура();
		ПараметрыЗаписи.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса", ЭтотОбъект, ПараметрыЗаписи);
		ПоказатьВопрос(Оповещение, ТекстОшибки+"Продолжить формирование документа?", Режим, 0);
	Иначе
		ОткрытиеЗаявкиНаСнабжение(ЗначенияЗаполнения);
	КонецЕсли;
	
КонецПроцедуры
&НаКлиенте
Процедура ПолучитьСписок(Команда)
	ПолучитьСписокНаСервере();
КонецПроцедуры
&НаКлиенте
Процедура РазвернутьДерево(Команда)
	КоллекцияЭлементовДерева=ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Развернуть(ИдентификаторСтроки);
	КонецЦикла;   
КонецПроцедуры
&НаКлиенте
Процедура СвернутьДерево(Команда)
	КоллекцияЭлементовДерева=ДеревоНоменклатуры.ПолучитьЭлементы();
	Для Каждого Строка Из КоллекцияЭлементовДерева Цикл    
		ИдентификаторСтроки=Строка.ПолучитьИдентификатор();
		Элементы.ДеревоНоменклатуры.Свернуть(ИдентификаторСтроки);
	КонецЦикла;   
	
КонецПроцедуры
&НаКлиенте
Процедура СписокЗаявокНаСнабжение(Команда)
	Отбор = Новый Структура;
	Если  ЗначениеЗаполнено(Судно) тогда
		Отбор.Вставить("Отбор",Новый Структура("Подразделение",Судно));
	КонецЕсли;
	ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаСписка",Отбор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура УстановитьУсловноеОформлениеНаСервере();
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	//не отображать поле Отметка у группировки
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Номенклатура"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыОтметка");
	ПолеОформления.Использование = Истина;
	//
	//группировку жирным
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Номенклатура"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
	ЭлементОтбора.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", ШрифтыСтиля.ВажнаяНадписьШрифт);
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыОбъектРемонта");
	ПолеОформления.Использование = Истина;
	
	//не отображать Объект ремонта в детальных записях
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.Номенклатура"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено; 
	ЭлементОтбора.Использование = Истина;
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоНоменклатурыОбъектРемонта");
	ПолеОформления.Использование = Истина;
	
	
	// ++ rarus bushni 17.08.2021 ФТ.АН.01.32
	Если НЕ ПолучитьФункциональнуюОпцию("рарусВключенаСхемаАналогов") Тогда
		Элементы.ВыводитьОстаткиПоАналогам.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Ложь;
	Иначе
		ЭлементОформления = УсловноеОформление.Элементы.Добавить();		
		
		ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоНоменклатуры.ЭтоАналог");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		ЭлементОтбора.Использование = Истина;	
		
		ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);

		ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТаблицаНоменклатурыОтметка");
		ПолеОформления.Использование = Истина;		
	КонецЕсли;	
	// -- rarus bushni 17.08.2021	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	СКД=РеквизитФормыВЗначение("Объект").ПолучитьМакет(ТекущийМакет);
	АдресВременногоХранилища=ПоместитьВоВременноеХранилище(СКД,УникальныйИдентификатор);
	ИсточникНастроек=Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресВременногоХранилища);
	КомпоновщикНастроек.Инициализировать(ИсточникНастроек);
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	
	
КонецПроцедуры


&НаСервере
Процедура ПолучитьСписокНаСервере()
	СКД=РеквизитФормыВЗначение("Объект").ПолучитьМакет(ТекущийМакет);
	НастройкиКомпоновки=КомпоновщикНастроек.ПолучитьНастройки();
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки= КомпоновщикМакета.Выполнить(СКД,НастройкиКомпоновки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновки=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	ПроцессорВывода=новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//ТЗ=Новый ТаблицаЗначений;
	//ДЗ=Новый ДеревоЗначений;
	ДЗ=РеквизитФормыВЗначение("ДеревоНоменклатуры");
	ДЗ.Строки.Очистить();
	ПроцессорВывода.УстановитьОбъект(ДЗ);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	// ++ rarus bushni 24.08.2021 ФТ.АН.01.32
	// Дополняем дерево значений аналогами
	Если КВыгрузке = 0 И Не ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Заполните объект ремонта для работы АРМа!";
		Сообщение.Сообщить();
	КонецЕсли;	
	Если ВыводитьОстаткиПоАналогам Тогда
		Если КВыгрузке = 0 И ВариантППР = 1 ИЛИ КВыгрузке = 2 ИЛИ КВыгрузке = 1 Тогда
			ВТНоменклатура = Новый ТаблицаЗначений;
			ВТНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
			Если КВыгрузке = 1 ИЛИ КВыгрузке = 0 И ВариантППР = 1 Тогда
				Для Каждого ТекСтрока Из ДЗ.Строки Цикл
					Для Каждого ТекСтрока2 Из ТекСтрока.Строки Цикл
						НоваяСтрока = ВТНоменклатура.Добавить();
						НоваяСтрока.Номенклатура = ТекСтрока2.Номенклатура;
					КонецЦикла;					
				КонецЦикла;
				ВТНоменклатура.Свернуть("Номенклатура");
			Иначе
				Для Н=1 По ДЗ.Строки.Количество() Цикл
				    ВТНоменклатура.Добавить();
				КонецЦикла;			
				ВТНоменклатура.ЗагрузитьКолонку(ДЗ.Строки.ВыгрузитьКолонку("Номенклатура"), "Номенклатура");
			КонецЕсли;
			Аналоги = ПолучитьАналоги(ВТНоменклатура);
			ДобавитьАналогиВДерево(ДЗ, Аналоги);
			ПересчитатьОстаткиСУчетомАналогов(ДЗ);				
		КонецЕсли;
	КонецЕсли;
	// -- rarus bushni 24.08.2021
	//ДеревоНоменклатуры.Загрузить(ДЗ);
	ЗначениеВРеквизитФормы(ДЗ, "ДеревоНоменклатуры");
	СтрокиИдДереваСоответствие = Новый Соответствие;
	ПолучитьСтрокиДереваРекурсивно(ДеревоНоменклатуры.ПолучитьЭлементы(), СтрокиИдДереваСоответствие);
	
	УстановитьПометкуПоКоличеству(СтрокиИдДереваСоответствие, ?(Квыгрузке=2,"Количество", "КоличествоСМинЗапасом"));
	
КонецПроцедуры

// ++ rarus bushni 27.08.2021 ФТ.АН.01.32
&НаСервере
Процедура ДобавитьАналогиВДерево(ДЗ, Аналоги)

	Для Каждого ТекСтрока Из Аналоги Цикл
		// Добавляем на первом уровне
		ДобавитьАналогВСтрокуДерева(ДЗ, ТекСтрока);
		// Добавляем на втором уровне, если заполнен объект ремонта
		Для Каждого ТекСтрока2 Из ДЗ.Строки Цикл
			Если ЗначениеЗаполнено(ТекСтрока2.ОбъектРемонта) Тогда
				ДобавитьАналогВСтрокуДерева(ТекСтрока2, ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьАналогВСтрокуДерева(ДЗ, ТекСтрока)

	НайденнаяСтрока = ДЗ.Строки.Найти(ТекСтрока.Номенклатура, "Номенклатура");
	Если НайденнаяСтрока <> Неопределено И (ТекСтрока.Остаток <> 0 ИЛИ ТекСтрока.Затребовано <> 0) Тогда
		НоваяСтрока = НайденнаяСтрока.Строки.Добавить();
		НоваяСтрока.ЭтоАналог = Истина;
		НоваяСтрока.Номенклатура = ТекСтрока.Аналог;
		НоваяСтрока.Остаток = ТекСтрока.Остаток;
		НоваяСтрока.Затребовано = ТекСтрока.Затребовано;			
		НоваяСтрока.Требуется = "";
		НоваяСтрока.МинимальныйОстаток = "";
		НоваяСтрока.ОстатокСУчетомАналогов = "";
		НоваяСтрока.КЗаказуСУчетомАналогов = "";
		НоваяСтрока.Количество = "";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстаткиСУчетомАналогов(ДЗ)

	Для Каждого ТекСтрока Из ДЗ.Строки Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ОбъектРемонта) Тогда
			Для Каждого ТекСтрока2 Из ТекСтрока.Строки Цикл
				ОстатокАналогов = ТекСтрока2.Строки.Итог("Остаток");
				ТекСтрока2.ОстатокСУчетомАналогов = ТекСтрока2.Остаток + ОстатокАналогов;
				ТекСтрока2.КЗаказуСУчетомАналогов = ТекСтрока2.КоличествоСМинЗапасом - ОстатокАналогов;
				Если ТекСтрока2.КЗаказуСУчетомАналогов < 0 Тогда
					ТекСтрока2.КЗаказуСУчетомАналогов = 0;
				КонецЕсли;							
			КонецЦикла;
		Иначе
			ОстатокАналогов = ТекСтрока.Строки.Итог("Остаток");
			ТекСтрока.ОстатокСУчетомАналогов = ТекСтрока.Остаток + ОстатокАналогов;
			ТекСтрока.КЗаказуСУчетомАналогов = ТекСтрока.КоличествоСМинЗапасом - ОстатокАналогов;
			Если ТекСтрока.КЗаказуСУчетомАналогов < 0 Тогда
				ТекСтрока.КЗаказуСУчетомАналогов = 0;
			КонецЕсли;			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // -- rarus bushni 27.08.2021


&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьОтборСпискаЗаявок(Форма)
	ЭлементыОтбора = Форма.ЗаявкиНаСнабжение.Отбор.Элементы;
	ЭлементыОтбора.Очистить();
	
	Если  ЗначениеЗаполнено(Форма.Судно) тогда
		ЭлементОтбора = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных")); 
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение"); 
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
		ЭлементОтбора.Использование = Истина; 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
		ЭлементОтбора.ПравоеЗначение = Форма.Судно; 
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтразитьПорядокВКомпоновке(Форма)
	ЭлементыПорядка = Форма.КомпоновщикНастроек.Настройки.Порядок.Элементы;
	ЭлементыПорядка.Очистить();
	НовыйПорядок = ЭлементыПорядка.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовыйПорядок.Поле = Новый ПолеКомпоновкиДанных(Форма.ПолеСортировки);
	НовыйПорядок.Использование = Истина;
	НовыйПорядок.ТипУпорядочивания = ?(Форма.СортировкаПоВозрастанию,НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДеревоНаСервере()
	тДерево = РеквизитФормыВЗначение("ДеревоНоменклатуры");
	тДерево.Строки.Очистить();
	
	ЗначениеВРеквизитФормы(тДерево, "ДеревоНоменклатуры");
КонецПроцедуры

&НаСервере
Процедура ИзменитьОтметку(Вкл)
	
	СтрокиИдДереваСоответствие = Новый Соответствие;
	ПолучитьСтрокиДереваРекурсивно(ДеревоНоменклатуры.ПолучитьЭлементы(), СтрокиИдДереваСоответствие);
	
	УстановитьСнятьПометку(Вкл, СтрокиИдДереваСоответствие);
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьСтрокиДереваРекурсивно(Дерево, СтрокиИдДереваСоответствие)
	
	Для Каждого СтрокаДерева Из Дерево цикл
		
		Ид = СтрокаДерева.ПолучитьИдентификатор();
		СтрокиИдДереваСоответствие[Ид] = Истина;	
		
		ПолучитьСтрокиДереваРекурсивно(СтрокаДерева.ПолучитьЭлементы(), СтрокиИдДереваСоответствие)
		
	КонецЦикла;	
	
КонецПроцедуры
&НаСервере
Процедура УстановитьПометкуПоКоличеству(СтрокиИдДереваСоответствие, ИмяПоляВключенияОтметки="Количество")
	
	Для Каждого СтрокаИд Из СтрокиИдДереваСоответствие цикл
		
		СтрокаДерева = ДеревоНоменклатуры.НайтиПоИдентификатору(СтрокаИд.Ключ);
		Если ЗначениеЗаполнено( СтрокаДерева[ИмяПоляВключенияОтметки]) и СтрокаДерева[ИмяПоляВключенияОтметки]>0 тогда
			СтрокаДерева.Отметка = Истина;
		Иначе
			СтрокаДерева.Отметка = Ложь;
			
		КонецЕсли;
		// ++ rarus yukuzi 23.03.2021   //
		Если не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) тогда
			Если СтрокаДерева.Свойство("Требуется") тогда
				СтрокаДерева.Требуется="";
			КонецЕсли;
			Если СтрокаДерева.Свойство("Остаток") тогда
				СтрокаДерева.Остаток="";
			КонецЕсли;	
			Если СтрокаДерева.Свойство("КоличествоСМинЗапасом") тогда
				СтрокаДерева.КоличествоСМинЗапасом="";
			КонецЕсли;	
			Если СтрокаДерева.Свойство("Количество") тогда
				СтрокаДерева.Количество="";
			КонецЕсли;	
			Если СтрокаДерева.Свойство("Затребовано") тогда
				СтрокаДерева.Затребовано="";
			КонецЕсли;	
			Если СтрокаДерева.Свойство("Затребовано") тогда
				СтрокаДерева.Затребовано="";
			КонецЕсли;	


		КонецЕсли;	
		// -- rarus yukuzi 23.03.2021
		
	КонецЦикла;
	
КонецПроцедуры	
&НаСервере
Процедура УстановитьСнятьПометку(Вкл, СтрокиИдДереваСоответствие)
	
	Для Каждого СтрокаИд Из СтрокиИдДереваСоответствие цикл
		
		СтрокаДерева = ДеревоНоменклатуры.НайтиПоИдентификатору(СтрокаИд.Ключ);
		Если ЗначениеЗаполнено(СтрокаДерева.Номенклатура) тогда
			СтрокаДерева.Отметка = Вкл;
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры	

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗначенияЗаполнения=Параметры.ЗначенияЗаполнения;
		ОткрытиеЗаявкиНаСнабжение(ЗначенияЗаполнения) ;
	КонецЕсли;
	
	
	
	
КонецПроцедуры
&НаКлиенте
Процедура ОткрытиеЗаявкиНаСнабжение(ЗначенияЗаполнения) 
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЗначенияЗаполнения"		, ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("UID", УникальныйИдентификатор);
	
	//Оповещение = Новый ОписаниеОповещения("СформироватьЗаявкуЗавершение", ЭтотОбъект);
	
	//ОткрытьФорму("Документ.впЗаявкаНаСнабжение.ФормаОбъекта", СтруктураПараметров,,,,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	// ++ rarus PleA 02.06.2021 [29321 ]
	//ЗаписатьЗаявку(СтруктураПараметров);
	// -- rarus PleA
	// ++ rarus PleA 02.06.2021 [29321 ]
	ПроверитьЗаписатьЗаявку(СтруктураПараметров);
	// -- rarus PleA
	
КонецПроцедуры

// ++ rarus PleA 02.06.2021 [29321]
&НаКлиенте
Процедура ПроверитьЗаписатьЗаявку(СтруктураПараметров)
	
	
	Если ПроверитьСтрокиЗаявки(СтруктураПараметров.ЗначенияЗаполнения.МассивСтрокНоменклатуры) тогда
		
		ЗаписатьЗаявку(СтруктураПараметров);
		
	Иначе 
		
		ПоказатьПредупреждение(,"Нет выделенных строк с заполненным количеством к заказу");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьСтрокиЗаявки(Строки)
	
	Если Строки.Количество() = 0 тогда
		Возврат Ложь;
	КонецЕсли;
	
	Количество = 0;
	Для Каждого Строка Из Строки цикл
		
		Количество = Количество + Строка.Количество;
		
	КонецЦикла;	
	
	Возврат Количество > 0;
	
КонецФункции	
 
// -- rarus PleA

&НаСервере
Процедура ЗаписатьЗаявку(СтруктураПараметров) 
	Попытка
		ДокОбъект = Документы.впЗаявкаНаСнабжение.СоздатьДокумент();
		ДокОбъект.Заполнить(СтруктураПараметров.ЗначенияЗаполнения);
		ДокОбъект.Дата=ТекущаяДата();
		Если ЗначениеЗаполнено(ОбъектРемонта) и не КВыгрузке=1 тогда
			//ДокОбъект.ОбъектРемонта=ОбъектРемонта;
			//ДокОбъект.Комментарий="Заявка сформирована для объекта ремонта: """+Строка (ОбъектРемонта)+"""";
		КонецЕсли;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		НовыйПодготовленныйДокумент=ПодготовленныеДокументы.Добавить();
		НовыйПодготовленныйДокумент.Документ=ДокОбъект.Ссылка;
		ШаблонСообщения = НСтр("ru = 'Сформирован документ ""Заявка на снабжение"" : %1.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДокОбъект.Номер);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
		
	Исключение
		ШаблонСообщения = НСтр("ru = 'При создании документа ""Заявка на снабжение"" произошла ошибка: %1.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ОписаниеОшибки());
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецПопытки;
	
	
	
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаявкуЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	
	
	
КонецПроцедуры

&НаСервере
Функция СтруктураДляЗаполненияЗаявки();
	
	СписокОР=Новый СписокЗначений;
	тзОтмеченыхСтрок= Новый ТаблицаЗначений;
	тзОтмеченыхСтрок.Колонки.Добавить("Номенклатура");
	тзОтмеченыхСтрок.Колонки.Добавить("Количество");
	тзОтмеченыхСтрок.Колонки.Добавить("КоличествоУпаковок");
	Дз= Новый ДеревоЗначений;
	ДЗ=РеквизитФормыВЗначение("ДеревоНоменклатуры");
	Если не КВыгрузке=2 тогда
		ДЗ.Колонки.Количество.Имя = "Количество1";
		ДЗ.Колонки.КоличествоСМинЗапасом.Имя = "Количество";
	КонецЕсли;
	
	
	Комментарий="";
	ТаблицаРодителей=Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("ОР");
	ПолучитьДанныеДЗ(ДЗ, тзОтмеченыхСтрок, ТаблицаРодителей);
	ТаблицаРодителей.Свернуть("ОР");
	Для каждого стрТЗ  Из ТаблицаРодителей  Цикл
		Комментарий=Комментарий+""""+Строка (стрТЗ.ОР)+"""";
	КонецЦикла;
	
	
	тзОтмеченыхСтрок.Свернуть("Номенклатура","Количество, КоличествоУпаковок");
	
	СтруктураВозврата=Новый Структура;
	СтруктураВозврата.Вставить("МассивСтрокНоменклатуры",ОбщегоНазначения.ТаблицаЗначенийВМассив(тзОтмеченыхСтрок));
	Если КВыгрузке=1 тогда
		СтруктураВозврата.Вставить("Основание"		, ЗаявкаНаРемонт);
	КонецЕсли;
	Если не Комментарий="" тогда
		ТекстКомментария="Заявка сформирована для объекта ремонта: "+Комментарий;
		СтруктураВозврата.Вставить("Комментарий"		, ТекстКомментария);
	ИначеЕсли ЗначениеЗаполнено(ОбъектРемонта) тогда 
		СтруктураВозврата.Вставить("Комментарий"		, "Заявка сформирована для объекта ремонта: """+Строка (ОбъектРемонта)+"""");
		
	КонецЕсли;
	
	
	
	
	Возврат  СтруктураВозврата;
	
	
	
	
КонецФункции
&НаСервере
Процедура ПреобразоватьВ_ТЗ(Данные, ТаблицаЗначений)
	Для Каждого Строка Из Данные.Строки Цикл
		
		Если Строка.Отметка тогда
			НовСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,Строка);
			
			НовСтрока.КоличествоУпаковок=Строка.Количество;
			
		КонецЕсли;	
		Если Строка.Строки.Количество()>0 Тогда
			
			ПреобразоватьВ_ТЗ(Строка, ТаблицаЗначений);
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры
&НаСервере
Процедура ПолучитьДанныеДЗ(Данные, ТаблицаЗначений,  ТаблицаРодителей)
	Для Каждого Строка Из Данные.Строки Цикл
		
		// ++ rarus PleA 02.06.2021 [29321]
		//Если Строка.Отметка тогда
		// -- rarus PleA
		
		// ++ rarus PleA 02.06.2021 [29321]
		Если Строка.Отметка И Строка.Количество тогда
		// -- rarus PleA
			
			НовСтрока = ТаблицаЗначений.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока,Строка);
			
			НовСтрока.КоличествоУпаковок=Строка.Количество;
			Если  ЗначениеЗаполнено(Строка.Родитель) тогда
				НовРодитель=ТаблицаРодителей.Добавить();
				НовРодитель.ОР= Строка.Родитель.ОбъектРемонта;
			КонецЕсли;
		КонецЕсли;	
		Если Строка.Строки.Количество()>0 Тогда
			
			ПолучитьДанныеДЗ(Строка, ТаблицаЗначений,ТаблицаРодителей);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция  ПроверкаЗаявокНаСнабжение(СписокОснований)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	впЗаявкаНаСнабжениеДокументыОснования.Ссылка КАК Ссылка,
	|	впЗаявкаНаСнабжениеДокументыОснования.ДокументОснование КАК ДокументОснование,
	|	впЗаявкаНаСнабжениеДокументыОснования.Ссылка.Представление КАК ПредставлениеЗС,
	|	впЗаявкаНаСнабжениеДокументыОснования.ДокументОснование.Представление КАК ПредставлениеЗР
	|ИЗ
	|	Документ.впЗаявкаНаСнабжение.ДокументыОснования КАК впЗаявкаНаСнабжениеДокументыОснования
	|ГДЕ
	|	впЗаявкаНаСнабжениеДокументыОснования.ДокументОснование В(&ДокументОснование)
	|	И впЗаявкаНаСнабжениеДокументыОснования.Ссылка.Проведен
	|	И НЕ впЗаявкаНаСнабжениеДокументыОснования.Ссылка.ПометкаУдаления
	|ИТОГИ ПО
	|	ПредставлениеЗР";
	
	Запрос.УстановитьПараметр("ДокументОснование", СписокОснований);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаПредставлениеЗР = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТекстОшибки="";
	
	Пока ВыборкаПредставлениеЗР.Следующий() Цикл
		
		ЗаявкиНаСнабж="";
		ВыборкаДетальныеЗаписи = ВыборкаПредставлениеЗР.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаявкиНаСнабж=ЗаявкиНаСнабж+?(ЗаявкиНаСнабж="","", Символы.ПС)+" - "+ВыборкаДетальныеЗаписи.ПредставлениеЗС;
		КонецЦикла;
		//ТекстОшибки = ТекстОшибки+"По документу:"""+ВыборкаПредставлениеЗР.ПредставлениеЗР+""" уже сформированы заявки на снабжение:" +Символы.ПС+ЗаявкиНаСнабж+Символы.ПС;
		ТекстОшибки = ТекстОшибки+"По документу:"""+ВыборкаПредставлениеЗР.ПредставлениеЗР+""" уже сформирована заявка на снабжение:" +Символы.ПС+ЗаявкиНаСнабж+Символы.ПС;
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
	
КонецФункции
&НаКлиенте
Процедура ИнициализироватьВариантВыгрузки(НомерВарианта)
	
	Если НомерВарианта=2 тогда
		ТекущийМакет="МакетПоМинимальнымЗапасам";
		ИнициализироватьКомпоновщикНастроек();
		если ЗначениеЗаполнено(Судно) тогда
			УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрСудно",Судно);
		КонецЕсли;
		
		ОбъектРемонта= ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка");
		УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрОбъектРемонта",ОбъектРемонта, Ложь);
		
		ПолучитьСписокНаСервере();
		Элементы.ДеревоНоменклатурыТребуется.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыКоличествоСМинЗапасом.Видимость=Ложь;
		Элементы.ЗаявкаНаРемонт.Видимость=Ложь;
		Элементы.ОбъектРемонта.Видимость=Истина;
		Элементы.ГоризонтПланированияППР.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыГруппаППР.Видимость=Ложь;
		
		Элементы.ВариантППР.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыДляДерева.Видимость=Ложь;
		//
		Элементы.ТаблицаНоменклатурыСформироватьЗаявкуНаСнабжение.Видимость=Истина;
		Элементы.ДеревоНоменклатурыГруппаВычисляемых.Видимость=Истина;
		Элементы.ТаблицаНоменклатурыНеобходимыйЗапас.Видимость=Истина;
		//
		Элементы.ТаблицаНоменклатурыКЗаказу.ТолькоПросмотр=Ложь;
	ИначеЕсли НомерВарианта=1 тогда
		
		
		если ЗначениеЗаполнено(Судно) тогда
			УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрСудно",Судно);
		КонецЕсли;
		ТекущийМакет="МакетПоЗаявкеНаРемонт";
		ИнициализироватьКомпоновщикНастроек();
		УстановитьПараметрНаСервере(ЭтаФорма,"ЗаявкаНаРемонт",ЗаявкаНаРемонт);
		ПолучитьСписокНаСервере();
		Элементы.ДеревоНоменклатурыТребуется.Видимость=Истина;
		Элементы.ДеревоНоменклатурыКоличествоСМинЗапасом.Видимость=Истина;
		Элементы.ЗаявкаНаРемонт.Видимость=Истина;
		Элементы.ОбъектРемонта.Видимость=Ложь;
		Элементы.ГоризонтПланированияППР.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыГруппаППР.Видимость=Истина;
		Элементы.ДеревоНоменклатурыИсточникПотребности.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыОбъектРемонта.Видимость=Истина;
		Элементы.ДеревоНоменклатурыДляДерева.Видимость=Истина;
		//
		Элементы.ТаблицаНоменклатурыСформироватьЗаявкуНаСнабжение.Видимость=Истина;
		Элементы.ДеревоНоменклатурыГруппаВычисляемых.Видимость=Истина;
		Элементы.ТаблицаНоменклатурыНеобходимыйЗапас.Видимость=Истина;
		
		//
		Элементы.ВариантППР.Видимость=Ложь;
		Элементы.ТаблицаНоменклатурыКЗаказу.ТолькоПросмотр=Истина;
		
	Иначе
		ИзменениеВариантаППР();
		
	КонецЕсли;	
	
КонецПроцедуры	
&НаКлиенте
Процедура ИзменениеВариантаППР()
	
	Если ВариантППР=0 тогда
		ТекущийМакет="МакетПоППР";
		ИнициализироватьКомпоновщикНастроек();
		Элементы.ДеревоНоменклатурыГруппаППР.Видимость=Истина;
		Элементы.ДеревоНоменклатурыИсточникПотребности.Видимость=Истина;
		Элементы.ДеревоНоменклатурыОбъектРемонта.Видимость=Истина;
		Элементы.ДеревоНоменклатурыДляДерева.Видимость=Истина;
		Элементы.ТаблицаНоменклатурыСформироватьЗаявкуНаСнабжение.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыГруппаВычисляемых.Видимость=Ложь;
		Элементы.ТаблицаНоменклатурыНеобходимыйЗапас.Видимость=Ложь;
	Иначе
		ТекущийМакет="МакетПоППР_итоговый";
		ИнициализироватьКомпоновщикНастроек();
		Элементы.ДеревоНоменклатурыГруппаППР.Видимость=Истина;
		Элементы.ДеревоНоменклатурыИсточникПотребности.Видимость=Ложь;
		Элементы.ДеревоНоменклатурыОбъектРемонта.Видимость=Истина;
		Элементы.ДеревоНоменклатурыДляДерева.Видимость=Истина;
		Элементы.ТаблицаНоменклатурыСформироватьЗаявкуНаСнабжение.Видимость=Истина;
		Элементы.ДеревоНоменклатурыГруппаВычисляемых.Видимость=Истина;
		Элементы.ТаблицаНоменклатурыНеобходимыйЗапас.Видимость=Истина;
	Конецесли;
	Элементы.ДеревоНоменклатурыТребуется.Видимость=Истина;
	Элементы.ДеревоНоменклатурыКоличествоСМинЗапасом.Видимость=Истина;
	Элементы.ЗаявкаНаРемонт.Видимость=Ложь;
	Элементы.ОбъектРемонта.Видимость=Истина;
	Элементы.ГоризонтПланированияППР.Видимость=Истина;
	Элементы.ВариантППР.Видимость=Истина;
	Элементы.ТаблицаНоменклатурыКЗаказу.ТолькоПросмотр=Истина;
	
	если ЗначениеЗаполнено(Судно) тогда
		УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрСудно",Судно);
		Если Не ЗначениеЗаполнено(ОбъектРемонта) тогда
			ОбъектРемонта=ОРПоСудну(Судно);
		КонецЕсли;
		
	КонецЕсли;
	УстановитьПараметрНаСервере(ЭтаФорма,"ПараметрОбъектРемонта",ОбъектРемонта);
	
	УстановитьПараметрНаСервере(ЭтаФорма,"ДатаНачала",ГоризонтПланированияППР.ДатаНачала);
	УстановитьПараметрНаСервере(ЭтаФорма,"ДатаКонца",ГоризонтПланированияППР.ДатаОкончания);
	
	
	ПолучитьСписокНаСервере();
	
	
	
	
КонецПроцедуры



&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрНаСервере(Форма,ИмяПараметра, ЗначениеПараметра, Использование=Истина)
	ЭлементыПараметров = Форма.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы;
	НужныйПараметр=ЭлементыПараметров.Найти(ИмяПараметра);
	Если не НужныйПараметр=неопределено тогда 
		НужныйПараметр.Значение = ЗначениеПараметра;
		НужныйПараметр.Использование = Использование;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОРПоСудну(Судно)
	ОР = ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	впОбъектыРемонта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.впОбъектыРемонта КАК впОбъектыРемонта
	|ГДЕ
	|	впОбъектыРемонта.ПодразделениеИсполнитель = &Судно
	|	И впОбъектыРемонта.Родитель = ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Судно", Судно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		ОР=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ОР;	
	
КонецФункции 


&НаКлиенте
Процедура ОбъектРемонтаОчистка(Элемент, СтандартнаяОбработка)
	Если КВыгрузке=0 тогда
		СтандартнаяОбработка=Ложь;
		ПоказатьПредупреждение(,"Для варианта работы по ППР необходимо, указание объекта ремонта!");
	КонецЕсли;	
КонецПроцедуры

// ++ rarus bushni 24.08.2021 ФТ.АН.01.32
&НаКлиенте
Процедура ВывестиКолонкиПоАналогам()
	Если ВыводитьОстаткиПоАналогам Тогда		
		Если КВыгрузке = 2 Тогда
			Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Истина;
			Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Ложь;
		ИначеЕсли КВыгрузке = 1 Тогда
			Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Истина;
			Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Истина;
		ИначеЕсли КВыгрузке = 0 Тогда
			Если ВариантППР = 0 Тогда
				Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Ложь;
				Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Ложь;				
			Иначе
				Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Истина;
				Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Истина;				
			КонецЕсли;
		Иначе
			Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Ложь;
			Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Ложь;			
		КонецЕсли;
	Иначе
		Элементы.ДеревоНоменклатурыОстатокСУчетомАналогов.Видимость = Ложь;
		Элементы.ДеревоНоменклатурыКЗаказуСУчетомАналогов.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьОстаткиПоАналогамПриИзменении(Элемент)
	ВывестиКолонкиПоАналогам();
	ПолучитьСписокНаСервере();
КонецПроцедуры 

&НаСервере
Функция ПолучитьАналоги(ВТНоменклатура)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТНоменклатура.Номенклатура КАК Номенклатура
		|ПОМЕСТИТЬ ВТНоменклатура
		|ИЗ
		|	&ВТНоменклатура КАК ВТНоменклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТНоменклатура.Номенклатура КАК Номенклатура,
		|	рарусАналоги.Аналог КАК Аналог
		|ПОМЕСТИТЬ ВТАналоги
		|ИЗ
		|	ВТНоменклатура КАК ВТНоменклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.рарусАналоги КАК рарусАналоги
		|		ПО ВТНоменклатура.Номенклатура = рарусАналоги.Оригинал
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &ИспользуетсяЦелеваяСхемаАналогов = ИСТИНА
		|				ТОГДА рарусАналоги.ПризнакЗагрузкиИзSAP = ИСТИНА
		|			ИНАЧЕ рарусАналоги.ПризнакЗагрузкиИзSAP = ЛОЖЬ
		|					И рарусАналоги.ПризнакДостроеннойСвязи = ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫБОР
		|		КОГДА ТоварыДругогоКачества.Номенклатура ЕСТЬ NULL
		|			ТОГДА рарусИмуществоНаСудахОстатки.Номенклатура
		|		ИНАЧЕ ТоварыДругогоКачества.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	СУММА(рарусИмуществоНаСудахОстатки.КоличествоОстаток) КАК ВНаличииОстаток,
		|	рарусИмуществоНаСудахОстатки.Склад КАК Склад
		|ПОМЕСТИТЬ втОстаткиПоИмуществу
		|ИЗ
		|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
		|			,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ТаблицаОтбора.Аналог КАК Номенклатура
		|					ИЗ
		|						ВТАналоги КАК ТаблицаОтбора)
		|				И ВЫБОР
		|					КОГДА &ПараметрСудно = ЗНАЧЕНИЕ(Справочник.vftСуда.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Склад.Судно = &ПараметрСудно
		|				КОНЕЦ) КАК рарусИмуществоНаСудахОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
		|		ПО рарусИмуществоНаСудахОстатки.Номенклатура = ТоварыДругогоКачества.НоменклатураБрак
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА ТоварыДругогоКачества.Номенклатура ЕСТЬ NULL
		|			ТОГДА рарусИмуществоНаСудахОстатки.Номенклатура
		|		ИНАЧЕ ТоварыДругогоКачества.Номенклатура
		|	КОНЕЦ,
		|	рарусИмуществоНаСудахОстатки.Склад
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура,
		|	Склад
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	рарусТоварыЗаявокНаСнабжениеОстатки.Номенклатура КАК Номенклатура,
		|	рарусТоварыЗаявокНаСнабжениеОстатки.Заявка КАК Заявка,
		|	рарусТоварыЗаявокНаСнабжениеОстатки.ЗаказаноОстаток КАК ЗаказаноОстаток,
		|	рарусТоварыЗаявокНаСнабжениеОстатки.Заявка.Подразделение КАК Судно
		|ПОМЕСТИТЬ втОстаткиЗаявок
		|ИЗ
		|	РегистрНакопления.рарусТоварыЗаявокНаСнабжение.Остатки(
		|			,
		|			Номенклатура В
		|					(ВЫБРАТЬ
		|						ТаблицаОтбора.Аналог КАК Номенклатура
		|					ИЗ
		|						ВТАналоги КАК ТаблицаОтбора)
		|				И ВЫБОР
		|					КОГДА &ПараметрСудно = ЗНАЧЕНИЕ(Справочник.vftСуда.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ Заявка.Подразделение = &ПараметрСудно
		|				КОНЕЦ) КАК рарусТоварыЗаявокНаСнабжениеОстатки
		|ГДЕ
		|	рарусТоварыЗаявокНаСнабжениеОстатки.ЗаказаноОстаток > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Заявка,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура КАК Номенклатура,
		|	впЗаявкаНаСнабжениеМатериалыИРаботы.КодСтроки КАК КодСтроки,
		|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втКодыСтрокЗаявок
		|ИЗ
		|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК впЗаявкаНаСнабжениеМатериалыИРаботы
		|ГДЕ
		|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка В
		|			(ВЫБРАТЬ
		|				втОстаткиЗаявок.Заявка КАК Заявка
		|			ИЗ
		|				втОстаткиЗаявок КАК втОстаткиЗаявок)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КодСтроки,
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втКодыСтрокЗаявок.Номенклатура КАК Номенклатура,
		|	втКодыСтрокЗаявок.КодСтроки КАК КодСтроки,
		|	втКодыСтрокЗаявок.Ссылка КАК Ссылка,
		|	рарусСостоянияСтрокЗаявокНаСнабжение.Состояние КАК Состояние
		|ПОМЕСТИТЬ втСостоянияСтрокСКодом
		|ИЗ
		|	втКодыСтрокЗаявок КАК втКодыСтрокЗаявок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.рарусСостоянияСтрокЗаявокНаСнабжение КАК рарусСостоянияСтрокЗаявокНаСнабжение
		|		ПО втКодыСтрокЗаявок.Ссылка = рарусСостоянияСтрокЗаявокНаСнабжение.Заказ
		|			И втКодыСтрокЗаявок.КодСтроки = рарусСостоянияСтрокЗаявокНаСнабжение.КодСтроки
		|ГДЕ
		|	НЕ рарусСостоянияСтрокЗаявокНаСнабжение.Состояние = ЗНАЧЕНИЕ(Перечисление.рарусСостоянияЗаявокНаСнабжение.СогласованиеКапитаном)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втОстаткиЗаявок.Номенклатура КАК Номенклатура,
		|	СУММА(втОстаткиЗаявок.ЗаказаноОстаток) КАК ЗаказаноОстаток,
		|	втОстаткиЗаявок.Судно КАК Судно
		|ПОМЕСТИТЬ втНеВРаботе
		|ИЗ
		|	втОстаткиЗаявок КАК втОстаткиЗаявок
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСостоянияСтрокСКодом КАК втСостоянияСтрокСКодом
		|		ПО втОстаткиЗаявок.Заявка = втСостоянияСтрокСКодом.Ссылка
		|			И втОстаткиЗаявок.Номенклатура = втСостоянияСтрокСКодом.Номенклатура
		|ГДЕ
		|	НЕ втСостоянияСтрокСКодом.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	втОстаткиЗаявок.Номенклатура,
		|	втОстаткиЗаявок.Судно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ЕСТЬNULL(втОстаткиПоИмуществу.ВНаличииОстаток, 0)) КАК Остаток,
		|	СУММА(ЕСТЬNULL(втНеВРаботе.ЗаказаноОстаток, 0)) КАК Затребовано,
		|	ЕСТЬNULL(втНеВРаботе.Номенклатура, втОстаткиПоИмуществу.Номенклатура) КАК Номенклатура
		|ПОМЕСТИТЬ ВТИтог
		|ИЗ
		|	втОстаткиПоИмуществу КАК втОстаткиПоИмуществу
		|		ПОЛНОЕ СОЕДИНЕНИЕ втНеВРаботе КАК втНеВРаботе
		|		ПО втОстаткиПоИмуществу.Номенклатура = втНеВРаботе.Номенклатура
		|			И втОстаткиПоИмуществу.Склад.Судно = втНеВРаботе.Судно
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(втНеВРаботе.Номенклатура, втОстаткиПоИмуществу.Номенклатура)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТАналоги.Номенклатура КАК Номенклатура,
		|	ВТАналоги.Аналог КАК Аналог,
		|	ЕСТЬNULL(ВТИтог.Остаток, 0) КАК Остаток,
		|	ЕСТЬNULL(ВТИтог.Затребовано, 0) КАК Затребовано
		|ИЗ
		|	ВТАналоги КАК ВТАналоги
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИтог КАК ВТИтог
		|		ПО ВТАналоги.Аналог = ВТИтог.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура";
	
	Запрос.УстановитьПараметр("ИспользуетсяЦелеваяСхемаАналогов", ПолучитьФункциональнуюОпцию("рарусИспользуетсяЦелеваяСхемаАналогов"));
	Запрос.УстановитьПараметр("ПараметрСудно", Судно);
	Запрос.УстановитьПараметр("ВТНоменклатура", ВТНоменклатура);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // -- rarus bushni 24.08.2021

#КонецОбласти

