
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	//Если Не Параметры.ЗначенияЗаполнения.Свойство("ВнешнийИсточник") Тогда
	//	
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	//		НСтр("ru = 'Сначала укажите значения параметров. Форма не может быть открыта без их заполнения.'"),,,, Отказ);
	//	Возврат;
	//	
	//КонецЕсли;
	
	УстановитьВидимостьЭлементовФормы();
	
	Если ЗначениеЗаполнено(Запись.ВидТранспортаСообщенийОбменаПоУмолчанию) Тогда
		
		ИмяСтраницы = "НастройкиТранспорта[ВидТранспорта]";
		ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "[ВидТранспорта]"
		, ОбщегоНазначения.ИмяЗначенияПеречисления(Запись.ВидТранспортаСообщенийОбменаПоУмолчанию));
		
		// rarus_KloA_16.05.2014 < 
			УстановитьВидимостьСтраниц(ИмяСтраницы);
			// rarus_KloA_16.05.2014 > 

		Если Элементы[ИмяСтраницы].Видимость Тогда
			
			Элементы.СтраницыВидовТранспорта.ТекущаяСтраница = Элементы[ИмяСтраницы];
		КонецЕсли;
		
	КонецЕсли;
	
	СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису 
	= ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису();
	
	Элементы.ИсправитьОшибкиУстановкиВнешнегоСоединения.Видимость = Ложь;
	
КонецПроцедуры

// rarus_KloA_16.05.2014 < 
&НаСервере
Процедура УстановитьВидимостьСтраниц(ИмяСтраницы)
	Элементы[ИмяСтраницы].Видимость = Истина;
	Для каждого Страница Из Элементы.СтраницыВидовТранспорта.ПодчиненныеЭлементы Цикл
		Если Страница.Имя<>ИмяСтраницы Тогда
			Элементы[Страница.Имя].Видимость = Ложь;	
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры
 
// rarus_KloA_16.05.2014 > 

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВариантРаботыИнформационнойБазыПриИзменении();
	
	АутентификацияОперационнойСистемыПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ИсправитьОшибкиУстановкиВнешнегоСоединения(Команда)
	
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеCOM(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	ВыполнитьПроверкуУстановкиВнешнегоСоединения(Отказ);
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'Не удалось установить подключение.'"));
	Иначе
		Предупреждение(НСтр("ru = 'Подключение успешно установлено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWS(Команда)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	//raruskzn AydaFZ 03.12.2019 {
	Если Запись.HTTPСервис Тогда
		
		ВыполнитьПроверкуУстановкиПодключенияHTTP(Отказ);
		
	Иначе
		
		ВыполнитьПроверкуУстановкиПодключенияWS(Отказ);
		
	КонецЕсли;
	//raruskzn AydaFZ 03.12.2019}
		
	Если Отказ Тогда
		
		//НСтрока = НСтр("ru = 'Ошибка установки подключения.
		//					|Перейти в журнал регистрации?'"
		//);
		//Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
		//Если Ответ = КодВозвратаДиалога.Да Тогда
		//	
		//	Отбор = Новый Структура;
		//	Отбор.Вставить("СобытиеЖурналаРегистрации", СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису);
		//	ОткрытьФормуМодально("Обработка.ЖурналРегистрации.Форма", Отбор, ЭтаФорма);
		//	
		//КонецЕсли;
		
	Иначе
		Предупреждение(НСтр("ru = 'Подключение успешно установлено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFILE(Команда)
	
	ПроверитьПодключение("FILE");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFTP(Команда)
	
	ПроверитьПодключение("FTP");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеEMAIL(Команда)
	
	ПроверитьПодключение("EMAIL");
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Запись, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Запись, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура COMКаталогИнформационнойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Запись, "COMКаталогИнформационнойБазы", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура COMКаталогИнформационнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Запись, "COMКаталогИнформационнойБазы", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайла(Запись, "ИмяФайлаПротоколаОбмена", СтандартнаяОбработка, НСтр("ru = 'Текстовый документ(*.txt)|*.txt'"), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаПротоколаОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Запись, "ИмяФайлаПротоколаОбмена", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура COMВариантРаботыИнформационнойБазыПриИзменении(Элемент)
	
	ВариантРаботыИнформационнойБазыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура COMАутентификацияОперационнойСистемыПриИзменении(Элемент)
	
	АутентификацияОперационнойСистемыПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПроверитьПодключение(ВидТранспортаСтрокой)
	
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспортаСтрокой);
	
	Если Отказ Тогда
		Предупреждение(НСтр("ru = 'Не удалось установить подключение.'"));
	Иначе
		Предупреждение(НСтр("ru = 'Подключение успешно установлено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере(Отказ, ВидТранспортаСтрокой)
	
	ПроверитьДоступностьФайлаПротоколаОбмена(Отказ);
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Запись, Перечисления.ВидыТранспортаСообщенийОбмена[ВидТранспортаСтрокой]);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПроверкуУстановкиВнешнегоСоединения(Отказ)
	
	ПроверитьДоступностьФайлаПротоколаОбмена(Отказ);
	
	ОшибкаПодключенияКомпоненты = Ложь;
	
	//rarus_AfoD 26.08.2021 < 
	//ОбменДаннымиСервер.ВыполнитьПроверкуУстановкиВнешнегоСоединения(Отказ, Запись, ОшибкаПодключенияКомпоненты);
	ТекстСообщения = "Прямое подключение (com) к судам не поддерживается.";
		
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при подключении. ") + ТекстСообщения,,,Отказ);
	ОшибкаПодключенияКомпоненты = Истина;
	Отказ = Истина;
	//rarus_AfoD 26.08.2021 > 
	
	Если ОшибкаПодключенияКомпоненты И ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		Элементы.ИсправитьОшибкиУстановкиВнешнегоСоединения.Видимость = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

//raruskzn AydaFZ 03.12.2019{
&НаКлиенте
Процедура ВыполнитьПроверкуУстановкиПодключенияHTTP(Отказ)
		

	ПроверитьДоступностьФайлаПротоколаОбмена(Отказ);
	
	ОшибкаПодключения = Ложь;
	
	// rarus makole 18112020 ++
	//HTTPСоединение = Новый HTTPСоединение(Запись.WSИмяСервиса, , Запись.WSИмяПользователя, Запись.WSПароль); 
	// ++ rarus makole 2021-03-03
	//HTTPСоединение = Новый HTTPСоединение(Запись.WSИмяСервиса, Запись.WSПорт, Запись.WSИмяПользователя, Запись.WSПароль);
	
	Если Запись.WSЗащищенноеСоединение Тогда
		SSL = Новый ЗащищенноеСоединениеOpenSSL(
                Новый СертификатКлиентаWindows(),
                Новый СертификатыУдостоверяющихЦентровWindows());
	Иначе
		SSL = Неопределено;
	КонецЕсли;
	//HTTPСоединение = Новый HTTPСоединение(Запись.WSИмяСервиса, Запись.WSПорт, Запись.WSИмяПользователя, Запись.WSПароль); 
	HTTPСоединение = Новый HTTPСоединение(Запись.WSИмяСервиса, Запись.WSПорт, Запись.WSИмяПользователя, Запись.WSПароль,,, SSL); 
	// -- rarus makole 2021-03-03			
	// rarus makole 18112020 --
	
	HTTPЗапрос = Новый HTTPЗапрос(Запись.WSURLВебСервиса + "Тест"); 
	
	Попытка
		
		Результат =  HTTPСоединение.Получить(HTTPЗапрос);
		
	Исключение
		
		ОшибкаПодключения = Истина;
		
		ТекстСообщения = ИнформацияОбОшибке();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка при подключении. ") + ПодробноеПредставлениеОшибки(ТекстСообщения),,,,Отказ);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если Результат.КодСостояния < 300 Тогда 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Соединение установлено");	
		
	Иначе
		
		ОшибкаПодключения = Истина;

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Ошибка при подключении. Соединение не установлено",,,,Отказ);	
		
	КонецЕсли; 
	
	
	Если ОшибкаПодключения И ОбщегоНазначенияКлиент.ИнформационнаяБазаФайловая() Тогда
		
		Элементы.ИсправитьОшибкиУстановкиВнешнегоСоединения.Видимость = Истина;
		
	КонецЕсли;

КонецПроцедуры//raruskzn AydaFZ 03.12.2019}

&НаСервере
Процедура ВыполнитьПроверкуУстановкиПодключенияWS(Отказ)
	
	ПроверитьДоступностьФайлаПротоколаОбмена(Отказ);
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Запись);
	
	WSПрокси = ОбменДаннымиСервер.ПолучитьWSПроксиПоПараметрамПодключения(ПараметрыПодключения);
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовФормы()
	
	ИспользуемыеТранспорты = Новый Массив;
	
	ИспользуемыеТранспорты.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ИспользуемыеТранспорты.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	ИспользуемыеТранспорты.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
	ИспользуемыеТранспорты.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
	//raruskzn AydaFZ 03.12.2019 {
	ИспользуемыеТранспорты.Добавить(Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	//raruskzn AydaFZ 03.12.2019}
	
	Для Каждого СтраницаВидаТранспорта Из Элементы.СтраницыВидовТранспорта.ПодчиненныеЭлементы Цикл
		
		СтраницаВидаТранспорта.Видимость = Ложь;
		
	КонецЦикла;
	
	Элементы.ВидТранспортаСообщенийОбменаПоУмолчанию.СписокВыбора.Очистить();
	
	Для Каждого Элемент Из ИспользуемыеТранспорты Цикл
		
		ИмяЭлементаФормы = "НастройкиТранспорта[ВидТранспорта]";
		ИмяЭлементаФормы = СтрЗаменить(ИмяЭлементаФормы, "[ВидТранспорта]", ОбщегоНазначения.ИмяЗначенияПеречисления(Элемент));
		
		Элементы[ИмяЭлементаФормы].Видимость = Истина;
		
		Элементы.ВидТранспортаСообщенийОбменаПоУмолчанию.СписокВыбора.Добавить(Элемент, Строка(Элемент));
		
	КонецЦикла;
	
	Если ИспользуемыеТранспорты.Количество() = 1 Тогда
		
		Элементы.СтраницыВидовТранспорта.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыИнформационнойБазыПриИзменении()
	
	ТекущаяСтраница = ?(Запись.COMВариантРаботыИнформационнойБазы = 0, Элементы.СтраницаВариантРаботыФайловый, Элементы.СтраницаВариантРаботыКлиентСерверный);
	
	Элементы.ВариантыРаботыИнформационнойБазы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияОперационнойСистемыПриИзменении()
	
	Элементы.COMИмяПользователя.Доступность    = Не Запись.COMАутентификацияОперационнойСистемы;
	Элементы.COMПарольПользователя.Доступность = Не Запись.COMАутентификацияОперационнойСистемы;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДоступностьФайлаПротоколаОбмена(Отказ)
	
	СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Запись.ИмяФайлаПротоколаОбмена);
	ИмяФайлаПротокола = СтруктураИмениФайла.ИмяБезРасширения;
	ИмяКаталогаПроверки	 = СтруктураИмениФайла.Путь;
	КаталогПроверки = Новый Файл(ИмяКаталогаПроверки);
	ИмяФайлаПроверки = "test.tmp";
	
	Если Не ЗначениеЗаполнено(ИмяФайлаПротокола) Тогда
		Возврат;
	ИначеЕсли Не КаталогПроверки.Существует() Тогда
		
		СтрокаСообщения = НСтр("ru = 'Каталог файла протокола обмена ""%1"" не найден.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяКаталогаПроверки);
		Отказ = Истина;
		
	ИначеЕсли Не СоздатьФайлПроверки(ИмяКаталогаПроверки, ИмяФайлаПроверки) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не удалось создать файл в папке протокола обмена: ""%1"".'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяКаталогаПроверки);
		Отказ = Истина;
		
	ИначеЕсли Не УдалитьФайлПроверки(ИмяКаталогаПроверки, ИмяФайлаПроверки) Тогда
		
		СтрокаСообщения = НСтр("ru = 'Не удалось удалить файл в папке протокола обмена: ""%1"".'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяКаталогаПроверки);
		Отказ = Истина;
		
	Иначе 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения,,,, Отказ);
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Транспорт сообщений обмена'"), УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщения);
	
КонецПроцедуры

&НаСервере
Функция СоздатьФайлПроверки(ИмяКаталогаПроверки, ИмяФайлаПроверки)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.ДобавитьСтроку(НСтр("ru = 'Временный файл проверки'"));
	
	Попытка
		ТекстовыйДокумент.Записать(ИмяКаталогаПроверки + "/" + ИмяФайлаПроверки);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция УдалитьФайлПроверки(ИмяКаталогаПроверки, ИмяФайлаПроверки)
	
	Попытка
		УдалитьФайлы(ИмяКаталогаПроверки, ИмяФайлаПроверки);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции


&НаКлиенте
Процедура ВидТранспортаСообщенийОбменаПоУмолчаниюПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Запись.ВидТранспортаСообщенийОбменаПоУмолчанию) Тогда
		
		ИмяСтраницы = "НастройкиТранспорта[ВидТранспорта]";
		ИмяСтраницы = СтрЗаменить(ИмяСтраницы, "[ВидТранспорта]"
		, ИмяЗначенияПеречисления(Запись.ВидТранспортаСообщенийОбменаПоУмолчанию));
		
		// rarus_KloA_16.05.2014 < 
			УстановитьВидимостьСтраниц(ИмяСтраницы);
			// rarus_KloA_16.05.2014 > 

		Если Элементы[ИмяСтраницы].Видимость Тогда
			
			Элементы.СтраницыВидовТранспорта.ТекущаяСтраница = Элементы[ИмяСтраницы];
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ИмяЗначенияПеречисления(ВидТранспортаСообщенийОбменаПоУмолчанию)
	
	Возврат ОбщегоНазначения.ИмяЗначенияПеречисления(ВидТранспортаСообщенийОбменаПоУмолчанию);
	
КонецФункции

