#Область ПрограммныйИнтерфейс

#Область МетодыРаботыАвтозаполненияРеквизитовДокумента

// Заполняет колонку таблицы значений последовательными номерами
//
// Параметры:
//	Таблица - таблица значений, строки которой нужно пронумеровать
//	ИмяКолонкиНомераСтроки - колонка таблицы значений, в которой будут указаны номера строк.
//
Процедура ПронумероватьТаблицуЗначений(Таблица, ИмяКолонкиНомераСтроки) Экспорт

	Если Таблица.Колонки.Найти(ИмяКолонкиНомераСтроки) = Неопределено Тогда
		Таблица.Колонки.Добавить(ИмяКолонкиНомераСтроки, ОбщегоНазначения.ОписаниеТипаЧисло(15, 0));
	КонецЕсли;

	КоличествоСтрок = Таблица.Количество() - 1;
	Для НомерСтроки = 0 По КоличествоСтрок Цикл
		Таблица[НомерСтроки][ИмяКолонкиНомераСтроки] = НомерСтроки;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область МетодыРаботыСЗапросом

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//	Запрос			- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса	- СписокЗначений - в списке перечислены тексты запросов и их имена.
//	ОбходРезультата - ОбходРезультатаЗапроса - вариант обхода результата запроса.
//	ДобавитьРазделитель - Булево - добавлять разделитель между запросами из ТекстыЗапроса
//	УничтожитьСозданныеВременныеТаблицы - Булево - добавить уничтожение временных таблиц, создаваемых в ТекстыЗапроса
//										Для уничтожения таблице должно быть присвоено имя в ТекстыЗапроса.
//
// Возвращаемое значение:
//   Структура   - структура в которую помещены полученные таблицы.
//
Функция ВыгрузитьРезультатыЗапроса(Запрос,
								 	ТекстыЗапроса,
									ОбходРезультата = Неопределено,
									ДобавитьРазделитель = Ложь,
									УничтожитьСозданныеВременныеТаблицы = Ложь) Экспорт
	
	Таблицы = Новый Структура;
	
	// Инициализация варианта обхода результата запроса.
	Если ОбходРезультата = Неопределено Тогда
		ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	КонецЕсли;
	
	Результаты = ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ДобавитьРазделитель, УничтожитьСозданныеВременныеТаблицы);
	
	Если Результаты <> Неопределено Тогда
		
		// Помещение результатов запроса в таблицы.
		Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
			ИмяТаблицы = ТекстЗапроса.Представление;
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда // имя таблицы
				Результат = Результаты[ТекстыЗапроса.Индекс(ТекстЗапроса)];
				Если Результат <> Неопределено Тогда
					ТаблицаЗапроса = Результат.Выгрузить(ОбходРезультата);
					Таблицы.Вставить(ИмяТаблицы, ТаблицаЗапроса);
				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблицы;
	
КонецФункции

// Формирует пакет запросов и возвращает результат каждого запроса
//
// Параметры:
//	Запрос			- Запрос - запрос, параметры которого предварительно установлены.
//	ТекстыЗапроса	- СписокЗначений - в списке перечислены тексты запросов и их имена.
//	ДобавитьРазделитель - Булево - добавлять разделитель между запросами из ТекстыЗапроса
//	УничтожитьСозданныеВременныеТаблицы - Булево - добавить уничтожение временных таблиц, создаваемых в ТекстыЗапроса
//										Для уничтожения таблице должно быть присвоено имя в ТекстыЗапроса.
//
// Возвращаемое значение:
//   Структура   - структура в которую помещены полученные результаты запроса.
//
Функция ПолучитьРезультатыЗапроса(Запрос,
								 	ТекстыЗапроса,
									ДобавитьРазделитель = Ложь,
									УничтожитьСозданныеВременныеТаблицы = Ложь) Экспорт
	
	Результат = Новый Структура;
	
	РезультатыЗапроса = ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ДобавитьРазделитель, УничтожитьСозданныеВременныеТаблицы);
	
	Если РезультатыЗапроса <> Неопределено Тогда
		
		// Помещение результатов запроса в таблицы.
		Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
			
			ИмяТаблицы = ТекстЗапроса.Представление;
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда // имя таблицы
				
				РезультатЗапроса = РезультатыЗапроса[ТекстыЗапроса.Индекс(ТекстЗапроса)];
				Если РезультатЗапроса <> Неопределено Тогда
					Результат.Вставить(ИмяТаблицы, РезультатЗапроса);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру границ оборотов по регистру
//
// Параметры:
//  ИмяРегистра - Строка - Имя регистра накопления.
//  Отборы      - Строка - Отборы виртуальной таблицы оборотов, для которой необходимо получить границы.
//  Параметры   - Структура - Параметры запроса для отборов виртуальной таблицы.
//
// Возвращаемое значение:
//  Структура - Структура границ со свойствами:
//  	* МинимальнаяДата - Дата - Начальная граница оборотов.
//  	* МаксимальнаяДата - Дата - Конечная граница оборотов.
//
Функция ГраницыОборотовРегистра(ИмяРегистра, Отборы, Параметры) Экспорт
	
	// Без отбора по умолчанию по полю Активность, т.к. по нему нет индекса,
	// из-за чего запрос может выполняться недопустимо долго.
	Запрос = Новый Запрос(СтрШаблон(
		"ВЫБРАТЬ
		|	МИНИМУМ(Таблица.Период)  КАК МинимальнаяДата,
		|	МАКСИМУМ(Таблица.Период) КАК МаксимальнаяДата
		|ИЗ
		|	РегистрНакопления.%1 КАК Таблица
		|ГДЕ
		|	%2", ИмяРегистра, ?(ПустаяСтрока(Отборы), "ИСТИНА", Отборы)));
	
	Для каждого Параметр Из Параметры Цикл
		Запрос.УстановитьПараметр(Параметр.Ключ, Параметр.Значение);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	СтруктураГраниц = Новый Структура;
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.МинимальнаяДата) Тогда
		СтруктураГраниц.Вставить("МинимальнаяДата", Выборка.МинимальнаяДата);
		СтруктураГраниц.Вставить("МаксимальнаяДата", Выборка.МаксимальнаяДата);
	Иначе
		СтруктураГраниц.Вставить("МинимальнаяДата", '00010101');
		СтруктураГраниц.Вставить("МаксимальнаяДата", '39991231');
	КонецЕсли;
	
	Возврат СтруктураГраниц;
	
КонецФункции

// Возвращает текст разделителя для вставки между текстами пакета запросов.
//
// Возвращаемое значение:
//  Строка - текст разделителя.
//
Функция РазделительЗапросовВПакете() Экспорт
	
	Возврат "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
КонецФункции

// Возвращает текст разделителя для вставки между текстами объединяемых запросов.
//
// Параметры:
//  ТолькоУникальные - Булево - признак того, что необходимо выбирать только уникальные записи при объединении.
//
// Возвращаемое значение:
//  Строка - текст разделителя.
//
Функция РазделительЗапросовВОбъединении(ТолькоУникальные = Ложь) Экспорт
	
	Если ТолькоУникальные Тогда
		Возврат "
		|
		|ОБЪЕДИНИТЬ
		|
		|";
	Иначе
		Возврат "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
	КонецЕсли;
	
КонецФункции

//Добавляет настройку отбора для запросов в коллекцию 
//
// Параметры:
//  Отбор               - Соответствие - коллекция настроек отборов
//  ЛевоеЗначение       - Строка       - левое значение отбора в запросах
//  ПравоеЗначение      - Строка       - правое значение отбора в запросах
//  ВидСравненияЗапроса - Строка       - вид сравнения запроса, по умолчанию: "В"
//
Процедура ДобавитьЭлементОтбораВКоллекцию(Отбор, ЛевоеЗначение, ПравоеЗначение, ВидСравненияЗапроса = "") Экспорт
	
	ВидСравненияПравоеЗначение = Новый Структура;
	
	ВидСравненияПравоеЗначение.Вставить("ВидСравнения"  , 
		?(ЗначениеЗаполнено(ВидСравненияЗапроса), ВидСравненияЗапроса, "В"));
		
	ВидСравненияПравоеЗначение.Вставить("ПравоеЗначение", ПравоеЗначение);
		
	Отбор.Вставить(ЛевоеЗначение, ВидСравненияПравоеЗначение);            
	
КонецПроцедуры

// Формирует список временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно получить.
// 
// Возвращаемое значение:
//  Строка - Временные таблицы, находящиеся в менеджере.
//
Функция СписокВременныхТаблиц(МенеджерВременныхТаблиц) Экспорт

	СписокВременныхТаблиц = Новый Массив;
	
	Для каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
		СписокВременныхТаблиц.Добавить(Таблица.ПолноеИмя);
	КонецЦикла; 
	
	Возврат СписокВременныхТаблиц;

КонецФункции

// Уничтожает временные таблицы менеджера временных таблиц.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц	 - менеджер временных таблиц, таблицы которого нужно уничтожить.
//  СписокТаблиц			 - Строка, Массив			 - имена временных таблиц для уничтожения, разделенные запятыми. Если параметр не установлен - все таблицы.
//  ИсключаяТаблицы			 - Строка, Массив			 - имена временных таблиц, которые нужно оставить, разделенные запятыми.
//
Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц, СписокТаблиц = Неопределено, ИсключаяТаблицы = Неопределено) Экспорт
	
	Если ИсключаяТаблицы <> Неопределено Тогда
		МассивИсключаемыхТаблиц = ?(ТипЗнч(ИсключаяТаблицы) = Тип("Массив"), ИсключаяТаблицы, СтрРазделить(ИсключаяТаблицы, ","));
	Иначе
		МассивИсключаемыхТаблиц = Новый Массив();
	КонецЕсли;
	
	Если СписокТаблиц <> Неопределено Тогда
		МассивТаблиц = ?(ТипЗнч(СписокТаблиц) = Тип("Массив"), СписокТаблиц, СтрРазделить(СписокТаблиц, ","));
	Иначе
		МассивТаблиц = Новый Массив();
		Для Каждого Таблица Из МенеджерВременныхТаблиц.Таблицы Цикл
			Если МассивИсключаемыхТаблиц.Найти(Таблица.ПолноеИмя) = Неопределено Тогда
				МассивТаблиц.Добавить(Таблица.ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивТаблиц.Количество() > 0 Тогда
		ТекстЗапроса = "";
		Для Каждого ИмяТаблицы Из МассивТаблиц Цикл
			ТекстЗапроса = ТекстЗапроса + "УНИЧТОЖИТЬ " + ИмяТаблицы + "; ";
		КонецЦикла;
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	КонецЕсли;
	
КонецПроцедуры

// Преобразователь текста запроса в временным таблицам - если поле есть, то оно выбирается, если нет - текст
//  заменяется на значение по умолчанию. В тексте запроса поле должно быть в виде &ТекстПоляИмяПоля_ (начитается с "&ТекстПоля",
//  потом собственно имя поля, а потом "_"
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц
//  ТекстЗапроса			 - Строка
//  ИмяТаблицы				 - Строка
//  ИмяПоля					 - Строка
//  ТекстВыражениеВыборки	 - Строка	 - значение по умолчанию - пустая строка. Если не указано - выбирается ИмяТаблицы.ИмяПоля
//  ТекстЗначенияПоУмолчанию - Строка	 - значение по умолчанию - "НЕОПРЕДЕЛЕНО"
//
Процедура ЗаменитьОтсутствующиеПоляВтВТекстеЗапроса(МенеджерВременныхТаблиц, ТекстЗапроса, ИмяТаблицы, ИмяПоля, ТекстВыражениеВыборки = "", ТекстЗначенияПоУмолчанию = "НЕОПРЕДЕЛЕНО") Экспорт
	
	ВременнаяТаблица = МенеджерВременныхТаблиц.Таблицы[ИмяТаблицы];
	
	Если ВременнаяТаблица.Колонки.Найти(ИмяПоля) <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстПоля" + ИмяТаблицы + ИмяПоля + "_",
			?(ПустаяСтрока(ТекстВыражениеВыборки), ИмяТаблицы + "." + ИмяПоля, ТекстВыражениеВыборки));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"&ТекстПоля" + ИмяТаблицы + ИмяПоля + "_",
			ТекстЗначенияПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПоискВТаблице

// Выполняет нумерацию строк таблицы значений. Для нумерации используется колонка ПорядковыйНомер.
// Если колонка с таким именем отсутствует в переданной таблице, то она будет добавлена.
//
// Параметры:
//  Таблица	- ТаблицаЗначений - таблица, строки которой будут пронумерованы.
//
Процедура ДобавитьВТаблицуПорядковыйНомерСтрок(Таблица) Экспорт
	
	ПронумероватьТаблицуЗначений(Таблица, "ПорядковыйНомер");
	
КонецПроцедуры

// Заполняет значение колонки ПорядковыйНомер в новой строке таблицы значений,
// строки которой пронумерованы (см. процедуру ДобавитьВТаблицуПорядковыйНомерСтрок).
//
// Параметры:
//  Таблица		 - ТаблицаЗначений - таблица с пронумерованными строками.
//  НоваяСтрока	 - СтрокаТаблицыЗначений - строка в которой необходимо заполнить порядковый номер.
//
Процедура ЗаполнитьПорядковыйНомерВНовойСтроке(Таблица, НоваяСтрока) Экспорт
	
	НоваяСтрока.ПорядковыйНомер = Таблица.Количество() + 1;
	
КонецПроцедуры

// Осуществляет поиск строк в таблице значений с сохранением их порядка.
//
// Параметры:
//  Таблица				 - ТаблицаЗначений - таблица в которой необходимо выполнить поиск.
//  УсловиеПоиска		 - Структура - условие поиска строк.
//  СтрокиПронумерованы	 - Булево - Истина, если строки таблицы были предварительно пронумерованы
//		(см. процедуру ДобавитьВТаблицуПорядковыйНомерСтрок).
// 
// Возвращаемое значение:
//  Массив - найденные строки.
//
Функция НайтиСтрокиССохранениемПорядка(Таблица, УсловиеПоиска, СтрокиПронумерованы = Ложь) Экспорт
	
	НайденныеСтроки = Таблица.НайтиСтроки(УсловиеПоиска);
	
	Если НайденныеСтроки.Количество() > 1 Тогда
		
		Если СтрокиПронумерованы Тогда
			
			Результат = УпорядочитьПронумерованныеСтроки(Таблица, НайденныеСтроки);
			
		Иначе
			
			Результат = УпорядочитьНеПронумерованныеСтроки(Таблица, НайденныеСтроки);
			
		КонецЕсли;
		
	Иначе
		
		Результат = НайденныеСтроки;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ПоискВТаблице

Функция УпорядочитьПронумерованныеСтроки(Таблица, МассивСтрок)
	
	СтрокиУпорядочены = МассивПронумерованныхСтрокУпорядочен(МассивСтрок);
	
	Если СтрокиУпорядочены Тогда
		
		Результат = МассивСтрок;
		
	Иначе
		
		ТаблицаСортировки = Новый ТаблицаЗначений;
		ТаблицаСортировки.Колонки.Добавить("Строка", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
		ТаблицаСортировки.Колонки.Добавить("ПорядковыйНомер", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
		
		Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
			
			Строка = МассивСтрок[Индекс];
			
			НоваяСтрока = ТаблицаСортировки.Добавить();
			НоваяСтрока.Строка = Строка;
			НоваяСтрока.ПорядковыйНомер = Строка.ПорядковыйНомер;
			
		КонецЦикла;
		
		ТаблицаСортировки.Сортировать("ПорядковыйНомер ВОЗР");
		
		Результат = Новый Массив;
		Для Индекс = 0 По ТаблицаСортировки.Количество()-1 Цикл
			
			Результат.Добавить(ТаблицаСортировки[Индекс].Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция МассивПронумерованныхСтрокУпорядочен(МассивСтрок)
	
	Результат = Истина;
	
	МаксИндекс = МассивСтрок.ВГраница();
	
	ПредыдущаяСтрока = МассивСтрок[МаксИндекс];
	Для Сч = 1 По МаксИндекс Цикл
		
		ТекущаяСтрока = МассивСтрок[МаксИндекс-сч];
		Если ТекущаяСтрока.ПорядковыйНомер > ПредыдущаяСтрока.ПорядковыйНомер Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТекущаяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция УпорядочитьНеПронумерованныеСтроки(Таблица, МассивСтрок)
	
	ТаблицаИндексов = ИндексыНеПронумерованныхСтрок(Таблица, МассивСтрок);
	СтрокиУпорядочены = ТаблицаИндексовУпорядочена(ТаблицаИндексов);
	
	Если СтрокиУпорядочены Тогда
		
		Результат = МассивСтрок;
		
	Иначе
		
		ТаблицаИндексов.Сортировать("ИндексТаблицы ВОЗР");
		
		Результат = Новый Массив;
		Для Индекс = 0 По ТаблицаИндексов.Количество()-1 Цикл
			
			Результат.Добавить(ТаблицаИндексов[Индекс].Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ИндексыНеПронумерованныхСтрок(Таблица, МассивСтрок)
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Строка", Новый ОписаниеТипов("СтрокаТаблицыЗначений"));
	Результат.Колонки.Добавить("ИндексТаблицы", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла));
	
	Для Индекс = 0 По МассивСтрок.ВГраница() Цикл
		
		Строка = МассивСтрок[Индекс];
		
		НоваяСтрока = Результат.Добавить();
		НоваяСтрока.Строка = Строка;
		НоваяСтрока.ИндексТаблицы = Таблица.Индекс(Строка);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаИндексовУпорядочена(ТаблицаИндексов)
	
	Результат = Истина;
	
	ПредыдущаяСтрока = ТаблицаИндексов[0];
	Для Индекс = 1 По ТаблицаИндексов.Количество()-1 Цикл
		
		ТекущаяСтрока = ТаблицаИндексов[Индекс];
		Если ТекущаяСтрока.ИндексТаблицы < ПредыдущаяСтрока.ИндексТаблицы Тогда
			Результат = Ложь;
			Прервать;
		КонецЕсли;
		
		ПредыдущаяСтрока = ТекущаяСтрока;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочие

Функция ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса, ДобавитьРазделитель, УничтожитьСозданныеВременныеТаблицы)
	
	Результаты = Неопределено;
	
	МассивТекстовЗапросов 	 = Новый Массив;
	МассивУничтожаемыхТаблиц = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстовЗапросов.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		
		МассивТекстовЗапросов.Добавить(ТекстЗапроса.Значение + ?(ДобавитьРазделитель, РазделительЗапросовВПакете(), ""));
		
		Если УничтожитьСозданныеВременныеТаблицы
		 И ЗначениеЗаполнено(ТекстЗапроса.Представление)
		 И СтрНайти(ВРег(ТекстЗапроса.Значение), "ПОМЕСТИТЬ") <> 0 Тогда
			МассивУничтожаемыхТаблиц.Добавить(ТекстЗапроса.Представление);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ИмяУдаляемойТаблицы Из МассивУничтожаемыхТаблиц Цикл
		МассивТекстовЗапросов.Добавить("УНИЧТОЖИТЬ " + ИмяУдаляемойТаблицы + РазделительЗапросовВПакете());
	КонецЦикла;
	
	Если МассивТекстовЗапросов.Количество() > 0 Тогда
		
		// Выполнение запроса.
		Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, Символы.ПС);
		Результаты = Запрос.ВыполнитьПакет();
		
	КонецЕсли;
	
	Возврат Результаты;
	
КонецФункции

// Возвращает свернутую копию таблицы
//
// Параметры:
//  Таблица					 - ТаблицаЗначений, ТабличнаяЧасть	 - Исходная таблица
//  КолонкиГруппировок		 - Строка							 - Имена колонок, по которым необходимо группировать строки.
//  ДополнительныеАналитики	 - Строка							 - Имена колонок, по которым необходимо группировать строки, если они есть в исходной таблице.
//  КолонкиСуммирования		 - Строка							 - Имена колонок, по которым необходимо суммировать значения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - свернутая копия таблицы значений
//
Функция СвернутаяКопияТаблицы(Таблица, Знач КолонкиГруппировок, Знач ДополнительныеАналитики = Неопределено, Знач КолонкиСуммирования = Неопределено) Экспорт
	
	Если ДополнительныеАналитики <> Неопределено Тогда
		
		СоставДопАналитик = СтрРазделить(ДополнительныеАналитики, ",", Ложь);
		
		Для Индекс = -СоставДопАналитик.ВГраница() По 0 Цикл
			ИмяКолонки = СокрЛП(СоставДопАналитик[-Индекс]);
			Если Таблица.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СоставДопАналитик.Удалить(-Индекс);
		КонецЦикла;
		
		Если СоставДопАналитик.Количество() <> 0 Тогда
			КолонкиГруппировок = КолонкиГруппировок + "," + СтрСоединить(СоставДопАналитик, ",");
		КонецЕсли;
		
	КонецЕсли;
	
	Если КолонкиСуммирования <> Неопределено Тогда
		НовыйСоставКолонок = КолонкиГруппировок + "," + КолонкиСуммирования;
	Иначе
		НовыйСоставКолонок = КолонкиГруппировок;
	КонецЕсли;
	
	Если ТипЗнч(Таблица) <> Тип("ТаблицаЗначений") Тогда
		ВременнаяТаблица = Таблица.Выгрузить(, НовыйСоставКолонок);
	Иначе
		ВременнаяТаблица = Таблица.Скопировать(, НовыйСоставКолонок);
	КонецЕсли;
	
	ВременнаяТаблица.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	
	Возврат ВременнаяТаблица;
	
КонецФункции

#КонецОбласти

// ++ rarus makole 2021-03-18
#Область ПроцедурыИФункцииДляПолученияПредставленияДанных

// Возвращает строковое представление документа для отображения в сообщениях.
//
// Параметры:
//	Ссылка - ссылка на документ
//	Номер - номер документа
//	Дата - дата документа
//
Функция ПолучитьПредставлениеДокумента(Ссылка, Номер, Дата) Экспорт
	
	Возврат
		Ссылка.Метаданные().Синоним
		+ ?(ЗначениеЗаполнено(Номер), " " + Номер, "")
		+ ?(ЗначениеЗаполнено(Дата), " " + НСтр("ru = 'от';
												|en = 'from'") + " " + Формат(Дата,"ДЛФ=D"), "");
	
КонецФункции

#КонецОбласти
// -- rarus makole 2021-03-18


