
// Возвращает структуру, содержащую поля кэшируемых значений.
//
// Возвращаемое значение:
//	Структура - структура кэшируемых значений со следующими полями:
//		* КоэффициентыУпаковок - Соответствие - используется для хранения значений коэффициентов упаковок товара.
//		* ОбъемУпаковок - Соответствие - используется для хранения значений объема упаковок товара.
//		* ВесУпаковок - Соответствие - используется для хранения значений веса упаковок товара.
//		* Штрихкоды - Соответствие - используется для хранения значений штрихкодов упаковок товара.
//		* КонтролироватьЗаполнениеАналитикиРасходов - Соответствие - используется для хранения значений коэффициентов упаковок товара.
//		* РаспределятьНДСпоСтатьеРасходов - Соответствие - используется для хранения признаков распределения НДС по 
//			статьям расходов.
//		* КонтролироватьЗаполнениеАналитикиДоходов - Соответствие - используется для хранения признаков контроля заполнения 
//			по аналитике доходов.
//		* ИспользоватьРучныеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется расчет скидок вручную.
//		* ИспользоватьАвтоматическиеСкидкиВПродажах - Неопределено, Булево - Истина - в продажах используется 
//			автоматический расчет скидок.
//		* ПравоРегистрацииШтрихкодовНоменклатурыДоступно - Неопределено, Булево - Истина - пользователю разрешено 
//			регистрировать штрихкоды номенклатуры.
//		* ПринимаетсяКНУ - Соответствие - используется для хранения признаков контроля принятия статей расходов к
//			налоговому учету.
//
Функция ПолучитьСтруктуруКэшируемыеЗначения() Экспорт
	
	КэшированныеЗначения = Новый Структура;
	КэшированныеЗначения.Вставить("КоэффициентыУпаковок",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ОбъемУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("ВесУпаковок",			Новый Соответствие);
	КэшированныеЗначения.Вставить("Штрихкоды",				Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваНазначений",		Новый Соответствие);
	КэшированныеЗначения.Вставить("СвойстваСкладов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("РеквизитыНоменклатуры",	Новый Соответствие); // Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры()
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиРасходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("РаспределятьНДСпоСтатьеРасходов",			Новый Соответствие);
	КэшированныеЗначения.Вставить("КонтролироватьЗаполнениеАналитикиДоходов",	Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьАналитикуАктивовПассивов",		Новый Соответствие);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВПродажах",			Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьАвтоматическиеСкидкиВПродажах",	Неопределено);
	КэшированныеЗначения.Вставить("ИспользоватьРучныеСкидкиВЗакупках",			Неопределено);  
	КэшированныеЗначения.Вставить("ПравоРегистрацииШтрихкодовНоменклатурыДоступно",	Неопределено);
	КэшированныеЗначения.Вставить("ПринимаетсяКНУ", Новый Соответствие);
	
	//++ НЕ УТКА
	КэшированныеЗначения.Вставить("НазначенияМатериала", Новый Соответствие);
	//-- НЕ УТКА
	
	КэшированныеЗначения.Вставить("ОбработанныеСтроки", Новый Массив);
	
	рарусОбработкаТабличнойЧастиКлиентСерверЛокализация.ДополнитьСтруктуруКэшируемыеЗначения(КэшированныеЗначения);
	
	Возврат КэшированныеЗначения;
	
КонецФункции // ПолучитьСтруктуруКэшируемыеЗначения()

Функция НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура) Экспорт
	
	Если УпаковкаНоменклатура = Неопределено Тогда
		
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		Упаковка       = ТекущаяСтрока.Упаковка;
		НужноОкруглять = Истина;
		
	ИначеЕсли ТипЗнч(УпаковкаНоменклатура) = Тип("Структура") Тогда
		
		Если УпаковкаНоменклатура.Свойство("Упаковка") Тогда
			Упаковка = УпаковкаНоменклатура.Упаковка;
		ИначеЕсли УпаковкаНоменклатура.Свойство("ЕдиницаИзмеренияВЕТИС") Тогда
			Если ЗначениеЗаполнено(УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС) Тогда
				Упаковка = УпаковкаНоменклатура.ЕдиницаИзмеренияВЕТИС;
			Иначе
				Упаковка = ТекущаяСтрока.ЕдиницаИзмеренияВЕТИС;
			КонецЕсли;
		Иначе
			Упаковка = ТекущаяСтрока.Упаковка;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("Номенклатура") Тогда
			Номенклатура = УпаковкаНоменклатура.Номенклатура;
		Иначе
			Номенклатура = ТекущаяСтрока.Номенклатура;
		КонецЕсли;
		
		Если УпаковкаНоменклатура.Свойство("НужноОкруглять") Тогда
			НужноОкруглять = УпаковкаНоменклатура.НужноОкруглять;
		Иначе
			НужноОкруглять = Истина;
		КонецЕсли;
		
	Иначе
		Упаковка       = УпаковкаНоменклатура;
		Номенклатура   = ТекущаяСтрока.Номенклатура;
		НужноОкруглять = Истина;
	КонецЕсли;
	
	Возврат Новый Структура("Номенклатура,Упаковка,НужноОкруглять", Номенклатура, Упаковка, НужноОкруглять);
	
КонецФункции

Функция КлючКэшаУпаковки(Номенклатура, Упаковка) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		КлючНоменклатура = Строка(Номенклатура.УникальныйИдентификатор());
	Иначе
		КлючНоменклатура = "ПустоеЗначение";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Упаковка) Тогда
		КлючУпаковка = Строка(Упаковка.УникальныйИдентификатор());
	Иначе
		КлючУпаковка = "ПустоеЗначение";
	КонецЕсли;
	
	Возврат КлючНоменклатура + КлючУпаковка;
	
КонецФункции

// Пересчитывает количество товара (в единицах хранения) в текущей строке табличной части документа.
//
// Параметры:
//	ТекущаяСтрока - Структура - структура со свойствами строки документа.
//	СтруктураДействий - Структура - структура с действиями, которые нужно произвести.
//	КэшированныеЗначения - Структура - кэшированные значения.
//
Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт 

	Перем УпаковкаНоменклатура;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", УпаковкаНоменклатура) Тогда
		ПараметрыПересчета = НормализоватьПараметрыПересчетаЕдиниц(ТекущаяСтрока, УпаковкаНоменклатура);
		ДанныеУпаковки = ПолучитьКоэффициентУпаковки(ПараметрыПересчета.Упаковка, КэшированныеЗначения, ПараметрыПересчета.Номенклатура);
		Количество = ТекущаяСтрока.КоличествоУпаковок * ДанныеУпаковки.Коэффициент;
		
		Если ДанныеУпаковки.НужноОкруглятьКоличество
			И ПараметрыПересчета.НужноОкруглять Тогда
			ТекущаяСтрока.Количество = Окр(Количество, 0 ,РежимОкругления.Окр15как20);
		Иначе
			ТекущаяСтрока.Количество = Количество;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения, ТекНоменклатура = Неопределено) Экспорт
	
	Результат = Новый Структура("Коэффициент,НужноОкруглятьКоличество");
	
	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		КлючКоэффициента = КлючКэшаУпаковки(ТекНоменклатура, ТекУпаковка); 
		Кэш = КэшированныеЗначения.КоэффициентыУпаковок[КлючКоэффициента];
		Если Кэш = Неопределено Тогда
			#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
				ЗначенияРеквизитов = рарусОбработкаТабличнойЧастиСервер.ДанныеОбУпаковке(ТекНоменклатура, ТекУпаковка, КэшированныеЗначения);
				Результат.Коэффициент    		   =  ЗначенияРеквизитов.Коэффициент;
				Результат.НужноОкруглятьКоличество =  ЗначенияРеквизитов.НужноОкруглятьКоличество;
			#Иначе
				ТекстИсключения = НСтр("ru = 'Попытка получения коэффициента упаковки на клиенте.';
										|en = 'Attempt to receive packaging factor on client.'");
				ВызватьИсключение ТекстИсключения;
			#КонецЕсли
		Иначе
			Результат = Кэш;
		КонецЕсли;
	Иначе
		Результат.Коэффициент = 1;
		Результат.НужноОкруглятьКоличество = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
