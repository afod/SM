#Область Регламентные

Процедура рарусОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рарусОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям);
	
	ВыполнитьОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям();	
	
КонецПроцедуры

Процедура УстановитьИспользованиеРегламентногоЗаданияОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.рарусОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям);
	
	Задание.Использование = Истина;
	Задание.Записать();
	
КонецПроцедуры

#КонецОбласти 

#Область ПрограммныйИнтерфейс

Процедура ДобавитьЗаявкуНаСнабжениеВОчередь(Ссылка, Отказ) Экспорт

	Если Не ЗначениеЗаполнено(Ссылка) тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	ЗаписьОчереди = РегистрыСведений.рарусОчередьЗаявокНаСнабжениеКОбновлениюСостояния.СоздатьМенеджерЗаписи();
	ЗаписьОчереди.Заказ = Ссылка;
	ЗаписьОчереди.Идентификатор = Новый УникальныйИдентификатор;
	
	Попытка
		ЗаписьОчереди.Записать(Истина);
	Исключение
		
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОшибкаПостановкиЗаявкиНаСнабжениеВОчередь"
		, УровеньЖурналаРегистрации.Ошибка, 
		,
		, "Ошибка постановки в очередь для изменения состояния Заявки на снабжение: """ + ОписаниеОшибки );
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
		
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура ВыполнитьОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям() Экспорт
	
	РассчитатьОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям()
	
КонецПроцедуры

#КонецОбласти 

#Область РасчетСостояний

Процедура РассчитатьОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям() 
	
	ПараметрыОчереди = ПараметрыОчередиЗаявкиНаСнабжение();
	
	ОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям(ПараметрыОчереди.ТаблицаОчереди);
	
	ЗаписатьОчередь(ПараметрыОчереди);
	
КонецПроцедуры

Процедура ЗаписатьОчередь(ПараметрыОчереди) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
	
		Для Каждого ЭлементОчереди Из ПараметрыОчереди.ОчередьРегистра цикл
			
			НЗ = РегистрыСведений.рарусОчередьЗаявокНаСнабжениеКОбновлениюСостояния.СоздатьНаборЗаписей();
			НЗ.Отбор.Заказ.Установить(ЭлементОчереди.Регистратор);
			НЗ.Отбор.Идентификатор.Установить(ЭлементОчереди.Идентификатор);
			НЗ.Записать();
			
		КонецЦикла;	
		
		Для Каждого СтрокаОчереди Из ПараметрыОчереди.ТаблицаОчереди цикл
			
			Если СтрокаОчереди.Ошибка тогда
				ДобавитьЗаявкуНаСнабжениеВОчередь(СтрокаОчереди.Заказ, Ложь);
			КонецЕсли;	
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		
	КонецПопытки;
			
КонецПроцедуры	

#КонецОбласти 

Процедура ОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям(ТаблицаОчереди) Экспорт
	
	ОбработатьОчередьУслуг(ТаблицаОчереди);

	ОбработатьОчередьТМЦ(ТаблицаОчереди);
	
КонецПроцедуры

Процедура ОбработатьОчередьУслуг(ТаблицаОчереди) Экспорт
	
	//Услуги
	ТаблицаОчередиУслуги = ТаблицаОчередиПоУслугам(ТаблицаОчереди);
	
	ОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниямУслуги(ТаблицаОчередиУслуги);	
	
	ОбновитьРезультатВыполненияОчереди(ТаблицаОчереди, ТаблицаОчередиУслуги);

КонецПроцедуры	

Процедура ОбработатьОчередьТМЦ(ТаблицаОчереди) Экспорт
		
	//ТМЦ
	ТаблицаОчередиТМЦ = ТаблицаОчередиПоТМЦ(ТаблицаОчереди);
	
	ОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниямТМЦ(ТаблицаОчередиТМЦ);	
	
	ОбновитьРезультатВыполненияОчереди(ТаблицаОчереди, ТаблицаОчередиТМЦ);

КонецПроцедуры


Процедура ОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниямУслуги(ТаблицаОчереди)
	
	ТаблицаДляОбработки = ТаблицаДляОбработкиИнициализировать();
		
	МВТ = Новый МенеджерВременныхТаблиц;
	
	ПоместитьВременнуюТаблицуДанныеЗаказа(МВТ, ТаблицаОчереди);

	// заполнение таблиц для обработки данными для расчета состояний
	//
	
	ЗаполнитьДанныеДляРасчетаСостоянияОтменено(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияНаСогласованииКапитаном(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияНаРассмотренииТехДирекции(МВТ, ТаблицаДляОбработки);
		
	ЗаполнитьДанныеДляРасчетаСостоянияКПоступлению(МВТ, ТаблицаДляОбработки);
		
	ЗаполнитьДанныеДляРасчетаСостоянияУслугиОказаны(МВТ, ТаблицаДляОбработки);
	//
	
	ТаблицаДляОбработкиСвернутая = СвернутьТаблицуДляОбработки(ТаблицаДляОбработки);
	
	ДополнитьДанныеПоТекущимСостояниям(МВТ, ТаблицаДляОбработкиСвернутая);
	
	Для Каждого СтрокаОчереди Из ТаблицаОчереди цикл
		
		Если СтрокаОчереди.Обработана тогда
			Продолжить;
		КонецЕсли;	
		
		Заказ = СтрокаОчереди.Заказ;
		
		СтрокиДляОбработки = ТаблицаДляОбработкиСвернутая.НайтиСтроки(Новый Структура("Заказ", Заказ));
		
		НаборСостоянийСтрок = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.СоздатьНаборЗаписей();
		НаборСостоянийСтрок.Отбор.Заказ.Установить(Заказ);
		
		СостоянияПоЗаявке = Новый Соответствие;
		
		Для Каждого СтрокаОбработки Из СтрокиДляОбработки цикл
			
			СостояниеРасчет = Неопределено;
			
			Если СтрокаОбработки.Отменено тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Отменено;
				
			ИначеЕсли СтрокаОбработки.Поставлено > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено;
							
			ИначеЕсли СтрокаОбработки.УслугиОказаны > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.УслугиОказаны;
								
			ИначеЕсли СтрокаОбработки.КПоступлению > 0 
				И СтрокаОбработки.КПоступлению >= СтрокаОбработки.КЗаказу тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Заказано;
							
			ИначеЕсли СтрокаОбработки.КПоступлению > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноЗаказано;	
								
			ИначеЕсли СтрокаОбработки.КЗаказу > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Активно;
								
			ИначеЕсли СтрокаОбработки.НаРассмотренииТехДирекции > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.НаРассмотренииТехническойДирекции;	
				
			ИначеЕсли СтрокаОбработки.СогласованиеКапитаном > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.СогласованиеКапитаном;	
								
			КонецЕсли;	
			
			СостояниеРасчет = ОпределитьНеобходимостьПереходаСостояния(СостояниеРасчет, СтрокаОбработки.ТекущееСостояние);
			
			ПриоритетСостояния = ТаблицаПриоритетовСостояний().Получить(СостояниеРасчет);
			
			Если ПриоритетСостояния <> Неопределено тогда
				
				СостоянияПоЗаявке.Вставить(ПриоритетСостояния, СостояниеРасчет);
				
			КонецЕсли;	
			
			Если СостояниеРасчет <> Неопределено тогда
				
				Запись = НаборСостоянийСтрок.Добавить();
				Запись.Заказ = Заказ;
				Запись.КодСтроки = СтрокаОбработки.КодСтроки;
				Запись.Состояние = СостояниеРасчет;				
				
				СтрокаОчереди.Обработана = Истина;
				
			КонецЕсли;
				
		КонецЦикла;
		
			
		Попытка
			НаборСостоянийСтрок.Записать();
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОшибкаЗаписиСостоянияЗаявкиНаСнабжение"
			, УровеньЖурналаРегистрации.Ошибка, 
			,
			, "Ошибка записи состояния строк заявки на снабжение: """ + ОписаниеОшибки );
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СтрокаОчереди.Ошибка = Истина;
			
		КонецПопытки;
		
		НомерСостояния = КоличествоВозможныхСостояний();
				
		СостояниеРасчетаЗаявки = Перечисления.рарусСостоянияЗаявокНаСнабжение.ПустаяСсылка();
		
		Пока НомерСостояния > 0 цикл
			
			Если СостоянияПоЗаявке.Получить(НомерСостояния) <> Неопределено тогда
				
				СостояниеРасчетаЗаявки = СостоянияПоЗаявке.Получить(НомерСостояния);
				
				Прервать;
				
			КонецЕсли;	
			
			НомерСостояния = НомерСостояния - 1;
			
		КонецЦикла;	
		
		МЗ = РегистрыСведений.рарусСостоянияЗаявокНаСнабжение.СоздатьМенеджерЗаписи();
		МЗ.Заказ = Заказ;
		МЗ.Прочитать();

		Если МЗ.Состояние <> СостояниеРасчетаЗаявки тогда
			
			МЗ.Заказ = Заказ;
			МЗ.Состояние = СостояниеРасчетаЗаявки;
					
			Попытка				
				МЗ.Записать();				
			Исключение
				
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ОшибкаЗаписиСостоянияЗаявкиНаСнабжение"
				, УровеньЖурналаРегистрации.Ошибка, 
				,
				, "Ошибка записи состояния Заявки на снабжение: """ + ОписаниеОшибки );
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				СтрокаОчереди.Ошибка = Истина;
				
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниямТМЦ(ТаблицаОчереди)
	
	ТаблицаДляОбработки = ТаблицаДляОбработкиИнициализировать();
		
	МВТ = Новый МенеджерВременныхТаблиц;
	
	ПоместитьВременнуюТаблицуДанныеЗаказа(МВТ, ТаблицаОчереди);

	// заполнение таблиц для обработки данными для расчета состояний
	//
	
	ЗаполнитьДанныеДляРасчетаСостоянияОтменено(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияНаСогласованииКапитаном(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияНаРассмотренииТехДирекции(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияКЗаказу(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияКПоступлениюТМЦ(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияОтправленоСоСкладаОтправителя(МВТ, ТаблицаДляОбработки);
	
	ЗаполнитьДанныеДляРасчетаСостоянияПоставлено(МВТ, ТаблицаДляОбработки);
		
	//
	
	ТаблицаДляОбработкиСвернутая = СвернутьТаблицуДляОбработки(ТаблицаДляОбработки);
	
	ДополнитьДанныеПоТекущимСостояниям(МВТ, ТаблицаДляОбработкиСвернутая);
	
	Для Каждого СтрокаОчереди Из ТаблицаОчереди цикл
		
		Если СтрокаОчереди.Обработана тогда
			Продолжить;
		КонецЕсли;	
		
		Заказ = СтрокаОчереди.Заказ;
		
		СтрокиДляОбработки = ТаблицаДляОбработкиСвернутая.НайтиСтроки(Новый Структура("Заказ", Заказ));
		
		НаборСостоянийСтрок = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.СоздатьНаборЗаписей();
		НаборСостоянийСтрок.Отбор.Заказ.Установить(Заказ);
		
		СостоянияПоЗаявке = Новый Соответствие;
		
		Для Каждого СтрокаОбработки Из СтрокиДляОбработки цикл
			
			СостояниеРасчет = Неопределено;
			// ++ rarus makole 2021-04-12 [РАIT-0023340]
			ПримечаниеКСостоянию = ""; 
			ПотребностьОбеспеченаСтрока = Ложь; 
			ОтправленоСоСкладаОтправителяСтрока = Ложь;
			// -- rarus makole 2021-04-13 [РАIT-0023340]
			
			Если СтрокаОбработки.Отменено > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Отменено;
				
			ИначеЕсли СтрокаОбработки.Поставлено > 0
				И СтрокаОбработки.Поставлено >= СтрокаОбработки.КЗаказу тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено;
				// ++ rarus makole 2021-04-12 [РАIT-0023340]
				ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
					ПримечаниеКСостоянию, Символы.ПС, ТаблицаДляОбработкиСвернутая.Колонки["Поставлено"].Заголовок,
					СтрокаОбработки.Поставлено, СтрокаОбработки.Номенклатура.ЕдиницаИзмерения);
				ПотребностьОбеспеченаСтрока = Истина; 
				// -- rarus makole 2021-04-12 [РАIT-0023340]
							
			ИначеЕсли СтрокаОбработки.УслугиОказаны > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.УслугиОказаны;
				
			ИначеЕсли СтрокаОбработки.ОтправленоСоСкладаОтправителя > 0 Тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.ОтправленоСоСкладаОтправителя;
				// ++ rarus makole 2021-04-12 [РАIT-0023340]
				ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
					ПримечаниеКСостоянию, Символы.ПС, ТаблицаДляОбработкиСвернутая.Колонки["ОтправленоСоСкладаОтправителя"].Заголовок,
					СтрокаОбработки.ОтправленоСоСкладаОтправителя, СтрокаОбработки.Номенклатура.ЕдиницаИзмерения);
				ОтправленоСоСкладаОтправителяСтрока = Истина;
				// -- rarus makole 2021-04-12 [РАIT-0023340]
				
			ИначеЕсли СтрокаОбработки.КПоступлению > 0 
				И СтрокаОбработки.КПоступлению >= СтрокаОбработки.КЗаказу тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Заказано;
							
			ИначеЕсли СтрокаОбработки.КПоступлению > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноЗаказано;	
				
			//+ 
			//Состояние "Активно" загружается из ЕИС и не может быть рассчитано на стороне СМ
			//
			//ИначеЕсли СтрокаОбработки.КЗаказу > 0 тогда
			//	
			//	СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.Активно;
			//-
								
			ИначеЕсли СтрокаОбработки.НаРассмотренииТехДирекции > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.НаРассмотренииТехническойДирекции;	
				
			ИначеЕсли СтрокаОбработки.СогласованиеКапитаном > 0 тогда
				
				СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.СогласованиеКапитаном;	
								
			КонецЕсли;	
			
			// ++ rarus makole 2021-04-13 [РАIT-0023340]
			КолонкиБезПримечания = Новый Соответствие;
			КолонкиБезПримечания.Вставить("НаРассмотренииТехДирекции", Истина);
			КолонкиБезПримечания.Вставить("СогласованиеКапитаном", Истина);
			КолонкиБезПримечания.Вставить("КЗаказу", Истина);
			КолонкиБезПримечания.Вставить("Заказано", Истина);
			КолонкиБезПримечания.Вставить("Отменено", Истина);
			
			Если НЕ (ПотребностьОбеспеченаСтрока или ОтправленоСоСкладаОтправителяСтрока) Тогда
				Для НомерКолонки = 4 по ТаблицаДляОбработкиСвернутая.Колонки.Количество() - 1 Цикл
					
					Если КолонкиБезПримечания.Получить(ТаблицаДляОбработкиСвернутая.Колонки[НомерКолонки].Имя) <> Неопределено тогда
						Продолжить;
					КонецЕсли;	
					
					Если НЕ СтрокаОбработки[НомерКолонки] = 0 Тогда
						ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
						ПримечаниеКСостоянию, Символы.ПС, ТаблицаДляОбработкиСвернутая.Колонки[НомерКолонки].Заголовок,
						СтрокаОбработки[НомерКолонки], СтрокаОбработки.Номенклатура.ЕдиницаИзмерения);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ОтправленоСоСкладаОтправителяСтрока И Не ПотребностьОбеспеченаСтрока Тогда 
				ИмяКолонки = "Поставлено";
				Если ЗначениеЗаполнено(СтрокаОбработки[ИмяКолонки]) тогда
					ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
					ПримечаниеКСостоянию, Символы.ПС, ТаблицаДляОбработкиСвернутая.Колонки[ИмяКолонки].Заголовок,
					СтрокаОбработки[ИмяКолонки], СтрокаОбработки.Номенклатура.ЕдиницаИзмерения);
				КонецЕсли;
				//ИмяКолонки = "КПоступлению";
				//Если ЗначениеЗаполнено(СтрокаОбработки[ИмяКолонки]) тогда
				//	ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
				//	ПримечаниеКСостоянию, Символы.ПС, ТаблицаДляОбработкиСвернутая.Колонки[ИмяКолонки].Заголовок,
				//	СтрокаОбработки[ИмяКолонки], СтрокаОбработки.Номенклатура.ЕдиницаИзмерения);
				//КонецЕсли;	
			КонецЕсли;
			// -- rarus makole 2021-04-13 [РАIT-0023340]
			
			СостояниеРасчет = ОпределитьНеобходимостьПереходаСостояния(СостояниеРасчет, СтрокаОбработки.ТекущееСостояние);
			
			ПриоритетСостояния = ТаблицаПриоритетовСостояний().Получить(СостояниеРасчет);
			
			Если ПриоритетСостояния <> Неопределено тогда
				
				СостоянияПоЗаявке.Вставить(ПриоритетСостояния, СостояниеРасчет);
				
			КонецЕсли;	
			
			Если СостояниеРасчет <> Неопределено тогда
				
				Запись = НаборСостоянийСтрок.Добавить();
				Запись.Заказ = Заказ;
				Запись.КодСтроки = СтрокаОбработки.КодСтроки;
				Запись.Состояние = СостояниеРасчет;				
				// ++ rarus makole 2021-04-12 [РАIT-0023340]
				Запись.ПримечаниеКСостоянию = СокрЛП(ПримечаниеКСостоянию);
				// -- rarus makole 2021-04-12 [РАIT-0023340]
				
				СтрокаОчереди.Обработана = Истина;
				
			КонецЕсли;
				
		КонецЦикла;
		
			
		Попытка
			НаборСостоянийСтрок.Записать();
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОшибкаЗаписиСостоянияЗаявкиНаСнабжение"
			, УровеньЖурналаРегистрации.Ошибка, 
			,
			, "Ошибка записи состояния строк заявки на снабжение: """ + ОписаниеОшибки );
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			СтрокаОчереди.Ошибка = Истина;
			
		КонецПопытки;
		
		ПроверитьУстановитьЧастичноВыполнено(СостоянияПоЗаявке);
			
		НомерСостояния = КоличествоВозможныхСостояний();
				
		СостояниеРасчетаЗаявки = Перечисления.рарусСостоянияЗаявокНаСнабжение.ПустаяСсылка();
		
		Пока НомерСостояния > 0 цикл
			
			Если СостоянияПоЗаявке.Получить(НомерСостояния) <> Неопределено тогда
				
				СостояниеРасчетаЗаявки = СостоянияПоЗаявке.Получить(НомерСостояния);
				
				Прервать;
				
			КонецЕсли;	
			
			НомерСостояния = НомерСостояния - 1;
			
		КонецЦикла;	
		
		МЗ = РегистрыСведений.рарусСостоянияЗаявокНаСнабжение.СоздатьМенеджерЗаписи();
		МЗ.Заказ = Заказ;
		МЗ.Прочитать();

		Если МЗ.Состояние <> СостояниеРасчетаЗаявки тогда
			
			МЗ.Заказ = Заказ;
			МЗ.Состояние = СостояниеРасчетаЗаявки;
					
			Попытка				
				МЗ.Записать();				
			Исключение
				
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ОшибкаЗаписиСостоянияЗаявкиНаСнабжение"
				, УровеньЖурналаРегистрации.Ошибка, 
				,
				, "Ошибка записи состояния Заявки на снабжение: """ + ОписаниеОшибки );
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				СтрокаОчереди.Ошибка = Истина;
				
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьУстановитьЧастичноВыполнено(СостоянияПоЗаявке)
		
	ЧастичноВыполнено = Ложь;
	ЕстьВыполненые = Ложь;
	СчетчикСостояний = 0;
	
	Если СостоянияПоЗаявке.Количество() > 1 тогда
			
		Для Каждого СостояниеЗаявки Из СостоянияПоЗаявке цикл
			
			Если СостояниеЗаявки.Значение = Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено тогда								
				ЕстьВыполненые = Истина;
			ИначеЕсли СостояниеЗаявки.Значение = Перечисления.рарусСостоянияЗаявокНаСнабжение.Отменено Тогда 	
				СчетчикСостояний = СчетчикСостояний - 1;
			КонецЕсли;
			
			СчетчикСостояний = СчетчикСостояний + 1;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Если ЕстьВыполненые И СчетчикСостояний > 1 тогда
		ЧастичноВыполнено = Истина;
	КонецЕсли;	
	
	Если ЧастичноВыполнено тогда
		
		СостояниеРасчет = Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноВыполнено;
		ПриоритетСостояния = ТаблицаПриоритетовСостояний().Получить(СостояниеРасчет);
		
		Если ПриоритетСостояния <> Неопределено тогда
			
			СостоянияПоЗаявке.Вставить(ПриоритетСостояния, СостояниеРасчет);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ОпределитьНеобходимостьПереходаСостояния(СостояниеРасчет, ТекущееСостояние)
	
	Если Не ЗначениеЗаполнено(ТекущееСостояние) тогда
		Возврат СостояниеРасчет;
	КонецЕсли;
	
	ТаблицаПриоритетов = ТаблицаПриоритетовСостояний();
	
	Если ТекущееСостояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Активно тогда
		Если Не ЗначениеЗаполнено(СостояниеРасчет) тогда
			Возврат ТекущееСостояние;
		ИначеЕсли ТаблицаПриоритетов[ТекущееСостояние] < ТаблицаПриоритетов[СостояниеРасчет] тогда
			Возврат ТекущееСостояние;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущееСостояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено тогда
		Если Не ЗначениеЗаполнено(СостояниеРасчет) тогда
			Возврат ТекущееСостояние;
		ИначеЕсли ТаблицаПриоритетов[ТекущееСостояние] < ТаблицаПриоритетов[СостояниеРасчет] тогда
			Возврат ТекущееСостояние;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СостояниеРасчет;
	
КонецФункции

Функция ТаблицаПриоритетовСостояний()
		
	ТаблицаПриоритетов = Новый Соответствие;
	
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноВыполнено, 10);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.СогласованиеКапитаном, 9);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.НаРассмотренииТехническойДирекции, 8);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.Активно, 7);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноЗаказано, 6);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.Заказано, 5);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.ОтправленоСоСкладаОтправителя, 4);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.УслугиОказаны, 3);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено, 2);
	ТаблицаПриоритетов.Вставить(Перечисления.рарусСостоянияЗаявокНаСнабжение.Отменено, 1);
	
	Возврат ТаблицаПриоритетов;

КонецФункции	

Функция КоличествоВозможныхСостояний()
	
	Возврат ТаблицаПриоритетовСостояний().Количество();

КонецФункции

Процедура ПоместитьВременнуюТаблицуДанныеЗаказа(МВТ, ТаблицаОчереди)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Заказ,
	|	Т.Номенклатура КАК Номенклатура,
	|	Т.КодСтроки КАК КодСтроки,
	|	Т.Отменено КАК Отменено,
	|	Т.Ссылка.ОбластьСоздания КАК ОбластьСоздания,
	|	Т.КоличествоУпаковок КАК КоличествоУпаковок
	|ПОМЕСТИТЬ ДанныеЗаказа
	|ИЗ
	|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК Т
	|ГДЕ
	|	Т.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка", ТаблицаОчереди.ВыгрузитьКолонку("Заказ"));
	
	РезультатЗапроса = Запрос.Выполнить();

КонецПроцедуры

Функция СвернутьТаблицуДляОбработки(ТаблицаДляОбработки)
	
	КолонкиГруппировок = "Заказ, Номенклатура, КодСтроки, ТекущееСостояние";
	
	ТаблицаДляОбработкиСвернутая = рарусОбщегоНазначенияСМСервер.СвернутаяКопияТаблицы(ТаблицаДляОбработки, КолонкиГруппировок);
	
	Возврат ТаблицаДляОбработкиСвернутая;

КонецФункции

Процедура ДополнитьДанныеПоТекущимСостояниям(МВТ, ТаблицаДляОбработки) Экспорт
	
	Если ТаблицаДляОбработки.Колонки.Найти("ТекущееСостояние") = Неопределено тогда
		ТаблицаДляОбработки.Колонки.Добавить("ТекущееСостояние", ОписаниеТипаСостоянийЗаявокНаСнабжение());
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	рарусСостоянияСтрокЗаявокНаСнабжение.Состояние КАК Состояние
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.рарусСостоянияСтрокЗаявокНаСнабжение КАК рарусСостоянияСтрокЗаявокНаСнабжение
	|		ПО ДанныеЗаказа.Заказ = рарусСостоянияСтрокЗаявокНаСнабжение.Заказ
	|			И ДанныеЗаказа.КодСтроки = рарусСостоянияСтрокЗаявокНаСнабжение.КодСтроки";
	
	Запрос.УстановитьПараметр("ПустойНомер", ""); 
	
	ДанныеСостояний = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаОбработки Из ТаблицаДляОбработки цикл
		
		СтрокаСостояния = ДанныеСостояний.НайтиСтроки(Новый Структура("Заказ, КодСтроки", СтрокаОбработки.Заказ, СтрокаОбработки.КодСтроки));
		
		Если СтрокаСостояния.Количество() тогда
			СтрокаОбработки.ТекущееСостояние = СтрокаСостояния[0].Состояние;			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Функция ОписаниеТипаСостоянийЗаявокНаСнабжение()
	
	Возврат Новый ОписаниеТипов("ПеречислениеСсылка.рарусСостоянияЗаявокНаСнабжение");

КонецФункции

#Область ДанныеДляРасчета

Процедура ЗаполнитьДанныеДляРасчетаСостоянияОтменено(МВТ, ТаблицаДляОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	ДанныеЗаказа.КоличествоУпаковок КАК Количество,
	|	ДанныеЗаказа.Отменено КАК Отменено,
	|	ДанныеЗаказа.ОбластьСоздания КАК ОбластьСоздания
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|ГДЕ
	|	ДанныеЗаказа.Отменено";
	
	Запрос.УстановитьПараметр("ПустойНомер", ""); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.Отменено = ВыборкаЗаказано.Количество;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияНаСогласованииКапитаном(МВТ, ТаблицаДляОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	ДанныеЗаказа.КоличествоУпаковок КАК Количество,
	|	ДанныеЗаказа.Отменено КАК Отменено,
	|	ДанныеЗаказа.ОбластьСоздания КАК ОбластьСоздания
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаСнабжение КАК ЗаявкаШапка
	|		ПО ДанныеЗаказа.Заказ = ЗаявкаШапка.Ссылка
	|ГДЕ
	|	ЗаявкаШапка.СтатусСогласования <> &СтатусЧерновик";
	
	Запрос.УстановитьПараметр("СтатусЧерновик", рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНачальный()); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.СогласованиеКапитаном = ВыборкаЗаказано.Количество;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияНаРассмотренииТехДирекции(МВТ, ТаблицаДляОбработки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	ДанныеЗаказа.КоличествоУпаковок КАК Количество,
	|	ДанныеЗаказа.Отменено КАК Отменено,
	|	ДанныеЗаказа.ОбластьСоздания КАК ОбластьСоздания
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаСнабжение КАК ЗаявкаШапка
	|		ПО ДанныеЗаказа.Заказ = ЗаявкаШапка.Ссылка
	|ГДЕ
	|	ЗаявкаШапка.НомерСудовойЗаявки <> &ПустойНомер";
	
	Запрос.УстановитьПараметр("ПустойНомер", ""); 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.НаРассмотренииТехДирекции = ВыборкаЗаказано.Количество;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияКПоступлению(МВТ, ТаблицаДляОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(впТоварыКПоступлению.Количество) КАК КПоступлению
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению КАК впТоварыКПоступлению
	|		ПО ДанныеЗаказа.Заказ = впТоварыКПоступлению.Заявка
	|			И ДанныеЗаказа.Номенклатура = впТоварыКПоступлению.Номенклатура
	|			И (впТоварыКПоступлению.Активность)
	|			И (впТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.КПоступлению = ВыборкаЗаказано.КПоступлению;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияУслугиОказаны(МВТ, ТаблицаДляОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(ДанныРегистра.Количество, 0)) КАК УслугиОказаны
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.рарусОказанныеУслуги КАК ДанныРегистра
	|		ПО ДанныеЗаказа.Заказ = ДанныРегистра.Заказ
	|			И ДанныеЗаказа.Номенклатура = ДанныРегистра.Номенклатура
	|			И ДанныеЗаказа.КодСтроки = ДанныРегистра.КодСтроки
	|			И (ДанныРегистра.Активность)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.УслугиОказаны = ВыборкаЗаказано.УслугиОказаны;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияОтправленоСоСкладаОтправителя(МВТ, ТаблицаДляОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	// ++ rarus PleA 30.04.2021 [номерзадачи]
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДанныеЗаказа.Заказ КАК Заказ,
	//|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	//|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	//|	СУММА(впТоварыКПоступлению.Количество) КАК ОтправленоСоСкладаОтправителя
	//|ИЗ
	//|	ДанныеЗаказа КАК ДанныеЗаказа
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению КАК впТоварыКПоступлению
	//|		ПО ДанныеЗаказа.Заказ = впТоварыКПоступлению.Заявка
	//|			И ДанныеЗаказа.Номенклатура = впТоварыКПоступлению.Номенклатура
	//|			И (впТоварыКПоступлению.Активность)
	//|			И (впТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	//|			И ДанныеЗаказа.КодСтроки = впТоварыКПоступлению.КодСтроки
	//|ГДЕ
	//|	впТоварыКПоступлению.Регистратор ССЫЛКА Документ.впПеремещениеТоваров
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДанныеЗаказа.Заказ,
	//|	ДанныеЗаказа.Номенклатура,
	//|	ДанныеЗаказа.КодСтроки";	
	// -- rarus PleA
	
	// ++ rarus PleA 30.04.2021 [номерзадачи]
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(впТоварыКПоступлениюОбороты.КоличествоОборот) КАК ОтправленоСоСкладаОтправителя
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению.Обороты(, , , ) КАК впТоварыКПоступлениюОбороты
	|		ПО ДанныеЗаказа.Заказ = впТоварыКПоступлениюОбороты.Заявка
	|			И ДанныеЗаказа.Номенклатура = впТоварыКПоступлениюОбороты.Номенклатура
	|			И ДанныеЗаказа.КодСтроки = впТоварыКПоступлениюОбороты.КодСтроки
	|ГДЕ
	|	впТоварыКПоступлениюОбороты.Распоряжение ССЫЛКА Документ.впПеремещениеТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки";
	// -- rarus PleA
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.ОтправленоСоСкладаОтправителя = ВыборкаЗаказано.ОтправленоСоСкладаОтправителя;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияКЗаказу(МВТ, ТаблицаДляОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(МатериалыИРаботы.Количество) КАК КЗаказу
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК МатериалыИРаботы
	|		ПО ДанныеЗаказа.Заказ = МатериалыИРаботы.Ссылка
	|			И ДанныеЗаказа.Номенклатура = МатериалыИРаботы.Номенклатура
	|			И (МатериалыИРаботы.Ссылка.Проведен)
	|			И ДанныеЗаказа.КодСтроки = МатериалыИРаботы.КодСтроки
	|ГДЕ
	|	НЕ МатериалыИРаботы.Отменено
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.КЗаказу = ВыборкаЗаказано.КЗаказу;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияКПоступлениюТМЦ(МВТ, ТаблицаДляОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(ДанныеЗаказа.КоличествоУпаковок) КАК Количество
	|ПОМЕСТИТЬ ВтДанныеЗаказа
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВтДанныеЗаказа.Заказ КАК Заказ,
	|	ВтДанныеЗаказа.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ВтДанныеЗаказаНоменклатуры
	|ИЗ
	|	ВтДанныеЗаказа КАК ВтДанныеЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	впТоварыКПоступлению.Номенклатура КАК Номенклатура,
	|	впТоварыКПоступлению.Заявка КАК Заявка,
	|	СУММА(впТоварыКПоступлению.Количество) КАК Количество
	|ПОМЕСТИТЬ КПоступлению
	|ИЗ
	|	РегистрНакопления.впТоварыКПоступлению КАК впТоварыКПоступлению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтДанныеЗаказаНоменклатуры КАК ВтДанныеЗаказа
	|		ПО впТоварыКПоступлению.Номенклатура = ВтДанныеЗаказа.Номенклатура
	|			И впТоварыКПоступлению.Заявка = ВтДанныеЗаказа.Заказ
	|			И (впТоварыКПоступлению.Активность)
	|			И (впТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
	|
	|СГРУППИРОВАТЬ ПО
	|	впТоварыКПоступлению.Номенклатура,
	|	впТоварыКПоступлению.Заявка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА КПоступлению.Количество - ЕСТЬNULL(ДанныеЗаказа.Количество1, 0) < 0
	|				ТОГДА 0
	|			КОГДА КПоступлению.Количество - ЕСТЬNULL(ДанныеЗаказа.Количество1, 0) < ЕСТЬNULL(ДанныеЗаказа.Количество, 0)
	|				ТОГДА КПоступлению.Количество - ЕСТЬNULL(ДанныеЗаказа.Количество1, 0)
	|			ИНАЧЕ ЕСТЬNULL(ДанныеЗаказа.Количество, 0)
	|		КОНЕЦ) КАК КПоступлению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВтДанныеЗаказа.Заказ КАК Заказ,
	|		ВтДанныеЗаказа.КодСтроки КАК КодСтроки,
	|		ВтДанныеЗаказа.Номенклатура КАК Номенклатура,
	|		ВтДанныеЗаказа.Количество КАК Количество,
	|		СУММА(ВтДанныеЗаказа1.Количество) КАК Количество1
	|	ИЗ
	|		ВтДанныеЗаказа КАК ВтДанныеЗаказа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтДанныеЗаказа КАК ВтДанныеЗаказа1
	|			ПО ВтДанныеЗаказа.Номенклатура = ВтДанныеЗаказа1.Номенклатура
	|				И ВтДанныеЗаказа.Заказ = ВтДанныеЗаказа1.Заказ
	|				И ВтДанныеЗаказа.КодСтроки > ВтДанныеЗаказа1.КодСтроки
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВтДанныеЗаказа.Заказ,
	|		ВтДанныеЗаказа.Номенклатура,
	|		ВтДанныеЗаказа.КодСтроки,
	|		ВтДанныеЗаказа.Количество) КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КПоступлению КАК КПоступлению
	|		ПО ДанныеЗаказа.Заказ = КПоступлению.Заявка
	|			И ДанныеЗаказа.Номенклатура = КПоступлению.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки";	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.КПоступлению = ВыборкаЗаказано.КПоступлению;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДляРасчетаСостоянияПоставлено(МВТ, ТаблицаДляОбработки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	
	// ++ rarus PleA 30.04.2021 [номерзадачи]
	//Запрос.Текст = 
	//"ВЫБРАТЬ
	//|	ДанныеЗаказа.Заказ КАК Заказ,
	//|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	//|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	//|	СУММА(впТоварыКПоступлению.Количество) КАК Поставлено
	//|ИЗ
	//|	ДанныеЗаказа КАК ДанныеЗаказа
	//|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению КАК впТоварыКПоступлению
	//|		ПО ДанныеЗаказа.Заказ = впТоварыКПоступлению.Заявка
	//|			И ДанныеЗаказа.Номенклатура = впТоварыКПоступлению.Номенклатура
	//|			И (впТоварыКПоступлению.Активность)
	//|			И (впТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	//|			И ДанныеЗаказа.КодСтроки = впТоварыКПоступлению.КодСтроки
	//|
	//|СГРУППИРОВАТЬ ПО
	//|	ДанныеЗаказа.Заказ,
	//|	ДанныеЗаказа.Номенклатура,
	//|	ДанныеЗаказа.КодСтроки";	
	// -- rarus PleA
	
	// ++ rarus PleA 30.04.2021 [номерзадачи]	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ДанныеЗаказаНоменклатуры
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказаНоменклатуры.Заказ КАК Заказ,
	|	ДанныеЗаказаНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(впТоварыКПоступлению.Количество) КАК Поставлено
	|ПОМЕСТИТЬ ДанныеПоступления
	|ИЗ
	|	ДанныеЗаказаНоменклатуры КАК ДанныеЗаказаНоменклатуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.впТоварыКПоступлению КАК впТоварыКПоступлению
	|		ПО ДанныеЗаказаНоменклатуры.Заказ = впТоварыКПоступлению.Заявка
	|			И ДанныеЗаказаНоменклатуры.Номенклатура = впТоварыКПоступлению.Номенклатура
	|			И (впТоварыКПоступлению.Активность)
	|			И (впТоварыКПоступлению.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказаНоменклатуры.Заказ,
	|	ДанныеЗаказаНоменклатуры.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеЗаказа.Заказ КАК Заказ,
	|	ДанныеЗаказа.Номенклатура КАК Номенклатура,
	|	ДанныеЗаказа.КодСтроки КАК КодСтроки,
	|	Сумма(ЕСТЬNULL(ДанныеПоступления.Поставлено, 0)) КАК Поставлено
	|ИЗ
	|	ДанныеЗаказа КАК ДанныеЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоступления КАК ДанныеПоступления
	|		ПО ДанныеЗаказа.Заказ = ДанныеПоступления.Заказ
	|			И ДанныеЗаказа.Номенклатура = ДанныеПоступления.Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеЗаказа.Заказ,
	|	ДанныеЗаказа.Номенклатура,
	|	ДанныеЗаказа.КодСтроки";		
	// -- rarus PleA
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЗаказано = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаЗаказано.Следующий() Цикл
		
		НоваяСтрока = ТаблицаДляОбработки.Добавить();
		НоваяСтрока.Заказ = ВыборкаЗаказано.Заказ;
		НоваяСтрока.Номенклатура = ВыборкаЗаказано.Номенклатура;
		НоваяСтрока.КодСтроки = ВыборкаЗаказано.КодСтроки;
		НоваяСтрока.Поставлено = ВыборкаЗаказано.Поставлено;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти 

Функция ТаблицаДляОбработкиИнициализировать()
	
	Перем тзДляОбработки;
	
	тзДляОбработки= Новый ТаблицаЗначений;
	тзДляОбработки.Колонки.Добавить("Заказ");
	тзДляОбработки.Колонки.Добавить("КодСтроки");
	тзДляОбработки.Колонки.Добавить("Номенклатура");
	тзДляОбработки.Колонки.Добавить("ТекущееСостояние", ОписаниеТипаСостоянийЗаявокНаСнабжение());
	тзДляОбработки.Колонки.Добавить("Заказано", ОбщегоНазначения.ОписаниеТипаЧисло(15,3), "Заказано");
	тзДляОбработки.Колонки.Добавить("КЗаказу", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	// ++ rarus PleA 30.04.2021 [номерзадачи]
	//тзДляОбработки.Колонки.Добавить("КПоступлению", ОбщегоНазначения.ОписаниеТипаЧисло(15,3), "В заказах пост-ку");
	// -- rarus PleA
	// ++ rarus PleA 30.04.2021 [номерзадачи]
	тзДляОбработки.Колонки.Добавить("КПоступлению", ОбщегоНазначения.ОписаниеТипаЧисло(15,3), "В заказах");
	// -- rarus PleA
	тзДляОбработки.Колонки.Добавить("Поставлено", ОбщегоНазначения.ОписаниеТипаЧисло(15,3), "Поставлено");
	тзДляОбработки.Колонки.Добавить("УслугиОказаны", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	тзДляОбработки.Колонки.Добавить("ПотребностьОбеспечена", , "Поступило на склад");
	тзДляОбработки.Колонки.Добавить("ВЗаказеПоставщику", , "В заказах пост-ку");
	тзДляОбработки.Колонки.Добавить("ВЗаказеНаПеремещение", , "В заказах на перем-е");
	тзДляОбработки.Колонки.Добавить("ОтправленоСоСкладаОтправителя", ОбщегоНазначения.ОписаниеТипаЧисло(15,3), "Отпр. со склада-отправителя");
	
	ТаблицаДляОбработкиДобавитьОбщиеКолонки(тзДляОбработки);
	
	Возврат тзДляОбработки;

КонецФункции

Процедура ТаблицаДляОбработкиДобавитьОбщиеКолонки(Таблица) Экспорт
	
	Таблица.Колонки.Добавить("НаРассмотренииТехДирекции", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));
	Таблица.Колонки.Добавить("СогласованиеКапитаном", ОбщегоНазначения.ОписаниеТипаЧисло(15,3), "На согл. капитаном");
	Таблица.Колонки.Добавить("Отменено", ОбщегоНазначения.ОписаниеТипаЧисло(15,3));

КонецПроцедуры

Процедура РассчитатьИЗаписатьСтатус(ТаблицаОчереди, тзДляОбработки)
	
	Для Каждого СтрокаОчереди из ТаблицаОчереди Цикл
		
		МассивСтрокЗаказа = тзДляОбработки.НайтиСтроки(Новый Структура("Заказ", СтрокаОчереди.Заказ));
		
		НаборЗаписейСтатусовСтрок = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.СоздатьНаборЗаписей();
		НаборЗаписейСтатусовСтрок.Отбор.Заказ.Установить(СтрокаОчереди.Заказ);
		НаборЗаписейСтатусовСтрок.Записать();

		ПотребностьОбеспечена = Истина; 
		Заказано = Истина;
		ЧастичноЗаказано = Ложь;
		ОтправленоСоСкладаОтправителя = Истина;
		
		Для Каждого стрМассива из МассивСтрокЗаказа Цикл
			ПотребностьОбеспеченаСтрока = Ложь; 
			ЗаказаноСтрока = Ложь;
			ЧастичноЗаказаноСтрока = Ложь;
			ОтправленоСоСкладаОтправителяСтрока = Ложь;
			
			Если стрМассива.Заказано > стрМассива.ПотребностьОбеспечена Тогда
				ПотребностьОбеспечена = Ложь;
			Иначе
				ПотребностьОбеспеченаСтрока = Истина;
			КонецЕсли;
			Если стрМассива.Заказано > стрМассива.ПотребностьОбеспечена + стрМассива.ВЗаказеПоставщику  + стрМассива.ВЗаказеНаПеремещение Тогда
				Заказано = Ложь;
			Иначе
				ЗаказаноСтрока = Истина;
			КонецЕсли;
			Если стрМассива.ВЗаказеПоставщику  + стрМассива.ВЗаказеНаПеремещение > 0 Тогда
				ЧастичноЗаказано = Истина;
				ЧастичноЗаказаноСтрока = Истина;
			КонецЕсли;
			Если стрМассива.Заказано > стрМассива.ПотребностьОбеспечена + стрМассива.ОтправленоСоСкладаОтправителя Тогда
				ОтправленоСоСкладаОтправителя = Ложь;
			Иначе
				ОтправленоСоСкладаОтправителяСтрока = Истина;
			КонецЕсли;
			ПримечаниеКСостоянию = "";
			ЗаписьСостоянияСтроки = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.СоздатьМенеджерЗаписи();
			ЗаписьСостоянияСтроки.Заказ = СтрокаОчереди.Заказ;
			ЗаписьСостоянияСтроки.КодСтроки = стрМассива.КодСтроки;
			ЗаписьСостоянияСтроки.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Активно;
			Если ПотребностьОбеспеченаСтрока  Тогда
				ЗаписьСостоянияСтроки.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено;
				ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
					ПримечаниеКСостоянию, Символы.ПС, тзДляОбработки.Колонки["ПотребностьОбеспечена"].Заголовок,
					стрМассива.ПотребностьОбеспечена, стрМассива.Номенклатура.ЕдиницаИзмерения);
			ИначеЕсли ОтправленоСоСкладаОтправителяСтрока Тогда
				ЗаписьСостоянияСтроки.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.ОтправленоСоСкладаОтправителя;
				ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
					ПримечаниеКСостоянию, Символы.ПС, тзДляОбработки.Колонки["ОтправленоСоСкладаОтправителя"].Заголовок,
					стрМассива.ОтправленоСоСкладаОтправителя, стрМассива.Номенклатура.ЕдиницаИзмерения);
			ИначеЕсли ЗаказаноСтрока Тогда
				ЗаписьСостоянияСтроки.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Заказано;
			ИначеЕсли ЧастичноЗаказаноСтрока Тогда
				ЗаписьСостоянияСтроки.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноЗаказано;
			КонецЕсли;
			
			Если НЕ (ПотребностьОбеспеченаСтрока или ОтправленоСоСкладаОтправителяСтрока) Тогда
				Для НомерКолонки = 4 по тзДляОбработки.Колонки.Количество() - 1 Цикл
					Если НЕ стрМассива[НомерКолонки] = 0 Тогда
						ПримечаниеКСостоянию = СтрШаблон(НСтр("ru = '%1%2%3: %4 %5'"), 
						ПримечаниеКСостоянию, Символы.ПС, тзДляОбработки.Колонки[НомерКолонки].Заголовок,
						стрМассива[НомерКолонки], стрМассива.Номенклатура.ЕдиницаИзмерения);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ЗаписьСостоянияСтроки.ПримечаниеКСостоянию = СокрЛП(ПримечаниеКСостоянию);
			
			Попытка
				ЗаписьСостоянияСтроки.Записать(Истина);
			Исключение
				ОписаниеОшибки = ОписаниеОшибки();
				ЗаписьЖурналаРегистрации("ОшибкаЗаписиСостоянияЗаявкиНаСнабжение"
				, УровеньЖурналаРегистрации.Ошибка, 
				,
				, "Ошибка записи состояния Заявки на снабжение: """ + ОписаниеОшибки );
				ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				СтрокаОчереди.Ошибка = Истина;
			КонецПопытки;
			
		КонецЦикла;
		
		ЗаписьСостояния = РегистрыСведений.рарусСостоянияЗаявокНаСнабжение.СоздатьМенеджерЗаписи();
		ЗаписьСостояния.Заказ = СтрокаОчереди.Заказ;
		ЗаписьСостояния.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Активно;
		Если ПотребностьОбеспечена  Тогда
			ЗаписьСостояния.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Выполнено;
		ИначеЕсли ОтправленоСоСкладаОтправителя Тогда
			ЗаписьСостояния.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.ОтправленоСоСкладаОтправителя;
		ИначеЕсли Заказано Тогда
			ЗаписьСостояния.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.Заказано;
		ИначеЕсли ЧастичноЗаказано Тогда
			ЗаписьСостояния.Состояние = Перечисления.рарусСостоянияЗаявокНаСнабжение.ЧастичноЗаказано;
		КонецЕсли;
		
		Попытка
			ЗаписьСостояния.Записать(Истина);
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			ЗаписьЖурналаРегистрации("ОшибкаЗаписиСостоянияЗаявкиНаСнабжение"
			, УровеньЖурналаРегистрации.Ошибка, 
			,
			, "Ошибка записи состояния Заявки на снабжение: """ + ОписаниеОшибки );
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			СтрокаОчереди.Ошибка = Истина;
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры	


#Область ПересчетСостояний

Процедура ДобавитьПараметрПоместитьВОчередь(Параметры) Экспорт
	
	Параметры.Вставить(ИмяПараметраПоместитьВОчередь(), Истина);
	
КонецПроцедуры

Функция ИмяПараметраПоместитьВОчередь() Экспорт
	
	Возврат "ПоместитьВОчередь";

КонецФункции

#КонецОбласти 

#Область Служебные

Функция ПараметрыОчередиЗаявкиНаСнабжение() Экспорт
	
	ПараметрыОчереди = Новый Структура;
	
	ТаблицаОчереди =  Новый ТаблицаЗначений;
	ТаблицаОчереди.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.впЗаявкаНаСнабжение"));
	ТаблицаОчереди.Колонки.Добавить("Ошибка", Новый ОписаниеТипов("Булево"));
	ТаблицаОчереди.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(0));	
	ТаблицаОчереди.Колонки.Добавить("Обработана", Новый ОписаниеТипов("Булево"));
	
	Очередь = ПрочитатьОчередь();
	
	СвернутьОчередьДоЗаявки(Очередь, ТаблицаОчереди);

	ПараметрыОчереди.Вставить("ОчередьРегистра", Очередь);
	ПараметрыОчереди.Вставить("ТаблицаОчереди", ТаблицаОчереди);
	
	Возврат ПараметрыОчереди;
		
КонецФункции	

Функция ПрочитатьОчередь()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.Заказ КАК Регистратор,
	|	Таблица.Идентификатор КАК Идентификатор
	|ИЗ
	|	РегистрСведений.рарусОчередьЗаявокНаСнабжениеКОбновлениюСостояния КАК Таблица";
	
	Очередь = Запрос.Выполнить().Выгрузить();
	
	Возврат Очередь;
		
КонецФункции	

Процедура СвернутьОчередьДоЗаявки(Очередь, ТаблицаОчереди)
		
	Для Каждого СтрокаОчереди из Очередь цикл
		
		ЭлементОчереди = СтрокаОчереди.Регистратор;
		
		МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЭлементОчереди);
		ЗаказыМассив = МодульМенеджера.ПолучитьЗаявкиНаСнабжение(ЭлементОчереди);
		
		Для Каждого Заказ Из ЗаказыМассив цикл
			
			НоваяСтрокаОчереди = ТаблицаОчереди.Добавить();
			НоваяСтрокаОчереди.Заказ = Заказ;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	рарусОбщегоНазначенияСМСервер.СвернутьТаблицу(ТаблицаОчереди);
	
КонецПроцедуры

Функция ТаблицаОчередиПоУслугам(ТаблицаОчереди) 
	
	ВидыПотребностиОтбор = Новый Соответствие;
	ВидыПотребностиОтбор.Вставить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиУслуги(), Истина);
	
	ТаблицаОчередиПриемник = ТаблицаОчередиПоВидуПотребности(ТаблицаОчереди, ВидыПотребностиОтбор);
	
	Возврат ТаблицаОчередиПриемник;
	
КонецФункции

Функция ТаблицаОчередиПоТМЦ(ТаблицаОчереди) 
	
	ВидыПотребностиОтбор = Новый Соответствие;
	ВидыПотребностиОтбор.Вставить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦ(), Истина);
	ВидыПотребностиОтбор.Вставить(рарусЗаявкаНаСнабжениеСервер.ВидПотребностиТМЦЗаСчетСобственныхСредств(), Истина);

	ТаблицаОчередиПриемник = ТаблицаОчередиПоВидуПотребности(ТаблицаОчереди, ВидыПотребностиОтбор);
	
	Возврат ТаблицаОчередиПриемник;
	
КонецФункции

Функция ТаблицаОчередиПоВидуПотребности(ТаблицаОчереди, Отбор)
		
	ТаблицаОчередиПриемник = ТаблицаОчереди.СкопироватьКолонки();
	
	СоответствиеЗаказВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ТаблицаОчереди.ВыгрузитьКолонку("Заказ"), "ВидПотребности");
	
	Для Каждого СтрокаТаблицы Из ТаблицаОчереди цикл
		
		Если Отбор.Получить(СоответствиеЗаказВидДокумента[СтрокаТаблицы.Заказ]) = Истина тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаОчередиПриемник.Добавить(), СтрокаТаблицы);				
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ТаблицаОчередиПриемник;

КонецФункции

Функция ОбновитьРезультатВыполненияОчереди(ОчередьОбщая, ОчередьУслуги)
	
	Для Каждого СтрокаОбщая Из ОчередьОбщая цикл
		
		СтрокаУслуги = ОчередьУслуги.Найти(СтрокаОбщая.Заказ);
		
		Если СтрокаУслуги <> Неопределено тогда
			ЗаполнитьЗначенияСвойств(СтрокаОбщая, СтрокаУслуги);
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецФункции	

#КонецОбласти 