#Область ПрограммныйИнтерфейс

#Область МетодыДляУчетногоМеханизма

// Функция-конструктор параметров учетного механизма.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * НезависимыеРегистры - Массив - список независимых регистров сведений, которые записываются учетным механизмом
//     * ПодчиненныеРегистры - Массив - список подчиненных регистратору регистров, который записываются учетным механизмом
//     * КонтрольныеРегистрыИзменений - Массив - список подчиненных регистратору регистров,
//          по которым необходимо контролировать изменения
//     * КонтрольныеРегистрыЗаданий   - Массив - список подчиненных регистратору регистров,
//          по изменению которых необходимо формировать задания
//     * Производный - Булево - формируются вторичные движения используя данные уже записанных регистров,
//          сделанных в том числе другими механизмами.
//
Функция ПараметрыУчетногоМеханизма() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("НезависимыеРегистры",          Новый Массив);
	Параметры.Вставить("ПодчиненныеРегистры",          Новый Массив);
	Параметры.Вставить("КонтрольныеРегистрыИзменений", Новый Массив);
	Параметры.Вставить("КонтрольныеРегистрыЗаданий",   Новый Массив);
	Параметры.Вставить("Производный",                  Ложь);
	
	Возврат Параметры;
	
КонецФункции

// Функция возвращает учетные механизмы документа.
//
// Параметры:
//  Документ - ДокументМенеджер - менеджер документа для которого требуется получить учетные механизмы. 
//  
// Возвращаемое значение:
//  Массив - содержит учетные механизмы документа.
//
Функция УчетныеМеханизмыДокумента(Документ) Экспорт 
	
	МеханизмыДокумента = Новый Массив;
	Документ.ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента);
	
	Возврат МеханизмыДокумента;
		
КонецФункции

// Загружает для записи данные в набор записей движений документа по указанному регистру.
//
// Параметры:
//  ТаблицыДляДвижений - Структура - список таблиц для движений, содержащий таблицу данных для указанного регистра,
//      с колонками соответствующие полям регистра и именем в формате "Таблица" + ИмяРегистра
//  Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//  ИмяРегистра - Строка - имя регистра, данные которого необходимо загрузить.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, ИмяРегистра) Экспорт
	
	ИмяТаблицыДвижений = "Таблица" + ИмяРегистра;
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыДвижений)
		И ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицыДвижений]) Тогда
		
		Движения[ИмяРегистра].Записывать = Истина;
		Движения[ИмяРегистра].Загрузить(ТаблицыДляДвижений[ИмяТаблицыДвижений]);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////
// Вызывается из процедур контроля изменений

// Проверяет есть ли записи по указанной таблице контроля.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  ИмяТаблицы - Строка - имя таблицы контроля.
//
// Возвращаемое значение:
//  Булево - Истина, если есть изменения по указанной таблице контроля.
//
Функция ЕстьЗаписиВТаблице(Документ, ИмяТаблицы) Экспорт
	
	ТаблицыКонтроля = Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля;
	Возврат ТаблицыКонтроля.Свойство(ИмяТаблицы) И ТаблицыКонтроля[ИмяТаблицы].ЕстьЗаписиВТаблице;
	
КонецФункции

// Получает установленные параметры для указанной таблицы контроля.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  ИмяТаблицы - Строка - имя таблицы контроля.
//
// Возвращаемое значение:
//  Произвольный - установленный параметр.
//
Функция ПараметрыТаблицы(Документ, ИмяТаблицы) Экспорт
	
	ТаблицыКонтроля = Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля;
	Если ТаблицыКонтроля.Свойство(ИмяТаблицы) Тогда
		Возврат ТаблицыКонтроля[ИмяТаблицы].Параметры;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

/////////////////////////////////////////
// Вызывается из набора записей регистров

// Проверяет необходимость контроля изменений движений по регистру.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей.
//
// Возвращаемое значение:
//  Булево - Истина, если есть необходимости выполнения контроля изменений движений.
//
Функция КонтролироватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	
	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("ТаблицыКонтроля")
		И ДополнительныеСвойстваНабораЗаписей.Свойство("МенеджерВременныхТаблиц");
	
КонецФункции

// Проверяет необходимость рассчитывать результат изменений движений по регистру.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей.
//
// Возвращаемое значение:
//  Булево - Истина, если есть необходимость выполнения расчета результата изменений движений.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	
	Возврат Не ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения)
		И ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения")
		И ДополнительныеСвойстваНабораЗаписей.РассчитыватьИзменения;
	
КонецФункции

// Регистрирует таблицу контроля изменений для последующего использования.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей - Структура - дополнительные свойства набора записей
//  ИмяТаблицы - Строка - имя таблицы контроля
//  ЕстьЗаписиВТаблице - Булево - признак наличия записей в таблице
//  Параметры - Произвольный - передаваемые параметры таблицы.
//
Процедура ЗарегистрироватьТаблицуКонтроля(ДополнительныеСвойстваНабораЗаписей, ИмяТаблицы, ЕстьЗаписиВТаблице,
	Параметры = Неопределено) Экспорт
	
	ДополнительныеСвойстваНабораЗаписей.ТаблицыКонтроля.Вставить(ИмяТаблицы,
		Новый Структура("ЕстьЗаписиВТаблице, Параметры", ЕстьЗаписиВТаблице, Параметры));
	
КонецПроцедуры

#КонецОбласти

#Область СобытияДокумента

// Инициализирует в обработчике документа ПередЗаписью() свойства, необходимые для проведения документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  РежимЗаписи - РежимЗаписиДокумента - текущий режим проведения документа
//  РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Процедура ПередЗаписьюДокумента(Документ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Документ.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.Вставить("ПроведениеДокументов", Новый Структура);
	
	СвойстваДокумента = Новый ФиксированнаяСтруктура("ЭтоНовый, РежимЗаписи, РежимПроведения, Проведен",
		Документ.ЭтоНовый(),
		РежимЗаписи,
		РежимПроведения,
		Документ.Проведен);
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("СвойстваДокумента", СвойстваДокумента);
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ТаблицыКонтроля", Новый Структура);
	
КонецПроцедуры

// Формирует в обработчике документа ПриЗаписи() движения по независимым регистрам, определенных в учетных документах.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево -  признак отказа от записи.
//
Процедура ПриЗаписиДокумента(Документ, Отказ) Экспорт
	
	Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьДокумент(Документ, Отказ);
	
КонецПроцедуры

// Формирует в обработчике документа ОбработкаПроведения() движения по регистрам, определенных в учетных документах.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево -  признак отказа от записи.
//
Процедура ОбработкаПроведенияДокумента(Документ, Отказ) Экспорт
	
	Если СвойстваДокумента(Документ).РежимЗаписи <> РежимЗаписиДокумента.Проведение Тогда
		Возврат;
	КонецЕсли;
	
	ПровестиДокумент(Документ, Отказ);
	
КонецПроцедуры

// Очищает в обработчике документа ОбработкаУдаленияПроведения() движения по подчиненным регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево -  признак отказа от записи.
//
Процедура ОбработкаУдаленияПроведенияДокумента(Документ, Отказ) Экспорт
	
	Если СвойстваДокумента(Документ).РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	КонецЕсли;
	
	ПровестиДокумент(Документ, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЧерезОперацииМеханизмов

// Определяет необходимость сформировать таблицу для движений, необходимую для проведения документа по регистру.
//
// Параметры:
//  ИмяРегистра - Строка - имя регистра в конфигурации
//  Регистры - Структура - список имен регистров, для которых требуется формирование таблиц,
//      если список не указан, то всегда возвращается Истина.
//
// Возвращаемое значение:
//  Булево - Истина, если требуется формировать указанную таблицу.
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт
	
	Если ЗначениеЗаполнено(Регистры) Тогда
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			СписокРегистров = Новый Структура(Регистры);
		Иначе
			СписокРегистров = Регистры;
		КонецЕсли;
		
		Возврат СписокРегистров.Свойство(ИмяРегистра);
	Иначе
		Возврат Истина
	КонецЕсли;
	
КонецФункции

// Проверяет наличие текста запроса для формирования указанной таблицы в списке запросов пакета.
//
// Параметры:
//  ИмяТаблицы - Строка - имя таблицы, наличие которой необходимо проверить
//  ТекстыЗапроса - СписокЗначений - пакет запросов, где значениями являются тексты запросов,
//      а представлениями - имена формируемых таблиц.
//
// Возвращаемое значение:
//  Булево - Истина, если текст запроса таблицы есть в списке запросов пакета.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт
	
	Если ТекстыЗапроса = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет подготовку итоговых запросов отражения документа по учетным регистрам механизма на основании
//  - шаблонов отражения операций в регистрах
//  - запросов получения данных документа.
// Дополняет запрос отражения документа итоговыми текстами запросов отражения в регистрах.
//
// Параметры:
//  Запрос - Запрос - Запрос отражения документа. В него устанавливаются параметры.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса отражения документа.
//  ТекстыШаблоновОтражения - Структура - Тексты шаблонов запросов отражения в учетных регистрах.
//     * Ключ - Строка - Имя регистра.
//     * Значение - Строка - Текст шаблона запроса.
//  ТекстыЗапросовДанныхДокумента - Структура - Тексты запросов выборки данных из документов.
//     * Ключ - Строка - Имя таблицы, необходимой для отражения.
//     * Значение - Строка - Текст запроса выборки данных.
//  ТекстыШаблоновВременныхТаблиц - Структура - Тексты запросов инициализации дополнительных временных таблиц для отражения.
//     * Ключ - Строка - Имя временной таблицы.
//     * Значение - Строка - Текст запроса инициализации дополнительной временной таблицы.
//
Процедура ДополнитьЗапросОтраженияДокумента(Запрос, ТекстыЗапроса, ТекстыШаблоновОтражения, ТекстыЗапросовДанныхДокумента, ТекстыШаблоновВременныхТаблиц = Неопределено) Экспорт
	
	Если ТекстыШаблоновОтражения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ВременныеТаблицы = Новый Массив();
	
	// Проверим и подготовим запросы выборки данных из документов.
	Для каждого КлючИЗначение Из ТекстыЗапросовДанныхДокумента Цикл
		
		Если СтрНайти("//", КлючИЗначение.Значение) <> 0 Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать комментариев';
											|en = 'Text of the ""%1"" query cannot contain comments'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("СГРУППИРОВАТЬ", КлючИЗначение.Значение) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию СГРУППИРОВАТЬ';
											|en = 'Text of the ""%1"" query cannot contain GROUP clause'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("РАЗЛИЧНЫЕ", КлючИЗначение.Значение) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию РАЗЛИЧНЫЕ';
											|en = 'Text of the ""%1"" query cannot contain VARIOUS clause'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("УПОРЯДОЧИТЬ", КлючИЗначение.Значение) <> Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Текст запроса ""%1"" не должен содержать конструкцию УПОРЯДОЧИТЬ';
											|en = 'Text of the ""%1"" query cannot contain SORT clause'"), КлючИЗначение.Ключ);
		КонецЕсли;
		
		Если ПозицияКлючевогоСлова("ОБЪЕДИНИТЬ", КлючИЗначение.Значение) <> Неопределено Тогда
			// Если запрос выборки данных содержит объединение нескольких таблиц,
			// то поместим это объединение во временную таблицу.
			ИмяВременнойТаблицы = КлючИЗначение.Ключ;
			ТекстСозданияВременнойТаблицы =
			"ВЫБРАТЬ
			|	*
			|ПОМЕСТИТЬ %1
			|ИЗ
			|	(%2) КАК %1
			|";
			ТекстСозданияВременнойТаблицы = СтрШаблон(ТекстСозданияВременнойТаблицы, ИмяВременнойТаблицы, КлючИЗначение.Значение);
			ТекстыЗапроса.Добавить(ТекстСозданияВременнойТаблицы, ИмяВременнойТаблицы, Истина);
			ВременныеТаблицы.Добавить(ИмяВременнойТаблицы);
			ТекстыЗапросовДанныхДокумента[КлючИЗначение.Ключ] = "";
		Иначе
			ТекстыЗапросовДанныхДокумента[КлючИЗначение.Ключ] = РазобратьТекстЗапроса(КлючИЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Подготовим тексты запросов дополнительных временных таблицы.
	Если ТекстыШаблоновВременныхТаблиц <> Неопределено Тогда
		Для каждого КлючИЗначение Из ТекстыШаблоновВременныхТаблиц Цикл
			ИмяВременнойТаблицы = КлючИЗначение.Ключ;
			ТекстЗапроса = КлючИЗначение.Значение;
			ПодготовитьТекстЗапросаОтраженияДокумента(ТекстЗапроса, ТекстыЗапросовДанныхДокумента);
			ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовим тексты запросов отражения операций в регистрах.
	Для каждого КлючИЗначение Из ТекстыШаблоновОтражения Цикл
		ИмяРегистра = КлючИЗначение.Ключ;
		ТекстОтражения = КлючИЗначение.Значение;
		ПодготовитьТекстЗапросаОтраженияДокумента(ТекстОтражения, ТекстыЗапросовДанныхДокумента);
		ТекстыЗапроса.Добавить(ТекстОтражения, ИмяРегистра);
	КонецЦикла;
	
	// Удалим созданные для отражения временные таблицы.
	Для каждого ИмяВременнойТаблицы Из ВременныеТаблицы Цикл
		ТекстУдаления = СтрШаблон("УНИЧТОЖИТЬ %1", ИмяВременнойТаблицы);
		ТекстыЗапроса.Добавить(ТекстУдаления);
	КонецЦикла;
	
	// Удалим временные таблицы операции.
	Если ТекстыШаблоновВременныхТаблиц <> Неопределено Тогда
		Для каждого КлючИЗначение Из ТекстыШаблоновВременныхТаблиц Цикл
			ТекстУдаления = СтрШаблон("УНИЧТОЖИТЬ %1", КлючИЗначение.Ключ);
			ТекстыЗапроса.Добавить(ТекстУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет сборку запроса отражения конкретного документа по операции механизма.
//
// Параметры:
//  ТекстШаблонаОтражения - Строка - Текст запроса отражения операции.
//  ТекстыЗапросовДанныхДокумента - Структура - Структура текстов запросов выборки данных документа.
//     * Ключ - Строка - Имя таблицы, необходимой для отражения.
//     * Значение - Строка, Структура - Текст запроса выборки данных из документа.
//          Значение может быть как неразобранный текст запроса (значение типа Строка) или
//          текст запроса разобранный в структуру с помощью РазобратьТекстЗапроса().
//
Процедура ПодготовитьТекстЗапросаОтраженияДокумента(ТекстШаблонаОтражения, ТекстыЗапросовДанныхДокумента) Экспорт
	
	Для каждого ТекстЗапросаДокумента Из ТекстыЗапросовДанныхДокумента Цикл
		
		ИмяТаблицыДанных = ТекстЗапросаДокумента.Ключ;
		ТекстЗапросаДанных = ТекстЗапросаДокумента.Значение;
		
		Если Не ЗначениеЗаполнено(ТекстЗапросаДанных) Тогда
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(ТекстШаблонаОтражения, ИмяТаблицыДанных);
		Иначе
			ТекстШаблонаОтражения = ЗапросОтраженияСВыборомДанныхИзДокумента(ТекстШаблонаОтражения, ИмяТаблицыДанных, ТекстЗапросаДанных);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует таблицы для движений по переданным параметрам и списку запросов.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен
//  ТолькоПомеченные - Булево - указывает на то, что возвращаются только те таблицы,
//      у которых установлена пометка в списке текстов запросов.
//
// Возвращаемое значение:
//  Структура - структура в которую помещены полученные таблицы.
//
Функция ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ТолькоПомеченные = Ложь) Экспорт
	
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		
		ИмяТаблицы = ТекстЗапроса.Представление;
		
		Если Не ПустаяСтрока(ИмяТаблицы) Тогда
			
			Если ТолькоПомеченные И Не ТекстЗапроса.Пометка Тогда
				ИмяТаблицы = "";
			ИначеЕсли НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда // таблицы для проведения должны начинаться с "Таблица"
				ИмяТаблицы = "Таблица" + ИмяТаблицы;
			КонецЕсли;
			
			ТекстЗапроса.Представление = ИмяТаблицы;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВыгрузитьРезультатыЗапросаПроведения(Запрос, ТекстыЗапроса);
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Возвращает список свойств проводимого документа.
//
// Параметры:
//  Документ - ДокументОбъект - документ, по которому необходимо получить свойства.
//
// Возвращаемое значение:
//  ФиксированнаяСтруктура - со свойствами:
//     * ЭтоНовый - Булево - Истина - документ перед записью не был записан в базу, Ложь - документ уже был записан
//     * Проведен - Булево - Истина - документ перед записью уже был проведен; Ложь - документ не был проведен
//     * РежимЗаписи - РежимЗаписиДокумента - текущий режим записи документа
//     * РежимПроведения - РежимПроведенияДокумента - текущий режим проведения документа.
//
Функция СвойстваДокумента(Документ) Экспорт
	
	Возврат Документ.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента;
	
КонецФункции

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Строка, Структура - список имен регистров, разделенный запятыми, таблицы которых необходимо получить;
//      Если список не указан, будут получены все доступные таблицы данных документа.
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры = Неопределено, ДопПараметры = Неопределено) Экспорт
	
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	Возврат МенеджерДокумента.ДанныеДокументаДляПроведения(Документ,
		?(ТипЗнч(Регистры) = Тип("Строка"), Новый Структура(Регистры), Регистры),
		?(ЗначениеЗаполнено(ДопПараметры), ДопПараметры, Новый Структура));
	
КонецФункции

// Удаляет все записи в базе данных из наборов записей движений документа по указанным регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - документ, по которому необходимо удалить движения.
//  Регистры - Строка - список имен регистров, разделенный запятыми, движения которых необходимо удалить;
//      Если список не указан, будут удалены движения документа по всем регистрам.
//
Процедура ОчиститьДвиженияДокумента(Документ, Регистры = Неопределено) Экспорт
	
	Свойства = СвойстваДокумента(Документ);
	Если Не Свойства.ЭтоНовый Тогда
		Если Не ЗначениеЗаполнено(Регистры) Тогда
			ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ, Свойства, Неопределено);
			Документ.Движения.Записать();
		Иначе
			Для Каждого ИмяРегистра Из СтрРазделить(Регистры, ", ", Ложь) Цикл
				НаборЗаписей = Документ.Движения[СокрЛП(ИмяРегистра)];
				НаборЗаписей.Очистить();
				НаборЗаписей.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
				НаборЗаписей.Записать(Истина);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет дополнительную таблицу для движений по регистру учетного механизма.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  ИмяТаблицы - Строка - имя таблицы для движений
//  Таблица - ТаблицаЗначений - таблица для движений.
//
Процедура ДобавитьТаблицуДанныхДокумента(Документ, ИмяТаблицы, Таблица) Экспорт
	
	Если Не Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("ДополнительныеТаблицыДанныхДокумента") Тогда
		Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ДополнительныеТаблицыДанныхДокумента", Новый Структура);
	КонецЕсли;
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.ДополнительныеТаблицыДанныхДокумента.Вставить(ИмяТаблицы, Таблица);
	
КонецПроцедуры

// Возвращает менеджер временных таблиц, используемый для хранения таблиц контроля изменений регистров.
//
// Параметры:
//  Документ - ДокументОбъект - документ, в рамках которого существует менеджер временных таблиц.
//
// Возвращаемое значение:
//  МенеджерВременныхТаблиц - менеджер временных таблиц.
//
Функция МенеджерВременныхТаблицКонтроля(Документ) Экспорт
	
	Если Не Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("МенеджерВременныхТаблицКонтроля") Тогда
		Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить(
			"МенеджерВременныхТаблицКонтроля", Новый МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Возврат Документ.ДополнительныеСвойства.ПроведениеДокументов.МенеджерВременныхТаблицКонтроля;
	
КонецФункции

// Инициализирует доп. свойства регистра для выполнения контроля изменений движений по регистру.
//
// Параметры:
//  ДвиженияРегистра - РегистрНаборЗаписей - коллекция записей регистра
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров
//  РассчитыватьИзменения - Булево - признак, указывающий рассчитывать результат изменений движений по регистру.
//
Процедура УстановитьДопСвойстваРегистра(ДвиженияРегистра, Документ,
	МенеджерВременныхТаблиц = Неопределено, РассчитыватьИзменения = Ложь) Экспорт
	
	ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", СвойстваДокумента(Документ));
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, РассчитыватьИзменения);
	КонецЕсли;
	
КонецПроцедуры

// Записывает движения документа, выполняя контроль их изменений по регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от записи
//  Изменения - Булево - признак, указывающий рассчитывать результат изменений движений по регистрам
//  Задания - Булево - признак, указывающий формировать задания исходя из движений по регистрам.
//
Процедура ЗаписатьДвиженияСКонтролем(Документ, Отказ, Изменения, Задания) Экспорт
	
	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерДокумента);
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	Механизмы            = Новый СписокЗначений;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(Документ, Свойства);
		ПараметрыМеханизма.Вставить("МодульМеханизма", МодульМеханизма);
		
		Механизмы.Добавить(ПараметрыМеханизма, Механизм);
	КонецЦикла;
	Механизмы.СортироватьПоПредставлению();
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтроля(Документ);
	
	Для каждого Механизм Из Механизмы Цикл
		Если Изменения Тогда
			Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыИзменений Цикл
				ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
				Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
					ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
					УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Задания Тогда
			Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыЗаданий Цикл
				ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
				Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
					ДвиженияРегистра.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
					УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОбработатьДокументПередЗаписьюДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Документ.Движения.Записать();
	
	ОбработатьДокументПослеЗаписиДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Если Изменения Тогда
		ВыполнитьКонтрольРезультатовПроведения(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	КонецЕсли;
	Если Задания И Не Отказ Тогда
		СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц);
	КонецЕсли;
	
КонецПроцедуры

// Создает структуру данных, заменяющую объект документа, пригодную для инициализации доп. свойства регистров
// при выполнения контроля изменений движений по регистрам и формировании заданий на отложенные движения.
//
// Параметры:
//  Ссылка - ДокументСсылка - ссылка на документ
//  Дата - Дата - дата документа.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * Ссылка - ДокументСсылка - ссылка на документ
//     * Дата - Дата - дата документа
//     * ДополнительныеСвойства - Структура - доп. свойства документа.
//
Функция ЭмуляцияДокумента(Ссылка, Дата) Экспорт
	
	Документ = Новый Структура("Ссылка, Дата, ДополнительныеСвойства",
		Ссылка, Дата, Новый Структура);
	
	Документ.ДополнительныеСвойства.Вставить("ПроведениеДокументов", Новый Структура);
	
	СвойстваДокумента = Новый ФиксированнаяСтруктура("ЭтоНовый, РежимЗаписи, РежимПроведения, ЭтоПерепроведение",
		Ложь,
		РежимЗаписиДокумента.Проведение,
		РежимПроведенияДокумента.Неоперативный,
		Истина);
	
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("СвойстваДокумента", СвойстваДокумента);
	Документ.ДополнительныеСвойства.ПроведениеДокументов.Вставить("ТаблицыКонтроля", Новый Структура);
	
	Возврат Документ;
	
КонецФункции

// Формирует задания на отложенные движения исходя из выполненных движений по регистрам.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров.
//
Процедура СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц) Экспорт
	
	
	
КонецПроцедуры

// Преобразует таблицы контроля изменений по документу в структуру данных используемую в предыдущей версии проведения,
// пригодную для вызова формирования заданий на отложенные движения для внеоборотных активов.
// (См. ВнеоборотныеАктивы.СформироватьЗаписиРегистровЗаданий)
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//      используемый для хранения таблиц контроля изменений регистров.
//
// Возвращаемое значение:
//  Структура - со свойствами:
//     * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//          используемый для хранения таблиц контроля изменений регистров
//     * <ИмяТаблицыКонтроля> - Структура - отмеченная таблица контроля.
//
Функция ДанныеТаблицСтаройСтруктуры(Документ, МенеджерВременныхТаблиц) Экспорт
	
	ДанныеТаблиц = Новый Структура;
	ДанныеТаблиц.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	Для Каждого Таблица Из Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля Цикл
		ДанныеТаблиц.Вставить(Таблица.Ключ, Таблица.Значение.ЕстьЗаписиВТаблице);
	КонецЦикла;
	
	Возврат ДанныеТаблиц;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Описывает учетные механизмы используемые в конфигурации.
//
Функция УчетныеМеханизмыКонфигурации()
	
	МеханизмыКонфигурации = Новый Структура;
	
	// ++ rarus PleA 27.11.2020
	рарусПроведениеДокументовПереопределяемый.ДополнитьУчетныеМеханизмыКонфигурации(МеханизмыКонфигурации);
	// -- rarus PleA
	
	ПроведениеДокументовЛокализация.ДополнитьУчетныеМеханизмыКонфигурации(МеханизмыКонфигурации);
	
	Возврат МеханизмыКонфигурации;
	
КонецФункции

Процедура ЗаписатьДокумент(Документ, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерДокумента);
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	ДвижимыеРегистры = Новый Структура;
	Механизмы        = Новый СписокЗначений;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(Документ, Свойства);
		ПараметрыМеханизма.Вставить("МодульМеханизма", МодульМеханизма);
		
		Для каждого Регистр Из ПараметрыМеханизма.НезависимыеРегистры Цикл
			ДвижимыеРегистры.Вставить(Регистр.Имя);
		КонецЦикла;
		
		Механизмы.Добавить(ПараметрыМеханизма, Механизм);
	КонецЦикла;
	Механизмы.СортироватьПоПредставлению();
	
	ТаблицыДляДвижений = ТаблицыДляДвижений(Документ, МенеджерДокумента, ДвижимыеРегистры);
	ЗаписатьДвиженияНезависимыхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ);
	
КонецПроцедуры

Процедура ПровестиДокумент(Документ, Отказ)
	
	Свойства = СвойстваДокумента(Документ);
	МенеджерДокумента = Документы[Документ.Метаданные().Имя];
	ПроведениеДокументовЛокализация.ПереназначитьМодульПолученияДанныхДокумента(МенеджерДокумента);
	
	МеханизмыДокумента    = УчетныеМеханизмыДокумента(МенеджерДокумента);
	МеханизмыКонфигурации = УчетныеМеханизмыКонфигурации();
	
	РегистрыКРегистрации = Новый Массив;
	ДвижимыеРегистры     = Новый Структура;
	Механизмы            = Новый СписокЗначений;
	Для каждого Механизм Из МеханизмыДокумента Цикл
		МодульМеханизма = ОбщегоНазначения.ОбщийМодуль(МеханизмыКонфигурации[Механизм]);
		
		ПараметрыМеханизма = МодульМеханизма.ПараметрыДляПроведенияДокумента(Документ, Свойства);
		ПараметрыМеханизма.Вставить("МодульМеханизма", МодульМеханизма);
		
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РегистрыКРегистрации, ПараметрыМеханизма.ПодчиненныеРегистры);
			
			Для каждого Регистр Из ПараметрыМеханизма.ПодчиненныеРегистры Цикл
				ДвижимыеРегистры.Вставить(Регистр.Имя);
			КонецЦикла;
			
			Для каждого Регистр Из ПараметрыМеханизма.НезависимыеРегистры Цикл
				ДвижимыеРегистры.Вставить(Регистр.Имя);
			КонецЦикла;
		КонецЕсли;
		
		Механизмы.Добавить(ПараметрыМеханизма, Механизм);
	КонецЦикла;
	Механизмы.СортироватьПоПредставлению();
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ, Свойства, РегистрыКРегистрации);
	
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ТаблицыДляДвижений = ТаблицыДляДвижений(Документ, МенеджерДокумента, ДвижимыеРегистры);
		ОтразитьДвиженияПодчиненныхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ);
	КонецЕсли;
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблицКонтроля(Документ);
	УстановитьДопСвойстваКонтрольныхРегистров(Механизмы, Документ, МенеджерВременныхТаблиц);
	
	ОбработатьДокументПередЗаписьюДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Документ.Движения.Записать();
	
	ОбработатьДокументПослеЗаписиДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	ВыполнитьКонтрольРезультатовПроведения(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ЗаписатьДвиженияНезависимыхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ);
	КонецЕсли;
	
	Если Не Отказ Тогда
		СформироватьЗаданияНаОтложенныеДвижения(Документ, МенеджерВременныхТаблиц);
	КонецЕсли;
	
	МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

Функция ВыгрузитьРезультатыЗапросаПроведения(Запрос, ТекстыЗапроса) Экспорт
	
	Таблицы = Новый Структура;
	
	ОбходРезультата = ОбходРезультатаЗапроса.Прямой;
	
	Результаты = ВыполнитьПакетЗапросовПроведения(Запрос, ТекстыЗапроса);
	
	Если Результаты <> Неопределено Тогда
		
		// Помещение результатов запроса в таблицы.
		ИндексРезультата = -1;
		Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
			ИмяТаблицы = ТекстЗапроса.Представление;
			Подзапросы = СтрРазделить(СокрЛП(ТекстЗапроса.Значение), ";", Ложь);
			// Выгружаем результат последнего запроса пакета.
			ИндексРезультата = ИндексРезультата + Подзапросы.Количество(); 
			Если НЕ ПустаяСтрока(ИмяТаблицы) Тогда // имя таблицы
				Результат = Результаты[ИндексРезультата];
				Если Результат <> Неопределено Тогда
					ТаблицаЗапроса = Результат.Выгрузить(ОбходРезультата);
					Если Таблицы.Свойство(ТекстЗапроса.Представление) Тогда
						ОбъединитьТаблицыРезультатовЗапроса(ТаблицаЗапроса, Таблицы[ИмяТаблицы]);
					Иначе
						Таблицы.Вставить(ИмяТаблицы, ТаблицаЗапроса);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблицы;
	
КонецФункции

Функция ВыполнитьПакетЗапросовПроведения(Запрос, ТекстыЗапроса)
	
	Результаты = Неопределено;
	
	МассивТекстовЗапросов 	 = Новый Массив;
	
	// Формирование текст запроса.
	Для Каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		
		Если ЗначениеЗаполнено(ТекстЗапроса.Представление) Тогда
			МассивТекстовЗапросов.Добавить("// " + ТекстЗапроса.Представление);
		КонецЕсли; 
		
		МассивТекстовЗапросов.Добавить(ТекстЗапроса.Значение + ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		
	КонецЦикла;
	
	Если МассивТекстовЗапросов.Количество() > 0 Тогда
		
		// Выполнение запроса.
		Запрос.Текст = СтрСоединить(МассивТекстовЗапросов, Символы.ПС);
		Результаты = Запрос.ВыполнитьПакет();
		
	КонецЕсли;
	
	Возврат Результаты;
	
КонецФункции

// Выполняет добавление строк из таблицы источника в таблицу приемник с предварительной проверкой:
// - типов колонок
// - состава колонок
// При необходимости выполняет корректировку таблицы-приемника.
//
Процедура ОбъединитьТаблицыРезультатовЗапроса(ТаблицаИсточник, ТаблицаПриемник)
	
	КолонкиДляОбъединенияТипов = Новый Структура();
	КолонкиДляДобавления = Новый Структура();
	Для каждого КолонкаИсточника Из ТаблицаИсточник.Колонки Цикл
		КолонкаПриемника = ТаблицаПриемник.Колонки.Найти(КолонкаИсточника.Имя);
		Если КолонкаПриемника <> Неопределено Тогда
			
			КолонкаИсточникаТипы = КолонкаИсточника.ТипЗначения.Типы();
			ОтсутствующиеТипы = Новый Массив;
			
			// Проверим наличие типов входящих в описание источника в приемнике.
			// Если отсутствуют - объединим описания типов, пересоздадим колонки таблицы.
			Для каждого ТипКолонкиИсточника Из КолонкаИсточникаТипы Цикл
				Если НЕ КолонкаПриемника.ТипЗначения.СодержитТип(ТипКолонкиИсточника) Тогда
					ОтсутствующиеТипы.Добавить(ТипКолонкиИсточника);
				КонецЕсли;
			КонецЦикла;
			
			// Сравним квалификаторы примитивных типов источника и приемника.
			// Если в описании типов источника квалификаторы "более общие", то возьмем их.
			ИзменитьКвалификаторыЧисла = Ложь;
			КвалификаторыЧисла = КолонкаПриемника.ТипЗначения.КвалификаторыЧисла;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Число")) И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				КвалификаторыЧислаИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыЧисла;  
				Если КвалификаторыЧислаИсточника.Разрядность > КвалификаторыЧисла.Разрядность Тогда
					Разрядность = КвалификаторыЧислаИсточника.Разрядность;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					Разрядность = КвалификаторыЧисла.Разрядность;
				КонецЕсли;
				Если КвалификаторыЧислаИсточника.РазрядностьДробнойЧасти > КвалификаторыЧисла.РазрядностьДробнойЧасти Тогда
					РазрядностьДробнойЧасти = КвалификаторыЧислаИсточника.РазрядностьДробнойЧасти;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					РазрядностьДробнойЧасти = КвалификаторыЧисла.РазрядностьДробнойЧасти;
				КонецЕсли;
				Если КвалификаторыЧислаИсточника.ДопустимыйЗнак <> КвалификаторыЧисла.ДопустимыйЗнак Тогда
					Знак = ДопустимыйЗнак.Любой;
					ИзменитьКвалификаторыЧисла = Истина;
				Иначе
					Знак = КвалификаторыЧисла.ДопустимыйЗнак;
				КонецЕсли;
				Если ИзменитьКвалификаторыЧисла Тогда
					КвалификаторыЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, Знак);
				КонецЕсли;
			КонецЕсли;
			
			ИзменитьКвалификаторыСтроки = Ложь;
			КвалификаторыСтроки = КолонкаПриемника.ТипЗначения.КвалификаторыСтроки;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Строка")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				КвалификаторыСтрокиИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыСтроки;
				Если КвалификаторыСтроки.Длина <> 0 И КвалификаторыСтрокиИсточника.Длина > КвалификаторыСтроки.Длина Тогда
					ИзменитьКвалификаторыСтроки = Истина;
					КвалификаторыСтроки = Новый КвалификаторыСтроки(КвалификаторыСтрокиИсточника.Длина);
				КонецЕсли; 
			КонецЕсли;
			
			ИзменитьКвалификаторыДаты = Ложь;
			КвалификаторыДаты = КолонкаПриемника.ТипЗначения.КвалификаторыДаты;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("Дата")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				КвалификаторыДатыИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыДаты;
				Если КвалификаторыДатыИсточника.ЧастиДаты <> КвалификаторыДаты.ЧастиДаты Тогда
					ИзменитьКвалификаторыДаты = Истина;
					КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
				КонецЕсли; 
			КонецЕсли;
			
			ИзменитьКвалификаторыДвоичныхДанных = Ложь;
			КвалификаторыДвоичныхДанных = КолонкаПриемника.ТипЗначения.КвалификаторыДвоичныхДанных;
			Если КолонкаИсточника.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) 
				 И КолонкаПриемника.ТипЗначения.СодержитТип(Тип("ДвоичныеДанные")) Тогда
				КвалификаторыДвоичныхДанныхИсточника = КолонкаИсточника.ТипЗначения.КвалификаторыДвоичныхДанных;
				Если КвалификаторыДвоичныхДанных.Длина <> 0 И КвалификаторыДвоичныхДанныхИсточника.Длина > КвалификаторыДвоичныхДанных.Длина Тогда
					ИзменитьКвалификаторыДвоичныхДанных = Истина;
					КвалификаторыДвоичныхДанных = Новый КвалификаторыДвоичныхДанных(КвалификаторыДвоичныхДанныхИсточника.Длина);
				КонецЕсли; 
			КонецЕсли;
			
			Если ОтсутствующиеТипы.Количество() > 0
				Или ИзменитьКвалификаторыЧисла 
				Или ИзменитьКвалификаторыСтроки 
				Или ИзменитьКвалификаторыДаты
				Или ИзменитьКвалификаторыДвоичныхДанных Тогда
				ОписаниеТиповОбъединение = Новый ОписаниеТипов(КолонкаПриемника.ТипЗначения, ОтсутствующиеТипы, , 
				                                               КвалификаторыЧисла, КвалификаторыСтроки, КвалификаторыДаты, КвалификаторыДвоичныхДанных);
				КолонкиДляОбъединенияТипов.Вставить(КолонкаПриемника.Имя, ОписаниеТиповОбъединение);
			КонецЕсли;
		Иначе
			КолонкиДляДобавления.Вставить(КолонкаИсточника.Имя, КолонкаИсточника.ТипЗначения)
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Колонка Из КолонкиДляОбъединенияТипов Цикл
		ЗначенияВКолонке = ТаблицаПриемник.ВыгрузитьКолонку(Колонка.Ключ);
		ТаблицаПриемник.Колонки.Удалить(Колонка.Ключ);
		ТаблицаПриемник.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
		ТаблицаПриемник.ЗагрузитьКолонку(ЗначенияВКолонке, Колонка.Ключ);
	КонецЦикла;
	
	Для каждого Колонка Из КолонкиДляДобавления Цикл
		ТаблицаПриемник.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаИсточник, ТаблицаПриемник);
	
КонецПроцедуры

#Область ЭтапыПроведения

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Документ, Свойства, Регистры)
	
	Если ЗначениеЗаполнено(Регистры) Тогда
		РегистрыКОбработке = Новый Массив;
		НаборыЗаписейКОбработке = Новый Массив;
		
		Движения = Документ.Метаданные().Движения;
		Для каждого Регистр Из Регистры Цикл
			Если Движения.Содержит(Регистр) Тогда
				РегистрыКОбработке.Добавить(Регистр);
				НаборыЗаписейКОбработке.Добавить(Документ.Движения[Регистр.Имя]);
			КонецЕсли;
		КонецЦикла;
	Иначе
		РегистрыКОбработке = Документ.Метаданные().Движения;
		НаборыЗаписейКОбработке = Документ.Движения;
	КонецЕсли;
	
	Для Каждого НаборЗаписей Из НаборыЗаписейКОбработке Цикл
		
		// Очистим наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
		Если ЗначениеЗаполнено(НаборЗаписей) И Не НаборЗаписей.Записывать Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
		
		// Пробросим свойства документа
		НаборЗаписей.ДополнительныеСвойства.Вставить("СвойстваДокумента", Свойства);
		
	КонецЦикла;
	
	// Взведем флаг записи у наборов, по которым документ имеет движения
	Если Не Свойства.ЭтоНовый Тогда
		
		МассивИменРегистров = ПолучитьИспользуемыеРегистры(Документ.Ссылка, РегистрыКОбработке);
		
		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Документ.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьИспользуемыеРегистры(Регистратор, СписокРегистров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;
	СчетчикТаблиц = 0;
	ОсталосьРегистров = СписокРегистров.Количество();
	
	ТекстыЗапроса = Новый Массив;
	ШаблонЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	""%1"" КАК ИмяРегистра
		|ИЗ
		|	%2
		|ГДЕ
		|	Регистратор = &Регистратор";
	
	Для каждого Регистр Из СписокРегистров Цикл
		
		ТекстыЗапроса.Добавить(СтрШаблон(ШаблонЗапроса, Регистр.Имя, Регистр.ПолноеИмя()));
		
		СчетчикТаблиц = СчетчикТаблиц + 1;
		ОсталосьРегистров = ОсталосьРегистров - 1;
		
		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или ОсталосьРегистров = 0 И СчетчикТаблиц <> 0 Тогда
			
			Запрос.Текст  = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
			СчетчикТаблиц = 0;
			ТекстыЗапроса.Очистить();
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра"));
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицыДляДвижений(Документ, МенеджерДокумента, ДвижимыеРегистры);
	
	Если ЗначениеЗаполнено(ДвижимыеРегистры) Тогда
		ТаблицыДляДвижений = МенеджерДокумента.ДанныеДокументаДляПроведения(Документ.Ссылка, ДвижимыеРегистры,
			Документ.ДополнительныеСвойства);
		
		Если Документ.ДополнительныеСвойства.ПроведениеДокументов.Свойство("ДополнительныеТаблицыДанныхДокумента") Тогда
			Для Каждого Таблица Из Документ.ДополнительныеСвойства.ПроведениеДокументов.ДополнительныеТаблицыДанныхДокумента Цикл
				Если ТаблицыДляДвижений.Свойство(Таблица.Ключ) Тогда
					ВызватьИсключение СтрШаблон(НСтр("ru = 'Пересечение имен таблиц данных документа: ""%1"".';
													|en = 'Intersection of the document data table names: ""%1"".'"), Таблица.Ключ);
				Иначе
					ТаблицыДляДвижений.Вставить(Таблица.Ключ, Таблица.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Возврат ТаблицыДляДвижений;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ОтразитьДвиженияПодчиненныхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ)
	
	Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Проведение И ЗначениеЗаполнено(ТаблицыДляДвижений) Тогда
		Для каждого Механизм Из Механизмы Цикл
			Если ЗначениеЗаполнено(Механизм.Значение.ПодчиненныеРегистры) Тогда
				Механизм.Значение.МодульМеханизма.ОтразитьДвижения(ТаблицыДляДвижений, Документ.Движения, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДопСвойстваКонтрольныхРегистров(Механизмы, Документ, МенеджерВременныхТаблиц)
	
	Для каждого Механизм Из Механизмы Цикл
		Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыЗаданий Цикл
			ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
			Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
				УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, Ложь);
			КонецЕсли;
		КонецЦикла;
		Для каждого Регистр Из Механизм.Значение.КонтрольныеРегистрыИзменений Цикл
			ДвиженияРегистра = Документ.Движения.Найти(Регистр.Имя);
			Если ДвиженияРегистра <> Неопределено И ДвиженияРегистра.Записывать Тогда
				УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДопСвойстваДляКонтроля(ДвиженияРегистра, Документ, МенеджерВременныхТаблиц, РассчитыватьИзменения)
	
	ДопСвойстваРегистра = ДвиженияРегистра.ДополнительныеСвойства;
	ДопСвойстваРегистра.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	ДопСвойстваРегистра.Вставить("ТаблицыКонтроля",         Документ.ДополнительныеСвойства.ПроведениеДокументов.ТаблицыКонтроля);
	ДопСвойстваРегистра.Вставить("ДатаРегистратора",        Документ.Дата);
	ДопСвойстваРегистра.Вставить("РассчитыватьИзменения",   РассчитыватьИзменения);
	
КонецПроцедуры

Процедура ОбработатьДокументПередЗаписьюДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Для каждого Механизм Из Механизмы Цикл
		Если Механизм.Значение.Производный Тогда
			Механизм.Значение.МодульМеханизма.ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДвиженияНезависимыхРегистров(Механизмы, Документ, ТаблицыДляДвижений, Отказ)
	
	Если ЗначениеЗаполнено(ТаблицыДляДвижений) Тогда
		Для каждого Механизм Из Механизмы Цикл
			Если ЗначениеЗаполнено(Механизм.Значение.НезависимыеРегистры) Тогда
				Механизм.Значение.МодульМеханизма.ЗаписатьДанные(ТаблицыДляДвижений, Документ.Ссылка, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьДокументПослеЗаписиДвижений(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ);
	
	Для каждого Механизм Из Механизмы Цикл
		Если Механизм.Значение.Производный Тогда
			Механизм.Значение.МодульМеханизма.ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольРезультатовПроведения(Механизмы, Документ, МенеджерВременныхТаблиц, Отказ)
	
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос        = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Для каждого Механизм Из Механизмы Цикл
		
		Если Не ЗначениеЗаполнено(Механизм.Значение.КонтрольныеРегистрыИзменений) Тогда
			Продолжить;
		КонецЕсли;
		
		Механизм.Значение.МодульМеханизма.ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ);
		
	КонецЦикла;
	
	Если ТекстыЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатыКонтроля = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	Для каждого Механизм Из Механизмы Цикл
		
		Если Не ЗначениеЗаполнено(Механизм.Значение.КонтрольныеРегистрыИзменений) Тогда
			Продолжить;
		КонецЕсли;
		
		Механизм.Значение.МодульМеханизма.СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ);
		
	КонецЦикла;
	
	Если Отказ Тогда
		
		Если СвойстваДокумента(Документ).РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено %1';
									|en = 'Posting is not executed %1'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена %1';
									|en = 'Posting was not canceled %1'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, Строка(Документ)), Документ);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроведениеЧерезОперацииМеханизмов

Процедура ВыполнитьЗаменуПоПолномуСоответствию(Текст, СтрокаПоиска, СтрокаЗамены) Экспорт
	
	Если СтрокаПоиска = СтрокаЗамены Тогда
		Возврат;
	КонецЕсли; 
	
	ДлинаТекста = СтрДлина(Текст);
	ДлинаСтрокиПоиска = СтрДлина(СтрокаПоиска);
	
	ПозицияСтрокиПоиска = 1;
	НачальнаяПозицияПоиска = 1;
	
	ВыполненныеЗамены = Новый Соответствие;
	
	Пока ПозицияСтрокиПоиска <> 0 Цикл
		
		ПозицияСтрокиПоиска = СтрНайти(Текст, СтрокаПоиска, , НачальнаяПозицияПоиска);
		Если ПозицияСтрокиПоиска = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ВыполнятьЗамену = Истина;
		
		ПредыдущийСимвол = "";
		Если ПозицияСтрокиПоиска > 1 Тогда
			ПредыдущийСимвол = Сред(Текст, ПозицияСтрокиПоиска -1 , 1);
			Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
				ВыполнятьЗамену = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			СледующийСимвол = "";
			Если ПозицияСтрокиПоиска < ДлинаТекста Тогда
				СледующийСимвол = Сред(Текст, ПозицияСтрокиПоиска + ДлинаСтрокиПоиска, 1);
				Если Не СлужебныйСимвол(СледующийСимвол) Тогда
					ВыполнятьЗамену = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВыполнятьЗамену Тогда
			ПолнаяСтрокаПоиска = СтрШаблон("%1%2%3", ПредыдущийСимвол,СтрокаПоиска, СледующийСимвол);
			Если ВыполненныеЗамены[ПолнаяСтрокаПоиска] = Неопределено Тогда
				ПолнаяСтрокаЗамены = СтрШаблон("%1%2%3", ПредыдущийСимвол,СтрокаЗамены, СледующийСимвол);
				Текст = СтрЗаменить(Текст, ПолнаяСтрокаПоиска, ПолнаяСтрокаЗамены);
				ДлинаТекста = СтрДлина(Текст);
				ВыполненныеЗамены.Вставить(ПолнаяСтрокаПоиска, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		НачальнаяПозицияПоиска = ПозицияСтрокиПоиска + СтрДлина(ПолнаяСтрокаЗамены) + 1;
		
		Если НачальнаяПозицияПоиска >= ДлинаТекста Тогда
			ПозицияСтрокиПоиска = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция РазобратьТекстЗапроса(Знач ТекстЗапроса) Экспорт
	
	Результат = Новый Структура;
	
	ПозицияВЫБРАТЬ = ПозицияКлючевогоСлова("ВЫБРАТЬ", ТекстЗапроса);
	ПозицияИЗ      = ПозицияКлючевогоСлова("ИЗ", ТекстЗапроса);
	ПозицияГДЕ     = ПозицияКлючевогоСлова("ГДЕ", ТекстЗапроса);
	
	СимволовВыборки = ПозицияИЗ.НачальнаяПозиция - ПозицияВЫБРАТЬ.КонечнаяПозиция;
	ТекстВыборки = Сред(ТекстЗапроса, ПозицияВЫБРАТЬ.КонечнаяПозиция, СимволовВыборки); 
	СтруктураПолейВыборки = СтруктураПолейВыборки(ТекстВыборки);
	
	Если ПозицияГДЕ = Неопределено Тогда
		
		СимволовТаблицы = СтрДлина(ТекстЗапроса) - ПозицияИЗ.КонечнаяПозиция;
		ТекстТаблицы = СокрЛП(Прав(ТекстЗапроса, СимволовТаблицы));
		ТекстОтбор = "";
		
	Иначе
		
		СимволовТаблицы = ПозицияГДЕ.НачальнаяПозиция - ПозицияИЗ.КонечнаяПозиция;
		ТекстТаблицы = СокрЛП(Сред(ТекстЗапроса, ПозицияИЗ.КонечнаяПозиция, СимволовТаблицы));
		
		СимволовОтбор =  СтрДлина(ТекстЗапроса) - ПозицияГДЕ.КонечнаяПозиция;
		ТекстОтбор = СокрЛП(Прав(ТекстЗапроса, СимволовОтбор));
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПоляВыборки", СтруктураПолейВыборки);
	Результат.Вставить("Таблицы",     ТекстТаблицы);
	Результат.Вставить("Отбор",       ТекстОтбор);
	
	Возврат Результат;
	
КонецФункции

Функция ЗапросОтраженияСВыборомДанныхИзВременнойТаблицы(Знач ТекстШаблонОтражения, Знач ИмяТаблицыДанных)
	
	ТекстЗапросОтражения = ТекстШаблонОтражения;
	
	ЧастиСтрокиПоиска = Новый Массив;
	ЧастиСтрокиПоиска.Добавить("#");
	ЧастиСтрокиПоиска.Добавить(ИмяТаблицыДанных);
	СтрокаПоиска = СтрСоединить(ЧастиСтрокиПоиска);
	
	ТекстЗапросОтражения = СтрЗаменить(ТекстШаблонОтражения, СтрокаПоиска, ИмяТаблицыДанных);
	
	Возврат ТекстЗапросОтражения;
	
КонецФункции

Функция ЗапросОтраженияСВыборомДанныхИзДокумента(Знач ТекстШаблонОтражения, Знач ИмяТаблицыДанных, Знач ТекстЗапросаДанных)
	
	ТекстЗапросОтражения = ТекстШаблонОтражения;
	
	Если СтрНайти(ТекстЗапросОтражения, "#" + ИмяТаблицыДанных, НаправлениеПоиска.СКонца) = 0 Тогда
		// В запросе не требуется выборка из таблицы данных.
		Возврат ТекстЗапросОтражения;
	КонецЕсли;
	
	Если ТипЗнч(ТекстЗапросаДанных) = Тип("Строка") Тогда
		РезультатРазбораТекстаЗапроса = РазобратьТекстЗапроса(ТекстЗапросаДанных);
	Иначе
		РезультатРазбораТекстаЗапроса = ТекстЗапросаДанных;
	КонецЕсли;
	
	СтрокаПоиска = СтрШаблон("#%1 КАК %1", ИмяТаблицыДанных);
	СтрокаЗамены = СтрШаблон("%1 //#%2", РезультатРазбораТекстаЗапроса.Таблицы, ИмяТаблицыДанных);
	ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапросОтражения, СтрокаПоиска, СтрокаЗамены);
	
	Для каждого ПолеВыборки Из РезультатРазбораТекстаЗапроса.ПоляВыборки Цикл
		СтрокаПоиска = СтрШаблон("%1.%2", ИмяТаблицыДанных, ПолеВыборки.Ключ);
		СтрокаЗамены = ПолеВыборки.Значение;
		ВыполнитьЗаменуПоПолномуСоответствию(ТекстЗапросОтражения, СтрокаПоиска, СтрокаЗамены);
	КонецЦикла;
	
	ОбъединитьОтборы(ТекстЗапросОтражения, ИмяТаблицыДанных, РезультатРазбораТекстаЗапроса.Отбор);
	
	Возврат ТекстЗапросОтражения;
	
КонецФункции

Процедура ОбъединитьОтборы(ТекстЗапросОтражения, ИмяТаблицыДанных, ОтборЗапросаДанныхДокумента)
	
	Если Не ЗначениеЗаполнено(ОтборЗапросаДанныхДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	МассивФрагментовПакета = СтрРазделить(ТекстЗапросОтражения, ";");
	МаксимальныйИндексПакета = МассивФрагментовПакета.Количество() - 1;
	Для ИндексПакета = 0 По МаксимальныйИндексПакета Цикл 
		
		МассивФрагментовОбъединения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивФрагментовПакета[ИндексПакета], "ОБЪЕДИНИТЬ");
		
		// Возможны два сценария вставки отбора
		// 1. Объединение с имеющимся отбором. Если отбор в запросе уже есть, то его берем в "()" и вставляем доп. отбор с "И".
		// 2. Добавление отбора. Если отбора в запросе нет, то вставляем вместе с "ГДЕ".
		// Место вставки определяем по ключевому слову, предшествующем отбору.
		// Если ключевое слово не найдено, то отбор вставляем в конец запроса.
		КлючевыеСлова = Новый Массив;
		КлючевыеСлова.Добавить("СГРУППИРОВАТЬ");
		КлючевыеСлова.Добавить("УПОРЯДОЧИТЬ");
		КлючевыеСлова.Добавить("ИТОГИ");
		
		МаксимальныйИндексОбъединение = МассивФрагментовОбъединения.Количество() - 1; 
		Для ИндексОбъединения = 0 По МаксимальныйИндексОбъединение Цикл
			
			Если СтрНайти(МассивФрагментовОбъединения[ИндексОбъединения], "#" + ИмяТаблицыДанных) = 0 Тогда
				// В фрагменте объединения выборка из текущей таблицы данных не выполняется.
				Продолжить;
			КонецЕсли;
			
			ПозицияГДЕ = ПозицияКлючевогоСлова("ГДЕ", МассивФрагментовОбъединения[ИндексОбъединения]);
			
			КлючевоеСловоПередОтбором = Неопределено;
			Для каждого КлючевоеСлово Из КлючевыеСлова Цикл
				ПозицияКлючевогоСлова = ПозицияКлючевогоСлова(КлючевоеСлово, МассивФрагментовОбъединения[ИндексОбъединения]);
				Если ПозицияКлючевогоСлова <> Неопределено Тогда
					КлючевоеСловоПередОтбором = КлючевоеСлово;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПозицияГДЕ = Неопределено Тогда
				Если КлючевоеСловоПередОтбором = Неопределено Тогда
					ШаблонОтбора = 
					   "ГДЕ
					   |	%1
					   |";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
					МассивФрагментовОбъединения[ИндексОбъединения] = МассивФрагментовОбъединения[ИндексОбъединения] + "
					   |" + ТекстОтбор;
				Иначе
					ШаблонОтбора = 
					   "ГДЕ
					   |	%1
					   |%2";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента, КлючевоеСловоПередОтбором);
					ПроведениеДокументов.ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения], КлючевоеСловоПередОтбором, ТекстОтбор);
				КонецЕсли;
			Иначе
				Если КлючевоеСловоПередОтбором = Неопределено Тогда
					ШаблонОтбора = 
					   "ГДЕ
					   |	(%1) 
					   |	И (";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
					ПроведениеДокументов.ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения], "ГДЕ", ТекстОтбор);
					МассивФрагментовОбъединения[ИндексОбъединения] = МассивФрагментовОбъединения[ИндексОбъединения] + ")";
				Иначе
					ШаблонОтбора = 
					   "ГДЕ
					   |	(%1) 
					   |	И (";
					ТекстОтбор = СтрШаблон(ШаблонОтбора, ОтборЗапросаДанныхДокумента);
					ПроведениеДокументов.ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения], "ГДЕ", ТекстОтбор);
					ТекстЗаменыКлючевогоСлова = СтрШаблон(") %1", КлючевоеСловоПередОтбором);
					ПроведениеДокументов.ВыполнитьЗаменуПоПолномуСоответствию(МассивФрагментовОбъединения[ИндексОбъединения], КлючевоеСловоПередОтбором, ТекстЗаменыКлючевогоСлова);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		МассивФрагментовПакета[ИндексПакета] = СтрСоединить(МассивФрагментовОбъединения, "ОБЪЕДИНИТЬ");
		
	КонецЦикла;
	
	ТекстЗапросОтражения = СтрСоединить(МассивФрагментовПакета, ";");
	
КонецПроцедуры

Функция СтруктураПолейВыборки(ТекстВыборки)
	
	СтруктураПолейВыборки = Новый Структура;
	ПодстрокиВыборкиДляАнализа = СтрРазделить(ТекстВыборки, ",", Ложь);
	
	// Преобразуем массив подстрок выборки разделенных "," в массив выражений выборки.
	ПодстрокиВыборки = Новый Массив;
	ТекущийМассивПодстрок = Новый Массив;
	Для каждого Подстрока Из ПодстрокиВыборкиДляАнализа Цикл
		
		ТекущийМассивПодстрок.Добавить(Подстрока);
		ТекущаяПодстрока = СтрСоединить(ТекущийМассивПодстрок, ",");
		
		ЧислоВхожденийОткрытиеСкобки = СтрЧислоВхождений(ТекущаяПодстрока, "(");
		ЧислоВхожденийЗакрытиеСкобки = СтрЧислоВхождений(ТекущаяПодстрока, ")");
		ЧислоВхожденийДвойныхКавычек = СтрЧислоВхождений(ТекущаяПодстрока, """");
		
		Если ЧислоВхожденийОткрытиеСкобки = ЧислоВхожденийЗакрытиеСкобки И ЧислоВхожденийДвойныхКавычек%2 = 0 Тогда
			ПодстрокиВыборки.Добавить(ТекущаяПодстрока);
			ТекущийМассивПодстрок.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформируем структуру полей выборки:
	// - Ключ - Псевдоним
	// - Значение - Выражение
	Для каждого Подстрока Из ПодстрокиВыборки Цикл
		ПозицияКАК = ПозицияКлючевогоСлова("КАК", Подстрока, , Истина);
		Если ПозицияКАК = Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Для всех полей выборки должен быть задан псевдоним';
									|en = 'All selection fields should have an alias'");
		КонецЕсли;
		Выражение = СтрШаблон("(%1)", СокрЛП(Лев(Подстрока, ПозицияКАК.НачальнаяПозиция -1)));
		Псевдоним = СокрЛП(Прав(Подстрока, СтрДлина(Подстрока) - ПозицияКАК.КонечнаяПозиция));
		СтруктураПолейВыборки.Вставить(Псевдоним, Выражение);
	КонецЦикла;
	
	Возврат СтруктураПолейВыборки;
	
КонецФункции

Функция ПозицияКлючевогоСлова(КлючевоеСлово, Знач ТекстЗапроса, Знач НачальнаяПозицияПоиска = 1, ПоискСКонца = Ложь)
	
	Результат = Неопределено;
	
	ДлинаСлова = СтрДлина(КлючевоеСлово);
	ДлинаЗапроса = СтрДлина(ТекстЗапроса);
	
	Если ПоискСКонца Тогда
		НаправлениеПоискаСлова = НаправлениеПоиска.СКонца;
		НачальнаяПозицияПоиска = ДлинаЗапроса - НачальнаяПозицияПоиска + 1;
	Иначе
		НаправлениеПоискаСлова = НаправлениеПоиска.СНачала;
	КонецЕсли;
	
	Если НачальнаяПозицияПоиска > ДлинаЗапроса Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пока НачальнаяПозицияПоиска > 0 Цикл
		
		НачальнаяПозицияСлова = СтрНайти(ТекстЗапроса, КлючевоеСлово, НаправлениеПоискаСлова, НачальнаяПозицияПоиска);
		
		Если НачальнаяПозицияСлова = 0 Тогда
			// Ключевое слово не найдено
			Прервать;
		КонецЕсли;
		
		ЭтоКлючевоеСлово = Истина;
		
		ПозицияСледующегоСимвола = НачальнаяПозицияСлова + ДлинаСлова + 1;
		Если ПозицияСледующегоСимвола < ДлинаЗапроса Тогда
			СледующийСимвол = Сред(ТекстЗапроса, НачальнаяПозицияСлова + ДлинаСлова, 1);
			Если Не СлужебныйСимвол(СледующийСимвол) Тогда
				ЭтоКлючевоеСлово = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКлючевоеСлово Тогда
			ПозицияПредыдущегоСимвола = НачальнаяПозицияСлова - 1;
			Если ПозицияПредыдущегоСимвола > 0 Тогда
				ПредыдущийСимвол = Сред(ТекстЗапроса, ПозицияПредыдущегоСимвола, 1);
				Если Не СлужебныйСимвол(ПредыдущийСимвол) Тогда
					ЭтоКлючевоеСлово = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКлючевоеСлово Тогда
			// Слово найдено
			Результат = Новый Структура(
							"НачальнаяПозиция, КонечнаяПозиция", 
							НачальнаяПозицияСлова, НачальнаяПозицияСлова + ДлинаСлова);
			Прервать;
		КонецЕсли;
		
		НачальнаяПозицияПоиска = НачальнаяПозицияСлова + ДлинаСлова + 1;
		Если НачальнаяПозицияПоиска > ДлинаЗапроса Тогда
			НачальнаяПозицияПоиска = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СлужебныйСимвол(Символ)
	
	Если Символ = " "
		ИЛИ Символ = "
					|"
		ИЛИ Символ = "."
		ИЛИ Символ = "	"
		ИЛИ Символ = ","
		ИЛИ Символ = ")"
		ИЛИ Символ = "("
		ИЛИ Символ = "-"
		ИЛИ Символ = "+"
		ИЛИ Символ = "/"
		ИЛИ Символ = "*"
		ИЛИ Символ = "" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти
