
Функция ПолучитьТаблицуПодчиненныхОР(ОбъектРемонта) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.Текст = "ВЫБРАТЬ
	|	впОбъектыРемонта.Ссылка КАК ПодчиненныйОбъект,
	|	&ОбъектРемонта КАК Объект
	|ИЗ
	|	Справочник.впОбъектыРемонта КАК впОбъектыРемонта
	|ГДЕ
	|	впОбъектыРемонта.Ссылка В ИЕРАРХИИ(&ОбъектРемонта)
	|	И НЕ впОбъектыРемонта.ПометкаУдаления и НЕ впОбъектыРемонта.Ссылка = &ОбъектРемонта";
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЗаполнитьПодразделение(ОбъектРемонта) Экспорт
	возврат ОбъектРемонта.ПодразделениеИсполнитель;	
КонецФункции

Функция ПолучитьТаблицуРемонтов(РемонтыОборудования, ДокСсылка, ЭтоАкт = Истина) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
				   |	РемонтыОборудования.ID КАК ID, " + ?(ЭтоАкт, "
				   |	РемонтыОборудования.Выполнено КАК Выполнено, ", "
				   |	Ложь КАК Выполнено, ") + "
				   |	РемонтыОборудования.НомерСтроки КАК НомерСтроки,
				   //"ВЫБРАТЬ
				   //|	РемонтыОборудования.ID КАК ID,
				   //|	РемонтыОборудования.Выполнено КАК Выполнено,
				   //|	РемонтыОборудования.НомерСтроки КАК НомерСтроки,
				   |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
				   |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания
				   |ПОМЕСТИТЬ РемонтыОборудования
				   |ИЗ
				   |	&РемонтыОборудования КАК РемонтыОборудования
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ РАЗЛИЧНЫЕ
				   |	МАКСИМУМ(ЕСТЬNULL(впАктыПоРемонтам.Регистратор, ЗНАЧЕНИЕ(Документ.впАктОВыполненииЭтапаРабот.ПустаяСсылка))) КАК Акт,
				   |	МАКСИМУМ(ЕСТЬNULL(впЗаявкиПоРемонтам.Регистратор, ЗНАЧЕНИЕ(Документ.впЗаявкаНаРемонт.ПустаяСсылка))) КАК Заявка,
				   |	впПланГрафикППР.УникальныйИдентификатор КАК УникальныйИдентификатор,
				   |	впПланГрафикППР.ДатаНачалаПлан КАК ДатаНачалаПлан,
				   |	впПланГрафикППР.ДатаОкончанияПлан КАК ДатаОкончанияПлан,
				   |	впПланГрафикППР.ДатаНачалаФакт КАК ДатаНачалаФакт,
				   |	впПланГрафикППР.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
				   |	впПланГрафикППР.ЕстьАкт КАК ЕстьАкт,
				   |	впПланГрафикППР.ЕстьЗаявка КАК ЕстьЗаявка,
				   |	впПланГрафикППР.ОбъектРемонта КАК ОбъектРемонта,
				   |	впПланГрафикППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
				   |	впПланГрафикППР.ИсполнительРемонта КАК ИсполнительРемонта,
				   |	впПланГрафикППР.СпособВыполнения КАК СпособВыполнения,
				   |	впПланГрафикППР.ПланГрафик КАК ПланГрафик,
				   |	впПланГрафикППР.Удален КАК Удален,
				   |	впПланГрафикППР.Завершен КАК Завершен,
				   |	впПланГрафикППР.РемонтноеМероприятие КАК РемонтноеМероприятие,
				   |	СУММА(ЕСТЬNULL(впАктыПоРемонтам.ПроцентВыполнения, 0)) КАК ПроцентВыполнения
				   |ПОМЕСТИТЬ впПланГрафикППР
				   |ИЗ
				   |	РегистрСведений.впПланГрафикППР КАК впПланГрафикППР
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыОборудования КАК РемонтыОборудования
				   |		ПО впПланГрафикППР.УникальныйИдентификатор = РемонтыОборудования.ID
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
				   |		ПО впПланГрафикППР.УникальныйИдентификатор = впАктыПоРемонтам.IDРемонта
				   |			И (НЕ впАктыПоРемонтам.Регистратор = &ДокСсылка)
				   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впЗаявкиПоРемонтам КАК впЗаявкиПоРемонтам
				   |		ПО впПланГрафикППР.УникальныйИдентификатор = впЗаявкиПоРемонтам.IDРемонта
				   |			И (НЕ впЗаявкиПоРемонтам.Регистратор = &ДокСсылка)
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	впПланГрафикППР.УникальныйИдентификатор,
				   |	впПланГрафикППР.ДатаНачалаПлан,
				   |	впПланГрафикППР.ДатаОкончанияПлан,
				   |	впПланГрафикППР.ДатаНачалаФакт,
				   |	впПланГрафикППР.ДатаОкончанияФакт,
				   |	впПланГрафикППР.ЕстьАкт,
				   |	впПланГрафикППР.ЕстьЗаявка,
				   |	впПланГрафикППР.ОбъектРемонта,
				   |	впПланГрафикППР.ВидРемонтныхРабот,
				   |	впПланГрафикППР.ИсполнительРемонта,
				   |	впПланГрафикППР.СпособВыполнения,
				   |	впПланГрафикППР.ПланГрафик,
				   |	впПланГрафикППР.Удален,
				   |	впПланГрафикППР.Завершен,
				   |	впПланГрафикППР.РемонтноеМероприятие
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	впПланГрафикППР.УникальныйИдентификатор КАК УникальныйИдентификатор,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ЛОЖЬ
				   |			ТОГДА РемонтыОборудования.ДатаНачала
				   |		ИНАЧЕ впПланГрафикППР.ДатаНачалаПлан
				   |	КОНЕЦ КАК ДатаНачалаПлан,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ЛОЖЬ
				   |			ТОГДА РемонтыОборудования.ДатаОкончания
				   |		ИНАЧЕ впПланГрафикППР.ДатаОкончанияПлан
				   |	КОНЕЦ КАК ДатаОкончанияПлан,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ИСТИНА
				   |			ТОГДА РемонтыОборудования.ДатаНачала
				   |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |	КОНЕЦ КАК ДатаНачалаФакт,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ИСТИНА
				   |				И РемонтыОборудования.Выполнено
				   |			ТОГДА РемонтыОборудования.ДатаОкончания
				   |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |	КОНЕЦ КАК ДатаОкончанияФакт,
				   |	впПланГрафикППР.ЕстьАкт КАК ЕстьАкт,
				   |	впПланГрафикППР.ЕстьЗаявка КАК ЕстьЗаявка,
				   |	впПланГрафикППР.ОбъектРемонта КАК ОбъектРемонта,
				   |	впПланГрафикППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
				   |	впПланГрафикППР.ИсполнительРемонта КАК ИсполнительРемонта,
				   |	впПланГрафикППР.СпособВыполнения КАК СпособВыполнения,
				   |	впПланГрафикППР.ПланГрафик КАК ПланГрафик,
				   |	впПланГрафикППР.Удален КАК Удален,
				   |	РемонтыОборудования.ДатаНачала КАК ДатаНачала,
				   |	РемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ИСТИНА
				   |			ТОГДА &ДокСсылка
				   |		ИНАЧЕ впПланГрафикППР.Акт
				   |	КОНЕЦ КАК Акт,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ЛОЖЬ
				   |			ТОГДА &ДокСсылка
				   |		ИНАЧЕ впПланГрафикППР.Заявка
				   |	КОНЕЦ КАК Заявка,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ИСТИНА
				   |			ТОГДА РемонтыОборудования.Выполнено
				   |		ИНАЧЕ впПланГрафикППР.Завершен
				   |	КОНЕЦ КАК Завершен,
				   |	впПланГрафикППР.РемонтноеМероприятие КАК РемонтноеМероприятие,
				   |	РемонтыОборудования.НомерСтроки КАК НомерСтроки,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ИСТИНА
				   |				И впПланГрафикППР.Акт <> &ДокСсылка
				   |				И впПланГрафикППР.Акт <> ЗНАЧЕНИЕ(Документ.впАктОВыполненииЭтапаРабот.ПустаяСсылка)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ПересечениеПоАктам,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ИСТИНА
				   |				И впПланГрафикППР.Акт = &ДокСсылка
				   |				И впПланГрафикППР.Завершен = РемонтыОборудования.Выполнено
				   |				И впПланГрафикППР.ДатаНачалаФакт = РемонтыОборудования.ДатаНачала
				   |				И ВЫБОР
				   |					КОГДА РемонтыОборудования.Выполнено
				   |						ТОГДА РемонтыОборудования.ДатаОкончания
				   |					ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				   |				КОНЕЦ = впПланГрафикППР.ДатаОкончанияФакт
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ПрежнийАкт,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ЛОЖЬ
				   |				И впПланГрафикППР.Заявка <> &ДокСсылка
				   |				И впПланГрафикППР.Заявка <> ЗНАЧЕНИЕ(Документ.впЗаявкаНаРемонт.ПустаяСсылка)
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ПересечениеПоЗаявкам,
				   |	ВЫБОР
				   |		КОГДА &ЭтоАкт = ЛОЖЬ
				   |				И впПланГрафикППР.Заявка = &ДокСсылка
				   |				И впПланГрафикППР.ДатаНачалаПлан = РемонтыОборудования.ДатаНачала
				   |				И впПланГрафикППР.ДатаОкончанияПлан = РемонтыОборудования.ДатаОкончания
				   |			ТОГДА ИСТИНА
				   |		ИНАЧЕ ЛОЖЬ
				   |	КОНЕЦ КАК ПрежняяЗаявка,
				   |	впПланГрафикППР.ПроцентВыполнения КАК ПроцентВыполнения
				   |ИЗ
				   |	впПланГрафикППР КАК впПланГрафикППР
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыОборудования КАК РемонтыОборудования
				   |		ПО впПланГрафикППР.УникальныйИдентификатор = РемонтыОборудования.ID
				   |
				   |УПОРЯДОЧИТЬ ПО
				   |	НомерСтроки" ;
	
	Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования);
	Запрос.УстановитьПараметр("ДокСсылка", ДокСсылка);
	Запрос.УстановитьПараметр("ЭтоАкт", ЭтоАкт);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт
	// ++ rarus selmik 05.03.2021
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатуры(Форма);
	// ++ rarus PleA 22.04.2021 [РАIT-0023282]
	УдалитьОтборПоОбъектуРемонта(Форма);
	// -- rarus PleA
	//rarus_AfoD 31.08.2021 < 
	УдалитьОтборПоКатегории(Форма);
	//rarus_AfoD 31.08.2021 > 
	
	Если Форма.ИспользоватьФильтры Тогда
		УстановитьСтраницуВариантаНавигации(Форма);
	// -- rarus selmik 05.03.2021
		
		Если Форма.ВариантНавигации = "ПоИерархии" Тогда
			
			ТекущаяСтрока = Форма.Элементы.СписокНоменклатура.ТекущаяСтрока;
			Если ТекущаяСтрока = Неопределено Или ТипЗнч(ТекущаяСтрока) = Тип("Число") Тогда
			Иначе
				Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
			КонецЕсли;
			
			УстановитьОтборПоИерархииНоменклатуры(Форма);
		ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
			
			УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		// ++ rarus PleA 22.04.2021 [РАIT-0023282]
		ИначеЕсли Форма.ВариантНавигации = "ПоОбъектамРемонта" Тогда 
			
			ТекущаяСтрока = Форма.Элементы.ИерархияОбъектовРемонта.ТекущаяСтрока;
			Если ТекущаяСтрока <> Неопределено тогда				
				рарусНоменклатураСервер.УстановитьОтборПоОбъектуРемонта(Форма, ТекущаяСтрока);
			КонецЕсли;	
			
		// -- rarus PleA
		//rarus_AfoD 31.08.2021 < 
		ИначеЕсли Форма.ВариантНавигации = "ПоКатегории" Тогда 
			
			ТекущаяСтрока = Форма.Элементы.Категории.ТекущаяСтрока;
			Если ТекущаяСтрока <> Неопределено тогда				
				рарусНоменклатураСервер.УстановитьОтборПоКатегории(Форма, ТекущаяСтрока);
			КонецЕсли;	
		//rarus_AfoD 31.08.2021 > 
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// ++ rarus selmik 05.03.2021
// Устанавливает отборпо виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма) Экспорт
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = Форма.СписокНоменклатура.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры  // -- rarus selmik 05.03.2021

//rarus_AfoD 31.08.2021 < 
Процедура УстановитьОтборКатегории(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Категория = Форма.категория;
	ЭлементыОтбора = Форма.СписокНоменклатура.КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"Категория",
		Категория,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоКатегории",
		Истина);
	
КонецПроцедуры
//rarus_AfoD 31.08.2021 > 

// ++ rarus selmik 05.03.2021
// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "ВидНоменклатуры", Форма.ВидНоменклатуры, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВидуНоменклатуры", Ложь);
	
КонецПроцедуры // -- rarus selmik 05.03.2021

//rarus_AfoD 31.08.2021 < 
Процедура УдалитьОтборПоКатегории(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Категория", Форма.Категория, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоКатегории", Ложь);
	
КонецПроцедуры // -- rarus selmik 05.03.2021
//rarus_AfoD 31.08.2021 > 

// ++ rarus selmik 05.03.2021
// Отключает установленный отбор по группе номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Родитель",,,,Ложь);
	
КонецПроцедуры // -- rarus selmik 05.03.2021

// ++ rarus PleA 22.04.2021 [РАIT-0023282]
Процедура УдалитьОтборПоОбъектуРемонта(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Номенклатура",,,,Ложь);	
	
КонецПроцедуры	
// -- rarus PleA

// ++ rarus selmik 05.03.2021
// Устанавливает страницу варианта навигации на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьСтраницуВариантаНавигации(Форма)
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = "" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = "ПоИерархии";
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
	// ++ rarus PleA 21.04.2021 [РАIT-0023282]
	ИначеЕсли Форма.ВариантНавигации = "ПоОбъектамРемонта" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияПоОбъектамРемонта;
	// -- rarus PleA
	//rarus_AfoD 31.08.2021 < 
	ИначеЕсли Форма.ВариантНавигации = "ПоКатегории" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияПоКатегории;
	//rarus_AfoD 31.08.2021 > 
	КонецЕсли;
	
	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
КонецПроцедуры // -- rarus selmik 05.03.2021

// Устанавливает отбор по группе номенклатыр в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма)
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено Тогда
		Родитель = Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Родитель = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Родитель", Родитель, 
		ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма)
	
	Форма.Элементы.ВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
	Форма.Элементы.ИерархияНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
	
	Форма.Элементы.ДеревоОтборовПредставление.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовОтбор.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовПредставлениеОтбора.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	
КонецПроцедуры

// Функция обрабатывает выбор ремонта
//
Функция ОбработкаВыбораРемонта(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтовОборудования, ТЧ_РемонтныхРабот, ТЧ_ДокументыОснования, ТекущиеЗначения, ВыходныеПараметры=Неопределено, КоличествоОпераций = Неопределено) Экспорт
	
	ВыходныеПараметры = Новый Структура;
	Возврат ОбработкаПодбораТехКарты(ДеревоРемРабот, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения);
	
КонецФункции

Функция ОбработкаПодбораТехКарты(Дерево, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтныхРабот, ТекущиеЗначения)
	
	Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
		РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
	Иначе
		Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования, для добавления тех. карты!'"));
	КонецЕсли;
	
	
	Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
		НовСтрокаРР = ?(ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID),ТЧ_РемонтныхРабот.Добавить(), ТЧ_РемонтныхРабот[0]);
	Иначе
		НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
	КонецЕсли;
	
	НовСтрокаРР.Родитель_ID            = ТекущиеЗначения.СтрокаРодитель_ID;
	НовСтрокаРР.РемонтыОборудования_ID = РемонтыОборудования_ID;	
	НовСтрокаРР.ID                     = Новый УникальныйИдентификатор;
	НовСтрокаРР.РемонтнаяРабота        = ВыбранноеЗначение;
	НовСтрокаРР.ИдентификаторТехКарты   = ВыбранноеЗначение.ИдентификаторТехКарты;
	
	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.впЗаявкаНаРемонт") или ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.впАктОВыполненииЭтапаРабот") Тогда
		НовСтрокаРР.Количество = 1;
	КонецЕсли;
	
	ДатаНачала = ТекущиеЗначения.ДатаНачалаРемонта;
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДата();
	КонецЕсли; 
	
//	Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.впЗаявкаНаРемонт")  Тогда
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("ID_Родителя"            , НовСтрокаРР.ID);
		СтруктураДанных.Вставить("РемонтыОборудования_ID" , РемонтыОборудования_ID);
		СтруктураДанных.Вставить("РемонтнаяРабота"        , ВыбранноеЗначение);
		СтруктураДанных.Вставить("ДатаРемонта"            , ДатаНачала);
		
		ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект);
		
//	КонецЕсли;
	
	Возврат Новый Структура("Дерево, ДокументОбъект", Дерево, ДокументОбъект);

КонецФункции

Процедура ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект) 
	 
	Родитель_ID            = СтруктураДанных.ID_Родителя;
	РемонтыОборудования_ID = СтруктураДанных.РемонтыОборудования_ID;
	ТехКарта               = СтруктураДанных.РемонтнаяРабота;
	ДатаНачала             = СтруктураДанных.ДатаРемонта;
	
	РезультатЗапросаПоОперациям = ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта);
	
	СписокОпераций      = РезультатЗапросаПоОперациям[1].Выгрузить();
	МатериальныеЗатраты = РезультатЗапросаПоОперациям[3].Выгрузить();
	ТрудовыеЗатраты     = РезультатЗапросаПоОперациям[4].Выгрузить();
	ИнструментыИТехника = РезультатЗапросаПоОперациям[5].Выгрузить();
	
	Для каждого СтрокаОперации Из СписокОпераций Цикл
		
		Если  ТипЗнч(СтрокаОперации.Операция) = Тип("СправочникСсылка.впИдентификаторыТехКарт") Тогда
			ТехКартаВложенная = НайтиТехКартуПоИД(СтрокаОперации.Операция);
		КонецЕсли;
		
		РемРабота = ДокументОбъект.РемонтныеРаботы.Добавить();
		РемРабота.Родитель_ID            = Родитель_ID;
		РемРабота.РемонтыОборудования_ID = РемонтыОборудования_ID;
		
		РемРабота.Количество         = СтрокаОперации.Количество * ?(СтруктураДанных.Свойство("Количество") И СтруктураДанных.Количество <> 0, СтруктураДанных.Количество, 1);
		
		МассивИмеющихсяID =  ДокументОбъект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", СтрокаОперации.ID));
		Если МассивИмеющихсяID.Количество() > 0 Тогда
			ИДРаботы = Новый УникальныйИдентификатор;
		Иначе
			ИДРаботы = СтрокаОперации.ID;
		КонецЕсли; 
		РемРабота.ID                     = ИДРаботы;
		РемРабота.РемонтнаяРабота        = ?(ТипЗнч(СтрокаОперации.Операция) = Тип("СправочникСсылка.впИдентификаторыТехКарт"), ТехКартаВложенная, СтрокаОперации.Операция);
		РемРабота.ИдентификаторТехКарты        = СтрокаОперации.Операция;
		
		Если ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.впТехнологическиеОперации") Тогда //заполняем нормативы
			
			МассивСтрок = МатериальныеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
			
			Для каждого СтрокаМатериалов Из МассивСтрок Цикл
		
				НСМатериалов = ДокументОбъект.МатериальныеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НСМатериалов,СтрокаМатериалов);
				НСМатериалов.РемонтыОборудования_ID = РемонтыОборудования_ID;
				НСМатериалов.ID                     = РемРабота.ID;
				
			КонецЦикла; 
			
				
			МассивСтрок = ТрудовыеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
			Для каждого СтрокаТрудозатрат Из МассивСтрок Цикл
				
				// в заявке нет детализации до исполнителей 
				Если ТипЗнч(ДокументОбъект.Ссылка) <> Тип("ДокументСсылка.впЗаявкаНаРемонт") Тогда
					Для Счетчик = 1 По СтрокаТрудозатрат.Количество Цикл
						НСТрудозатрат = ДокументОбъект.ТрудовыеЗатраты.Добавить();
						ЗаполнитьЗначенияСвойств(НСТрудозатрат,СтрокаТрудозатрат);
						НСТрудозатрат.РемонтыОборудования_ID = РемонтыОборудования_ID;
						НСТрудозатрат.ID = ИДРаботы;
					КонецЦикла;
				Иначе
					НСТрудозатрат = ДокументОбъект.ТрудовыеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НСТрудозатрат,СтрокаТрудозатрат);
					НСТрудозатрат.РемонтыОборудования_ID = РемонтыОборудования_ID;
					НСТрудозатрат.ID = ИДРаботы;
				КонецЕсли; 
				
			КонецЦикла;	
			
			Если ИнструментыИТехника <> Неопределено Тогда
				МассивСтрок = ИнструментыИТехника.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаИИТ Из МассивСтрок Цикл
					НоваяСтрока = ДокументОбъект.Инструменты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаИИТ);
					НоваяСтрока.РемонтыОборудования_ID = РемонтыОборудования_ID;
					НоваяСтрока.ID = ИДРаботы;
					НоваяСтрока.Количество = СтрокаИИТ.Количество;
				КонецЦикла;	
			КонецЕсли;
	ИначеЕсли ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.впТехКарты") Тогда
			
			СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
			, ИДРаботы
			, ТехКартаВложенная
			, РемонтыОборудования_ID
			, СтрокаОперации.Количество
			, ДатаНачала);
			
			ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект);
		
	КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры

Функция ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта, ДатаДокумента = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	впТехКартыСписокОпераций.ID КАК ID,
	               |	впТехКартыСписокОпераций.Операция КАК Операция,
	               |	впТехКартыСписокОпераций.Количество КАК Количество,
	               |	впТехКартыСписокОпераций.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОпераций_Данные
	               |ИЗ
	               |	Справочник.впТехКарты.СписокОпераций КАК впТехКартыСписокОпераций
	               |ГДЕ
	               |	впТехКартыСписокОпераций.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ID КАК ID,
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Количество КАК Количество
	               |ИЗ
	               |	СписокОпераций_Данные КАК СписокОпераций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ID КАК ID,
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Количество КАК Количество,
	               |	СписокОпераций.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	СписокОпераций_Данные КАК СписокОпераций
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(СписокОпераций.Операция) = ТИП(Справочник.впТехнологическиеОперации)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Операция,
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	впТехКартыМатериальныеЗатраты.ID КАК ID,
	               |	впТехКартыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	               |	впТехКартыМатериальныеЗатраты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	впТехКартыМатериальныеЗатраты.Количество КАК Количество
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.МатериальныеЗатраты КАК впТехКартыМатериальныеЗатраты
	               |		ПО СписокОпераций.ID = впТехКартыМатериальныеЗатраты.ID
	               |			И СписокОпераций.Операция = впТехКартыМатериальныеЗатраты.Операция
	               |			И СписокОпераций.Ссылка = впТехКартыМатериальныеЗатраты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	впТехКартыТрудовыеЗатраты.ID КАК ID,
	               |	впТехКартыТрудовыеЗатраты.Количество КАК Количество,
	               |	впТехКартыТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ТрудовыеЗатраты КАК впТехКартыТрудовыеЗатраты
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусСоответствиеПользователяФизическомуЛицу.СрезПоследних(&НаДату, Пользователь = &ТекущийПользователь) КАК рарусСоответствиеПользователяФизическомуЛицуСрезПоследних
	               |			ПО впТехКартыТрудовыеЗатраты.Квалификация = рарусСоответствиеПользователяФизическомуЛицуСрезПоследних.Заведование
	               |		ПО СписокОпераций.ID = впТехКартыТрудовыеЗатраты.ID
	               |			И СписокОпераций.Операция = впТехКартыТрудовыеЗатраты.Операция
	               |			И СписокОпераций.Ссылка = впТехКартыТрудовыеЗатраты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	впТехКартыИнструментыИТехника.ID КАК ID,
	               |	впТехКартыИнструментыИТехника.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	впТехКартыИнструментыИТехника.Инструмент КАК Инструмент,
	               |	впТехКартыИнструментыИТехника.Количество КАК Количество
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впТехКарты.ИнструментыИТехника КАК впТехКартыИнструментыИТехника
	               |		ПО СписокОпераций.ID = впТехКартыИнструментыИТехника.ID
	               |			И СписокОпераций.Операция = впТехКартыИнструментыИТехника.Операция
	               |			И СписокОпераций.Ссылка = впТехКартыИнструментыИТехника.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКарта);
	// ++ rarus selmik 02.02.2021
	Запрос.УстановитьПараметр("ТекущийПользователь",Пользователи.ТекущийПользователь());
	Если ДатаДокумента = Неопределено Тогда
		Запрос.УстановитьПараметр("НаДату", Дата(1,1,1));
	Иначе
		Запрос.УстановитьПараметр("НаДату", ДатаДокумента);
	КонецЕсли;
	// -- rarus selmik 02.02.2021
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Процедура впПроверкаЗаполненияРемонтныхРаботПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.РемонтныеРаботы.Количество() = 0 и НЕ Источник.ПометкаУдаления Тогда
		Если ТипЗнч(Источник) = Тип("ДокументОбъект.впВнешнееОснованиеДляРабот") Тогда
			ТекстСообщения = "Не введена ни одна рекомендуемая работа!";
		Иначе
			ТекстСообщения = "Не введена ни одна тех.карта!";
		КонецЕсли;
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЗаявкуАктПоРемонту(ID, СтрокаРегистр = "впЗаявкиПоРемонтам") Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	впРегистр.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений." + СтрокаРегистр + " КАК впРегистр
	|ГДЕ
	|	впРегистр.IDРемонта = &IDРемонта";
	
	Запрос.УстановитьПараметр("IDРемонта",ID);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	Иначе
		Возврат неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиТехкартуОР(ВидРемонта, ОбъектРемонта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	РегистрСведенийвпНормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
	               |	впИдентификаторыТехКарт.Ссылка КАК ИдентификаторТК
	               |ИЗ
	               |	РегистрСведений.впНормативныеРемонтыОборудования КАК РегистрСведенийвпНормативныеРемонтыОборудования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.впИдентификаторыТехКарт КАК впИдентификаторыТехКарт
	               |		ПО РегистрСведенийвпНормативныеРемонтыОборудования.НормативныйРемонт.ИдентификаторТехКарты = впИдентификаторыТехКарт.Ссылка
	               |ГДЕ
	               |	РегистрСведенийвпНормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
	               |	И РегистрСведенийвпНормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	Запрос.УстановитьПараметр("ВидРемонта",ВидРемонта);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ТехКарта, ИдентификаторТК", Выборка.НормативныйРемонт, Выборка.ИдентификаторТК);
	Иначе
		Возврат неопределено;
	КонецЕсли;
КонецФункции

Функция НайтиТехкартуПоИД(ИдентификаторТехКарты)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	впТехКарты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.впТехКарты КАК впТехКарты
	               |ГДЕ
	               |	впТехКарты.ИдентификаторТехКарты = &ИдентификаторТехКарты";
	
	Запрос.УстановитьПараметр("ИдентификаторТехКарты",ИдентификаторТехКарты);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьНормативыЗапчастей(ВидРемонта, ОбъектРемонта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	впНормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	               |	впНормыЗапчастейНаОбъектыРемонта.Количество КАК Количество
	               |ИЗ
	               |	РегистрСведений.впНормыЗапчастейНаОбъектыРемонта КАК впНормыЗапчастейНаОбъектыРемонта
	               |ГДЕ
	               |	впНормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	               |	И впНормыЗапчастейНаОбъектыРемонта.ВидРемонта = &ВидРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	Запрос.УстановитьПараметр("ВидРемонта",ВидРемонта);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьПроцентыВыполнения(Акт, СписокIDРемонта, ID_РР = неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	впАктыПоРемонтам.IDРемонта КАК IDРемонта,
	|	впАктыПоРемонтам.IDРемонтнойРаботы КАК IDРемонтнойРаботы,
	|	СУММА(впАктыПоРемонтам.ПроцентВыполнения) КАК ПроцентВыполнения
	|ИЗ
	|	РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
	|ГДЕ
	|	впАктыПоРемонтам.Регистратор <> &Акт
	|	И впАктыПоРемонтам.IDРемонта В(&IDРемонта) %УсловиеПоРР%
	|
	|СГРУППИРОВАТЬ ПО
	|	впАктыПоРемонтам.IDРемонта,
	|	впАктыПоРемонтам.IDРемонтнойРаботы";
	
	Запрос.УстановитьПараметр("Акт",Акт);
	Запрос.УстановитьПараметр("IDРемонта",СписокIDРемонта);
	Запрос.УстановитьПараметр("ID_РР",ID_РР);
	
	Если ID_РР = неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоРР%", "");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеПоРР%", "и впАктыПоРемонтам.IDРемонтнойРаботы = &ID_РР");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ЗапретИзмененияПроведенныхПриНаличииСозданныхНаОснованииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка = Истина Или Источник.ЭтоНовый() Или (Не Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Возврат;
	КонецЕсли; 
	
	//ПАН+ Если документ повторно отправляется на берег через схему согласования по аналогам, то не проверяем
	Если ПолучитьФункциональнуюОпцию("рарусИспользуетсяСхемаСогласованияПоАналогам") Тогда
		Если Источник.ДополнительныеСвойства.Свойство("ОбновитьЖурналИзмененийПоАналогам") Тогда
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	//ПАН-
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СвязанныеДокументы = КритерииОтбора.СвязанныеДокументы.Найти(Источник.Ссылка);
		
		ЕстьСвязанныеПроведенные = Ложь;
		ЕстьОстановочныйПроведенный = Ложь;
		Для Каждого СвязанныйДокумент Из СвязанныеДокументы Цикл
					
			Если СвязанныйДокумент.Проведен Тогда
				ЕстьСвязанныеПроведенные = Истина;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьСвязанныеПроведенные И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Невозможно проведение документа, есть документы, введенные на основании данного!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		ИначеЕсли ЕстьСвязанныеПроведенные И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда			
			ТекстСообщения = НСтр("ru = 'Нельзя отменять проведение документа, имеющего введенные на основании документы!'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

