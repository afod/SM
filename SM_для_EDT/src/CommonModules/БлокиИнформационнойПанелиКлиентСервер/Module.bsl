#Область ЗаказыНаВнутреннееПотребление

Функция ИмяБлокаЗаказыНаВнутреннееПотребление() Экспорт
	
	Возврат "ЗаказыНаВнутреннееПотребление";
	
КонецФункции

Функция ТекстЗаголовкаЗаказыНаВнутреннееПотребление() Экспорт
	
	Возврат НСтр("ru = 'Заказы на внутр. потребление'");
	
КонецФункции

Функция КоличествоВидовДокументовЗНВП() Экспорт
	
	Возврат 4;
	
КонецФункции

Функция СвойствоВидДокументаЗаказНаВнутреннееПотребление(Индекс) Экспорт
	
	Возврат СтрШаблон("ЗаказыНаВнутреннееПотребление_ВидДокумента%1", Индекс);
	
КонецФункции

Процедура УправлениеБлокомЗаказыНаВнутреннееПотребление(Форма, СтрокаЗНВП) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ЗаказыНаВнутреннееПотребление.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаказыНаВнутреннееПотребление_ГиперссылкаОбновить.Видимость = НЕ СтрокаЗНВП.ФоновоеЗаданиеЗапущено;
	Элементы.ЗаказыНаВнутреннееПотребление_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаЗНВП.ФоновоеЗаданиеЗапущено;
	
	ИндексИтогов = Форма.ЗаказыНаВнутреннееПотребление_ИндексИтога;
	
	БезРамки = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки);
	
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВидовДокументовЗНВП();
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ЗаказыНаВнутреннееПотребление_ПредупрежденияПриЗагрузке);
	Элементы.ЗаказыНаВнутреннееПотребление_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
	Элементы.ЗаказыНаВнутреннееПотребление_ВидДокумента0.Видимость = НЕ ЕстьПредупрежденияПриЗагрузке;
	// Если выводится предупреждение при загрузке, то нулевая строка видов документов
	// прячется и вывод списка видов документов начинается со строки с индексом 1.
	ИндексНачалаВыводаВидовДокументов = ?(ЕстьПредупрежденияПриЗагрузке, 1, 0);
	
	Если ИндексИтогов = ИндексНачалаВыводаВидовДокументов Тогда
		
		ЧертаСверху = Новый Рамка(ТипРамкиЭлементаУправления.ЧертаСверху);
		
		ЭлементФормы = Элементы[СтрШаблон("ЗаказыНаВнутреннееПотребление_ВидДокумента%1", ИндексНачалаВыводаВидовДокументов)];
		ЭлементФормы.Рамка = ЧертаСверху;// Черта над итоговой строкой
		Для Индекс = 1 По ВГраница Цикл
			ЭлементФормы = Элементы[СтрШаблон("ЗаказыНаВнутреннееПотребление_ВидДокумента%1", Индекс)];
			ЭлементФормы.Рамка = БезРамки;
		КонецЦикла;
		
	Иначе
		
		// Подчеркиваем элемент, расположенный над итоговой строкой
		
		Подчеркивание = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание);
		
		ЭлементСверху = Элементы.ЗаказыНаВнутреннееПотребление_ПредупрежденияПриЗагрузке;
		Для Индекс = ИндексНачалаВыводаВидовДокументов По ВГраница Цикл
			ЭлементСверху.Рамка = ?(Индекс = ИндексИтогов, Подчеркивание, БезРамки);
			ЭлементСверху = Элементы[СтрШаблон("ЗаказыНаВнутреннееПотребление_ВидДокумента%1", Индекс)];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
#Если Сервер Тогда
Функция СсылкаНаВиджетЗаказНаВнутреннееПотребление() Экспорт
	
	Возврат Справочники.рарусВиджеты.НайтиПоНаименованию("Заказы на внутреннее потребление");
	
КонецФункции
#КонецЕсли

#КонецОбласти
// -- rarus yukuzi 23.08.2021

#Область КурсыВалют
// ++ rarus yukuzi 23.08.2021   //

//Функция ИмяБлокаКурсыВалют() Экспорт
//	
//	Возврат "КурсыВалют";
//	
//КонецФункции

//Функция ТекстЗаголовкаКурсыВалют(ДатаКурсов = Неопределено) Экспорт
//	
//	Если ДатаКурсов <> Неопределено Тогда
//		ЗаголовокБлока = СтрШаблон("%1 на %2", НСтр("ru = 'Курсы валют'"),
//			Формат(ДатаКурсов, "Л=ru_RU; ДФ='d MMMM'"));
//			
//	Иначе
//		ЗаголовокБлока = НСтр("ru = 'Курсы валют'");
//			
//	КонецЕсли;
//	
//	Возврат ЗаголовокБлока;
//	
//КонецФункции

//Функция КоличествоКурсовВалют() Экспорт
//	
//	Возврат 4;
//	
//КонецФункции

//Функция СвойствоВалюта(Индекс) Экспорт
//	
//	Возврат СтрШаблон("КурсыВалют_Валюта%1", Индекс);
//	
//КонецФункции

//Функция СвойствоВалютаСсылка(Индекс) Экспорт
//	
//	Возврат СтрШаблон("КурсыВалют_ВалютаСсылка%1", Индекс);
//	
//КонецФункции

//Функция СвойствоКурсВалюты(Индекс) Экспорт
//	
//	Возврат СтрШаблон("КурсыВалют_Курс%1", Индекс);
//	
//КонецФункции

//Функция СвойствоОтклонениеКурса(Индекс) Экспорт
//	
//	Возврат СтрШаблон("КурсыВалют_Отклонение%1", Индекс);
//	
//КонецФункции

//Процедура УправлениеБлокомКурсыВалют(Форма) Экспорт
//	
//	Элементы = Форма.Элементы;
//	
//	СтрокаКурсыВалют = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаКурсыВалют()))[0];
//	Элементы.ЗаказыНаВнутреннееПотребление_ГиперссылкаОбновить.Видимость = НЕ СтрокаКурсыВалют.ФоновоеЗаданиеЗапущено;
//	Элементы.ЗаказыНаВнутреннееПотребление_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаКурсыВалют.ФоновоеЗаданиеЗапущено;
//	
//	Элементы.КурсыВалют_Курс3.Видимость = Не Форма.КурсыВалют_ОшибкаЗагрузки;
//	Элементы.КурсыВалют_Отклонение3.Видимость = Не Форма.КурсыВалют_ОшибкаЗагрузки;
//	
//КонецПроцедуры
// -- rarus yukuzi 23.08.2021

#КонецОбласти
// ++ rarus yukuzi 23.08.2021   //
#Область ОстаткиСудовогоСклада

Функция ИмяБлокаОстаткиСудовогоСклада() Экспорт
	
	Возврат "ОстаткиСудовогоСклада";
	
	
КонецФункции

Функция ТекстЗаголовкаОстаткиСудовогоСклада() Экспорт
	
	Возврат НСтр("ru = 'Остатки судового склада'");

	
КонецФункции

Процедура УправлениеБлокомОстаткиСудовогоСклада(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ОстаткиСудовогоСклада.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОстаткиСудовогоСклада = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаОстаткиСудовогоСклада()))[0];
	Элементы.ОстаткиСудовогоСклада_ГиперссылкаОбновить.Видимость = НЕ СтрокаОстаткиСудовогоСклада.ФоновоеЗаданиеЗапущено;
	Элементы.ОстаткиСудовогоСклада_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаОстаткиСудовогоСклада.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ОстаткиСудовогоСклада_ПредупрежденияПриЗагрузке);
	Элементы.ОстаткиСудовогоСклада_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетОстаткиСудовогоСклада() Экспорт
	
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ОстаткиСудовогоСклада");
КонецФункции

#КонецОбласти
#Область ЗапланированныеМероприятияСУБ

Функция ИмяБлокаЗапланированныеМероприятияСУБ() Экспорт
	
	Возврат "ЗапланированныеМероприятияСУБ";
	
КонецФункции

Функция ТекстЗаголовкаЗапланированныеМероприятияСУБ() Экспорт
	
	Возврат НСтр("ru = 'Мероприятия СУБ'");
	
КонецФункции

Процедура УправлениеБлокомЗапланированныеМероприятияСУБ(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ЗапланированныеМероприятияСУБ.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаЗапланированныеМероприятияСУБ = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаЗапланированныеМероприятияСУБ()))[0];
	Элементы.ЗапланированныеМероприятияСУБ_ГиперссылкаОбновить.Видимость = НЕ СтрокаЗапланированныеМероприятияСУБ.ФоновоеЗаданиеЗапущено;
	Элементы.ЗапланированныеМероприятияСУБ_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаЗапланированныеМероприятияСУБ.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ЗапланированныеМероприятияСУБ_ПредупрежденияПриЗагрузке);
	Элементы.ЗапланированныеМероприятияСУБ_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры

Функция СсылкаНаВиджетЗапланированныеМероприятияСУБ() Экспорт
 Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ЗапланированныеМероприятияСУБ");
КонецФункции

#КонецОбласти

#Область ПриближениеСрокаСудовых

Функция ИмяБлокаПриближениеСрокаСудовых() Экспорт
	
	Возврат "ПриближениеСрокаСудовых";
	
КонецФункции

Функция ТекстЗаголовкаПриближениеСрокаСудовых() Экспорт
	
	Возврат НСтр("ru = 'Сроки судовых документов'");
	
КонецФункции

Процедура УправлениеБлокомПриближениеСрокаСудовых(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ПриближениеСрокаСудовых.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПриближениеСрокаСудовых = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаПриближениеСрокаСудовых()))[0];
	Элементы.ПриближениеСрокаСудовых_ГиперссылкаОбновить.Видимость = НЕ СтрокаПриближениеСрокаСудовых.ФоновоеЗаданиеЗапущено;
	Элементы.ПриближениеСрокаСудовых_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаПриближениеСрокаСудовых.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ПриближениеСрокаСудовых_ПредупрежденияПриЗагрузке);
	Элементы.ПриближениеСрокаСудовых_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры

Функция СсылкаНаВиджетПриближениеСрокаСудовых() Экспорт
 Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ПриближениеСрокаДействияСудовыхДокументовС");
КонецФункции

#КонецОбласти
#Область НеустраненныеЗамечанияСУБ

Функция ИмяБлокаНеустраненныеЗамечанияСУБ() Экспорт
	
	Возврат "НеустраненныеЗамечанияСУБ";
	
КонецФункции

Функция ТекстЗаголовкаНеустраненныеЗамечанияСУБ() Экспорт
	
	Возврат НСтр("ru = 'Неустраненные замечания СУБ'");
	
КонецФункции

Процедура УправлениеБлокомНеустраненныеЗамечанияСУБ(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.НеустраненныеЗамечанияСУБ.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНеустраненныеЗамечанияСУБ = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаНеустраненныеЗамечанияСУБ()))[0];
	Элементы.НеустраненныеЗамечанияСУБ_ГиперссылкаОбновить.Видимость = НЕ СтрокаНеустраненныеЗамечанияСУБ.ФоновоеЗаданиеЗапущено;
	Элементы.НеустраненныеЗамечанияСУБ_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаНеустраненныеЗамечанияСУБ.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.НеустраненныеЗамечанияСУБ_ПредупрежденияПриЗагрузке);
	Элементы.НеустраненныеЗамечанияСУБ_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры

Функция СсылкаНаВиджетНеустраненныеЗамечанияСУБ() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.НеустраненныеЗамечанияСУБС");
КонецФункции


#КонецОбласти

#Область ПлановыеВнеплановыеРемонты

Функция ИмяБлокаПлановыеВнеплановыеРемонты() Экспорт
	
	Возврат "ПлановыеВнеплановыеРемонты";
	
КонецФункции

Функция ТекстЗаголовкаПлановыеВнеплановыеРемонты() Экспорт
	
	Возврат НСтр("ru = 'Плановые внеплановые ремонты'");
	
КонецФункции

Процедура УправлениеБлокомПлановыеВнеплановыеРемонты(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ПлановыеВнеплановыеРемонты.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПлановыеВнеплановыеРемонты = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаПлановыеВнеплановыеРемонты()))[0];
	Элементы.ПлановыеВнеплановыеРемонты_ГиперссылкаОбновить.Видимость = НЕ СтрокаПлановыеВнеплановыеРемонты.ФоновоеЗаданиеЗапущено;
	Элементы.ПлановыеВнеплановыеРемонты_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаПлановыеВнеплановыеРемонты.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ПлановыеВнеплановыеРемонты_ПредупрежденияПриЗагрузке);
	Элементы.ПлановыеВнеплановыеРемонты_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетПлановыеВнеплановыеРемонты() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ПлановыеВнеплановыеРемонты");
КонецФункции

#КонецОбласти
#Область ПросроченныеРемонты

Функция ИмяБлокаПросроченныеРемонты() Экспорт
	
	Возврат "ПросроченныеРемонты";
	
КонецФункции

Функция ТекстЗаголовкаПросроченныеРемонты() Экспорт
	
	Возврат НСтр("ru = 'Просроченные ремонты'");
	
КонецФункции

Процедура УправлениеБлокомПросроченныеРемонты(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ПросроченныеРемонты.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПросроченныеРемонты = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаПросроченныеРемонты()))[0];
	Элементы.ПросроченныеРемонты_ГиперссылкаОбновить.Видимость = НЕ СтрокаПросроченныеРемонты.ФоновоеЗаданиеЗапущено;
	Элементы.ПросроченныеРемонты_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаПросроченныеРемонты.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ПросроченныеРемонты_ПредупрежденияПриЗагрузке);
	Элементы.ПросроченныеРемонты_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетПросроченныеРемонты() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ПросроченныеРемонты");
КонецФункции


#КонецОбласти
#Область ОткрытиеАРМ

Функция ИмяБлокаОткрытиеАРМ() Экспорт
	
	Возврат "ОткрытиеАРМ";
	
КонецФункции

Функция ТекстЗаголовкаОткрытиеАРМ() Экспорт
	
	Возврат НСтр("ru = 'Открытие АРМ ТОИР'");
	
КонецФункции

Процедура УправлениеБлокомОткрытиеАРМ(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ПросроченныеРемонты.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОткрытиеАРМ = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаОткрытиеАРМ()))[0];
	Элементы.ОткрытиеАРМ_ГиперссылкаОбновить.Видимость = НЕ СтрокаОткрытиеАРМ.ФоновоеЗаданиеЗапущено;
	Элементы.ОткрытиеАРМ_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаОткрытиеАРМ.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ОткрытиеАРМ_ПредупрежденияПриЗагрузке);
	Элементы.ОткрытиеАРМ_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетОткрытиеАРМ() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ОткрытиеАРМ");
КонецФункции
#КонецОбласти

#Область ОбменДаннымиБМ

Функция ИмяБлокаОбменДаннымиБМ() Экспорт
	
	Возврат "ОбменДаннымиБМ";
	
КонецФункции

Функция ТекстЗаголовкаОбменДаннымиБМ() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными с Берегом'");
	
КонецФункции

Процедура УправлениеБлокомОбменДаннымиБМ(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.ОбменДаннымиБМ.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОбменДаннымиБМ = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаОбменДаннымиБМ()))[0];
	Элементы.ОбменДаннымиБМ_ГиперссылкаОбновить.Видимость = НЕ СтрокаОбменДаннымиБМ.ФоновоеЗаданиеЗапущено;
	Элементы.ОбменДаннымиБМ_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаОбменДаннымиБМ.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ОбменДаннымиБМ_ПредупрежденияПриЗагрузке);
	Элементы.ОбменДаннымиБМ_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетОбменДаннымиБМ() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ОбменДаннымиБМ");
КонецФункции

#КонецОбласти
#Область АнализСУБКапитанами

Функция ИмяБлокаАнализСУБКапитанами() Экспорт
	
	Возврат "АнализСУБКапитанами";
	
КонецФункции

Функция ТекстЗаголовкаАнализСУБКапитанами() Экспорт
	
	Возврат НСтр("ru = 'Анализ СУБ капитанами'");
	
КонецФункции

Процедура УправлениеБлокомАнализСУБКапитанами(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.АнализСУБКапитанами.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаАнализСУБКапитанами = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаАнализСУБКапитанами()))[0];
	Элементы.АнализСУБКапитанами_ГиперссылкаОбновить.Видимость = НЕ СтрокаАнализСУБКапитанами.ФоновоеЗаданиеЗапущено;
	Элементы.АнализСУБКапитанами_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаАнализСУБКапитанами.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.АнализСУБКапитанами_ПредупрежденияПриЗагрузке);
	Элементы.АнализСУБКапитанами_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетАнализСУБКапитанами() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.АнализСУБКапитанами");
КонецФункции


#КонецОбласти
#Область ОтслеживаниеПоказанийНаработки

Функция ИмяБлокаОтслеживаниеПоказанийНаработки() Экспорт
	
	Возврат "ОтслеживаниеПоказанийНаработки";
	
КонецФункции

Функция ТекстЗаголовкаОтслеживаниеПоказанийНаработки() Экспорт
	
	Возврат НСтр("ru = 'Показания наработки'");
	
КонецФункции

Процедура УправлениеБлокомОтслеживаниеПоказанийНаработки(Форма, строка=неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Элементы.АнализСУБКапитанами.Родитель = Элементы.БлокиПанели Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтслеживаниеПоказанийНаработки = Форма.ТаблицаБлоков.НайтиСтроки(Новый Структура("Имя", ИмяБлокаОтслеживаниеПоказанийНаработки()))[0];
	Элементы.ОтслеживаниеПоказанийНаработки_ГиперссылкаОбновить.Видимость = НЕ СтрокаОтслеживаниеПоказанийНаработки.ФоновоеЗаданиеЗапущено;
	Элементы.ОтслеживаниеПоказанийНаработки_КартинкаФоновоеЗаданиеЗапущено.Видимость = СтрокаОтслеживаниеПоказанийНаработки.ФоновоеЗаданиеЗапущено;
	
	ЕстьПредупрежденияПриЗагрузке = ЗначениеЗаполнено(Форма.ОтслеживаниеПоказанийНаработки_ПредупрежденияПриЗагрузке);
	Элементы.ОтслеживаниеПоказанийНаработки_ПредупрежденияПриЗагрузке.Видимость = ЕстьПредупрежденияПриЗагрузке;
КонецПроцедуры
Функция СсылкаНаВиджетОтслеживаниеПоказанийНаработки() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.рарусВиджеты.ОтслеживаниеПоказанийНаработкиС");
КонецФункции


#КонецОбласти
