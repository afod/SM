#Область СлужебныеПроцедурыИФункции

Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ=Ложь, Заголовок="", Знач Статус=Неопределено) Экспорт
	
	Отказ=Истина;
	
	#Если Клиент Тогда
		Если Статус=Неопределено Тогда
			Статус=СтатусСообщения.Важное;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Заголовок) Тогда
			Сообщить(Заголовок);
			Заголовок="";
		КонецЕсли;
		
		Сообщить(ТекстСообщения, Статус);
	#КонецЕсли
	
КонецПроцедуры

// Функции получения описания типов
//---------------------------------

Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
КонецФункции

Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);
	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);
КонецФункции

// Функция проверяет условие нахождения значения между указанными значениями
//--------------------------------------------------------------------------

Функция Между(А,ПорогН,ПорогВ) Экспорт
	Возврат не (А<ПорогН или А>ПорогВ);
КонецФункции

Функция СравнитьМассивы(Массив1,Массив2) Экспорт
	
	Если Массив1.Количество()<>Массив2.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Эл из Массив1 Цикл
		Если Массив2.Найти(Эл)=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Эл из Массив2 Цикл
		Если Массив1.Найти(Эл)=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции


// Функция преобразовывает строку вида "15.02.2017" в дату
//--------------------------------------------------------

Функция ДатаИзСтроки(Параметр) Экспорт
	
	Попытка
		Возврат Дата(Параметр+" 00:00:00");
	Исключение
		Возврат Дата(1,1,1);
	КонецПопытки;
	
КонецФункции

// Пересчет времени из ЧЧ:ММ в количество секунд
//----------------------------------------------

Функция ПересчитатьВремя_ПЗ(Время) Экспорт
	
	Возврат Цел(Время)*3600 + Время*100%100*60;
	
КонецФункции

// Пересчет времени из количество секунд в ЧЧ:ММ
//----------------------------------------------

Функция ПересчитатьВремя_ЗП(Время) Экспорт
	
	Если ТипЗнч(Время)=Тип("Число") Тогда
		Возврат Цел(Время/3600) + Цел(Время%3600/60)/100;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Пересчет времени из количество секунд в ЧЧ:ММ + форматирование
//---------------------------------------------------------------

Функция ПересчитатьВремя_ЗП_Формат(Время,ВыводитьНоль=Неопределено) Экспорт
	
	Перем Врем;
	
	Врем=ПересчитатьВремя_ЗП(Время);
	
	Если ВыводитьНоль=0 Тогда
		Возврат Формат(Врем,"ЧДЦ=2; ЧРД=:; ЧН=; ЧГ=0");
	Иначе
		Возврат Формат(Врем,"ЧДЦ=2; ЧРД=:; ЧГ=0");
	КонецЕсли;
	
КонецФункции

// Разница между датами в секундах
//--------------------------------

Функция РазницаДат(НачДата,КонДата) Экспорт
	
	Если ЗначениеЗаполнено(НачДата) и ЗначениеЗаполнено(КонДата) Тогда
		Возврат Макс(0,КонДата-НачДата);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Пересчет времени из количества секунд в сутки
//----------------------------------------------

функция ПересчитатьВремя_ЗС(Время) Экспорт
	
	Если ТипЗнч(Время)=Тип("Число") Тогда
		Возврат Окр(Время/86400,3);
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Пересчет времени из количества секунд в сутки + форматирование
//---------------------------------------------------------------

функция ПересчитатьВремя_ЗС_Формат(Время,ВыводитьПредставление) Экспорт
	
	Перем Суток,Результат;
	
	Суток=ПересчитатьВремя_ЗС(Время);
	
	Результат=Формат(Суток,"ЧН=; ЧГ=0");
	
	Если Суток>0 и ВыводитьПредставление Тогда
		Результат=Результат+"  ("+ПересчитатьВремя_ЗП_Формат(Время,0)+")";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает наименьшее непустое значение
//------------------------------------------------

Функция Меньшее(Пар1,Пар2) Экспорт
	
	Если не ЗначениеЗаполнено(Пар1) Тогда
		Возврат Пар2;
	ИначеЕсли не ЗначениеЗаполнено(Пар2) Тогда
		Возврат Пар1;
	Иначе
		Возврат Мин(Пар1,Пар2);
	КонецЕсли;
	
КонецФункции

// Транслит
//---------

Функция Транслит(Знач Стр,Направление) Экспорт
	
	// Таблица транслитерации
	//-----------------------
	Структура=Новый Структура;
	Структура.Вставить("щ", "shh");
	Структура.Вставить("ш", "sh");
	Структура.Вставить("ж", "zh");
	Структура.Вставить("ё", "jo");
	Структура.Вставить("й", "jj");
	Структура.Вставить("ю", "ju");
	Структура.Вставить("я", "ja");
	Структура.Вставить("х", "kh");
	Структура.Вставить("ч", "ch");
	Структура.Вставить("э", "eh");
	Структура.Вставить("ъ", "''");
	Структура.Вставить("а", "a");
	Структура.Вставить("б", "b");
	Структура.Вставить("в", "v");
	Структура.Вставить("г", "g");
	Структура.Вставить("д", "d");
	Структура.Вставить("е", "e");
	Структура.Вставить("з", "z");
	Структура.Вставить("и", "i");
	Структура.Вставить("к", "k");
	Структура.Вставить("л", "l");
	Структура.Вставить("м", "m");
	Структура.Вставить("н", "n");
	Структура.Вставить("о", "o");
	Структура.Вставить("п", "p");
	Структура.Вставить("р", "r");
	Структура.Вставить("с", "s");
	Структура.Вставить("т", "t");
	Структура.Вставить("у", "u");
	Структура.Вставить("ф", "f");
	Структура.Вставить("ц", "c");
	Структура.Вставить("ь", "'");
	Структура.Вставить("ы", "y");
	
	// Выбор направления
	//------------------
	Если Направление Тогда	// Истина: Рус -> Лат
		ПолеС="Ключ";
		ПолеН="Значение";
	Иначе					// Ложь:   Лат -> Рус
		ПолеС="Значение";
		ПолеН="Ключ";
	КонецЕсли;
	
	// Транслитерация
	//---------------
	СтрНР=Нрег(Стр);
	
	Для Каждого Эл из Структура Цикл
		ЗначС=	Эл[ПолеС];
		ЗначН=	Эл[ПолеН];
		ДлинаС=	СтрДлина(ЗначС);
		
		Пока Истина Цикл
			Позиция=Найти(СтрНР,ЗначС);
			Если Позиция=0 Тогда
				Прервать;
			КонецЕсли;
			
			Врем=Сред(Стр,Позиция,1);
			Если Нрег(Врем)=Врем Тогда
				ЗначР=ЗначН;
			Иначе
				ЗначР=Трег(ЗначН);
			КонецЕсли;
			
			СтрНР=Лев(СтрНР,Позиция-1)+ЗначН+Сред(СтрНР,Позиция+ДлинаС);
			Стр  =Лев(Стр  ,Позиция-1)+ЗначР+Сред(Стр  ,Позиция+ДлинаС);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Стр;
	
КонецФункции

// Функция выделяет из строки подстроку, ограниченную указанными начальной и конечной подстроками
//-----------------------------------------------------------------------------------------------

Функция ВыделитьСтроку(Знач Стр,СН,СК) Экспорт
	
	Перем Врем;
	
	Если СН<>"" Тогда
		Врем=Найти(Стр,СН);
		Если Врем>0 Тогда
			Стр=Сред(Стр,Врем+СтрДлина(СН));
		КонецЕсли;
	КонецЕсли;
	
	Если СК<>"" Тогда
		Врем=Найти(Стр,СК);
		Если Врем>0 Тогда
			Стр=Лев(Стр,Врем-1);
		КонецЕсли;
	КонецЕсли;
	
	Возврат СокрЛП(Стр);
	
КонецФункции

// ++ rarus Камаев П.В. 05.08.2020 Задача № 23173
Функция ПолучитьСтруктуруМодельРДОДляОтбора(ФормаВыбора)
	
	ФормаВладелец = ФормаВыбора.ВладелецФормы;
	Пока ТипЗнч(ФормаВладелец) <> Тип("УправляемаяФорма") Цикл
		ФормаВладелец = ФормаВладелец.Родитель;
	КонецЦикла;
	
	ПолеМодельРДО	= "";
	МодельРДО		= Неопределено;
	
	Если ФормаВладелец.ИмяФормы = "Документ.vftРейс.Форма.ФормаДокумента" Тогда
		МодельРДО		= рарусОбщегоНазначенияВызовСервера.ПолучитьМодельРДО(ФормаВладелец.Объект.Судно);
		ПолеМодельРДО	= "ПЖМодельРДО";
	ИначеЕсли ФормаВладелец.ИмяФормы = "Документ.vftРДО.Форма.ФормаДокумента" 
		И (ФормаВыбора.ИмяФормы = "Справочник.vftТиповыеОперации.Форма.ФормаВыбора"
		ИЛИ ФормаВыбора.ИмяФормы = "Справочник.vftТиповыеОперации.Форма.ФормаВыбораСАналитикой"
		ИЛИ ФормаВыбора.ИмяФормы = "Справочник.vftПунктыСледования.Форма.ФормаВыбора") Тогда
		МодельРДО = рарусОбщегоНазначенияВызовСервера.ПолучитьМодельРДО(ФормаВладелец.Объект.Судно);
		ПолеМодельРДО	= "РДОМодельРДО";
	ИначеЕсли  ФормаВладелец.ИмяФормы = "Документ.vftРейс.Форма.ФормаРедактированияСтроки" Тогда
		МодельРДО = рарусОбщегоНазначенияВызовСервера.ПолучитьМодельРДО(ФормаВладелец.Судно);
		ПолеМодельРДО	= "ПЖМодельРДО";
	КонецЕсли;
	
	Структура = новый Структура;
	Структура.Вставить("ПолеМодельРДО", ПолеМодельРДО);
	Структура.Вставить("МодельРДО", 	МодельРДО);
	Возврат Структура

КонецФункции

Процедура УстановитьОтборПоМоделиРДО(ФормаВыбора) Экспорт
			
	Если ФормаВыбора.ИмяФормы <> "Справочник.vftГрузы.Форма.ФормаВыбора"
		И ФормаВыбора.ИмяФормы <> "Справочник.vftПунктыСледования.Форма.ФормаВыбора"
		И ФормаВыбора.ИмяФормы <> "Справочник.vftТиповыеОперации.Форма.ФормаВыбора"
		И ФормаВыбора.ИмяФормы <> "Справочник.vftТиповыеОперации.Форма.ФормаВыбораСАналитикой" Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураМодельРДО	= ПолучитьСтруктуруМодельРДОДляОтбора(ФормаВыбора);
	ЭтоГлавныйУзел		= vftОбщегоНазначения.ЭтоГлавныйУзел();
	
	Если ЗначениеЗаполнено(СтруктураМодельРДО.МодельРДО) Тогда
		ИДПользовательскойНастройки = новый УникальныйИдентификатор;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаВыбора.Список,
		СтруктураМодельРДО.ПолеМодельРДО,
		СтруктураМодельРДО.МодельРДО,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		//rarus_AfoD 16.09.2020 < 
		// скрываем доступ к отбору
		//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный,
		//rarus_AfoD 16.09.2020 > 
		ИДПользовательскойНастройки);
		
		ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		Для каждого Стр Из ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если Стр.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтруктураМодельРДО.ПолеМодельРДО) Тогда
				Стр.ПредставлениеПользовательскойНастройки = "Модель РДО";		
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	//++ rarus isaeva 17.11.2020
	Если ФормаВыбора.ИмяФормы = "Справочник.vftПунктыСледования.Форма.ФормаВыбора"
		И ЗначениеЗаполнено(СтруктураМодельРДО.МодельРДО)  Тогда
		ВидимостьКоординат = НЕ рарусОбщегоНазначенияВызовСервера.ЭтоСудноСГФ(СтруктураМодельРДО.МодельРДО);
		
		ФормаВыбора.Элементы.Координата_1.Видимость = ВидимостьКоординат;
		ФормаВыбора.Элементы.Координата_2.Видимость = ВидимостьКоординат;
	КонецЕсли;
	//-- rarus isaeva 17.11.2020

	Если ФормаВыбора.ИмяФормы = "Справочник.vftГрузы.Форма.ФормаВыбора" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаВыбора.Список,
		"ЭтоГруппа",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		ФормаВыбора.Список,
		"ПометкаУдаления",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	КонецЕсли;
	
	Если ФормаВыбора.ИмяФормы = "Справочник.vftТиповыеОперации.Форма.ФормаВыбора"
		ИЛИ ФормаВыбора.ИмяФормы = "Справочник.vftТиповыеОперации.Форма.ФормаВыбораСАналитикой" Тогда
		ЭлементыПользовательскихНастроек = ФормаВыбора.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
			Если ТипЗнч(Элемент) = ТипЗнч(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Порядок) Тогда
				Элемент.Элементы.Очистить();
				УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных("Наименование");
				УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
				УсловиеСортировки.Использование = Истина;
			КонецЕсли;    
		КонецЦикла;
	КонецЕсли;
	
	// ++ rarus Камаев П.В. 02.09.2020 Задача № 23575 
	
	Если НЕ ЭтоГлавныйУзел Тогда
		Если ФормаВыбора.ИмяФормы = "Справочник.vftПунктыСледования.Форма.ФормаВыбора"
			ИЛИ ФормаВыбора.ИмяФормы = "Справочник.vftТиповыеОперации.Форма.ФормаВыбора"
			ИЛИ ФормаВыбора.ИмяФормы = "Справочник.vftТиповыеОперации.Форма.ФормаВыбораСАналитикой" Тогда
			
			Для каждого Стр Из ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
				Стр.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;		
			КонецЦикла;	
		КонецЕсли;	
	КонецЕсли;
	// -- rarus Камаев П.В. 02.09.2020

КонецПроцедуры
// -- rarus Камаев П.В. 17.08.2020

// ++ rarus Камаев П.В. 29.09.2020 Задача № 24459
Процедура ОбменСудноПередать(ЭтаФорма = Неопределено) Экспорт
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновление = рарусОбщегоНазначенияВызовСервера.ТребуетсяОбновление();
	ПараметрыПомощника = Новый Структура;	
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", Ложь);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  0);
	ПараметрыПомощника.Вставить("ИспользоватьПрием", Ложь);
	ПараметрыПомощника.Вставить("ИспользоватьОтправку", Ложь);
	ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Ложь);
	
	Если ТребуетсяОбновление Тогда
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(рарусОбщегоНазначенияВызовСервера.ГлавныйУзел(), ЭтаФорма, , Истина, ВспомогательныеПараметры);
	Иначе
		ПараметрыПомощника.Вставить("ИспользоватьОтправку", Истина);
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(рарусОбщегоНазначенияВызовСервера.ГлавныйУзел(), ЭтаФорма, , Истина, ВспомогательныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменСудноПринять(ЭтаФорма = Неопределено) Экспорт
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновление = рарусОбщегоНазначенияВызовСервера.ТребуетсяОбновление();
	ПараметрыПомощника = Новый Структура;	
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", Ложь);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  0);
	ПараметрыПомощника.Вставить("ИспользоватьПрием", Ложь);
	ПараметрыПомощника.Вставить("ИспользоватьОтправку", Ложь);
	ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Ложь);
	
	Если ТребуетсяОбновление Тогда
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(рарусОбщегоНазначенияВызовСервера.ГлавныйУзел(), ЭтаФорма, , Истина, ВспомогательныеПараметры);
	Иначе
		ПараметрыПомощника.Вставить("ИспользоватьПрием", Истина);
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(рарусОбщегоНазначенияВызовСервера.ГлавныйУзел(), ЭтаФорма, , Истина, ВспомогательныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбменСудно(ЭтаФорма = Неопределено, ИспользоватьПрием = Ложь, ИспользоватьОтправку = Ложь) Экспорт
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИспользоватьПрием = Ложь И ИспользоватьОтправку = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбновление = рарусОбщегоНазначенияВызовСервера.ТребуетсяОбновление();
	ПараметрыПомощника = Новый Структура;	
	ПараметрыПомощника.Вставить("ЭтоОбменСПриложениемВСервисе", Ложь);
	ПараметрыПомощника.Вставить("ОбластьДанныхКорреспондента",  0);
	ПараметрыПомощника.Вставить("ИспользоватьПрием", Ложь);
	ПараметрыПомощника.Вставить("ИспользоватьОтправку", Ложь);
	ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Ложь);
	
	Если ТребуетсяОбновление Тогда
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(рарусОбщегоНазначенияВызовСервера.ГлавныйУзел(), ЭтаФорма, , Истина, ВспомогательныеПараметры);
	Иначе
		ПараметрыПомощника.Вставить("ИспользоватьПрием", ИспользоватьПрием);
		ПараметрыПомощника.Вставить("ИспользоватьОтправку", ИспользоватьОтправку);
		ПараметрыПомощника.Вставить("ИспользоватьЗавершение", Истина);
		ВспомогательныеПараметры = Новый Структура;
		ВспомогательныеПараметры.Вставить("ПараметрыПомощника", ПараметрыПомощника);
		ОбменДаннымиКлиент.ВыполнитьОбменДаннымиОбработкаКоманды(рарусОбщегоНазначенияВызовСервера.ГлавныйУзел(), ЭтаФорма, , Истина, ВспомогательныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

//Процедура ВыполнитьОбменНаКлиенте() Экспорт
//	рарусОбщегоНазначенияВызовСервера.ВыполнитьОбменНаСервере();
//КонецПроцедуры
// -- rarus Камаев П.В. 29.09.2020

#КонецОбласти