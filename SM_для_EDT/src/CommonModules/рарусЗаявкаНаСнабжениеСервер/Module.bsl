#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.впЗаявкиНаСнабжение);
		
		Параметры.НезависимыеРегистры.Добавить(Метаданные.РегистрыСведений.впИнтеграцияДокументов);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыСведений.впЗаявкиНаСнабжение);
		
	КонецЕсли;
		
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "впЗаявкиНаСнабжение");
	
КонецПроцедуры

// Процедура формирования движений по независимым регистрам
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Документ - ДокументСсылка - ссылка на документ
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ЗаписатьДанные(ТаблицыДляДвижений, Документ, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицыДляДвижений.Свойство("ТаблицавпИнтеграцияДокументов") Тогда
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировкиДанных = БлокировкаДанных.Добавить("РегистрСведений.впИнтеграцияДокументов");	
		ЭлементБлокировкиДанных.УстановитьЗначение("ДокументЕРП", Документ);
		ЭлементБлокировкиДанных.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		
		НаборЗаписей = РегистрыСведений.впИнтеграцияДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументЕРП.Установить(Документ);		
		НаборЗаписей.Загрузить(ТаблицыДляДвижений.ТаблицавпИнтеграцияДокументов);
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

#Область ФормированиеПриходаТМЦ

// ++ rarus makole 2021-03-16
//Процедура СформироватьПриходТМЦИпровести(Заявка, Отказ) Экспорт
Процедура СформироватьПриходТМЦИпровести(Заявка, Отказ, ДополнительныеСвойства) Экспорт
	
	Перем НомерВходящегоДокумента;
	// -- rarus makole 2021-03-16

	Приход = Документы.впПриходТМЦ.СоздатьДокумент();
	Приход.Заполнить(Заявка);
	// ++ rarus makole 2021-03-16
	Если ТипЗнч(ДополнительныеСвойства) = Тип("Структура")
		И ДополнительныеСвойства.Свойство("НомерВходящегоДокумента", НомерВходящегоДокумента) Тогда
		Приход.НомерВходящегоДокумента = НомерВходящегоДокумента;
		Приход.ДатаВходящегоДокумента = ДополнительныеСвойства.ДатаВходящегоДокумента;
		Приход.Комментарий = ДополнительныеСвойства.Комментарий;
	КонецЕсли;
	// -- rarus makole 2021-03-16
	Приход.Записать(РежимЗаписиДокумента.Проведение);

КонецПроцедуры

Процедура ЗаполнитьПриходТМЦПоЗаявке(Приход, Заявка) Экспорт
	
	// ++ rarus atyutyakin 21.01.2021  [ФТ.ИМ.02.01]
	ЗаполнитьДаннымиПоИмуществу(Заявка, Приход);
	// -- rarus atyutyakin 21.01.2021
	
	ЗаполнитьПриходТМЦПоЗаявкеМатериалы(Приход, Заявка);
	
КонецПроцедуры

Процедура ЗаполнитьДаннымиПоИмуществу(Заявка, Знач Приход)		
	
	РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявка, "Дата, Подразделение, ВидПотребности");
	
	ПараметрыФО = Новый Структура("Период, Судно", РеквизитыЗаявки.Дата, РеквизитыЗаявки.Подразделение);
	ИмущественныйУчетВключен = ПолучитьФункциональнуюОпцию("рарусИспользоватьИмущественныйУчет", ПараметрыФО);
	
	ВидОперации = Неопределено;
	Если РеквизитыЗаявки.ВидПотребности = ВидПотребностиТМЦЗаСчетСобственныхСредств() Тогда
		ВидОперации = рарусПриходТМЦ.ВидОперацииЗакупкаЧерезПодотчетноеЛицо();
	ИначеЕсли ИмущественныйУчетВключен И РеквизитыЗаявки.ВидПотребности = ВидПотребностиПродуктыПитания() Тогда
		ВидОперации = рарусПриходТМЦ.ВидОперацииЗакупкаПродуктовПитания();
	ИначеЕсли ИмущественныйУчетВключен И РеквизитыЗаявки.ВидПотребности = ВидПотребностиНавигационныеКарты() Тогда
		ВидОперации = рарусПриходТМЦ.ВидОперацииЗакупкаНавигационныхКарт();
	КонецЕсли;
	
	Приход.Подразделение = РеквизитыЗаявки.Подразделение;
	Приход.ВидОперации = ВидОперации;
	
	//Приход.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "Подразделение");
	//Приход.ВидОперации = Перечисления.рарусВидыОперацийПриходаТМЦ.ЗакупкаЧерезПодотчетноеЛицо;

КонецПроцедуры

Процедура ЗаполнитьПриходТМЦПоЗаявкеМатериалы(Приход, Заявка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	// ++ rarus atyutyakin 19.02.2021  [ФТ.ИМ.02.01]
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура КАК Номенклатура,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Количество КАК Количество,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка КАК Заявка,
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.КодСтроки КАК КодСтроки
	|ПОМЕСТИТЬ ВТНоменклатураЗаявки
	|ИЗ
	|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК впЗаявкаНаСнабжениеМатериалыИРаботы
	|ГДЕ
	|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	впПриходТМЦТМЦ.Номенклатура КАК Номенклатура,
	|	впПриходТМЦТМЦ.Количество КАК Количество,
	|	впПриходТМЦТМЦ.Заявка КАК Заявка,
	|	впПриходТМЦТМЦ.КодСтроки КАК КодСтроки,
	|	впПриходТМЦТМЦ.Ссылка КАК ПриходТМЦ
	|ПОМЕСТИТЬ ВТУжеВведенныеПриходыПоЗаявке
	|ИЗ
	|	Документ.впПриходТМЦ.ТМЦ КАК впПриходТМЦТМЦ
	|ГДЕ
	|	впПриходТМЦТМЦ.Ссылка.Проведен
	|	И впПриходТМЦТМЦ.Заявка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	рарусИмуществоНаСудах.Регистратор КАК ПриходТМЦ
	|ПОМЕСТИТЬ ВТПриходыТМЦСДвижениямиПоИмуществу
	|ИЗ
	|	РегистрНакопления.рарусИмуществоНаСудах КАК рарусИмуществоНаСудах
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУжеВведенныеПриходыПоЗаявке КАК УжеВведенныеПриходыПоЗаявке
	|		ПО рарусИмуществоНаСудах.Регистратор = УжеВведенныеПриходыПоЗаявке.ПриходТМЦ
	|ГДЕ
	|	рарусИмуществоНаСудах.Активность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаявкаБезУжеВведенныхПриходов.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаявкаБезУжеВведенныхПриходов.Количество) КАК Количество,
	|	ЗаявкаБезУжеВведенныхПриходов.Заявка КАК Заявка,
	|	ЗаявкаБезУжеВведенныхПриходов.КодСтроки КАК КодСтроки
	|ИЗ
	|	(ВЫБРАТЬ
	|		НоменклатураЗаявки.Номенклатура КАК Номенклатура,
	|		НоменклатураЗаявки.Количество КАК Количество,
	|		НоменклатураЗаявки.Заявка КАК Заявка,
	|		НоменклатураЗаявки.КодСтроки КАК КодСтроки
	|	ИЗ
	|		ВТНоменклатураЗаявки КАК НоменклатураЗаявки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		УжеВведенныеПриходыПоЗаявке.Номенклатура,
	|		-УжеВведенныеПриходыПоЗаявке.Количество,
	|		УжеВведенныеПриходыПоЗаявке.Заявка,
	|		УжеВведенныеПриходыПоЗаявке.КодСтроки
	|	ИЗ
	|		ВТУжеВведенныеПриходыПоЗаявке КАК УжеВведенныеПриходыПоЗаявке
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПриходыТМЦСДвижениямиПоИмуществу КАК ПриходыТМЦСДвижениямиПоИмуществу
	|			ПО УжеВведенныеПриходыПоЗаявке.ПриходТМЦ = ПриходыТМЦСДвижениямиПоИмуществу.ПриходТМЦ) КАК ЗаявкаБезУжеВведенныхПриходов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаБезУжеВведенныхПриходов.Номенклатура,
	|	ЗаявкаБезУжеВведенныхПриходов.Заявка,
	|	ЗаявкаБезУжеВведенныхПриходов.КодСтроки
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЗаявкаБезУжеВведенныхПриходов.Количество) > 0";
	
	//"ВЫБРАТЬ
	//|	впЗаявкаНаСнабжениеМатериалыИРаботы.Номенклатура КАК Номенклатура,
	//|	впЗаявкаНаСнабжениеМатериалыИРаботы.Количество КАК Количество,
	//|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка КАК Заявка,
	//|	впЗаявкаНаСнабжениеМатериалыИРаботы.КодСтроки КАК КодСтроки
	//|ИЗ
	//|	Документ.впЗаявкаНаСнабжение.МатериалыИРаботы КАК впЗаявкаНаСнабжениеМатериалыИРаботы
	//|ГДЕ
	//|	впЗаявкаНаСнабжениеМатериалыИРаботы.Ссылка = &Ссылка";
	// -- rarus atyutyakin 19.02.2021
	
	Запрос.УстановитьПараметр("Ссылка", Заявка);
	
	ДанныеТМЦ = Запрос.Выполнить().Выгрузить();
	
	Приход.ТМЦ.Загрузить(ДанныеТМЦ);

КонецПроцедуры

#КонецОбласти 
 
#КонецОбласти

Функция ОсновноеСудно() Экспорт
	
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	Возврат ОсновноеСудно;
	
КонецФункции

Функция ОсновнаяОрганизация() Экспорт
	
	Возврат Константы.впОсновнаяОрганизация.Получить();
	
КонецФункции

Процедура УстановитьВозможностьИзменения(Форма, ТекущийОбъект) Экспорт
	
	Ссылка = ТекущийОбъект.Ссылка;
	
	ОбъектДоступенДляРедактирования = рарусСостоянияРедактированияОбъектов.ОбъектДоступенДляРедактирования(Ссылка);
	
	Форма.ТолькоПросмотр = Не ОбъектДоступенДляРедактирования;
	
Конецпроцедуры	

Процедура УстановитьВидимостьДоступностьЭлементовСогласования(Форма) Экспорт

	//TODO
	УстановитьВидимостьДоступностьРеквизитовСогласования(Форма);
	
	УстановитьВидимостьКнопокСогласования(Форма);

КонецПроцедуры

Процедура УстановитьВидимостьДоступностьРеквизитовСогласования(Форма)
	
	ЕстьПравоОтправкиНаБерег = рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег();
	
	Форма.Элементы.МатериальныеЗатратыДоработать.Доступность 		= ЕстьПравоОтправкиНаБерег;	
	Форма.Элементы.МатериальныеЗатратыПричинаДоработки.Доступность 	= ЕстьПравоОтправкиНаБерег;	
	Форма.Элементы.МатериальныеЗатратыОтменено.Доступность 			= ЕстьПравоОтправкиНаБерег;	
	
	ВидПотребностиТребуетСогласования = ВидПотребностиТребуетСогласования(Форма.Объект.ВидПотребности);
	
	Форма.Элементы.МатериальныеЗатратыДоработать.Видимость	= ВидПотребностиТребуетСогласования;
	Форма.Элементы.МатериальныеЗатратыПричинаДоработки.Видимость	= ВидПотребностиТребуетСогласования;
	Форма.Элементы.МатериальныеЗатратыОтменено.Видимость	= ВидПотребностиТребуетСогласования;
	
КонецПроцедуры	

Процедура УстановитьВидимостьКнопокСогласования(Форма)
		
	Форма.Элементы.ФормаОтправитьНаБерег.Видимость = ВидимостьКнопкиОтправкиНаБерег(Форма);
	
	Форма.Элементы.ОтправитьНаСогласованиеКапитану.Видимость = ВидимостьКнопкиОтправитьНаСогласованиеКапитану(Форма);	
	
	Форма.Элементы.ОтправитьНаДоработку.Видимость = ВидимостьКнопкиОтправитьНаДоработку(Форма);
	
	Форма.Элементы.ОприходоватьИЗакрыть.Видимость = ВидимостьКнопкиОприходоватьИЗакрыть(Форма);
			
КонецПроцедуры	

Процедура ЗаполнитьСостоянияСтрокЗаявки(Форма) Экспорт
	
	ЗаявкаНаСнабжениеСсылка = СсылкаНаДокументИзФормы(Форма);
	
	ТаблицаТекущихСостояний = рарусЗаявкаНаСнабжениеСтатусы.ПолучитьТекущиеСостоянияСтрокДокумента(ЗаявкаНаСнабжениеСсылка);
	
	ЗаполнитьСостоянияСтрокПоТаблицеСостояний(Форма, ТаблицаТекущихСостояний);
		
КонецПроцедуры

Процедура ЗаполнитьСостоянияСтрокПоТаблицеСостояний(Форма, ТаблицаТекущихСостояний)		
	
	Для Каждого СтрокаДокумента Из Форма.Объект.МатериалыИРаботы цикл
		
		СтрокаСостояния = ТаблицаТекущихСостояний.Найти(СтрокаДокумента.КодСтроки, "КодСтроки");
		
		Если СтрокаСостояния <> Неопределено тогда
			СтрокаДокумента.Состояние = СтрокаСостояния.СостояниеТекущее;
			СтрокаДокумента.СостояниеСтрокой = рарусЗаявкаНаСнабжениеСтатусы.ПолучитьПредставлениеСостояния(СтрокаДокумента.Состояние);			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ВидимостьКнопкиОтправкиНаБерег(Форма)
	
	Если Не ВидПотребностиТребуетСогласования(Форма.Объект.ВидПотребности) тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПравоОтправкиНаБерег = рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег();
	ОбъектДоступенДляРедактирования = рарусСостоянияРедактированияОбъектов.ОбъектДоступенДляРедактирования(Форма.Объект.Ссылка);
	
	Возврат ЕстьПравоОтправкиНаБерег И ОбъектДоступенДляРедактирования;	
	
КонецФункции

Функция ВидимостьКнопкиОтправитьНаСогласованиеКапитану(Форма)
	
	Если Не ВидПотребностиТребуетСогласования(Форма.Объект.ВидПотребности) тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПравоОтправкиНаБерег = рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег();
	ЭтоОбластьРедактированияНаСудне = Форма.Объект.ОбластьРедактирования = ОбластьРедактированияНаСудне();
	ЭтоСозданиеИлиДоработка = Форма.Объект.СтатусСогласования = СтатусСогласованияНаДоработку()
								ИЛИ Форма.Объект.СтатусСогласования = СтатусСогласованияНачальный();															

	Возврат НЕ ЕстьПравоОтправкиНаБерег 
		И ЭтоОбластьРедактированияНаСудне 
		И ЭтоСозданиеИлиДоработка;	
	
КонецФункции

Функция ВидимостьКнопкиОтправитьНаДоработку(Форма)
	
	Если Не ВидПотребностиТребуетСогласования(Форма.Объект.ВидПотребности) тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЕстьПравоОтправкиНаБерег = рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег();
	ЭтоОбластьРедактированияНаСудне = Форма.Объект.ОбластьРедактирования = ОбластьРедактированияНаСудне();
	ИнициаторСовпадаетСтекущимПользователем = ИнициаторСовпадаетСтекущимПользователем(Форма.Объект.Ответственный);
	// ++ rarus PleA 19.02.2021 [27259 ]
	ЭтоДоработкаКапитаном = Форма.Объект.СтатусСогласования = СтатусСогласованияНаДоработкуКапитаном();
	// -- rarus PleA

	Возврат ЕстьПравоОтправкиНаБерег 
		И ЭтоОбластьРедактированияНаСудне 
		И Не ИнициаторСовпадаетСтекущимПользователем
	// ++ rarus PleA 19.02.2021 [27259]	
		И Не ЭтоДоработкаКапитаном;	
	// -- rarus PleA
	
КонецФункции

Функция ВидимостьКнопкиОприходоватьИЗакрыть(Форма)
	
	// ++ rarus atyutyakin 29.01.2021  [ФТ.ИМ.02.01]
	КнопкаВидима = Форма.Объект.ВидПотребности = ВидПотребностиТМЦЗаСчетСобственныхСредств();
	
	ДатаДокумента = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Дата"),
		Форма.Объект.Дата, ТекущаяДатаСеанса());
	СудноДокумента = ?(ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Подразделение"),
		Форма.Объект.Подразделение, Неопределено);
	ПараметрыФО = Новый Структура("Период, Судно", ДатаДокумента, СудноДокумента);
	Если рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчет(ПараметрыФО) Тогда
		КнопкаВидима = (Форма.Объект.ВидПотребности = ВидПотребностиТМЦЗаСчетСобственныхСредств()
			ИЛИ Форма.Объект.ВидПотребности = ВидПотребностиПродуктыПитания()
			ИЛИ Форма.Объект.ВидПотребности = ВидПотребностиНавигационныеКарты());
	КонецЕсли; 
		
	Возврат КнопкаВидима;
	//Возврат Форма.Объект.ВидПотребности = ВидПотребностиТМЦЗаСчетСобственныхСредств();	
	// -- rarus atyutyakin 29.01.2021
	
КонецФункции

Функция ВидПотребностиТребуетСогласования(ВидПотребности)
	
	Возврат Видпотребности = ВидПотребностиТМЦ() ИЛИ Видпотребности = ВидПотребностиУслуги();

КонецФункции

Функция ИнициаторСовпадаетСтекущимПользователем(Ответственный)
	
	Возврат Ответственный = Пользователи.ТекущийПользователь();
	
КонецФункции	

Процедура ЗаполнитьПредставлениеСтатусаСогласования(Форма) Экспорт

	Объект = Форма.Объект;
	Форма.СтатусСогласованияСтрокой = ПолучитьПредставлениеСтатусаСогласованияПолное(Объект);	

КонецПроцедуры

Процедура УстановитьСтатусСогласованияПередЗаписью(ЗаявкаОбъект) Экспорт
	
	СтатусСогласованияУстановить  = Неопределено;

	Если ЭтоСменаСтатуса(ЗаявкаОбъект, СтатусСогласованияУстановить) тогда
		
		рарусОбщегоНазначенияСервер.ВызыватьИсключениеЕслиПустое(СтатусСогласованияУстановить);
		
		ЗаявкаОбъект.СтатусСогласования = СтатусСогласованияУстановить;
		
		ОчиститьДоработку(ЗаявкаОбъект, СтатусСогласованияУстановить);
		
		УстановитьОбластьРедактированияБерегЕслиСогласована(ЗаявкаОбъект);
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ЭтоСменаСтатуса(ЗаявкаОбъект, СтатусСогласованияУстановить) Экспорт
			
	Возврат ЗаявкаОбъект.ДополнительныеСвойства.Свойство("СтатусСогласованияУстановить", СтатусСогласованияУстановить) 	
	
КонецФункции	

Процедура ОчиститьДоработку(ЗаявкаОбъект, СтатусСогласования)
	
	Если СтатусСогласования = СтатусСогласованияНаСогласованииКапитаном() 
		ИЛИ СтатусСогласования = СтатусСогласованияСогласована() тогда
		
		Для Каждого СтрокаДоработки Из ЗаявкаОбъект.МатериалыИРаботы цикл
			
			СтрокаДоработки.Доработать = Ложь;	
			СтрокаДоработки.ПричинаДоработки = "";
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция СсылкаНаДокументИзФормы(Форма)
	
	Возврат Форма.Объект.Ссылка;

КонецФункции

Функция ПолучитьПредставлениеСтатусаСогласованияПолное(Объект)
	
	ПредставлениеСтатусаСогласования = ПолучитьПредставлениеСтатусаСогласования(Объект);
	
	Возврат СтрШаблон("%1", ПредставлениеСтатусаСогласования);
	
КонецФункции

Функция ПолучитьПредставлениеДоступностиРедактирования(Ссылка)		

	ОбъектДоступенДляРедактирования = Истина;
	
	Если ЗначениеЗаполнено(Ссылка) тогда
		ОбъектДоступенДляРедактирования = рарусСостоянияРедактированияОбъектов.ОбъектДоступенДляРедактирования(Ссылка);
	Иначе
		Возврат "";
	КонецЕсли;
	
	Если ОбъектДоступенДляРедактирования тогда
		
		Возврат ТекстДоступенДляРедактирования();
				
	КонецЕсли;	
	
	Возврат ТекстНеДоступенДляРедактирования();

КонецФункции

Функция ТекстНеДоступенДляРедактирования()
	
	Возврат "(не доступна для редактирования)";

КонецФункции

Функция ТекстДоступенДляРедактирования()
	
	Возврат "(доступна для редактирования)";

КонецФункции 
 
Процедура УстановитьОбластьРедактированияБерегЕслиСогласована(ЗаявкаОбъект)

	Если ЗаявкаОбъект.СтатусСогласования = СтатусСогласованияСогласована() тогда
		
		ЗаявкаОбъект.ОбластьРедактирования = ОбластьРедактированияНаБерегу();
		
	КонецЕсли;	

КонецПроцедуры
 
Функция ПолучитьПредставлениеСтатусаСогласования(Объект)
	
	СтатусСогласования = Объект.СтатусСогласования;
			
	Если СтатусСогласования = СтатусСогласованияНаДоработку() тогда
		Возврат ПредставлениеСтатусаСогласованияНаДоработке();
	КонецЕсли;
	
	Если СтатусСогласования = СтатусСогласованияНаСогласованииКапитаном() тогда
		Возврат ПредставлениеСтатусаСогласованияНаСогласованииКапитаном();
	КонецЕсли;
	
	Если СтатусСогласования = СтатусСогласованияСогласована() тогда
		Возврат ПредставлениеСтатусаСогласованияСогласована(Объект);			
	КонецЕсли;	
	
	Если СтатусСогласования = СтатусСогласованияНаДоработкуКапитаном() тогда
		Возврат ПредставлениеСтатусСогласованияНаДоработкуКапитаном();	
	КонецЕсли;
	
	Если СтатусСогласования = СтатусСогласованияСозданаНаБерегу() тогда
		Возврат ПредставлениеСтатусСогласованияСозданаНаБерегу();	
	КонецЕсли;
		
	возврат ПредставлениеСтатусаСогласованияЧерновик();	
	
КонецФункции

Функция СтатусСогласованияНачальный() Экспорт
	
	Возврат Перечисления.рарусСтатусыСогласованияЗаявкиНаСнабжение.ПустаяСсылка();

КонецФункции

Функция СтатусСогласованияНаДоработку() Экспорт
	
	Возврат Перечисления.рарусСтатусыСогласованияЗаявкиНаСнабжение.ДоработкаИнициатором;

КонецФункции

Функция СтатусСогласованияСогласована() Экспорт
	
	Возврат Перечисления.рарусСтатусыСогласованияЗаявкиНаСнабжение.Согласована;

КонецФункции

Функция СтатусСогласованияНаСогласованииКапитаном() Экспорт
	
	Возврат Перечисления.рарусСтатусыСогласованияЗаявкиНаСнабжение.СогласованиеКапитаном;

КонецФункции

Функция СтатусСогласованияНаДоработкуКапитаном() Экспорт
	
	Возврат Перечисления.рарусСтатусыСогласованияЗаявкиНаСнабжение.ДоработкаКапитаном;

КонецФункции

Функция СтатусСогласованияСозданаНаБерегу() Экспорт
	
	Возврат Перечисления.рарусСтатусыСогласованияЗаявкиНаСнабжение.СозданаНаБерегу;

КонецФункции

Функция СтатусСогласованияНаДоработкуВЗависимотстиОтРолиПользователя() Экспорт
	
	Если рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег() тогда
		Возврат рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработкуКапитаном();
	Иначе
		Возврат рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработку();
	КонецЕсли;
	
КонецФункции	

Функция ПредставлениеСтатусаСогласованияЧерновик() Экспорт
	
	Возврат "Черновик";

КонецФункции

Функция ПредставлениеСтатусаСогласованияНаДоработке()
	
	Возврат "На доработке";

КонецФункции

Функция ПредставлениеСтатусаСогласованияНаСогласованииКапитаном()
	
	Возврат "На рассмотрении капитаном";

КонецФункции

Функция ПредставлениеСтатусСогласованияНаДоработкуКапитаном()
	
	Возврат "На доработке у капитана";

КонецФункции

Функция ПредставлениеСтатусаСогласованияСогласована(Объект)
	
	Если рарусСостоянияРедактированияОбъектов.ОбъектДоступенДляРедактирования(Объект.Ссылка, Истина) тогда
		Возврат "Зарегистрировано к обмену в береговой модуль";
	Иначе
		Возврат "Отправлено в береговые службы";
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеСтатусСогласованияСозданаНаБерегу()
	
	Возврат "Создана береговыми службами";

КонецФункции

Функция ЭтоРедактированиеНаСудне(Ссылка) Экспорт
	
	ОбластьРедактированияОбъекта = ПолучитьОбластьРедактирования(Ссылка);
	
	ОбластьРедактированияНаСудне = ОбластьРедактированияНаСудне();
	
	Возврат ОбластьРедактированияОбъекта = ОбластьРедактированияНаСудне;
	
КонецФункции

Функция ЭтоРедактированиеНаБерегу(Ссылка) Экспорт
	
	ОбластьРедактированияОбъекта = ПолучитьОбластьРедактирования(Ссылка);
	
	ОбластьРедактированияНаБерегу = ОбластьРедактированияНаБерегу();
	
	Возврат ОбластьРедактированияОбъекта = ОбластьРедактированияНаБерегу;
	
КонецФункции

Функция ЕстьПравоРедактированияПоСтатусу(Ссылка) Экспорт
	
	ТекущийСтатус = ТекущийСтатусСогласования(Ссылка);
	ЕстьПравоОтправкиНаБерег = рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег();
	
	ЕстьПравоРедактирования = Ложь;
	
	Если ТекущийСтатус = СтатусСогласованияСозданаНаБерегу() тогда
		
		ЕстьПравоРедактирования = Ложь;
		
	ИначеЕсли ТекущийСтатус = СтатусСогласованияНачальный() тогда
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = СтатусСогласованияНаДоработку() Тогда 
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = СтатусСогласованияНаСогласованииКапитаном()
		И ЕстьПравоОтправкиНаБерег Тогда 
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = СтатусСогласованияНаДоработкуКапитаном() 
		И ЕстьПравоОтправкиНаБерег Тогда 	
		
		ЕстьПравоРедактирования = Истина;
		
	ИначеЕсли ТекущийСтатус = СтатусСогласованияСогласована() 
		И ЕстьПравоОтправкиНаБерег Тогда 	
		
		ЕстьПравоРедактирования = Истина;	
		
	КонецЕсли;
	
	Возврат ЕстьПравоРедактирования;
	
КонецФункции

Функция ТекущийСтатусСогласования(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "СтатусСогласования");

КонецФункции

Функция ПолучитьОбластьРедактирования(Ссылка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ОбластьРедактирования");
	
КонецФункции

Функция ОбластьРедактированияНаСудне() Экспорт
	
	Возврат Перечисления.рарусОбластиРедактирования.Судно;
	
КонецФункции

Функция ОбластьРедактированияНаБерегу() Экспорт
	
	Возврат Перечисления.рарусОбластиРедактирования.Берег;
	
КонецФункции

Функция ВидПотребностиТМЦ() Экспорт
	
	Возврат Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.ТМЦ;
			
КонецФункции

Функция ВидПотребностиУслуги() Экспорт
	
	Возврат Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.Услуги;
			
КонецФункции

Функция ВидПотребностиТМЦЗаСчетСобственныхСредств() Экспорт
	
	Возврат Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.ТМЦЗаСчетСобственныхСредств;
			
КонецФункции

// ++ rarus atyutyakin 21.01.2021  [ФТ.ИМ.02.01]
Функция ВидПотребностиПродуктыПитания() Экспорт
	
	Возврат Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.ПродуктыПитания;
			
КонецФункции // -- rarus atyutyakin 21.01.2021

// ++ rarus atyutyakin 21.01.2021  [ФТ.ИМ.02.01]
Функция ВидПотребностиНавигационныеКарты() Экспорт
	
	Возврат Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.НавигационныеКарты;
			
КонецФункции // -- rarus atyutyakin 21.01.2021
	
Функция ОписаниеДополнительныхРеквизитовНоменклатуры(Номенклатура) Экспорт

	Если Не ЗначениеЗаполнено(Номенклатура) тогда
		Возврат "";
	КонецЕсли;
	
	СоотвествтиеНоменклатураСтрока = Справочники.Номенклатура.ДополнительныеРеквизитыСтрокой(Номенклатура);
	
	СтрокаПредставления = СоотвествтиеНоменклатураСтрока[Номенклатура];
	
	Возврат ?(ЗначениеЗаполнено(СтрокаПредставления), СтрокаПредставления, "");

КонецФункции 

Функция НайтиПриходТМЦПоЗаявке(Заявка) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Заявка) тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заявка", Заявка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	впПриходТМЦТМЦ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.впПриходТМЦ.ТМЦ КАК впПриходТМЦТМЦ
		|ГДЕ
		|	впПриходТМЦТМЦ.Заявка = &Заявка
		|	И НЕ впПриходТМЦТМЦ.Ссылка.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Документы.впПриходТМЦ.ПустаяСсылка();

КонецФункции 

Функция НайтиПриходыТМЦПоЗаявке(Заявка) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Заявка) тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Заявка", Заявка);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	впПриходТМЦТМЦ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.впПриходТМЦ.ТМЦ КАК впПриходТМЦТМЦ
		|ГДЕ
		|	впПриходТМЦТМЦ.Заявка = &Заявка
		|	И НЕ впПриходТМЦТМЦ.Ссылка.ПометкаУдаления";
		
		СписокПриходов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Если СписокПриходов.Количество() тогда
			Возврат СписокПриходов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Массив;

КонецФункции

Функция ЕстьПриходТМЦПоЗаявке(Заявка) Экспорт 

	Возврат ЗначениеЗаполнено(НайтиПриходТМЦПоЗаявке(Заявка));

КонецФункции 
 
////////////////////////////////////////////////////////////////////////////////
//
// Функция 
//
// Описание: 
//	Формирует представление дополнительных реквизитов для списка номенклатуры
//
// Параметры:
//   Номенклатура - Массив, СправочникСсылка.Номенклатура - объекты по которым необходимо построить представление.
//
// Возвращаемое значение: Соответствие
//
Функция ОписаниеДополнительныхРеквизитовПоСпикуНоменклатуры(Номенклатура) Экспорт
			
	Возврат Справочники.Номенклатура.ДополнительныеРеквизитыСтрокой(Номенклатура);
	
КонецФункции

Процедура УстановитьОбластьСозданияДляНовогоОбъекта(Источник) Экспорт

	Если Не Источник.ЭтоНовый() тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ОбластьСоздания) тогда
		Возврат;
	КонецЕсли;	
	
	УстановитьОбластьСоздания(Источник);	

КонецПроцедуры

Процедура УстановитьОбластьСоздания(Источник)

	ПропуститьУстановитьОбластьСоздания = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ПропуститьУстановитьОбластьСоздания", ПропуститьУстановитьОбластьСоздания) тогда
		Если ПропуститьУстановитьОбластьСоздания = Истина тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Источник.ОбластьСоздания = ОбластьРедактированияНаСудне();

КонецПроцедуры

// ++ rarus atyutyakin 18.02.2021  [ФТ.ИМ.02.01]
Функция ДобавитьКомандуСоздатьПриходТМЦНаОснованииЗаявкаНаСнабжение(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.впПриходТМЦ) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.впПриходТМЦ.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "рарусИмущественныйУчетКлиент.СоздатьПриходТМЦНаОснованииЗаявкаНаСнабжение";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.впПриходТМЦ);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "рарусИспользоватьИмущественныйУчет";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // -- rarus atyutyakin 18.02.2021