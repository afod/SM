///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.БазоваяФункциональность

// См. ПодсистемыКонфигурацииПереопределяемый.ПриДобавленииПодсистем.
Процедура ПриДобавленииПодсистем(МодулиПодсистем) Экспорт
	
	МодулиПодсистем.Добавить("вфОбновлениеИнформационнойБазы");
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.БазоваяФункциональность

// СтандартныеПодсистемы.ОбновлениеВерсииИБ

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя = "СудовойМодульVP";
	
	// [3.2.1.1 - Приоритет - 1]
	// [3.3.1.1 - ТОИР классический]	
	// [3.4.1.1 - Снабжение 2 приоритет]
	// [3.5.1.1 - СУБ]
	
	Описание.Версия = "3.5.11.3";

	Описание.ИдентификаторИнтернетПоддержки = "SSL";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ПараллельноеОтложенноеОбновлениеСВерсии = "2.3.3.22";
	
	// Требуется библиотека стандартных подсистем.
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	// ++ rarus Чернавин Г.К 16.03.2020
	// Обработчики, выполняемые при переходе на определенную версию
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.04";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеЗначенияСправочникСсылки";
	Обработчик.НачальноеЗаполнение = Истина;
	// -- rarus Чернавин Г.К 16.03.2020
	
	// ++ rarus makole 2020-11-25 [БСО.СМ.007.04]
	// Актуализация состава настроек для варианта обмена по РИБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "рарусСинхронизацияССудном.ОбновитьНастройкиОбменаССудномПоРИБ";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = "Обновление настроек берего-судового обмена для варианта ""Полная синхронизация""";
	// -- rarus makole 2020-11-25 [БСО.СМ.007.04]
	
	// ++ rarus makole 2020-12-21 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.1.2";
	Обработчик.Процедура = "рарусОбщегоНазначенияСервер.УстановитьИспользованиеРегламентногоЗаданияОбновлениеСоставаПользователей";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus makole 2020-12-21 
	
	// ++ rarus PleA 15.02.2021 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.2.1.2";
	Обработчик.Процедура = "рарусЗаявкаНаСнабжениеСостояния.УстановитьИспользованиеРегламентногоЗаданияОтложенноеПроведениеЗаявокНаСнабжениеПоСостояниям";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus PleA
	
	// ++ rarus makole 2020-12-21 
	Обработчик = Обработчики.Добавить();
	// ++ rarus PleA 16.06.2021 [номерзадачи]
	//Обработчик.Версия = "3.1.1.53";
	// -- rarus PleA
	// ++ rarus PleA 16.06.2021 [номерзадачи]
	Обработчик.Версия = "*";
	// -- rarus PleA
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗаполнитьОсновноеСудно";
	Обработчик.НачальноеЗаполнение = Истина;
	// -- rarus makole 2020-12-21
	
	// ++ rarus PleA 03.03.2021 [номерзадачи]
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ПеренумероватьДокументыСУБ";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus PleA
	
	//rarus_AfoD 27.04.2021 < 
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.3.1.9";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ОбновитьКонстантыТОИР";
	Обработчик.НачальноеЗаполнение = Ложь;
	//rarus_AfoD 27.04.2021 > 
	
	// ++ rarus PleA 03.03.2021 [номерзадачи]
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.УстановитьВерсиюКонфигурацииСудна";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus PleA
	
	// ++ rarus PleA 04.03.2021 [номерзадачи]
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ОбновитьСоставПользователейСудна";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus PleA	
	
	// ++ rarus yukuzi 31.01.2021   //   ФТ.СНБ.02. Задача_Штрихкодирование
	//Обработчик = Обработчики.Добавить();
	//Обработчик.Версия = "3.4.1.1";
	//Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ОбновлениеБПО";
	//Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus yukuzi 31.01.2021

	// ++ rarus makole 2021-06-24 [Задача № 29463]
	// надо сделать обработчик обновления, который проверит, ЦБ это или узел и включит в узле
	// запуск выполняется при начальном заполнении и при обновлении на версию
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.1.1";
	Обработчик.Процедура = "рарусИмущественныйУчетСервер.УстановкаИспользованияРегламентногоЗаданияСозданиеРасходовПоАктамОВыполненииЭтапаРабот";
	Обработчик.НачальноеЗаполнение = Истина;
	// -- rarus makole 2021-06-24 [Задача № 29463]
	
	// ++ rarus zalikh 2021-06-30 [28551]
	// настройка константы ИспользоватьАнкетирование, включать только когда
	// используется подсистема СУБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.УстановитьКонстантуИспользоватьАнкетирование";
	Обработчик.НачальноеЗаполнение = Истина;	
	// -- rarus zalikh 2021-06-30 [28551]
	
	// ++ rarus makole 2021-06-29
	// ошибка в Мониторе привела к тому, что номер отправленного в узле оказался меньше, чем принятого в ЦБ
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.2.2";
	Обработчик.Процедура = "рарусСинхронизацияССудном.УвеличитьНомерОтправленного";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus makole 2021-06-29
	
	// ++ rarus yukuzi 15.07.2021   //
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.7.4";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗарегистрироватьБереговыеСлужбы";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus yukuzi 15.07.2021
	
   	// ++ rarus yukuzi 20.07.2021   //
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.РаспределениеПользователейПоГруппамЦБ";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus yukuzi 20.07.2021
	
	// ++ rarus ilshil 22.07.2021	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗаполнитьРеквизитВладелецЗамечанияСтарымЗначением";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus ilshil 22.07.2021
	
	// ++ rarus makole 2021-08-13
	// Актуализация состава настроек обмена Судно-Берег
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "рарусСинхронизацияССудном.ДополнитьНастройкиСинхронизацииСудноБерег";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = "Дополнение настроек берего-судового обмена новыми объектами для основных вариантов";
	
	// Обработчик нужно вызывать при изменении существующих настроек по умолчанию в модуле
	// менеджера регистра сведений рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.4.10.4";
	Обработчик.Процедура = "рарусСинхронизацияССудном.ОбновитьНастройкиСинхронизацииСудноБерег";
	Обработчик.НачальноеЗаполнение = Ложь;
	// -- rarus makole 2021-08-13
	
	// rarus_AfoD <
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.1.4";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗаполнитьДокладыОСостоянииБезопасностиСоставСудовогоКомитета";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.1.11";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗаполнитьКодУстраненияЗамечанияНесоответствия";
	Обработчик.НачальноеЗаполнение = Ложь;
	// rarus_AfoD <
	
	// ++ rarus yukuzi 14.10.2021   
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.9.14";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗарегистрироватьПоказателиВиджетов";
	Обработчик.НачальноеЗаполнение = Истина;
	// -- rarus yukuzi 14.10.2021
	
	// ++ rarus yukuzi 18.10.2021   
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.5.9.15";
	Обработчик.Процедура = "вфОбновлениеИнформационнойБазы.ЗарегистрироватьВиджеты";
	Обработчик.НачальноеЗаполнение = Истина;
	// -- rarus yukuzi 18.10.2021

КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыБСП.ПриОпределенииРежимаОбновленияДанных.
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ОбновлениеВерсииИБ

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Заполнение пустой ИБ

Процедура ПервыйЗапуск() Экспорт
	
	// Код для первоначального заполнения информационной базы.
	
КонецПроцедуры

Процедура СоздатьВидыКонтактнойИнформации() Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление ИБ

Процедура ВыполнятьВсегдаПриСменеВерсии(Параметры = Неопределено) Экспорт
	
	Если Параметры <> Неопределено И НЕ Параметры.МонопольныйРежим Тогда
		Параметры.МонопольныйРежим = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ВыполнятьМонопольноеОбновление", Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьРолиИсполнителей() Экспорт
	
КонецПроцедуры

// Процедура выполняет заполнение справочника Валюты для новой области данных.
//
Процедура ВыполнитьПервоначальноеЗаполнениеВалют() Экспорт
	
	Если ОбщегоНазначения.РазделениеВключено() Тогда
		СписокВалют = Новый Массив; 
		СписокВалют.Добавить("840");
		СписокВалют.Добавить("643");
		СписокВалют.Добавить("978");
		
		РаботаСКурсамиВалют.ДобавитьВалютыПоКоду(СписокВалют);
		
	КонецЕсли;

КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.1.3.16.
//
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииОрганизаций() Экспорт
	
КонецПроцедуры

// Вызывается при переходе на версию БСП 2.2.1.12.
//
Процедура ЗаполнитьКонстантуИспользоватьНесколькоОрганизаций() Экспорт
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных видов контактной информации.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформации() Экспорт
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.2.5.8.
Процедура ОбновитьПредопределенныеВидыКонтактнойИнформацииКонтрагентов() Экспорт
	
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.0.1.82
// Заполняет добавленный предопределенный вид контактной информации.
//
Процедура ЗаполнитьВидКонтактнойИнформацииМеждународныйАдрес() Экспорт
		
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 3.0.2.82
// Заполняет добавленный предопределенный вид контактной информации.
//
Процедура ЗаполнитьВидКонтактнойИнформацииВебСайтПартнера() Экспорт
	
КонецПроцедуры

// Тестовый обработчик, предназначенный для имитации ошибки при обновлении.
//
Процедура ОбработчикСОшибкой() Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеИБ", "ИмитироватьОшибкуПриОбновлении", , ИмяПользователя());
	Если ИмитироватьОшибку = Истина Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ",
			"ИмитироватьОшибкуПриОбновлении", Ложь, ИмяПользователя());
		ТекстСообщения = НСтр("ru = 'Процедура ОбработчикСОшибкой выполнилась с ошибкой.'");
		ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,,,
			ТекстСообщения);
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значения реквизитов предопределенных ключевых операций.
Процедура ОбновитьПредопределенныеКлючевыеОперации() Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("Справочник.КлючевыеОперации");
		ЭлементБлокировки.УстановитьЗначение("Имя", "");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		БлокировкаДанных.Заблокировать();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КлючевыеОперации.Ссылка,
		               |	КлючевыеОперации.ИмяПредопределенныхДанных
		               |ИЗ
		               |	Справочник.КлючевыеОперации КАК КлючевыеОперации
		               |ГДЕ
		               |	КлючевыеОперации.Имя = """"
		               |	И КлючевыеОперации.Предопределенный";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			КлючеваяОперация = Выборка.Ссылка.ПолучитьОбъект();
			КлючеваяОперация.Имя = Выборка.ИмяПредопределенныхДанных;
			КлючеваяОперация.Записать();
		КонецЦикла;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'ЗаписьПредопределенныхКлючевыхОпераций'", ОбщегоНазначения.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Примеры обработчиков отложенного обновления.

// Тестовый обработчик отложенного обновления для демонстрации нештатной ситуации.
//
Процедура ОтложенныйОбработчикСОшибкой(Параметры) Экспорт
	
	ИмитироватьОшибку = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбновлениеИБ", "ИмитироватьОшибкуПриОтложенномОбновлении", Ложь);
	Если Не ИмитироватьОшибку Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Свойство("КоличествоЗапусков") Тогда
		Параметры.Вставить("КоличествоЗапусков", 1);
	Иначе
		Параметры.КоличествоЗапусков = Параметры.КоличествоЗапусков + 1;
	КонецЕсли;
	
	Если Параметры.КоличествоЗапусков = 3 Тогда
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбновлениеИБ", "ИмитироватьОшибкуПриОтложенномОбновлении", Ложь);
	КонецЕсли;
	ВызватьИсключение НСтр("ru = 'Процедура ТестированиеОтложенногоОбновления завершилась с ошибкой.'");
	
КонецПроцедуры

// Вызывается при начальном заполнении.
Процедура ОбновитьПредопределенныйВидКонтактнойИнформации() Экспорт
	
КонецПроцедуры

// Выполняется при начальном заполнении. Актуализирует признак использования
// видов контактной информации справочника КонтактныхЛицПартнеров.
//
Процедура ОбновитьИспользованиеКонтактнойИнформацииКонтактныхЛицПартнеров() Экспорт
	
КонецПроцедуры

// Выполняется при начальном заполнении. Актуализирует признак использования
// наборов свойств справочника Внешние пользователи.
//
Процедура ОбновитьИспользованиеНаборовСвойствВнешнихПользователей() Экспорт
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ПолучитьФункциональнуюОпцию("ИспользоватьВнешнихПользователей");
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ВнешниеПользователи", ПараметрыНабора);
	
КонецПроцедуры

// Обновляет нумерацию видов контактной информации контрагентов.
Процедура УстановитьНазначенияРолейИсполнителей() Экспорт
	
КонецПроцедуры

// Выполняется для обновления видов контактной информации для версии БСП 2.3.2.4 и выше.
// Для юридического адреса организации устанавливает флаг ХранитьИсториюИзменений.
// Для сохранения обратной совместимости всех элементов с видом контактной информации Другое
// свойство МногострочноеПоле устанавливается в Истина.
//
Процедура НастроитьИсториюКонтактнойИнформацииИМногострочноеПоле() Экспорт
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек.
//
Процедура ПриОпределенииНастроек(Параметры) Экспорт
	
	Параметры.ПараметрыСообщенияОНевыполненныхОтложенныхОбработчиках.КартинкаСообщения = БиблиотекаКартинок.Ошибка32;
	Параметры.Вставить("МногопоточноеОбновление", Истина);
	Параметры.Вставить("КоличествоПотоковОбновленияИнформационнойБазыПоУмолчанию", 4);
	
КонецПроцедуры

// Выполняется при переходе на версию 3.0.2.100.
// .
//
Процедура СнятьПризнакПредопределенныйДляВидовКонтактнойИнформации() Экспорт
	
КонецПроцедуры	

// ++ rarus Чернавин Г.К 16.03.2020 № 20165
Процедура ЗаполнитьПредопределенныеЗначенияСправочникСсылки(Параметры = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СправочникОбъект = Справочники.рарусСправочникСсылок.ИнтервалМеждуРейсами.ПолучитьОбъект();
	СправочникОбъект.Значение = 48;
	СправочникОбъект.Записать();
	СправочникОбъект = Справочники.рарусСправочникСсылок.МинКоличествоСтрокАзов.ПолучитьОбъект();
	СправочникОбъект.Значение = 1;
	СправочникОбъект.Записать();
	СправочникОбъект = Справочники.рарусСправочникСсылок.МинКоличествоСтрокКЕК.ПолучитьОбъект();
	СправочникОбъект.Значение = 2;
	СправочникОбъект.Записать();
	СправочникОбъект = Справочники.рарусСправочникСсылок.МинКоличествоСтрокРостов.ПолучитьОбъект();
	СправочникОбъект.Значение = 1;
	СправочникОбъект.Записать();

КонецПроцедуры

// ++ rarus PleA 11.01.2021 [25899]
Процедура ЗаполнитьОсновноеСудно(Параметры = Неопределено) Экспорт
	
	Если Не ЭтоУзелСудно() тогда		
		Возврат;
	КонецЕсли;
	
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	Если ЗначениеЗаполнено(ОсновноеСудно) тогда
		vftОбщегоНазначения.УстановитьОсновноеСудно(ОсновноеСудно);		
	Иначе
		vftОбщегоНазначения.УстановитьОсновноеСудно();
	КонецЕсли;	
			
КонецПроцедуры	
// -- rarus PleA

// ++ rarus PleA 03.03.2021 
Процедура ПеренумероватьДокументыСУБ(Параметры = Неопределено) Экспорт
	
	ДокументыДляПеренумерации = Новый Массив;
	ДокументыДляПеренумерации.Добавить("vftСообщениеОПотенциальномИнциденте");
	ДокументыДляПеренумерации.Добавить("vftАнализСУБ");
	ДокументыДляПеренумерации.Добавить("vftДокладОСостоянииБезопасности");
	
	Если ЭтоУзелСудно() тогда
		
		Для Каждого ИмяДокумента Из ДокументыДляПеренумерации цикл
		 
			ПеренумероватьДокументСУБ(ИмяДокумента);
		
		КонецЦикла;
	Иначе
		ЗаписьЖурналаРегистрации("Перенумерация", УровеньЖурналаРегистрации.Информация, , , "В центре перенумерация не выполняется");	
	КонецЕсли;

КонецПроцедуры

Процедура ПеренумероватьДокументСУБ(ИмяДокумента)		
	
	Если Метаданные.Документы[ИмяДокумента].ДлинаНомера <> 19 тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоГода2021", Дата(2021,1,1));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.Номер КАК Номер,
	|	Т.Дата КАК Дата
	|ИЗ
	|	Документ.ИмяДокумента КАК Т
	|ГДЕ
	|	Т.Дата >= &НачалоГода2021
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИмяДокумента", ИмяДокумента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НадоПеренумеровывать = Ложь;
	Пока Выборка.Следующий() Цикл
	
		НомерДляПроверки = СокрЛП(Выборка.Номер);
		Если СтрДлина(НомерДляПроверки) < 19 Тогда
		
			НадоПеренумеровывать = Истина;
			Прервать;
		
		КонецЕсли;
	
	КонецЦикла; 
	
	Если Не НадоПеренумеровывать Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Выборка.Сбросить();
	Номер = 1;
	ОсновноеСудно = Константы.рарусОсновноеСудно.Получить();
	
	Пока Выборка.Следующий() Цикл 
		
		Номер19 = Формат(Номер,"ЧЦ=19; ЧВН=; ЧГ=0");
		
		ЗаписатьДокумент = Ложь;
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.Судно) И ЗначениеЗаполнено(ОсновноеСудно) Тогда
		
			ДокументОбъект.Судно = ОсновноеСудно;
			ЗаписатьДокумент = Истина;
		
		КонецЕсли; 
		
		Префикс = ДокументОбъект.СформироватьПрефиксНомераДокумента();
		
		ПрефиксНомер = СтрШаблон("%1%2", Префикс, Сред(Номер19, СтрДлина(Префикс)+1));
		
		ЛогСтрока = СтрШаблон("документ: %1, номер: %2, длина: %3", Выборка.Ссылка, ПрефиксНомер, СтрДлина(ПрефиксНомер));				
		ЗаписьЖурналаРегистрации("Перенумерация", УровеньЖурналаРегистрации.Информация, , ДокументОбъект, ЛогСтрока);
		
		БылНомер = ДокументОбъект.Номер;
		Если БылНомер <> ПрефиксНомер Тогда
		
			ДокументОбъект.Номер = ПрефиксНомер;
			ЗаписатьДокумент = Истина;
		
		КонецЕсли; 
		
		Если ЗаписатьДокумент Тогда
		
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		
		КонецЕсли; 
		
		Номер = Номер + 1;	
		
	КонецЦикла;

КонецПроцедуры 

Функция ЭтоУзелСудно()
	
	Возврат ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ();
		
КонецФункции

Процедура УстановитьВерсиюКонфигурацииСудна(Параметры = Неопределено) Экспорт
	
	рарусОбщегоНазначенияСервер.УстановитьВерсиюКонфигурацииСудна();
	
КонецПроцедуры
// -- rarus PleA

// ++ rarus PleA 04.03.2021 
Процедура ОбновитьСоставПользователейСудна(Параметры = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоУзелСудно() тогда
		
		Если рарусОбщегоНазначенияСервер.ИспользоватьСудовоеСнабжение() тогда
			
			МассивСозданныхПользователей = рарусОбщегоНазначенияСервер.ВыполнитьОбновлениеСоставаПользователейСудна();
			
			Если МассивСозданныхПользователей.Количество() тогда
				ЗаблокироватьРаботуПользователяVFT(МассивСозданныхПользователей);
			КонецЕсли;
			
		Иначе
			
			ПроверитьНаличиеНеКорректныхПользователейИЗаблокировать();
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаблокироватьРаботуПользователяVFT(МассивСозданныхПользователей)
	
	ПользователиДляБлокировки = ПользователиСудна();
	
	Для Каждого Пользователь Из ПользователиДляБлокировки цикл
		
		Если МассивСозданныхПользователей.Найти(Пользователь) = Неопределено тогда
			
			ОтключитьПользователя(Пользователь);
			
		КонецЕсли;	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтключитьПользователя(Пользователь)
	
	Если Пользователь.Недействителен = Ложь тогда
		
		ПользовательОбъект = Пользователь.ПолучитьОбъект();
		ПользовательОбъект.Недействителен = Истина;
		ПользовательОбъект.Записать();
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательОбъект.ИдентификаторПользователяИБ);
		ПользовательИБ.АутентификацияСтандартная = Ложь;
		ПользовательИБ.Записать();
		
		ЗаписьЖурналаРегистрации("Пользователи.Отключение", УровеньЖурналаРегистрации.Информация, , , СтрШаблон("Отключен пользователь %1", Пользователь));
		
	КонецЕсли;

КонецПроцедуры	

Функция ПользователиСудна() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	vftСуда.Ссылка КАК Судно,
	|	Пользователи.Ссылка КАК Пользователь
	|ИЗ
	|	РегистрСведений.vftНастройкиПользователей КАК vftНастройкиПользователей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.vftСуда КАК vftСуда
	|		ПО vftНастройкиПользователей.Судно = vftСуда.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|			ПО Пользователи.Ссылка = ГруппыПользователейСостав.Пользователь
	|		ПО vftНастройкиПользователей.Пользователь = Пользователи.Наименование
	|			И (vftНастройкиПользователей.Пользователь <> """")
	|ГДЕ
	|	ГруппыПользователейСостав.Ссылка ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Возврат Выборка;
	
КонецФункции

Процедура ПроверитьНаличиеНекорректныхПользователейИЗаблокировать() Экспорт
	
	ПользователиСуднаVFT = ПользователиСудна();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПользователиСуднаVFT", ПользователиСуднаVFT); 
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
	|		ПО Пользователи.Ссылка = ГруппыПользователейСостав.Пользователь
	|ГДЕ
	|	ГруппыПользователейСостав.Ссылка ЕСТЬ NULL
	|	И Пользователи.Подразделение <> ЗНАЧЕНИЕ(Справочник.vftПодразделенияКомпании.ПустаяСсылка)
	|	И Пользователи.Недействителен = ЛОЖЬ
	|	И НЕ Пользователи.Ссылка В (&ПользователиСуднаVFT)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		ОтключитьПользователя(Выборка.Ссылка);	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьКонстантыТОИР(Параметры = Неопределено) Экспорт

	Если Константы.рарусПроцентВремениДоСледующейРаботыППР.Получить() = 0 Тогда
		// Значение по умолчанию 80
		Константы.рарусПроцентВремениДоСледующейРаботыППР.Установить(80);
	КонецЕсли;

КонецПроцедуры

// -- rarus PleA

// ++ rarus yukuzi 31.01.2021   //ФТ.СНБ.02. Задача_Штрихкодирование
Процедура ОбновлениеБПО()Экспорт
	МенеджерОборудованияВызовСервераПереопределяемый.ОбновлениеБиблиотеки(); 
КонецПроцедуры

// ++ rarus zalikh 2021-06-30 [28551]
Процедура УстановитьКонстантуИспользоватьАнкетирование(Параметры = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ЭтоУзелСудно() Тогда
		ПризнакИспользованияСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ", Параметры);
		Константы.ИспользоватьАнкетирование.Установить(ПризнакИспользованияСУБ);			
	КонецЕсли;
	
КонецПроцедуры

// ++ rarus yukuzi 15.07.2021   //
Процедура ЗарегистрироватьБереговыеСлужбы(Параметры = Неопределено) Экспорт
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусБереговыеСлужбы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.рарусБереговыеСлужбы КАК рарусБереговыеСлужбы
		|ГДЕ
		|	рарусБереговыеСлужбы.Предопределенный";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Источник=ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Источник.Записать();
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры
// -- rarus yukuzi 15.07.2021

// ++ rarus yukuzi 14.10.2021   //  //внедрение виджетов
Процедура ЗарегистрироватьПоказателиВиджетов(Параметры = Неопределено) Экспорт
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() тогда
		рарусОбменДаннымиСервер.ЗарегистрироватьПоказателиВиджетов();	
	КонецЕсли;
КонецПроцедуры
// -- rarus yukuzi 14.10.2021
// ++ rarus yukuzi 18.10.2021   //
Процедура ЗарегистрироватьВиджеты(Параметры = Неопределено) Экспорт
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() тогда
		УзлыРИБ = СтандартныеПодсистемыПовтИсп.УзлыРИБ();
		МассивУзлов = УзлыРИБ.ВыгрузитьЗначения();
		ПланыОбмена.ЗарегистрироватьИзменения(МассивУзлов , Метаданные.Справочники.рарусВиджеты);
	КонецЕсли;
КонецПроцедуры

// -- rarus yukuzi 18.10.2021


// ++ rarus yukuzi 20.07.2021   //
Процедура РаспределениеПользователейПоГруппамЦБ(Параметры = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	vftПодразделенияКомпании.Ссылка КАК Подразделение,
		|	vftПодразделенияКомпании.Судно КАК Судно
		|ПОМЕСТИТЬ ВТ_Подразделение
		|ИЗ
		|	Справочник.vftПодразделенияКомпании КАК vftПодразделенияКомпании
		|ГДЕ
		|	НЕ vftПодразделенияКомпании.Судно = ЗНАЧЕНИЕ(Справочник.vftСуда.ПустаяСсылка)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Подразделение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь,
		|	ВТ_Подразделение.Судно КАК Судно
		|ПОМЕСТИТЬ ВТ_Пользователи
		|ИЗ
		|	ВТ_Подразделение КАК ВТ_Подразделение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО Пользователи.Подразделение = ВТ_Подразделение.Подразделение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь,
		|	Судно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	рарусНастройкиФункционалаТОИРСрезПоследних.Судно КАК Судно
		|ПОМЕСТИТЬ втСудаССудовымСнабжением
		|ИЗ
		|	РегистрСведений.рарусНастройкиФункционалаТОИР.СрезПоследних(&ДатаСреза, ) КАК рарусНастройкиФункционалаТОИРСрезПоследних
		|ГДЕ
		|	рарусНастройкиФункционалаТОИРСрезПоследних.ИспользоватьСудовоеСнабжение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Судно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	рарусПрименимостьГруппПользователей.ГруппаПользователей КАК ГруппаПользователей,
		|	рарусПрименимостьГруппПользователей.Судно КАК Судно
		|ПОМЕСТИТЬ ВТ_группыПользователейПрименимыеПоРС
		|ИЗ
		|	РегистрСведений.рарусПрименимостьГруппПользователей КАК рарусПрименимостьГруппПользователей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ПО рарусПрименимостьГруппПользователей.ГруппаПользователей = ГруппыПользователейСостав.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСудаССудовымСнабжением КАК втСудаССудовымСнабжением
		|		ПО рарусПрименимостьГруппПользователей.Судно = втСудаССудовымСнабжением.Судно
		|
		|СГРУППИРОВАТЬ ПО
		|	рарусПрименимостьГруппПользователей.ГруппаПользователей,
		|	рарусПрименимостьГруппПользователей.Судно
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ГруппаПользователей,
		|	Судно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Пользователи.Пользователь КАК Пользователь,
		|	ВТ_Пользователи.Судно КАК Судно,
		|	ЕСТЬNULL(ГруппыПользователейСостав.Ссылка, ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)) КАК Группа
		|ПОМЕСТИТЬ втПользователиСГруппой
		|ИЗ
		|	ВТ_Пользователи КАК ВТ_Пользователи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|		ПО ВТ_Пользователи.Пользователь = ГруппыПользователейСостав.Пользователь
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Пользователь,
		|	Судно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_группыПользователейПрименимыеПоРС.ГруппаПользователей КАК ГруппаПользователей,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_группыПользователейПрименимыеПоРС.ГруппаПользователей) КАК ГруппаПользователейПредставление,
		|	ВТ_группыПользователейПрименимыеПоРС.Судно КАК Судно,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_группыПользователейПрименимыеПоРС.Судно) КАК СудноПредставление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втПользователиСГруппой.Пользователь) КАК Пользователь
		|ИЗ
		|	ВТ_группыПользователейПрименимыеПоРС КАК ВТ_группыПользователейПрименимыеПоРС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПользователиСГруппой КАК втПользователиСГруппой
		|		ПО ВТ_группыПользователейПрименимыеПоРС.ГруппаПользователей = втПользователиСГруппой.Группа
		|			И ВТ_группыПользователейПрименимыеПоРС.Судно = втПользователиСГруппой.Судно
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_группыПользователейПрименимыеПоРС.ГруппаПользователей,
		|	ВТ_группыПользователейПрименимыеПоРС.Судно
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втПользователиСГруппой.Пользователь) = 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПользователиСГруппой.Пользователь КАК Пользователь,
		|	ПРЕДСТАВЛЕНИЕ(втПользователиСГруппой.Пользователь) КАК ПользовательПредставление,
		|	втПользователиСГруппой.Судно КАК Судно,
		|	втПользователиСГруппой.Группа КАК Группа
		|ИЗ
		|	втПользователиСГруппой КАК втПользователиСГруппой
		|ГДЕ
		|	втПользователиСГруппой.Группа = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("ДатаСреза", ТекущаяДата());
		ПакетРезультатов=Запрос.ВыполнитьПакет();
		
		ВыборкаПустыхГрупп = ПакетРезультатов[5].Выбрать();
		ТаблицаПользователейБезГрупп= ПакетРезультатов[6].Выгрузить();
		Пока ВыборкаПустыхГрупп.Следующий() Цикл 
			ИмяПользователяДляПоиска = СтрШаблон("%1 (%2)", ВыборкаПустыхГрупп.ГруппаПользователейПредставление, ВыборкаПустыхГрупп.СудноПредставление);
			НайденнаяСтрока = ТаблицаПользователейБезГрупп.Найти(ИмяПользователяДляПоиска, "ПользовательПредставление"); 
			
			Если не НайденнаяСтрока=неопределено  тогда
				ГруппаПриемникОбъект = ВыборкаПустыхГрупп.ГруппаПользователей.ПолучитьОбъект();
				ГруппаПриемникОбъект.ОбменДанными.Загрузка=Истина;
				ГруппаПриемникОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Истина) ;
				СтрокаСостава = ГруппаПриемникОбъект.Состав.Добавить();
				СтрокаСостава.Пользователь = НайденнаяСтрока.Пользователь;
				ГруппаПриемникОбъект.Записать();
				ГруппаПриемникОбъект.ДополнительныеСвойства.Удалить("ОтключитьМеханизмРегистрацииОбъектов"); 
			КонецЕсли;
			
			
			
		КонецЦикла;
		
		
	КонецЕсли;

КонецПроцедуры
// -- rarus yukuzi 20.07.2021

// ++ rarus ilshil 22.07.2021
Процедура ЗаполнитьРеквизитВладелецЗамечанияСтарымЗначением(Параметры = Неопределено) Экспорт
		
	Если ЭтоУзелСудно() Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Несоответствия.Ссылка КАК Ссылка,
		|	Несоответствия.Владелец КАК Владелец
		|ИЗ
		|	Справочник.vftНесоответствия КАК Несоответствия
		|ГДЕ
		|	Несоответствия.ВладелецЗамечания В (ЗНАЧЕНИЕ(Документ.рарусМероприятиеСУБ.пустаяСсылка), ЗНАЧЕНИЕ(Справочник.vftНесоответствия.пустаяСсылка))
		|	И Не Несоответствия.Владелец.Ссылка ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Несоответствия.Ссылка,
		|	Несоответствия.Владелец
		|ИЗ
		|	Справочник.vftНесоответствия КАК Несоответствия
		|ГДЕ
		|	Несоответствия.ВладелецЗамечания.Ссылка ЕСТЬ NULL
		|	И Не Несоответствия.Владелец.Ссылка ЕСТЬ NULL";
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();			
			Пока Выборка.Следующий() Цикл
				
				ЗамечаниеОбъект = Выборка.Ссылка.ПолучитьОбъект();	
				ЗамечаниеОбъект.ВладелецЗамечания = Выборка.Владелец;		
				ЗамечаниеОбъект.ОбменДанными.Загрузка = Истина;
				ЗамечаниеОбъект.Записать();
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры
// -- rarus zalikh 2021-06-30 [28551]

&НаСервере
Процедура ЗаполнитьДокладыОСостоянииБезопасностиСоставСудовогоКомитета(Параметры = Неопределено) Экспорт
	
	Если НЕ ЭтоУзелСудно() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Метаданные.Документы.vftДокладОСостоянииБезопасности.ТабличныеЧасти.Найти("СоставСудовогоКомитета") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	// выбираем документы с незаполненной табличной частью
	Запрос.Текст = "ВЫБРАТЬ
	               |	vftДокладОСостоянииБезопасности.Ссылка КАК Ссылка,
	               |	vftДокладОСостоянииБезопасности.Председатель КАК Председатель,
	               |	vftДокладОСостоянииБезопасности.ОфицерПоБезопасности КАК ОфицерПоБезопасности,
	               |	vftДокладОСостоянииБезопасности.СПКМ КАК СПКМ,
	               |	vftДокладОСостоянииБезопасности.СМХ КАК СМХ,
	               |	vftДокладОСостоянииБезопасности.ПредставительМоряков КАК ПредставительМоряков,
	               |	vftДокладОСостоянииБезопасности.ПредставительРядовогоСостава КАК ПредставительРядовогоСостава
	               |ИЗ
	               |	Документ.vftДокладОСостоянииБезопасности КАК vftДокладОСостоянииБезопасности";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = ДокументОбъект.ЗаполнитьСоставСудовогоКомитета(Выборка);
		Если ЕстьИзменения Тогда
		
			ДокументОбъект.ОбменДанными.Загрузка = Истина;
			ДокументОбъект.Записать();
		
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКодУстраненияЗамечанияНесоответствия(Параметры = Неопределено) Экспорт
	
	Если НЕ ЭтоУзелСудно() Тогда 
		Возврат;
	КонецЕсли;	
	
	Если Метаданные.Справочники.vftНесоответствия.Реквизиты.Найти("КодУстраненияЗамечания") = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	// выбираем документы с незаполненным КодУстраненияЗамечания
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	vftНесоответствия.Ссылка КАК Ссылка,
	               |	ПОДСТРОКА(vftНесоответствия.КодНесоответствия, 1, 10) КАК КодНесоответствия,
	               |	рарусКлассификаторыКодовУстраненияЗамечаний.Ссылка КАК КодУстраненияЗамечания
	               |ИЗ
	               |	Справочник.vftНесоответствия КАК vftНесоответствия
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рарусКлассификаторыКодовУстраненияЗамечаний КАК рарусКлассификаторыКодовУстраненияЗамечаний
	               |		ПО (ПОДСТРОКА(vftНесоответствия.КодНесоответствия, 1, 10) = рарусКлассификаторыКодовУстраненияЗамечаний.КодНесоответствия)
	               |			И (рарусКлассификаторыКодовУстраненияЗамечаний.ПроверкаPSCFSC)
	               |			И (НЕ рарусКлассификаторыКодовУстраненияЗамечаний.ПометкаУдаления)
	               |ГДЕ
	               |	ПОДСТРОКА(vftНесоответствия.КодНесоответствия, 1, 10) <> """"
	               |	И vftНесоответствия.КодУстраненияЗамечания = ЗНАЧЕНИЕ(Справочник.рарусКлассификаторыКодовУстраненияЗамечаний.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.КодУстраненияЗамечания = Выборка.КодУстраненияЗамечания;
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти