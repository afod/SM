// Процедура записывает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки
//  Значение     - значение настройки
//  Пользователь - СправочникСсылка.Пользователи - текущий пользователь программы, для которого устанавливается настройка
//
// Возвращаемое значение:
//  Нет
//
Процедура УстановитьЗначениеПоУмолчанию(Настройка, Значение, Пользователь = Неопределено) Экспорт

	Если ВРег(Настройка) = ВРег("ОсновноеСудно")
		Тогда
		
		ТекущаяНастройка = ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);
		
		ХранилищеОбщихНастроек.Сохранить(ВРег(Настройка),, Значение,, Пользователь);

	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПоУмолчанию()

Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт
	
	Возврат vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);
	
КонецФункции

&НаСервере
Функция ПолучитьВремяИзМинут(Количество) Экспорт
	Возврат vftОбщегоНазначенияКлиентСервер.ПолучитьВремяИзМинут(Количество);
КонецФункции

//++rarus markim
&НаСервере
Функция ВыполнитьПервоначальноеЗаполнениеИнформационнойБазы() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЭтоГлавныйУзел = ЭтоГлавныйУзел();
	УстановитьПривилегированныйРежим(Ложь);
	vftОбщегоНазначения.ВыполнитьПервоначальноеЗаполнениеИнформационнойБазы(ЭтоГлавныйУзел); 
//--rarus markim	
КонецФункции

&НаСервере
Функция СоздатьПервогоАдминистратора() Экспорт
	// Добавление администратора (администратор системы - полные права).
	УчетнаяЗапись = Неопределено;	
	Если УчетнаяЗапись = Неопределено Тогда
		// Если существует пользователь с правом администрирование,
		// тогда первый администратор уже создан и его не требуется создавать.
		УчетнаяЗапись = Неопределено;
		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		Если УчетнаяЗапись = Неопределено Тогда
			УчетнаяЗапись = ПользователиИнформационнойБазы.СоздатьПользователя();
			УчетнаяЗапись.Имя       = "Администратор";
			УчетнаяЗапись.ПолноеИмя = УчетнаяЗапись.Имя;
			УчетнаяЗапись.Роли.Очистить();
			УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
			РольАдминистратораСистемы = Метаданные.Роли.АдминистраторСистемы;
			Если НЕ УчетнаяЗапись.Роли.Содержит(РольАдминистратораСистемы) Тогда
				УчетнаяЗапись.Роли.Добавить(РольАдминистратораСистемы);
			КонецЕсли;
			УчетнаяЗапись.Записать();
		КонецЕсли;
	КонецЕсли;

	Пользователь = Справочники.Пользователи.НайтиПоНаименованию(УчетнаяЗапись.ПолноеИмя);
		Если ЗначениеЗаполнено(Пользователь)
		   И ЗначениеЗаполнено(Пользователь.ИдентификаторПользователяИБ)
		   И Пользователь.ИдентификаторПользователяИБ <> УчетнаяЗапись.УникальныйИдентификатор
		   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Пользователь.ИдентификаторПользователяИБ) <> Неопределено Тогда
			Пользователь = Неопределено;
		КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		ПользовательСоздан = Истина;
	Иначе
		Пользователь = Пользователь.ПолучитьОбъект();
		ПользовательСоздан = Ложь;
	КонецЕсли;
	Пользователь.ИдентификаторПользователяИБ = УчетнаяЗапись.УникальныйИдентификатор;
	Пользователь.Наименование = УчетнаяЗапись.ПолноеИмя;
	Пользователь.ОбменДанными.Загрузка = Истина;
	Пользователь.Записать();
	Если ПользовательСоздан Тогда
		ПользователиСлужебный.ОбновитьСоставыГруппПользователей(Справочники.ГруппыПользователей.ВсеПользователи);
	КонецЕсли;
//++rarus markim
	Возврат Истина;
//--rarus markim
КонецФункции

//++rarus markim
&НаСервере
Функция ПроверитьРолиПользователей() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	ЭтоГлавныйУзел = ЭтоГлавныйУзел();
	Если НЕ ЭтоГлавныйУзел Тогда
		//--rarus markim
		ИмяПользователя = vftОбщегоНазначения.ПолучитьИмяСуднаБазы();
		Если ИмяПользователя="" Тогда
			Возврат Неопределено;	
		КонецЕсли;
		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПользовательИБ.Имя = ИмяПользователя Тогда
				НеобходимоОбновлениеРолей = Ложь;
				МассивРолейПользователяСудна = vftОбщегоНазначения.ПолучитьМассивРолейПользователяСудна();
				
				Для каждого РольИзМассива Из МассивРолейПользователяСудна Цикл
					Если ПользовательИБ.Роли.Содержит(РольИзМассива) Тогда
						Продолжить;
					Иначе
						НеобходимоОбновлениеРолей = Истина;
						ПользовательИБ.Роли.Добавить(РольИзМассива);
					КонецЕсли; 	
				КонецЦикла; 
				
				Если НеобходимоОбновлениеРолей Тогда
					ПользовательИБ.Записать();
					Возврат Ложь;
				Иначе
					Возврат Истина;
				КонецЕсли; 
			КонецЕсли; 
			
		КонецЦикла;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция РольДоступнаНаСервере(ИмяРоли) Экспорт
	Возврат РольДоступна(ИмяРоли);
КонецФункции
 
&НаСервере
Процедура ПроверитьПаролиПользователей() Экспорт
	vftОбщегоНазначенияКлиентСервер.ПроверитьПаролиПользователей();	
КонецПроцедуры

//++rarus markim
// Формирует фамилию и инициалы либо по наименованию элемента справочника ФизическиеЛица,
// либо по переданным строкам.
// Если передан Объект, то извлеченная из него строка считается совокупностью 
// Фамилия + Имя + Отчество, разделенными пробелами.
//
// Параметры
//  ОбъектИлиСтрока - строка, ссылка или объект элемента справочника ФизическиеЛица.
//  Фамилия		    - фамилия физического лица.
//  Имя		        - имя физического лица.
//  Отчество	    - отчество физического лица.
//
// Возвращаемое значение 
//  Строка - фамилия и инициалы одной строкой. 
//  В параметрах Фамилия, Имя и Отчество записываются вычисленные части.
//
// Пример:
//  Результат = ФамилияИнициалыФизЛица("Иванов Иван Иванович"); // Результат = "Иванов И. И."
//
Функция ФамилияИнициалыФизЛица(ОбъектИлиСтрока = "", Фамилия = " ", Имя = " ", Отчество = " ") Экспорт

	ТипОбъекта = ТипЗнч(ОбъектИлиСтрока);
	Если ТипОбъекта = Тип("Строка") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ОбъектИлиСтрока), " ");
	ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.ФизическиеЛица") Или ТипОбъекта = Тип("СправочникОбъект.ФизическиеЛица") Тогда
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ОбъектИлиСтрока.Наименование), " ");
	Иначе
		// используем возможно переданные отдельные строки
		Возврат ?(Не ПустаяСтрока(Фамилия), 
		          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество,1) + ".", ""), ""),
		          "")
	КонецЕсли;
	
	КоличествоПодстрок = ФИО.Количество();
	Фамилия            = ?(КоличествоПодстрок > 0, ФИО[0], "");
	Имя                = ?(КоличествоПодстрок > 1, ФИО[1], "");
	Отчество           = ?(КоличествоПодстрок > 2, ФИО[2], "");
	
	Возврат ?(Не ПустаяСтрока(Фамилия), 
	          Фамилия + ?(Не ПустаяСтрока(Имя), " " + Лев(Имя,1) + "." + ?(Не ПустаяСтрока(Отчество), Лев(Отчество, 1) + ".", ""), ""),
	          "");
	
КонецФункции

// Функция ЭтоПолноправныйПользовательИБ проверяет,
// является ли полноправным текущий пользователь ИБ или
// пользователь ИБ заданного пользователя (обычного или внешнего).
//
//  Полноправными считается:
// а) пользователь ИБ при пустом списке пользователей ИБ,
//    если основная роль не задана или ПолныеПрава,
// б) пользователь ИБ с ролью ПолныеПрава.
//
//
// Параметры:
//  Пользователь - Неопределено (проверяется текущий пользователь ИБ),
//                 Справочник.Пользователи, Справочник.ВнешниеПользователи
//                 (осуществляется поиск пользователя ИБ по уникальному
//                  идентификатору, заданному в реквизите ИдентификаторПользователяИБ,
//                  если пользователь ИБ не найден, возвращается Ложь).
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПолноправныйПользовательИБ(Пользователь = Неопределено
	// -- rarus kloa 01.03.2018 
	, ДляПроверкиОбновления = Ложь
	// -- rarus kloa 01.03.2018 
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Пользователь) И Пользователь <> Пользователи.АвторизованныйПользователь() Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
		Если ПользовательИБ = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		ПользовательИБ = ПользователиИнформационнойБазы.ТекущийПользователь();
	КонецЕсли;
	
	Если ПользовательИБ.УникальныйИдентификатор = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор Тогда
		
		Если ЗначениеЗаполнено(ПользовательИБ.Имя) Тогда
			// ++ rarus kloa 01.03.2018  
			Если ДляПроверкиОбновления Тогда
				Возврат РольДоступна("vftПользователь");
			КонецЕсли; 
			// -- rarus kloa 01.03.2018 
			Возврат РольДоступна("ПолныеПрава") ИЛИ ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор).Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		Иначе
			// Авторизован пустой пользователь - список пользователей пуст,
			// если основная роль пустая - все права разрешены.
			// rarus_KloA_29.07.2014 < Не работает при отключенном режиме совместимости
			
			Если Метаданные.ОсновныеРоли.Количество()=0 
				ИЛИ Метаданные.ОсновныеРоли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
	КонецЕсли;
	
КонецФункции

Функция ЭтоГлавныйУзел() Экспорт // exp ++ rarus makole 2021-03-30
	Возврат НЕ ПланыОбмена.ГлавныйУзел() <> Неопределено;
КонецФункции
//--rarus markim

// ++ rarus Камаев П.В. 24.07.2020 Задача № 22963
Процедура ОбработкаДублейПриЗапуске() Экспорт
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ФоновыеЗадания.Выполнить("рарусРегламентныеЗадания.ОбработкаДублей",, новый УникальныйИдентификатор, "Обработка дублей.");
	
КонецПроцедуры
// -- rarus Камаев П.В. 24.07.2020
//--rarus markim

// ++ rarus PleA 11.01.2021 [25899]

Процедура УстановитьОсновноеСудно(Судно = Неопределено) Экспорт
	
	vftОбщегоНазначения.УстановитьОсновноеСудно(Судно);	
	
КонецПроцедуры	

Функция ПолучитьОсновноеСудно() Экспорт
	
	vftОбщегоНазначения.ПолучитьОсновноеСудно();
	
КонецФункции	
// -- rarus PleA

// ++ rarus yukuzi 18.10.2021   //
//Процедура РазместитьИнфопанельНаНачальнойСтранице() Экспорт
//	Судно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
//	
//	Если ЗначениеЗаполнено(Судно) тогда
//		ПараметрыФО= Новый Структура("Период, Судно", ТекущаяДата(), Судно);
//		
//		Если ПолучитьФункциональнуюОпцию("рарусРазмещатьИнфоокнаНаНачальнойСтранице", ПараметрыФО) Тогда 
//			НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
//			СоставФорм = Новый СоставФормНачальнойСтраницы;
//			СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ИнформационнаяПанель"); 
//			НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
//			// Кладем объект настроек текущему пользователю.
//			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",,НастройкиНачальнойСтраницы);
//						
//		КонецЕсли;
//		
//	КонецЕсли;

//КонецПроцедуры

// -- rarus yukuzi 18.10.2021
// ++ rarus yukuzi 21.10.2021   //
Функция РазместитьИнфопанельНаНачальнойСтранице() Экспорт
	ИзмененаНастройка=Ложь;
	Судно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	Если ЗначениеЗаполнено(Судно) тогда
		ПараметрыФО= Новый Структура("Период, Судно", ТекущаяДата(), Судно);
		
		Если ПолучитьФункциональнуюОпцию("рарусРазмещатьИнфоокнаНаНачальнойСтранице", ПараметрыФО) Тогда 
			НастройкиНачальнойСтраницы = Новый НастройкиНачальнойСтраницы;
			СоставФорм = Новый СоставФормНачальнойСтраницы;
			СоставФорм.ЛеваяКолонка.Добавить("ОбщаяФорма.ИнформационнаяПанель"); 
			НастройкиНачальнойСтраницы.УстановитьСоставФорм(СоставФорм);
			// Кладем объект настроек текущему пользователю.
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиНачальнойСтраницы",,НастройкиНачальнойСтраницы);
			ИзмененаНастройка=Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	Возврат ИзмененаНастройка;
КонецФункции

// -- rarus yukuzi 21.10.2021
