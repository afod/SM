// Функция возвращает значение по умолчанию для передаваемого пользователя и настройки.
//
// Параметры:
//  Настройка    - Строка - вид настройки, значение по умолчанию которой необходимо получить
//  Пользователь - СправочникСсылка.Пользователи - пользователь программы, настройка которого
//				   запрашивается, если параметр не передается настройка возвращается для текущего пользователя
//
// Возвращаемое значение:
//  Значение по умолчанию для настройки.
//
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт

	НастройкаВРег = ВРег(Настройка);
	НастройкаТипаСсылка = Ложь;

	// ++ rarus PleA 11.01.2021 [25899]
	Если НастройкаВРег = ВРег("ОсновноеСудно") Тогда
		
		ОсновноеСудно = ПолучитьОсновноеСудно();
		
		Если ЗначениеЗаполнено(ОсновноеСудно) тогда
			Возврат ОсновноеСудно;
		КонецЕсли;	
		
	КонецЕсли;	
	// -- rarus PleA
	
	Если НастройкаВРег = ВРег("ОсновноеСудно") Тогда
		ПустоеЗначение = Справочники.vftСуда.ПустаяСсылка();
		ИмяОбъекта = "Справочник.vftСуда";
		НастройкаТипаСсылка = Истина;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеНастройки = ХранилищеОбщихНастроек.Загрузить(НастройкаВРег,,, Пользователь);

	Если ТипЗнч(ЗначениеНастройки) = ТипЗнч(ПустоеЗначение) Тогда
		Если НастройкаТипаСсылка Тогда
			Если НЕ ОбщегоНазначения.СсылкаСуществует(ЗначениеНастройки) Тогда
				ЗначениеНастройки = ПустоеЗначение;
			Иначе
				Запроc = Новый Запрос;
				Запроc.УстановитьПараметр("Ссылка", ЗначениеНастройки);
				Запроc.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	ЗначенияОбъекта.Ссылка
				|ИЗ
				|	" + ИмяОбъекта + " КАК ЗначенияОбъекта
				|ГДЕ
				|	ЗначенияОбъекта.Ссылка = &Ссылка";
				Результат = Запроc.Выполнить();
				Если Результат.Пустой() Тогда
					ЗначениеНастройки = ПустоеЗначение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ЗначениеНастройки = ПустоеЗначение;
	КонецЕсли;
	
	Возврат ?(ЗначениеНастройки = Неопределено, ПустоеЗначение, ЗначениеНастройки);
	
КонецФункции // ПолучитьЗначениеПоУмолчанию()

Процедура УдалитьНеЗаполненныеЭлементыМассива(МассивЭлементов) Экспорт

	Колво = МассивЭлементов.Количество();
	Для н=1 По Колво Цикл
		Если НЕ ЗначениеЗаполнено(МассивЭлементов[Колво-н]) Тогда
			МассивЭлементов.Удалить(Колво-н);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Удаляет повторяющиеся значения из массива
//
// Параметры:
//	Массив
//
Процедура УдалитьПовторяющиесяЭлементы(Массив) Экспорт
	
	Если ТипЗнч(Массив) = Тип("Массив") Тогда
		
		// Удалим повторы
		Инд=0;
		КолВо = Массив.Количество();
		
		Пока Инд<КолВо Цикл
			
			Инд2 = Инд+1;
			Пока Инд2<КолВо Цикл
				
				Если Массив[Инд2] = Массив[Инд] Тогда
					Массив.Удалить(Инд2);
					КолВо = КолВо-1;
				Иначе
					Инд2 = Инд2+1;
				КонецЕсли;
				
			КонецЦикла; 
			
			//Установим для не заполненных значений тип "Неопределено"
			Если НЕ ЗначениеЗаполнено(Массив[Инд]) Тогда
				Массив[Инд] = Неопределено;
			КонецЕсли;

			Инд = Инд+1;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

//++rarus markim
&НаСервере
Функция ВыполнитьПервоначальноеЗаполнениеИнформационнойБазы(ЭтоГлавныйУзел) Экспорт

	Если НЕ ЭтоГлавныйУзел Тогда
//--rarus markim		
		//создадим пользователя 
		УчетнаяЗаписьПользователя = Неопределено;
		Для каждого ПользовательИБ Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
			Если ПользовательИБ.Роли.Содержит(Метаданные.Роли.vftПользователь) Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЦикла;
		
		Если УчетнаяЗаписьПользователя = Неопределено  Тогда 
			//значит это первый запуск, и надо очистить всю пришедшую регистрацию
			
			
			//а потом создать пользователя
			ИмяПользователя = ПолучитьИмяСуднаБазы();
			Если ИмяПользователя="" Тогда
				Возврат Неопределено;	
			КонецЕсли; 
			УчетнаяЗапись = ПользователиИнформационнойБазы.СоздатьПользователя();
			УчетнаяЗапись.Имя       = ИмяПользователя;
			УчетнаяЗапись.ПолноеИмя = УчетнаяЗапись.Имя;
			УчетнаяЗапись.Роли.Очистить();
			// ++ rarus kloa 07.09.2017  
			МассивРолейПользователяСудна = ПолучитьМассивРолейПользователяСудна();
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.vftПользователь);
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ВыполнениеОбменовДанными);
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ОбновлениеКонфигурацииБазыДанных);
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ДобавлениеИзменениеПользователей);
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.Администрирование);
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.ПроверкаДоступныхОбновленийКонфигурации);
			//УчетнаяЗапись.Роли.Добавить(Метаданные.Роли.БазовыеПрава);
			Для каждого РольИзМассива Из МассивРолейПользователяСудна Цикл
				УчетнаяЗапись.Роли.Добавить(РольИзМассива);
			КонецЦикла; 
			// -- rarus kloa 07.09.2017 


			УчетнаяЗапись.Записать();	
		КонецЕсли; 
		
		Пользователь = Справочники.Пользователи.СоздатьЭлемент();
		Пользователь.ИдентификаторПользователяИБ = УчетнаяЗапись.УникальныйИдентификатор;
		Пользователь.Наименование = УчетнаяЗапись.ПолноеИмя;
		Пользователь.ОбменДанными.Загрузка = Истина;
		Пользователь.Записать();
		
		//очистим регистрацию, иначе не сможем завершить настройку обмена
		УдалитьРегистрацию();
		
		// ++ rarus makole 2020-12-18
		// Эта функция не заполняет основное судно, т.к. в подчиненном узле отбор по судам не заполняется
		//ОсновноеСудно = ПолучитьОсновноеСудноИзУзлаОбмена();
		ОсновноеСудно = рарусОбщегоНазначенияСервер.ОсновноеСудноИзНачальныхНастроек();
		рарусОбщегоНазначенияСервер.УстановитьИспользованиеРегламентногоЗаданияОбновлениеСоставаПользователей();
		рарусСинхронизацияССудном.ОбновитьНастройкиОбменаССудномПоРИБ(Истина);
		// -- rarus makole 2020-12-18
		
		ПользовательАдм = Справочники.Пользователи.НайтиПоНаименованию("Администратор");
		Если ЗначениеЗаполнено(ОсновноеСудно) Тогда
			vftОбщегоНазначенияВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновноеСудно",ОсновноеСудно,Пользователь);
			vftОбщегоНазначенияВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновноеСудно",ОсновноеСудно,ПользовательАдм);
			// ++ rarus makole 2020-12-17
			vftОбщегоНазначенияВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновноеСудно",ОсновноеСудно);
			// -- rarus makole 2020-12-17
			// ++ rarus PleA 11.01.2021 [25899]
			УстановитьОсновноеСудно(ОсновноеСудно);
			// -- rarus PleA
		КонецЕсли;
		
		НастройкиКлиента = Новый НастройкиКлиентскогоПриложения();
		НастройкиКлиента.ОтображатьПанелиНавигацииИДействий = Ложь;
		НастройкиКлиента.ОтображатьПанельРазделов = Истина;
		НастройкиКлиента.РежимОткрытияФормПриложения = Вычислить("РежимОткрытияФормПриложения.ОтдельныеОкна");
		
		
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НастройкиКлиента, , Пользователь.Наименование);
		
		ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения", "", НастройкиКлиента, , "Администратор");
		
		// ++ rarus kloa 24.01.2020 
		ПараметрыАдминистрирования = СтандартныеПодсистемыСервер.ПараметрыАдминистрирования();
		ПараметрыАдминистрирования.ИмяАдминистратораИнформационнойБазы = "Администратор";
		ПараметрыАдминистрирования.ПарольАдминистратораИнформационнойБазы = ПолучитьПарольАдминистратора();
		СтандартныеПодсистемыСервер.УстановитьПараметрыАдминистрирования(ПараметрыАдминистрирования);
		// -- rarus kloa 24.01.2020 
		
	КонецЕсли; 
КонецФункции

&НаСервере
Функция ПолучитьПарольАдминистратора() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	СписокНЗ = РегистрыСведений.vftНастройкиПользователей.СоздатьНаборЗаписей();
	СписокНЗ.Прочитать();
	Для каждого Пользователь Из СписокНЗ Цикл
		Если Пользователь.Пользователь = "Администратор" Тогда
			Возврат Пользователь.Пароль;	
		КонецЕсли;  		
	КонецЦикла; 
	Возврат "v0lgaflot!";
КонецФункции
 

&НаСервере
Функция ПолучитьМассивРолейПользователяСудна() Экспорт
	МассивРолей = Новый Массив;
	
	МассивРолей.Добавить(Метаданные.Роли.vftПользователь);
	МассивРолей.Добавить(Метаданные.Роли.ВыполнениеСинхронизацииДанных);
	МассивРолей.Добавить(Метаданные.Роли.ОбновлениеКонфигурацииБазыДанных);
	МассивРолей.Добавить(Метаданные.Роли.ДобавлениеИзменениеПользователей);
	МассивРолей.Добавить(Метаданные.Роли.Администрирование);
	МассивРолей.Добавить(Метаданные.Роли.БазовыеПраваБСП);
	//rarus_AfoD 16.02.2021 < 
	МассивРолей.Добавить(Метаданные.Роли.рарусБазовыеПраваПользователей);
	//rarus_AfoD 16.02.2021 > 
	
	Возврат МассивРолей;
КонецФункции
 

&НаСервере
Функция ПолучитьИмяСуднаБазы() Экспорт
	Имя = "";
	ВыборкаУзлов = ПланыОбмена.Полный.Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		Если ВыборкаУзлов.Ссылка=ПланыОбмена.Полный.ЭтотУзел() Тогда
			Если ВыборкаУзлов.Суда.Количество()=1 Тогда
				Имя = ВыборкаУзлов.Суда[0].Судно.КодБыстрогоВвода;
				
			КонецЕсли; 	
		КонецЕсли; 	
	КонецЦикла; 
	
	Возврат Имя;
КонецФункции

&НаСервере
Функция ПолучитьОсновноеСудноИзУзлаОбмена()
	ВыборкаУзлов = ПланыОбмена.Полный.Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		Если ВыборкаУзлов.Ссылка=ПланыОбмена.Полный.ЭтотУзел() Тогда
			Если ВыборкаУзлов.Суда.Количество()=1 Тогда
				Возврат ВыборкаУзлов.Суда[0].Судно;
			КонецЕсли; 	
		КонецЕсли; 	
	КонецЦикла;
	Возврат Справочники.vftСуда.ПустаяСсылка();
КонецФункции

&НаСервере
Процедура УдалитьРегистрацию()
	ВыборкаУзлов = ПланыОбмена.Полный.Выбрать();
	Пока ВыборкаУзлов.Следующий() Цикл
		Если ВыборкаУзлов.Ссылка<>ПланыОбмена.Полный.ЭтотУзел() Тогда
			//Если ВыборкаУзлов.Суда.Количество()=1 Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(ВыборкаУзлов.Ссылка);
			//КонецЕсли; 	
		КонецЕсли; 	
	КонецЦикла;	
КонецПроцедуры

Функция ЭтоГлавныйУзел() Экспорт
	// ++ rarus makole 2020-12-17
	УстановитьПривилегированныйРежим(Истина);
	// -- rarus makole 2020-12-17 
	Возврат НЕ ПланыОбмена.ГлавныйУзел() <> Неопределено;
	
КонецФункции

// ++ rarus Камаев П.В. 19.03.2020 Задача № 20411
Процедура НастроитьВидФормыСписка(Форма, ЗапретДляПодчиненных, ИмяТабличногоПоля, ОбъектМетаданных) Экспорт
	
	// Если форма закрыта на подчиненном узле
	//---------------------------------------
	Если ЗапретДляПодчиненных И ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ() Тогда
		Форма.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	//
	// Проверка прав доступа
	//----------------------
		
	Если НЕ ПравоДоступа("Редактирование", ОбъектМетаданных) Тогда
		Форма.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("ИнтерактивноеДобавление", ОбъектМетаданных) Тогда
		Форма.Элементы[ИмяТабличногоПоля].ИзменятьСоставСтрок = Ложь;
	КонецЕсли;
	
КонецПроцедуры
// -- rarus Камаев П.В. 19.03.2020

 
// ++ rarus PleA 11.01.2021 [25899]

Процедура УстановитьОсновноеСудно(Судно = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(Судно) тогда
		
		Константы.рарусОсновноеСудно.Установить(Судно);		
		
	Иначе
		
		ОсновноеСудно = рарусОбщегоНазначенияСервер.ОсновноеСудноИзНачальныхНастроек();
		
		Если ЗначениеЗаполнено(ОсновноеСудно) тогда
			Константы.рарусОсновноеСудно.Установить(Судно);	
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьОсновноеСудно() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.рарусОсновноеСудно.Получить();
	
КонецФункции	

// -- rarus PleA 
 
 
 
