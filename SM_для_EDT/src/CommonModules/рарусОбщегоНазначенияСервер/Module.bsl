	

// ++ rarus Чернавин Г.К 13.03.2020
#Область СлужебныеПроцедурыИФункции
// Функции получения описания типов
//---------------------------------

Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
КонецФункции

Функция ПолучитьОписаниеТиповДаты(ЧастиДаты) Экспорт
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты);
	Возврат Новый ОписаниеТипов(Массив, , , КвалификаторДаты);
КонецФункции

Процедура ПроверитьНомерДокумента(ДокументОбъект,НачальнаяДатаДокумента,РеквизитНомера = Неопределено) Экспорт
	
	ПериодСменыНомера = ДокументОбъект.Метаданные().ПериодичностьНомера;
	
	Если ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Год Тогда
		РазностьДат = НачалоГода(НачальнаяДатаДокумента) - НачалоГода(ДокументОбъект.Дата);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Квартал Тогда
		РазностьДат = НачалоКвартала(НачальнаяДатаДокумента) - НачалоКвартала(ДокументОбъект.Дата);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.Месяц Тогда
		РазностьДат = НачалоМесяца(НачальнаяДатаДокумента) - НачалоМесяца(ДокументОбъект.Дата);
	ИначеЕсли ПериодСменыНомера = Метаданные.СвойстваОбъектов.ПериодичностьНомераДокумента.День Тогда
		РазностьДат = НачалоДня(НачальнаяДатаДокумента) - НачалоДня(ДокументОбъект.Дата);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если РазностьДат <> 0 Тогда
		ДокументОбъект.Номер="";
		Если РеквизитНомера<>Неопределено Тогда
			РеквизитНомера.Доступность=Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеНаименованияРейса(Рейс) Экспорт
	
	Если Рейс.РаботаПоРаспоряжению Тогда
		Возврат "Работа по распоряжению диспетчера";
	Иначе
		// ++ rarus Камаев П.В. 06.04.2020 Задача № 20799
		мРейс = рарусОбщегоНазначенияКлиентСервер.ПолучитьМассивПортовРейса(Рейс.ПунктыСледования);
		//ПортОтправления
		ПортОтправления = "";
		Для каждого Элемент Из мРейс.ПортОтправления Цикл
			ПортОтправления = ПортОтправления + ?(ЗначениеЗаполнено(ПортОтправления), ", ", "") + Элемент;
		КонецЦикла;
		//ПортПогрузки
		ПортПогрузки = "";
		Для каждого Элемент Из мРейс.ПортПогрузки Цикл
			ПортПогрузки = ПортПогрузки + ?(ЗначениеЗаполнено(ПортПогрузки), ", ", "") + Элемент;
		КонецЦикла;
		//ПортОтправления
		ПортВыгрузки = "";
		Для каждого Элемент Из мРейс.ПортВыгрузки Цикл
			ПортВыгрузки = ПортВыгрузки + ?(ЗначениеЗаполнено(ПортВыгрузки), ", ", "") + Элемент;
		КонецЦикла;
		Возврат "" + ПортОтправления+ " / " + ПортПогрузки + " / " + ПортВыгрузки;
		//Возврат ""+Рейс.ПортОтправления+" / "+Рейс.ПортПогрузки+" / "+Рейс.ПортВыгрузки;
		// -- rarus Камаев П.В. 06.04.2020
	КонецЕсли;
	
КонецФункции

#КонецОбласти
// -- rarus Чернавин Г.К 13.03.2020

// ++ rarus Камаев П.В. 03.04.2020 Задача № 24825 
Процедура ПроверитьТабличнуюЧастьПунктыСервер(Объект) Экспорт
	ЭтоБуксир = Объект.Судно.Проект.Толкач;	
	ТекОшибкаМетка = Ложь;
	
	// Перебираем все строки табл. части "Пункты"
	//-------------------------------------------
	// ++ rarus Камаев П.В. 15.10.2020 Задача № 24823
	СвоиСекции = новый СписокЗначений;
	// -- rarus Камаев П.В. 15.10.2020
	Для Каждого ТекСтрока из Объект.Пункты Цикл
		СтрокаПредыдущая = ПолучитьДанныеПредыдущейСтроки(Объект, ТекСтрока.НомерСтроки-1);
		//Если СтрокаПредыдущая <> Неопределено Тогда
		//	ТекСтрока.АдресПредыдущейСтроки = ПоместитьВоВременноеХранилище(СтрокаПредыдущая, УникальныйИдентификатор);
		//КонецЕсли;
	//	// Корректировка данных документа
	//	//-------------------------------
	//	ТекСтрока.ХодовоеВремя=?(СтрокаПредыдущая=Неопределено,0,рарусОбщегоНазначенияКлиент.РазницаДат(СтрокаПредыдущая.Отход,ТекСтрока.Приход));
	//	
		Если ТекСтрока.НомерСтроки = 1 и ЗначениеЗаполнено(ТекСтрока.Приход) Тогда
			Объект.Дата = ТекСтрока.Приход;
			//НастройкаФорм.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента, ЭлементыФормы.Номер);
			мТекущаяДатаДокумента = Объект.Дата;
		КонецЕсли;
	//	
	//	// Если ранее была обнаружена ошибка, то следующие строки помечаем как ошибочные, без проверки
	//	//--------------------------------------------------------------------------------------------
		ТекСтрока.ОшибкаТекст = "";
		ТекСтрока.ОшибкаМетка = Ложь;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка = Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка заполнения реквизитов
	//	//-------------------------------
		Если Не ЗначениеЗаполнено(ТекСтрока.Пункт) и ПустаяСтрока(ТекСтрока.ПунктКомментарий) Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Необходимо заполнить реквизит ""Пункт"" или ""Комментарий к пункту""!" + Символы.ПС;
		КонецЕсли;
	//	
		Если ТекСтрока.Приход = Дата(1,1,1) Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не заполнен реквизит ""Приход""!" + Символы.ПС;
		ИначеЕсли Год(ТекСтрока.Приход) <> Год(Объект.Дата) Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"У значений реквизитов ""Приход"" и ""Дата документа"" должен совпадать год!" + Символы.ПС;
		КонецЕсли;
		
		Если ТекСтрока.Отход = Дата(1,1,1) Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не заполнен реквизит ""Отход""!" + Символы.ПС;
		ИначеЕсли Год(ТекСтрока.Отход) <> Год(Объект.Дата) Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "У значений реквизитов ""Отход"" и ""Дата документа"" должен совпадать год!" + Символы.ПС;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.ПричинаСтоянки) Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не заполнен реквизит ""Причина стоянки""!" + Символы.ПС;
		КонецЕсли;
	//	
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка = Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка заполнения первой и последней строк
	//	//---------------------------------------------
		Если ТекСтрока.НомерСтроки = 1 Тогда
			Если ТекСтрока.ПричинаСтоянки <> Справочники.vftТиповыеОперации.НачалоРейса Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "В первой строке рейса причина стоянки должна быть ""Начало рейса""!" + Символы.ПС;
			КонецЕсли;
			
			ИнтервалМеждуРейсами = Справочники.рарусСправочникСсылок.ИнтервалМеждуРейсами.Значение;
			Если РейсПересекаетсяСПредыдущим(Объект) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Начало текущего рейса должно совпадать с датой окончания предыдущего, либо интервал между рейсами должен быть больше " + ИнтервалМеждуРейсами + " часов!" + Символы.ПС;
			КонецЕсли;
			
			Если ТекСтрока.Приход <> ТекСтрока.Отход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "В первой строке рейса значения реквизитов ""Приход"" и ""Отход"" должны совпадать!" + Символы.ПС;
			КонецЕсли;
		Иначе
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.НачалоРейса Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Причина стоянки ""Начало рейса"" может быть только в первой строке рейса!" + Символы.ПС;
			КонецЕсли;
			
			ИнтервалМеждуРейсами = Справочники.рарусСправочникСсылок.ИнтервалМеждуРейсами.Значение;
			Если ТекСтрока.НомерСтроки = Объект.Пункты.Количество() и РейсПересекаетсяСоСледующим(Объект, ТекСтрока.Отход) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Конец текущего рейса должен совпадать с датой начала следующего, либо интервал между рейсами должен быть больше " + ИнтервалМеждуРейсами + " часов!" + Символы.ПС;
				//ПоказатьОповещениеПользователя(,,"Конец текущего рейса не совпадает с датой начала следующего, либо интервал между рейсами меньше "+ИнтервалМеждуРейсами+" часов!",БиблиотекаКартинок.Внимание48);
			КонецЕсли;
		КонецЕсли;
	//	
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка значения даты прихода
	//	//-------------------------------
		Если СтрокаПредыдущая <> Неопределено Тогда
			Если ТекСтрока.Приход < СтрокаПредыдущая.Отход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Значение реквизита ""Приход"" должно быть больше или равно значению реквизита ""Отход"" предыдущей строки!"+Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	//	
	//	// Проверка значения даты отхода
	//	//------------------------------
		Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПромежуточныйПункт Тогда
			Если ТекСтрока.Отход <> ТекСтрока.Приход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Для промежуточного пункта значения реквизитов ""Приход"" и ""Отход"" должны совпадать!"+Символы.ПС;
			КонецЕсли;
		Иначе
			Если ТекСтрока.Отход < ТекСтрока.Приход Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Значение реквизита ""Отход"" должно быть больше или равно значению реквизита ""Приход""!"+Символы.ПС;
			КонецЕсли;
		КонецЕсли;
	//	
		// Проверка значения "ХодовоеВремяНаСтоянке"
		//------------------------------------------
		Если ТекСтрока.ХодовоеВремяНаСтоянке > ТекСтрока.ВремяСтоянки Тогда
			ТекОшибкаМетка = Истина;
			ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Значение реквизита ""Ходовое время в пункте"" не может быть больше общего времени стоянки!"+Символы.ПС;
		КонецЕсли;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка = Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка списка барж на дублирование
	//	//-------------------------------------
		Если ЭтоБуксир Тогда
			Список = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "БаржаПриход,ВесГруза");
			Список.ЗаполнитьЗначения(1, "ВесГруза");
			Список.Свернуть("БаржаПриход", "ВесГруза");
			Для Каждого СтрСписка Из Список Цикл
				Если СтрСписка.ВесГруза <> 1 Тогда
					ТекОшибкаМетка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекОшибкаМетка Тогда
				ТекСтрока.ОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Обнаружено дублирование барж!" + Символы.ПС;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	//	
	//	// Проверка списка барж в соседних строках
	//	//----------------------------------------
		Если ЭтоБуксир и СтрокаПредыдущая <> Неопределено Тогда
			Список = Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД),"БаржаПриход,БаржаОперация");
			Для Каждого СтрСписка Из Список Цикл
				Если СтрСписка.БаржаОперация = Перечисления.РарусБаржиОперации.Прием или
					 СтрСписка.БаржаОперация = Перечисления.РарусБаржиОперации.ПриемПередача Тогда
					СтрСписка.БаржаПриход = Справочники.vftСуда.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;
			Список.Свернуть("БаржаПриход");
			рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Список, Новый Структура("БаржаПриход", Справочники.vftСуда.ПустаяСсылка()));
			
			Если не рарусОбщегоНазначенияКлиентСервер.СравнитьМассивы(Список.ВыгрузитьКолонку("БаржаПриход"), СтрокаПредыдущая.Баржи.ВыгрузитьКолонку("БаржаПриход")) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Не совпадают списки барж в текущей и предыдущей строках!" + Символы.ПС;
				ТекСтрока.ОшибкаМетка = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
	//	
	//	// Проверка списка грузов в соседних строках
	//	//------------------------------------------
		Если СтрокаПредыдущая <> Неопределено Тогда
			Если ЭтоБуксир Тогда
				// Проверка буксира
				//-----------------
				Список = Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД),"БаржаПриход,Груз,НачальныйВесГруза");
				Для Каждого Эл из СтрокаПредыдущая.Баржи Цикл
					СтрСписка = Список.Добавить();
					СтрСписка.БаржаПриход = Эл.БаржаПриход;
					СтрСписка.Груз = Эл.Груз;
					СтрСписка.НачальныйВесГруза = -Эл.НачальныйВесГруза;
				КонецЦикла;
				Список.Свернуть("БаржаПриход,Груз", "НачальныйВесГруза");
				рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Список, Новый Структура("НачальныйВесГруза", 0));
				
				СтруктураПоиска=Новый Структура("БаржаПриход,Груз,НачальныйВесГруза");
				
				Для Каждого СтрСписка из Список Цикл
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрСписка);
					Эл = СтрокаПредыдущая.ОжиданиеБуксира.НайтиСтроки(СтруктураПоиска);
					Если Эл.Количество() = 0 Тогда
						ТекОшибкаМетка = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				// Проверка сухогруза
				//-------------------
				Список = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "Груз,НачальныйВесГруза");
				Для Каждого Эл из СтрокаПредыдущая.Баржи Цикл
					СтрСписка = Список.Добавить();
					СтрСписка.Груз = Эл.Груз;
					СтрСписка.НачальныйВесГруза = -Эл.НачальныйВесГруза;
				КонецЦикла;
				Список.Свернуть("Груз", "НачальныйВесГруза");
				рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(Список, Новый Структура("НачальныйВесГруза", 0));
				
				Если Список.Количество() > 0 Тогда
					ТекОшибкаМетка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекОшибкаМетка Тогда
				ТекСтрока.ОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Не совпадает количество грузов в текущей и предыдущей строках!" + Символы.ПС;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка прочих причин стоянки
		//-------------------------------
		Список = Объект.ПрочиеПричиныСтоянки.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД));
		Для Каждого СтрСписка из Список Цикл
			Если Не ЗначениеЗаполнено(СтрСписка.ПричинаСтоянки) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены незаполненные прочие причины стоянки!"+Символы.ПС;
				Прервать;
			ИначеЕсли Год(СтрСписка.НачДата)<>Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых год начальной даты не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			ИначеЕсли Год(СтрСписка.КонДата)<>Год(Объект.Дата) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых год конечной даты не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			ИначеЕсли не рарусОбщегоНазначенияКлиентСервер.Между(СтрСписка.НачДата,ТекСтрока.Приход,ТекСтрока.Отход) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых начальная дата находится не между датами прихода и отхода!"+Символы.ПС;
				Прервать;
			ИначеЕсли Не рарусОбщегоНазначенияКлиентСервер.Между(СтрСписка.КонДата,ТекСтрока.Приход,ТекСтрока.Отход) Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых конечная дата находится не между датами прихода и отхода!"+Символы.ПС;
				Прервать;
			ИначеЕсли СтрСписка.НачДата>СтрСписка.КонДата Тогда
				ТекОшибкаМетка=Истина;
				ТекСтрока.ОшибкаТекст=ТекСтрока.ОшибкаТекст+"Найдены прочие причины стоянки, у которых начальная дата больше конечной!"+Символы.ПС;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;

		// Проверка непересечения интервалов прочих причин стоянки
		//--------------------------------------------------------
		Список.Сортировать("НачДата");
		Для А = 1 по Список.Количество()-1 Цикл
			Если Список[А].НачДата < Список[А-1].КонДата Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены прочие причины стоянки, у которых период действия пересекается с периодом другой прочей причины!" + Символы.ПС;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка времени прочих причин стоянки
	//	//---------------------------------------
		Если Список.Итог("ВремяСтоянки") + ТекСтрока.МаневрыВПункте > ТекСтрока.ВремяСтоянки - ТекСтрока.ХодовоеВремяНаСтоянке Тогда
			ТекОшибкаМетка  =Истина;
			ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Общее время прочих причин стоянки " + ?(ТекСтрока.МаневрыВПункте = 0,"","(включая маневры в пункте) ")+"не может быть больше общего времени стоянки!"+Символы.ПС;
		КонецЕсли;
		
		Если ТекОшибкаМетка Тогда
			ТекСтрока.ОшибкаМетка=Истина;
			Продолжить;
		КонецЕсли;
	//	
	//	// Проверка значений дат в ТЧ "Баржи"
	//	//-----------------------------------
		
		Список= Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД));
		Для Каждого СтрСписка из Список Цикл
			Если ЗначениеЗаполнено(СтрСписка.ДатаПриемаСекции) И Год(СтрСписка.ДатаПриемаСекции) <> Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты приема секции не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаПередачиСекции) И Год(СтрСписка.ДатаПередачиСекции) <> Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты передачи секции не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаПриемаСекции) И ЗначениеЗаполнено(СтрСписка.ДатаПередачиСекции) и СтрСписка.ДатаПриемаСекции>СтрСписка.ДатаПередачиСекции Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых дата приема секции больше даты передачи секции!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаВыпускаКоносамента) И Год(СтрСписка.ДатаВыпускаКоносамента) <> Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты выпуска коносамента не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДатаПодачиНотиса) и Год(СтрСписка.ДатаПодачиНотиса)<>Год(Объект.Дата) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты подачи нотиса не совпадает с годом документа!"+Символы.ПС;
				Прервать;
			КонецЕсли;
			
			//№ 21761
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда				
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Погружено,т. не равно 0 и не заполнено начало паузки или окончание паузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Выгружено,т. не равно 0 и не заполнено начало выгрузки или окончание выгрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Догружено,т. не равно 0 и не заполнено начало догрузки или окончание догрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Погрузка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Погружено,т. не равно 0 и не заполнено начало погрузки или окончание погрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка
				И СтрСписка.ВесГруза <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Погружено,т. не равно 0 и не заполнено начало погрузки или окончание погрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка
				И СтрСписка.ВесГрузаВыгружено <> 0
				И (Не ЗначениеЗаполнено(СтрСписка.НачалоОперации2) ИЛИ Не ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации2)) Тогда
				ТекОшибкаМетка = Истина;
				ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых поле Выгружено,т. не равно 0 и не заполнено начало выгрузки или окончание выгрузки!"+Символы.ПС;
				Прервать;			
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.НачалоОперации) Или ЗначениеЗаполнено(СтрСписка.ОкончаниеОперации) Тогда
				Если Год(СтрСписка.НачалоОперации)<>Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты начала операции не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если Год(СтрСписка.ОкончаниеОперации)<>Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты окончания операции не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если СтрСписка.НачалоОперации > СтрСписка.ОкончаниеОперации Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых дата начала операции больше даты окончания операции!"+Символы.ПС;
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрСписка.ДокументыНаБортуНачДата) или ЗначениеЗаполнено(СтрСписка.ДокументыНаБортуКонДата) Тогда
				Если Год(СтрСписка.ДокументыНаБортуНачДата) <> Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых год даты начала оформления документов не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если Год(СтрСписка.ДокументыНаБортуКонДата) <> Год(Объект.Дата) Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст + "Найдены строки, у которых год даты окончания оформления документов не совпадает с годом документа!"+Символы.ПС;
					Прервать;
				КонецЕсли;
				
				Если СтрСписка.ДокументыНаБортуНачДата > СтрСписка.ДокументыНаБортуКонДата Тогда
					ТекОшибкаМетка = Истина;
					ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, у которых дата начала оформления документов больше даты окончания оформления документов!"+Символы.ПС;
					Прервать;
				КонецЕсли;
			КонецЕсли;		
			
			//№21731
			Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Прием
				Или СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Передача
				Или СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
								
				Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Прием
					ИЛИ СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
					// ++ rarus Камаев П.В. 15.10.2020 Задача № 24823
					ЭтоСвояСекция = СвоиСекции.НайтиПоЗначению(СтрСписка.БаржаПриход) <> Неопределено;
					//++ rarus isaeva 21.09.2020
					//Заявка в ИТИЛ от Шадрина Д.Ю., чтобы убрали данную проверку
					Если Не ЗначениеЗаполнено(СтрСписка.СудноПередавшее) И НЕ ЭтоСвояСекция Тогда
						// ++ rarus Камаев П.В. 16.10.2020 Задача № 24857
						// ТекОшибкаМетка = Истина;
						//ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнено судно, передавшее секцию!"+Символы.ПС;
						//Прервать;
						// -- rarus Камаев П.В. 16.10.2020
					КонецЕсли;
					//-- rarus isaeva 21.09.2020
					Если Не ЗначениеЗаполнено(СтрСписка.ДатаПриемаСекции) И НЕ ЭтоСвояСекция Тогда
						ТекОшибкаМетка = Истина;
						ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнена дата приема секции!"+Символы.ПС;
						Прервать;
					КонецЕсли;
					// -- rarus Камаев П.В. 15.10.2020
				КонецЕсли;
				
				Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.Передача
					ИЛИ СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
					Если Не ЗначениеЗаполнено(СтрСписка.СудноПринявшее) Тогда
						// ++ rarus Камаев П.В. 16.10.2020 Задача № 24857
						// ТекОшибкаМетка = Истина;
						//ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнено судно, принявшее секцию!"+Символы.ПС;
						//Прервать;
						// -- rarus Камаев П.В. 16.10.2020
					КонецЕсли;
					Если Не ЗначениеЗаполнено(СтрСписка.ДатаПередачиСекции) Тогда
						ТекОшибкаМетка = Истина;
						ТекСтрока.ОшибкаТекст = ТекСтрока.ОшибкаТекст+"Найдены строки, в которых не заполнена дата передачи секции!"+Символы.ПС;
						Прервать;
					КонецЕсли;
				КонецЕсли;
								
			КонецЕсли;
			// ++ rarus Камаев П.В. 15.10.2020 Задача № 24823
			Если СтрСписка.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира
				И ЗначениеЗаполнено(СтрСписка.БаржаПриход) ТОгда
				СвоиСекции.Добавить(СтрСписка.БаржаПриход);
			КонецЕсли;
			// -- rarus Камаев П.В. 15.10.2020
		КонецЦикла;
				
		ТекСтрока.ОшибкаМетка = ТекОшибкаМетка;
	КонецЦикла;
	
КонецПроцедуры

Функция РейсПересекаетсяСПредыдущим(Объект)
	
	// Дата документа и судно должны быть заполнены
	//---------------------------------------------
	Если Не ЗначениеЗаполнено(Объект.Дата) Или Не ЗначениеЗаполнено(Объект.Судно) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем предыдущий документ, сверяем дату его окончания с датой начала текущего
	//-----------------------------------------------------------------------------
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("Судно",					Объект.Судно);
	Запрос.УстановитьПараметр("Дата",					Объект.Дата);
	ИнтервалМеждуРейсами = Справочники.рарусСправочникСсылок.ИнтервалМеждуРейсами.Значение;
	Запрос.УстановитьПараметр("ИнтервалМеждуРейсами",	ИнтервалМеждуРейсами*3600);
	
	//Если Объект.Пункты.Количество() = 0 или Объект.Пункты[Объект.Пункты.Количество()-1].Отход = Дата(1,1,1) Тогда
	//	ДатаОкончания = Объект.Дата;
	//Иначе
	//	ДатаОкончания = Объект.Пункты[Объект.Пункты.Количество()-1].Отход;
	//КонецЕсли;
	
	//Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончания);

	
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	ДокРейс.Ссылка КАК Ссылка,
				 |	ДокРейс.ДатаОкончание КАК ДатаОкончание
				 |ПОМЕСТИТЬ Рейс
	             |ИЗ
	             |	Документ.vftРейс КАК ДокРейс
	             |ГДЕ
	             |	НЕ ДокРейс.ПометкаУдаления
	             |	И ДокРейс.Ссылка <> &Ссылка
	             |	И ДокРейс.Судно = &Судно
	             |	И ДокРейс.Дата < &Дата
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ДокРейс.Дата УБЫВ
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДокРейс.Ссылка КАК Ссылка
	             |ИЗ
	             |	Рейс КАК ДокРейс
	             |ГДЕ
	             |	НЕ(ДокРейс.ДатаОкончание = &Дата
	             |				ИЛИ РАЗНОСТЬДАТ(ДокРейс.ДатаОкончание, &Дата, СЕКУНДА) >= &ИнтервалМеждуРейсами)";
	
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПолучитьДанныеПредыдущейСтроки(Объект, НомерСтроки)
	
	Если НомерСтроки = 0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	
		
	// Возвращаем данные предыдущей строки
	//-----------------------------------
	ТекСтрока = Объект.Пункты[НомерСтроки-1];
	//
	Результат=Новый Структура;
	Результат.Вставить("Отход",			ТекСтрока.Отход);
	Результат.Вставить("ПричинаСтоянки",ТекСтрока.ПричинаСтоянки);
	Результат.Вставить("ГруженыйРейс",	ТекСтрока.ГруженыйРейс);
	//
	// Данные из табл. части "Баржи"
	////------------------------------
	ЭтоБуксир = Объект.Судно.Проект.Толкач;
	Если ЭтоБуксир Тогда
		ТЗ = Объект.Баржи.Выгрузить(Новый Структура("ИД",ТекСтрока.ИД),"БаржаПриход,БаржаОперация,Груз,НачальныйВесГруза,ВесГруза,СудноПринявшее,ПаузкаНачальныйВесГруза,ВесГрузаВыгружено");
		ТЗ.Колонки.Добавить("Метка",Новый ОписаниеТипов("Булево"));
	//	
		ДанныеПаузки = ПолучитьДанныеПаузки(ТекСтрока.ПричинаСтоянки,ТЗ);
	//	
		Для Каждого СтрТЗ из ТЗ Цикл
			// Проверка передачи барж
			//-----------------------
			Если СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.Передача или
				СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача или
				СтрТЗ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
				СтрТЗ.Метка = Истина;
				Продолжить;
			КонецЕсли;
			
			// Пересчет количества груза
			//--------------------------
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Тогда
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза;
			ИначеЕсли ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
				СтрДП = ДанныеПаузки.Найти(СтрТЗ.БаржаПриход,"Баржа");
				Если СтрДП = Неопределено Тогда
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза;
				Иначе
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза - СтрТЗ.ВесГруза + СтрДП.ПаузкаКонечныйВесГруза;
					Если Не ЗначениеЗаполнено(СтрТЗ.Груз) Тогда
						СтрТЗ.Груз = СтрДП.Груз;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
				СтрДП = ДанныеПаузки.Найти(СтрТЗ.БаржаПриход,"Баржа");
				Если СтрДП = Неопределено Тогда
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза;
				Иначе
					СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза - СтрДП.ПаузкаКонечныйВесГруза;
					Если Не ЗначениеЗаполнено(СтрТЗ.Груз) Тогда
						СтрТЗ.Груз=СтрДП.Груз;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// ++ rarus Камаев П.В. 28.04.2020 
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза + СтрТЗ.ВесГруза - СтрТЗ.ВесГрузаВыгружено;
				// -- rarus Камаев П.В. 28.04.2020
			КонецЕсли;
			
			Если СтрТЗ.НачальныйВесГруза = 0 Тогда
				СтрТЗ.Груз = Справочники.vftГрузы.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;

		рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(ТЗ,Новый Структура("Метка",Истина));

		ТЗ.Свернуть("БаржаПриход,Груз","НачальныйВесГруза");
		ТЗ.Сортировать("БаржаПриход");
		Результат.Вставить("Баржи",ТЗ);

	Иначе	// Это судно - не буксир
		ТЗ = Объект.Баржи.Выгрузить(Новый Структура("ИД", ТекСтрока.ИД), "Груз,НачальныйВесГруза,ВесГруза,ВесГрузаВыгружено");
		ТЗ.Колонки.Добавить("Метка", Новый ОписаниеТипов("Булево"));
		
		Для Каждого СтрТЗ из ТЗ Цикл
			// Пересчет количества груза
			//--------------------------
			Если ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка Или ТекСтрока.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза-СтрТЗ.ВесГруза;
			Иначе
				// ++ rarus Камаев П.В. 28.04.2020 
				СтрТЗ.НачальныйВесГруза = СтрТЗ.НачальныйВесГруза+СтрТЗ.ВесГруза - СтрТЗ.ВесГрузаВыгружено;
				// -- rarus Камаев П.В. 28.04.2020
			КонецЕсли;
			
			Если СтрТЗ.НачальныйВесГруза = 0 Тогда
				СтрТЗ.Метка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		рарусОбщегоНазначенияКлиентСервер.УдалитьСтрокиТЗ(ТЗ,Новый Структура("Метка",Истина));
		
		ТЗ.Свернуть("Груз","НачальныйВесГруза");
		ТЗ.Сортировать("Груз");
		Результат.Вставить("Баржи",ТЗ);
	КонецЕсли;
	//
	//// Данные по секция, оставленных в ожидании буксира
	////-------------------------------------------------
	//ТО = Объект.Баржи.ВыгрузитьКолонки("БаржаПриход,Груз,НачальныйВесГруза");
	ТО = Новый ТаблицаЗначений;
	ТО.Колонки.Добавить("БаржаПриход");
	ТО.Колонки.Добавить("Груз");
	ТО.Колонки.Добавить("НачальныйВесГруза");
	ЭтоБуксир = Объект.Судно.Проект.Толкач;
	Если ЭтоБуксир Тогда
		// Перебираем строки "Пункты" с первой по "ТекСтрока"
		//---------------------------------------------------
		Для Каждого СтрП из Объект.Пункты Цикл
			// Перебираем строки "Баржи"
			//--------------------------
			Для Каждого СтрБ из Объект.Баржи.НайтиСтроки(Новый Структура("ИД", СтрП.ИД)) Цикл
				Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
					Если СтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка или СтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
						Врем=СтрБ.НачальныйВесГруза - СтрБ.ВесГруза;
					Иначе
						Врем=СтрБ.НачальныйВесГруза + СтрБ.ВесГруза - СтрБ.ВесГрузаВыгружено;
					КонецЕсли;
					
					Если Врем <> 0 Тогда
						СтрТО = ТО.Добавить();
						СтрТО.БаржаПриход =		СтрБ.БаржаПриход;
						СтрТО.Груз =			СтрБ.Груз;
						СтрТО.НачальныйВесГруза=Врем;
					КонецЕсли;
					
				ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием Тогда
					СтрТО = ТО.Найти(СтрБ.БаржаПриход,"БаржаПриход");
					Если СтрТО <> Неопределено Тогда
						ТО.Удалить(СтрТО);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрП = ТекСтрока Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Результат.Вставить("ОжиданиеБуксира",ТО);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПаузки(ТекПричинаСтоянки,ТЗ) Экспорт
		
	ДанныеПаузки = Новый ТаблицаЗначений;
	ДанныеПаузки.Колонки.Добавить("Баржа",					Новый ОписаниеТипов("СправочникСсылка.vftСуда"));
	ДанныеПаузки.Колонки.Добавить("Груз",					Новый ОписаниеТипов("СправочникСсылка.vftГрузы"));
	ДанныеПаузки.Колонки.Добавить("ПаузкаНачальныйВесГруза", рарусОбщегоНазначенияСервер.ПолучитьОписаниеТиповЧисла(10,3));
	ДанныеПаузки.Колонки.Добавить("ПаузкаКонечныйВесГруза",  рарусОбщегоНазначенияСервер.ПолучитьОписаниеТиповЧисла(10,3));
	
	Если ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка или
		ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		Для Каждого СтрТЗ из ТЗ Цикл
			Если Не ЗначениеЗаполнено(СтрТЗ.СудноПринявшее) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрДП=ДанныеПаузки.Найти(СтрТЗ.СудноПринявшее,"Баржа");
			Если СтрДП=Неопределено Тогда
				СтрДП=ДанныеПаузки.Добавить();
				СтрДП.Баржа=СтрТЗ.СудноПринявшее;
				СтрДП.Груз=СтрТЗ.Груз;
			КонецЕсли;
			СтрДП.ПаузкаНачальныйВесГруза=Макс(СтрДП.ПаузкаНачальныйВесГруза,СтрТЗ.ПаузкаНачальныйВесГруза);
			СтрДП.ПаузкаКонечныйВесГруза=СтрДП.ПаузкаКонечныйВесГруза+СтрТЗ.ВесГруза;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПаузки;
	
КонецФункции

Функция РейсПересекаетсяСоСледующим(Объект, ТекОтход)
	
	// Дата документа и судно должны быть заполнены
	//---------------------------------------------
	Если Не ЗначениеЗаполнено(Объект.Дата) или Не ЗначениеЗаполнено(Объект.Судно) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Ищем следующий документ, сверяем дату его начала с датой окончания текущего
	//----------------------------------------------------------------------------
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка",					Объект.Ссылка);
	Запрос.УстановитьПараметр("Судно",					Объект.Судно);
	Запрос.УстановитьПараметр("Дата",					Объект.Дата);
	Запрос.УстановитьПараметр("Отход",					ТекОтход);
	ИнтервалМеждуРейсами = Справочники.рарусСправочникСсылок.ИнтервалМеждуРейсами.Значение;
	Запрос.УстановитьПараметр("ИнтервалМеждуРейсами",	ИнтервалМеждуРейсами*3600);
	
	Запрос.Текст="
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДокРейс.Ссылка,
	|	ДокРейс.Дата
	|ПОМЕСТИТЬ Рейс
	|ИЗ
	|	Документ.vftРейс КАК ДокРейс
	|ГДЕ
	|	НЕ ДокРейс.ПометкаУдаления
	|	И ДокРейс.Ссылка <> &Ссылка
	|	И ДокРейс.Судно = &Судно
	|	И ДокРейс.Дата > &Дата
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокРейс.Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокРейс.Ссылка
	|ИЗ
	|	Рейс КАК ДокРейс
	|ГДЕ
	|	НЕ(ДокРейс.Дата = &Отход
	|				ИЛИ РАЗНОСТЬДАТ(&Отход, ДокРейс.Дата, СЕКУНДА) >= &ИнтервалМеждуРейсами)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции
// -- rarus Чернавин Г.К 13.03.2020

// ++ rarus PleA 27.10.2020 

Процедура ВызыватьИсключениеЕслиПустое(Значение, ТекстОшибки="") Экспорт

	Если Не ЗначениеЗаполнено(Значение) тогда
		
		Если ПустаяСтрока(ТекстОшибки) тогда
			ТекстОшибки = "Значение не заполнено";
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
КонецПроцедуры
 
Функция ДополнительныеРеквизитыСтрокой(Объект, Знач Разделитель = Неопределено) Экспорт
	
	Если Разделитель = Неопределено тогда
		Разделитель = Символы.ПС;
	КонецЕсли;	
	
	МассивПодстрок = Новый Массив;
	Для Каждого СтрокаДопРеквизитов из Объект.ДополнительныеРеквизиты Цикл
		МассивПодстрок.Добавить(
			СтрШаблон("%1: %2", 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаДопРеквизитов.Свойство, "Наименование"), 
				СтрокаДопРеквизитов.Значение)
			);
	КонецЦикла;
	
	СтрокаДопРек = СтрСоединить(МассивПодстрок, Разделитель);
	
	Возврат СтрокаДопРек;

КонецФункции

Функция ДополнительныеРеквизитыСтрокойПоСпискуОбъектов(МассивОбъектов, ИмяТаблицы = Неопределено) Экспорт
	
	СоответствиеОбъектСтрока = Новый Соответствие;
	
	ИмяТаблицы = Неопределено;
	
	Для каждого Объект Из МассивОбъектов Цикл
		
		СоответствиеОбъектСтрока.Вставить(Объект, "");
		
		Если ИмяТаблицы = Неопределено тогда
			
			Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) тогда
				
				ИмяТаблицы = ОбщегоНазначения.ИмяТаблицыПоСсылке(Объект);
			
			КонецЕсли;
		
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ИмяТаблицы = Неопределено тогда
		Возврат СоответствиеОбъектСтрока;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Ссылка,
	|	Т.НомерСтроки КАК НомерСтроки,
	|	Т.Свойство.Наименование КАК Свойство,
	|	Т.Значение КАК Значение
	|ИЗ
	|	%Таблица%.ДополнительныеРеквизиты КАК Т
	|ГДЕ
	|	Т.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%Таблица%", ИмяТаблицы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СоответствиеОбъектСтрока[Выборка.Ссылка] = СтрШаблон("%1%2: %3%4", СоответствиеОбъектСтрока[Выборка.Ссылка], Выборка.Свойство, Выборка.Значение, Символы.ПС);
	КонецЦикла; 
	
	Возврат СоответствиеОбъектСтрока;
	
КонецФункции
 
// -- rarus PleA

// Функция помещает результат запроса в массив структур.
// Применима, когда необходимо передать данные с сервера на клиент.
//
// Параметры:
//		РезультатЗапроса - РезультатЗапроса - результат запроса.
//
// Возвращаемое значение:
//		Массив - массив структур.
Функция РезультатЗапросаВМассивСтруктур(РезультатЗапроса) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтрокаИменКолонок = "";
		Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
			СтрокаИменКолонок = ?(СтрокаИменКолонок="", "", СтрокаИменКолонок+",")+Колонка.Имя;
		КонецЦикла;
		
		Если СтрокаИменКолонок = "" Тогда
			Возврат МассивВозврата;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураДанных = Новый Структура(СтрокаИменКолонок);
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			МассивВозврата.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// -- rarus PaSe
//при возможности перенести в рарусСинхронизацияССудном
//Вызывается из ОМ.ОбщегоНазначенияПереопределяемый.ПриОтправкеДанныхПодчиненному
Процедура ПриОтправкеДанныхПодчиненному(Источник, ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ПланОбменаОбъект.Полный") Тогда
		Если ТипЗнч(ЭлементДанных) = Тип("РегистрНакопленияНаборЗаписей.впТоварыКПоступлению") Тогда
			УбратьДвиженияПоСудамДругихУзлов(ЭлементДанных, Источник);
		КонецЕсли;
	КонецЕсли;
	
	// ++ rarus PleA 25.03.2021 [номерзадачи]
	Если ТипЗнч(Источник) = Тип("ПланОбменаОбъект.Полный") Тогда
		Если ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.рарусМинимальныеОстаткиНоменклатуры") Тогда
			УбратьДвиженияПоСудамДругихУзловЧерезСклады(ЭлементДанных, Источник);
		КонецЕсли;
	КонецЕсли;
	// -- rarus PleA

КонецПроцедуры
//Убирает движения по судам, которые не нужны в базе судна
Процедура УбратьДвиженияПоСудамДругихУзлов(НаборЗаписей, УзелПриемник)
	
	Суда = УзелПриемник.Суда.ВыгрузитьКолонку("Судно");
	НаборЗаписей.Прочитать();
	УдаляемыеЗаписи = Новый Массив;
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Суда.Найти(Запись.Судно) = Неопределено Тогда
			УдаляемыеЗаписи.Добавить(Запись);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Запись Из УдаляемыеЗаписи Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
КонецПроцедуры

// ++ rarus PleA 25.03.2021 [номерзадачи]
//Убирает движения по судам, которые не нужны в базе судна
Процедура УбратьДвиженияПоСудамДругихУзловЧерезСклады(НаборЗаписей, УзелПриемник)
	
	СудаУзла = Новый Соответствие;
	Для Каждого Строка Из УзелПриемник.Суда Цикл 
		СудаУзла.Вставить(Строка.Судно, Строка.Судно);
	КонецЦикла;			
	
	НаборЗаписей.Прочитать();
	
	УдаляемыеЗаписи = Новый Массив;
	
	ХэшСкладСудно = Новый Соответствие;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если ХэшСкладСудно.Получить(Запись.Склад) = Неопределено тогда
			ХэшСкладСудно.Вставить(Запись.Склад, Запись.Склад.Судно);			
		КонецЕсли;	
		
		Судно = ХэшСкладСудно.Получить(Запись.Склад);
		
		Если СудаУзла.Получить(Судно) = Неопределено Тогда
			УдаляемыеЗаписи.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Запись Из УдаляемыеЗаписи Цикл
		НаборЗаписей.Удалить(Запись);
	КонецЦикла;
	
КонецПроцедуры
// -- rarus PleA

// ++ rarus makole 2020-12-04 [БСО.ПРОТОКОЛ Р-58 03.12.2020]
// Проверяет объект на вхождение в список объектов, которые при создании или проведении порождают
// возникновение новых объектов, например записей независимых регистров или новых документов/справочников,
// принадлежность которых объекту однозначно определить нельзя, 
// но передача которых с судна на берег обязательна при передаче объекта. В модуле менеджера таких объектов
// должна быть расположена экспортная функция "СвязанныеДанные" (см. модуль менеджера справочника "впАктОВыполненииЭтапаРаботПрисоединенныеФайлы")
//
// Параметры:
//  ПроверяемыйОбъект  - ЛюбаяСсылка - ссылка на проверяемый объект
//                 	- Строка - полное имя объекта метаданных
//					- Тип, тип значения проверяемого объекта
//
// Возвращаемое значение:
//   Булево   - Истина - объект может содержать связанные, Ложь - связанных данных нет
//
Функция ЕстьСвязанныеОбъекты(ПроверяемыйОбъект) Экспорт

	// Определение типа объекта
	Если ТипЗнч(ПроверяемыйОбъект) = Тип("Тип") Тогда
		
		ПроверяемыйТип = ПроверяемыйОбъект
		
	ИначеЕсли ТипЗнч(ПроверяемыйОбъект) = Тип("Строка") Тогда
		
		ОбъектНаСтроки = СтрРазделить(ПроверяемыйОбъект, ".");
		Если ОбъектНаСтроки.Количество() = 2
			И ОбъектНаСтроки[0] = "Документ" Тогда
			ПроверяемыйТип = Тип("ДокументСсылка." + ОбъектНаСтроки[1]);
		ИначеЕсли ОбъектНаСтроки.Количество() = 2
			И ОбъектНаСтроки[0] = "Справочник" Тогда
			ПроверяемыйТип = Тип("СправочникСсылка." + ОбъектНаСтроки[1]);
		Иначе 
			Возврат Ложь
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПроверяемыйОбъект)) Тогда
		
		ПроверяемыйТип = ТипЗнч(ПроверяемыйОбъект)
		
	Иначе
		
		Возврат Ложь
		
	КонецЕсли;
	
	РезультатПроверкиНаВхождениеВПрисоединенныеФайлы = Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(ПроверяемыйТип);
	
	ОбъектСодержитСвязанные = РезультатПроверкиНаВхождениеВПрисоединенныеФайлы;
	// ИЛИ .... Здесь добавить проверку на другие типы 
	
	Возврат ОбъектСодержитСвязанные;

КонецФункции // -- rarus makole 2020-12-04 [БСО.ПРОТОКОЛ Р-58 03.12.2020]

// ++ rarus makole 2020-12-07 [БСО.ПРОТОКОЛ Р-58 03.12.2020]
// В наименовании файла выводить расширение
Процедура рарусПолучениеПолейПредставленияФайлов(Источник, Поля, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Наименование");
	Поля.Добавить("Расширение");
	
КонецПроцедуры

Процедура рарусПолучениеПредставленияФайлов(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Представление = СтрШаблон("%1.%2", Данные.Наименование, Данные.Расширение);
	
КонецПроцедуры

// ++ rarus makole 2020-12-17 [ПРОТОКОЛ ДЕМОНСТРАЦИИ № Р-62 от 14.12.2020]
// Должен быть реализован обработчик обновления, считывающий состав применимости видов 
// пользователей судну, добавления нужных пользователей в базу судна и установки/обновления 
// его прав доступа
Функция ПроверитьСоздатьПользователей(Судно) Экспорт
	
	МассивСозданныхПользователей = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	vftПодразделенияКомпании.Ссылка КАК Подразделение,
		|	vftПодразделенияКомпании.Судно КАК Судно
		|ПОМЕСТИТЬ ВТ_Подразделение
		|ИЗ
		|	Справочник.vftПодразделенияКомпании КАК vftПодразделенияКомпании
		|ГДЕ
		|	vftПодразделенияКомпании.Судно = &Судно
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Пользователи.Ссылка КАК Пользователь
		|ПОМЕСТИТЬ ВТ_Пользователи
		|ИЗ
		|	ВТ_Подразделение КАК ВТ_Подразделение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (Пользователи.Подразделение = ВТ_Подразделение.Подразделение)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Подразделение.Подразделение КАК Подразделение,
		|	ВТ_Подразделение.Судно КАК Судно,
		|	КОЛИЧЕСТВО(ГруппыПользователейСостав.Пользователь) КАК КоличествоПользователей,
		|	МАКСИМУМ(ГруппыПользователейСостав.Пользователь) КАК Пользователь,
		|	рарусПрименимостьГруппПользователей.ГруппаПользователей КАК ГруппаПользователей
		|ПОМЕСТИТЬ ВТ_ПользователиПоГруппам
		|ИЗ
		|	ВТ_Подразделение КАК ВТ_Подразделение
		// ++ rarus PleA 04.03.2021 [29363 ]
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусПрименимостьГруппПользователей КАК рарусПрименимостьГруппПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.рарусПрименимостьГруппПользователей КАК рарусПрименимостьГруппПользователей
		// -- rarus PleA
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Пользователи КАК ВТ_Пользователи
		|				ПО ГруппыПользователейСостав.Пользователь = ВТ_Пользователи.Пользователь
		|			ПО рарусПрименимостьГруппПользователей.ГруппаПользователей = ГруппыПользователейСостав.Ссылка
		|		ПО ВТ_Подразделение.Судно = рарусПрименимостьГруппПользователей.Судно
		|			И (рарусПрименимостьГруппПользователей.Используется = ИСТИНА)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Подразделение.Подразделение,
		|	ВТ_Подразделение.Судно,
		|	рарусПрименимостьГруппПользователей.ГруппаПользователей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПользователиПоГруппам.Подразделение КАК Подразделение,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ПользователиПоГруппам.Судно) КАК СудноПредставление,
		|	ВТ_ПользователиПоГруппам.ГруппаПользователей КАК ГруппаПользователей,
		|	ВТ_ПользователиПоГруппам.Пользователь КАК Пользователь,
		|	ВТ_ПользователиПоГруппам.КоличествоПользователей КАК КоличествоПользователей,
		|	ПРЕДСТАВЛЕНИЕ(ВТ_ПользователиПоГруппам.ГруппаПользователей) КАК ГруппаПользователейПредставление
		|ИЗ
		|	ВТ_ПользователиПоГруппам КАК ВТ_ПользователиПоГруппам
		|ГДЕ
		// ++ rarus PleA 04.06.2021 [29363 ]
		//|	ВТ_ПользователиПоГруппам.КоличествоПользователей = 0";
		// -- rarus PleA
		// ++ rarus PleA 04.06.2021 [29363 ]
		|	ВТ_ПользователиПоГруппам.КоличествоПользователей = 0 
		|		ИЛИ ВТ_ПользователиПоГруппам.КоличествоПользователей = 1";
		// -- rarus PleA
	
	Запрос.УстановитьПараметр("Судно", Судно);
	
	ВыборкаПустыхГрупп = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПустыхГрупп.Следующий() Цикл 
		
		// ++ rarus PleA 04.06.2021 [29363 ]			
		Если ЗначениеЗаполнено(ВыборкаПустыхГрупп.Пользователь) тогда
			ПрочитанныеСвойства = Пользователи.СвойстваПользователяИБ(ВыборкаПустыхГрупп.Пользователь.ИдентификаторПользователяИБ);
			Если ПрочитанныеСвойства <> Неопределено тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;			
		// -- rarus PleA
		
		ИмяПользователя = СтрШаблон("%1 (%2)", ВыборкаПустыхГрупп.ГруппаПользователейПредставление, ВыборкаПустыхГрупп.СудноПредставление);
		
		СвойстваПользователя = Пользователи.СвойстваПользователяИБ(ИмяПользователя);
		Если СвойстваПользователя = Неопределено тогда
			
			СвойстваПользователя = Пользователи.НовоеОписаниеПользователяИБ();
			СвойстваПользователя.Имя = ИмяПользователя;
			СвойстваПользователя.ПолноеИмя = ИмяПользователя;
			СвойстваПользователя.АутентификацияСтандартная = Истина;
			СвойстваПользователя.ПоказыватьВСпискеВыбора = Истина;
			СвойстваПользователя.Вставить("Действие", "Записать");
			// ++ rarus PleA 04.06.2021 [29363 ]
			//НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
			//НовыйПользователь.Наименование = ИмяПользователя;
			// -- rarus PleA
			// ++ rarus PleA 04.06.2021 [29363 ]			
			Если ЗначениеЗаполнено(ВыборкаПустыхГрупп.Пользователь) тогда
				НовыйПользователь = ВыборкаПустыхГрупп.Пользователь.ПолучитьОбъект();				
			Иначе
				НовыйПользователь = Справочники.Пользователи.СоздатьЭлемент();
				НовыйПользователь.Наименование = ИмяПользователя;	
			КонецЕсли;			
			// -- rarus PleA
		Иначе
			НовыйПользователь = Пользователи.НайтиПоИмени(СвойстваПользователя.Имя).ПолучитьОбъект();
			СвойстваПользователя.Вставить("Действие", "Записать");
		КонецЕсли;	
		
		НовыйПользователь.Подразделение = ВыборкаПустыхГрупп.Подразделение;
		НовыйПользователь.ДополнительныеСвойства.Вставить("ОписаниеПользователяИБ", СвойстваПользователя);
		НовыйПользователь.Записать();
		
		// ++ rarus PleA 04.06.2021 [29363 дачи]
		//ПользователиСлужебный.ДобавитьПользователяВГруппу(ВыборкаПустыхГрупп.ГруппаПользователей, НовыйПользователь.Ссылка, "Пользователь");
		// -- rarus PleA
		// ++ rarus PleA 04.06.2021 [29363 ]		
		Если ВыборкаПустыхГрупп.КоличествоПользователей = 0 тогда
			ПользователиСлужебный.ДобавитьПользователяВГруппу(ВыборкаПустыхГрупп.ГруппаПользователей, НовыйПользователь.Ссылка, "Пользователь");
		КонецЕсли;
		// -- rarus PleA
		
		МассивСозданныхПользователей.Добавить(НовыйПользователь.Ссылка);
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'рарусОбщегоНазначенияСервер.ПроверитьСоздатьПользователей'"), УровеньЖурналаРегистрации.Информация, Метаданные.РегламентныеЗадания.рарусОбновлениеСоставаПользователейНаСудне, , СтрШаблон("Создан новый пользователь информационной базы %1 в группе %2", СвойстваПользователя.Имя, ВыборкаПустыхГрупп.ГруппаПользователейПредставление));
	КонецЦикла;
	
	Возврат МассивСозданныхПользователей;
	
КонецФункции

Процедура ОбновитьСоставПользователейСудна() Экспорт
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		ВызватьИсключение НСтр("ru = 'Регламентное задание недоступно в главном узле.'");
	КонецЕсли;
	
	// ++ rarus makole 2021-04-23
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рарусОбновлениеСоставаПользователейНаСудне);
	// -- rarus makole 2021-04-23
	
	//ВыполнитьОбновлениеСоставаПользователейСудна();
	
КонецПроцедуры

Функция ВыполнитьОбновлениеСоставаПользователейСудна() Экспорт
	
	МассивСозданныхПользователей = Новый Массив;
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление состава пользователей'"), УровеньЖурналаРегистрации.Информация, , , "Обновление пользователей не выполняется в ЦБ. Только на судах");
		Возврат МассивСозданныхПользователей;
	КонецЕсли;
	
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	Если ОсновноеСудно = ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка") Тогда
		
		ОсновноеСудно = ОсновноеСудноИзНачальныхНастроек();
		
		Если ОсновноеСудно = Неопределено Тогда 
			ЗаписьЖурналаРегистрации(НСтр("ru = 'РегламентноеЗадание.рарусОбновлениеСоставаПользователейНаСудне'"), УровеньЖурналаРегистрации.Предупреждение, Метаданные.РегламентныеЗадания.рарусОбновлениеСоставаПользователейНаСудне, , "Не установлено основное судно, выполнение прервано");
			Возврат МассивСозданныхПользователей;
		КонецЕсли;
		
		vftОбщегоНазначенияВызовСервера.УстановитьЗначениеПоУмолчанию("ОсновноеСудно",ОсновноеСудно);
		
	КонецЕсли;
	
	МассивСозданныхПользователей = ПроверитьСоздатьПользователей(ОсновноеСудно);
	
	Возврат МассивСозданныхПользователей;
	
КонецФункции

Функция ОсновноеСудноИзНачальныхНастроек() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	vftСуда.Ссылка КАК Судно
		|ИЗ
		|	РегистрСведений.vftНастройкиПользователей КАК vftНастройкиПользователей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.vftСуда КАК vftСуда
		|		ПО vftНастройкиПользователей.Судно = vftСуда.Ссылка";
	
	ВыборкаСудна = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаСудна.Следующий() Тогда
		Возврат ВыборкаСудна.Судно
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Процедура УстановитьИспользованиеРегламентногоЗаданияОбновлениеСоставаПользователей() Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.рарусОбновлениеСоставаПользователейНаСудне);
	ЭтоГлавныйУзел = vftОбщегоНазначения.ЭтоГлавныйУзел();
	
	Если ЭтоГлавныйУзел И Задание.Использование = Истина Тогда
		Задание.Использование = Ложь;
		Задание.Записать();
	ИначеЕсли Не ЭтоГлавныйУзел И Задание.Использование = Ложь Тогда
		Задание.Использование = Истина;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры
// -- rarus makole 2020-12-17 [ПРОТОКОЛ ДЕМОНСТРАЦИИ № Р-62 от 14.12.2020]

// ++ rarus makole 2021-01-18 
Функция ОсновноеСудно() Экспорт
	
	ОсновноеСудно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	Возврат ОсновноеСудно;
	
КонецФункции

Функция ОсновнаяОрганизация() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Возврат Константы.впОсновнаяОрганизация.Получить();
	
КонецФункции

Функция СкладСудна(Судно = Неопределено) Экспорт
	
	Если Судно = Неопределено Тогда
		
		Судно = рарусОбщегоНазначенияСервер.ОсновноеСудно();
		
	КонецЕсли;
	
	Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
	Если Судно <> ПредопределенноеЗначение("Справочник.vftСуда.ПустаяСсылка") Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Склады.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Склады КАК Склады
			|ГДЕ
			|	Склады.Судно = &Судно
			|
			|УПОРЯДОЧИТЬ ПО
			|	Склады.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("Судно", Судно);
		
		ВыборкаСклад = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаСклад.Следующий() Тогда
			Склад = ВыборкаСклад.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Склад;
	
КонецФункции
// -- rarus makole 2021-01-18 

// ++ rarus PleA 12.02.2021 
Функция ИспользоватьСудовоеСнабжение(Параметры = Неопределено) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("рарусИспользоватьСудовоеСнабжение", Параметры);
	
КонецФункции
// -- rarus PleA

// ++ rarus PleA 03.03.2021 
Процедура УстановитьВерсиюКонфигурацииСудна() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;

	ТекущаяВерсия = Метаданные.Версия;
		
	ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
	
	МЗ = РегистрыСведений.рарусВерсииКонфигурации.СоздатьМенеджерЗаписи();
	МЗ.УзелПрефикс = ЭтотУзел.Код;
	МЗ.Прочитать();
	
	НужноОбновить = Истина;
	
	Если МЗ.Выбран() тогда
		Если МЗ.НомерВерсии = ТекущаяВерсия
			И МЗ.НомерВерсииПлатформы = ВерсияПлатформы тогда
			НужноОбновить = Ложь;
		КонецЕсли;				
	КонецЕсли;
	
	Если НужноОбновить тогда
		ОбновитьВерсиюКонфигурацииСудна();
	КонецЕсли;	
	
КонецПроцедуры
// -- rarus PleA

// ++ rarus PleA 29.04.2021 [ВПIT-0022897]
Процедура ОбновитьВерсиюКонфигурацииСудна() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СистемнаяИнформация.ВерсияПриложения;
	
	ТекущаяВерсия = Метаданные.Версия;
	
	ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
	
	МЗ = РегистрыСведений.рарусВерсииКонфигурации.СоздатьМенеджерЗаписи();	
	МЗ.УзелПрефикс = ЭтотУзел.Код;
	МЗ.НомерВерсии = ТекущаяВерсия;
	МЗ.НомерВерсииПлатформы = ВерсияПлатформы;
	МЗ.Записать();
			
КонецПроцедуры

// -- rarus PleA

// ++ rarus makole 2021-03-26

// Возвращает структуру версий конфигурации и платформы узла плана обмена Полный
// Параметры:
// 	КодУзла	-	Строка - Необязательный. Код узла плана обмена Полный, по которому запрашиваются данные
//						Если не передать, функция вернёт версии текущей ИБ
Функция ВерсияКонфигурацииПлатформы(КодУзла = Неопределено) Экспорт
	
	СтруктураВерсий = Новый Структура("НомерВерсии, НомерВерсииПлатформы", "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусВерсииКонфигурации.НомерВерсии КАК НомерВерсии,
		|	рарусВерсииКонфигурации.НомерВерсииПлатформы КАК НомерВерсииПлатформы
		|ИЗ
		|	РегистрСведений.рарусВерсииКонфигурации КАК рарусВерсииКонфигурации
		|ГДЕ
		|	рарусВерсииКонфигурации.УзелПрефикс = &УзелПрефикс";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КодУзла = Неопределено Тогда
		ЭтотУзел = ПланыОбмена.Полный.ЭтотУзел();
		КодУзла = ЭтотУзел.Код;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("УзелПрефикс", КодУзла);
	
	ВыборкаВерсии = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаВерсии.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураВерсий, ВыборкаВерсии)
	КонецЕсли;
	
	Возврат СтруктураВерсий;
	
КонецФункции
// -- rarus makole 2021-03-26

// ++ rarus makole 2021-03-31
Функция ЭтоКапитан(Пользователь = Неопределено) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь()
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыПользователейСостав.Пользователь КАК Пользователь
		|ПОМЕСТИТЬ ВТ_ВсеКапитаны
		|ИЗ
		|	Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейСостав
		|ГДЕ
		|	ГруппыПользователейСостав.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.Капитан)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВТ_ВсеКапитаны.Пользователь ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Капитан
		|ИЗ
		|	ВТ_ВсеКапитаны КАК ВТ_ВсеКапитаны
		|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО ВТ_ВсеКапитаны.Пользователь = Пользователи.Ссылка
		|ГДЕ
		|	Пользователи.Ссылка = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаРезультат.Следующий() Тогда
		Возврат ВыборкаРезультат.Капитан
	Иначе 
		Возврат Ложь
	КонецЕсли;
	
КонецФункции
// -- rarus makole 2021-03-31