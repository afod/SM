Процедура ДобавитьНапоминаниеПриСменеСтатуса(Заявка) Экспорт
		
	СоздатьОтключитьНапоминаниеПоЗаявкеЕслиСменаСтатуса(Заявка);
		
КонецПроцедуры	

Функция СоздатьОтключитьНапоминаниеПоЗаявкеЕслиСменаСтатуса(Заявка) 
	
	СтатусСогласованияУстановить = Неопределено;
	Если рарусЗаявкаНаСнабжениеСервер.ЭтоСменаСтатуса(Заявка, СтатусСогласованияУстановить) тогда
		
		ОтключитьТекущиеНапоминания(Заявка.Ссылка);
		
		СтатусыДляНапоминаний = ПолучитьСтатусыДляНапоминаний();
		
		Если СтатусыДляНапоминаний.Получить(СтатусСогласованияУстановить) <> Неопределено тогда
						
			СоздатьНапоминанияПользователямПоЗаявке(Заявка.Ссылка, СтатусСогласованияУстановить);	
			
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецФункции

Функция ОтключитьТекущиеНапоминания(Заявка)

	СписокНапоминаний = НайтиНапоминания(Заявка);	
	
	Для Каждого Напоминание Из СписокНапоминаний цикл
		НапоминанияПользователя.УдалитьНапоминание(Напоминание);
	КонецЦикла;

КонецФункции 

// Возвращает список напоминаний текущего пользователя.
//
// Отличается от типовой НапоминанияПользователя.НайтиНапоминания(Знач Предмет = Неопределено, Идентификатор = Неопределено),
// тем что нет отбора по текущему пользователю
//
// Параметры:
//  Предмет - Ссылка, Массив - предмет или предметы напоминания.
//  Идентификатор - Строка - уточняет предмет напоминания, например, "ДеньРождения".
//
// Возвращаемое значение:
//    Массив - коллекция напоминаний в виде структур с полями, соответствующими полям регистра сведений НапоминанияПользователя.
//
Функция НайтиНапоминания(Знач Предмет = Неопределено, Идентификатор = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	&ОтборПоПредмету
	|	И &ОтборПоИдентификатору";
	
	ОтборПоПредмету = "ИСТИНА";
	Если ЗначениеЗаполнено(Предмет) Тогда
		ОтборПоПредмету = "НапоминанияПользователя.Источник В(&Предмет)";
	КонецЕсли;
	
	ОтборПоИдентификатору = "ИСТИНА";
	Если ЗначениеЗаполнено(Идентификатор) Тогда
		ОтборПоИдентификатору = "НапоминанияПользователя.Идентификатор = &Идентификатор";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПредмету", ОтборПоПредмету);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИдентификатору", ОтборПоИдентификатору);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Предмет", Предмет);
	Запрос.УстановитьПараметр("Идентификатор", Идентификатор);
	
	ТаблицаНапоминаний = Запрос.Выполнить().Выгрузить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ТаблицаНапоминаний);
	
КонецФункции
 
Процедура СоздатьНапоминанияПользователямПоЗаявке(Заявка, СтатусСогласованияУстановить)
	
	ПользователиМассив = ПолучитьПользователейДляНапоминанияПоЗаявке(Заявка, СтатусСогласованияУстановить);
	
	Для Каждого Пользователь Из ПользователиМассив цикл
		СоздатьНапоминаниеПользователюПоЗаявке(Заявка, Пользователь, СтатусСогласованияУстановить);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьНапоминаниеПользователюПоЗаявке(Заявка, Пользователь, СтатусСогласования)
	
	ТекстНапоминания = СформироватьТекстНапоминанияПоЗаявке(Заявка, СтатусСогласования);
	
	ВремяНапоминания = ПолучитьВремяНапоминания(Заявка);
	ИнтервалДо = 0;
	
	ПодключитьПроизвольноеНапоминание(Пользователь, ТекстНапоминания, ВремяНапоминания, ИнтервалДо, Заявка);

КонецПроцедуры

Функция ПолучитьПользователейДляНапоминанияПоЗаявке(Заявка, СтатусСогласования)
	
	ПользователиМассив = Новый Массив;
	
	Если СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаСогласованииКапитаном() тогда
		ПользователиМассив = ПользователиКапитаны();
	ИначеЕсли СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработку() Тогда
		ПользователиМассив = ИнициаторыЗаявки(Заявка);
	ИначеЕсли СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработкуКапитаном() Тогда 	
		ПользователиМассив = ПользователиКапитаны();
	КонецЕсли;	
	
	Возврат ПользователиМассив;
	
КонецФункции

Функция ПользователиКапитаны()

	ПользователиМассив = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() цикл
		
		Если рарусСостоянияРедактированияОбъектов.ЕстьПравоОтправкиНаБерег(Выборка.Ссылка) тогда
			
			ПользователиМассив.Добавить(Выборка.Ссылка);	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ПользователиМассив;

КонецФункции 

Функция ИнициаторыЗаявки(Заявка)
	
	ПользователиМассив = Новый Массив;
	
	Инициатор = ИнициаторЗаявки(Заявка);
	Если ЗначениеЗаполнено(Инициатор) тогда
		ПользователиМассив.Добавить(Инициатор);
	КонецЕсли;
	
	Возврат ПользователиМассив;	
	
КонецФункции

Функция ИнициаторЗаявки(Заявка)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Заявка, "Ответственный");

КонецФункции	

Функция ПолучитьСтатусыДляНапоминаний()
	
	СтатусыДляНапоминаний = Новый Соответствие;
	СтатусыДляНапоминаний.Вставить(рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаСогласованииКапитаном(), Истина);
	СтатусыДляНапоминаний.Вставить(рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработку(), Истина);
	СтатусыДляНапоминаний.Вставить(рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработкуКапитаном(), Истина);
	
	Возврат СтатусыДляНапоминаний;
	
КонецФункции	

Функция СформироватьТекстНапоминанияПоЗаявке(Заявка, СтатусСогласования)
	
	Если СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаСогласованииКапитаном() тогда
		Возврат СтрШаблон("Рассмотреть: %1", Заявка);
	ИначеЕсли СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработку() Тогда 	
	    Возврат СтрШаблон("На доработку: %1", Заявка);
	ИначеЕсли СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработкуКапитаном() Тогда 	
	    Возврат СтрШаблон("На доработку: %1", Заявка); 	
	КонецЕсли;
	
	Возврат Строка(Заявка);
	
КонецФункции	

Функция ПолучитьВремяНапоминания(Заявка)
	
	Возврат ТекущаяДатаСеанса()+30;
	
КонецФункции

#Область Напоминания

Функция ПодключитьПроизвольноеНапоминание(Пользователь, Текст, ВремяСобытия, ИнтервалДоСобытия = 0, Предмет = Неопределено, Идентификатор = Неопределено) Экспорт
	ПараметрыНапоминания = Новый Структура;
	ПараметрыНапоминания.Вставить("Пользователь", Пользователь);
	ПараметрыНапоминания.Вставить("Описание", Текст);
	Если ТипЗнч(ВремяСобытия) = Тип("РасписаниеРегламентногоЗадания") Тогда
		ПараметрыНапоминания.Вставить("Расписание", ВремяСобытия);
	Иначе
		ПараметрыНапоминания.Вставить("ВремяСобытия", ВремяСобытия);
	КонецЕсли;
	ПараметрыНапоминания.Вставить("ИнтервалВремениНапоминания", ИнтервалДоСобытия);
	ПараметрыНапоминания.Вставить("Источник", Предмет);
	ПараметрыНапоминания.Вставить("Идентификатор", Идентификатор);
	
	Напоминание = СоздатьНапоминание(ПараметрыНапоминания);
	НапоминанияПользователяСлужебный.ПодключитьНапоминание(Напоминание);
	
	Возврат Напоминание;
	
КонецФункции

// Возвращает структуру нового напоминания для последующего подключения.
Функция СоздатьНапоминание(ПараметрыНапоминания)
	
	Напоминание = НапоминанияПользователяКлиентСервер.ОписаниеНапоминания(ПараметрыНапоминания, Истина);
	
	Если Не ЗначениеЗаполнено(Напоминание.Пользователь) Тогда
		Напоминание.Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Напоминание.СпособУстановкиВремениНапоминания) Тогда
		Если ЗначениеЗаполнено(Напоминание.Источник) И Не ПустаяСтрока(Напоминание.ИмяРеквизитаИсточника) Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета;
		ИначеЕсли Напоминание.Расписание <> Неопределено Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.Периодически;
		ИначеЕсли Не ЗначениеЗаполнено(Напоминание.ВремяСобытия) Тогда
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени;
		Иначе
			Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		КонецЕсли;
	КонецЕсли;
	
	Если Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноВремениПредмета Тогда
		Напоминание.ВремяСобытия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Напоминание.Источник, Напоминание.ИмяРеквизитаИсточника);
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - ?(ЗначениеЗаполнено(Напоминание.ВремяСобытия), Напоминание.ИнтервалВремениНапоминания, 0);
	ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ОтносительноТекущегоВремени Тогда
		Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя;
		Напоминание.ВремяСобытия = ТекущаяДатаСеанса() + Напоминание.ИнтервалВремениНапоминания;
	ИначеЕсли Напоминание.СпособУстановкиВремениНапоминания = Перечисления.СпособыУстановкиВремениНапоминания.ВУказанноеВремя Тогда
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - Напоминание.ИнтервалВремениНапоминания;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Напоминание.СрокНапоминания) Тогда
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия;
	КонецЕсли;
	
	Если Напоминание.ПовторятьЕжегодно Тогда
		Если ЗначениеЗаполнено(Напоминание.ВремяСобытия) Тогда
			Напоминание.Расписание = НапоминанияПользователяКлиентСервер.ЕжегодноеРасписание(Напоминание.ВремяСобытия);
		КонецЕсли;
	КонецЕсли;
	
	Если Напоминание.Расписание <> Неопределено Тогда
		Напоминание.ВремяСобытия = ПолучитьБлижайшуюДатуСобытияПоРасписанию(Напоминание.Расписание);
		Напоминание.СрокНапоминания = Напоминание.ВремяСобытия - Напоминание.ИнтервалВремениНапоминания;
	КонецЕсли;
	
	Напоминание.Расписание = Новый ХранилищеЗначения(Напоминание.Расписание, Новый СжатиеДанных(9));
	
	Возврат Напоминание;
	
КонецФункции

Функция ПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание)
	
	Возврат НапоминанияПользователяСлужебный.ПолучитьБлижайшуюДатуСобытияПоРасписанию(Расписание);
	
КонецФункции	

#КонецОбласти 	