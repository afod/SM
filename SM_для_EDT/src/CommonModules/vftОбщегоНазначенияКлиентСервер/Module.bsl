// Преобразует исходную строку в транслит.
Функция СтрокаЛатиницей(Знач Строка) Экспорт
	Результат = "";
	
	Соответствие = СоответствиеКириллицыИЛатиницы();
	
	ПредыдущийСимвол = "";
	Для Позиция = 1 По СтрДлина(Строка) Цикл
		Символ = Сред(Строка, Позиция, 1);
		СимволЛатиницей = Соответствие[НРег(Символ)]; // поиск соответствия без учета регистра
		Если СимволЛатиницей = Неопределено Тогда
			// другие символы остаются "как есть"
			СимволЛатиницей = Символ;
		Иначе
			Если Символ = ВРег(Символ) Тогда
				СимволЛатиницей = ТРег(СимволЛатиницей); // восстанавливаем регистр
			КонецЕсли;
		КонецЕсли;
		Результат = Результат + СимволЛатиницей;
		ПредыдущийСимвол = СимволЛатиницей;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СоответствиеКириллицыИЛатиницы()
	// транслитерация, используемая в загранпаспортах 1997-2010 гг.
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("а","a");
	Соответствие.Вставить("б","b");
	Соответствие.Вставить("в","v");
	Соответствие.Вставить("г","g");
	Соответствие.Вставить("д","d");
	Соответствие.Вставить("е","e");
	Соответствие.Вставить("ё","e");
	Соответствие.Вставить("ж","zh");
	Соответствие.Вставить("з","z");
	Соответствие.Вставить("и","i");
	Соответствие.Вставить("й","y");
	Соответствие.Вставить("к","k");
	Соответствие.Вставить("л","l");
	Соответствие.Вставить("м","m");
	Соответствие.Вставить("н","n");
	Соответствие.Вставить("о","o");
	Соответствие.Вставить("п","p");
	Соответствие.Вставить("р","r");
	Соответствие.Вставить("с","s");
	Соответствие.Вставить("т","t");
	Соответствие.Вставить("у","u");
	Соответствие.Вставить("ф","f");
	Соответствие.Вставить("х","kh");
	Соответствие.Вставить("ц","ts");
	Соответствие.Вставить("ч","ch");
	Соответствие.Вставить("ш","sh");
	Соответствие.Вставить("щ","shch");
	Соответствие.Вставить("ъ","""");
	Соответствие.Вставить("ы","y");
	Соответствие.Вставить("ь",""); // пропускается
	Соответствие.Вставить("э","e");
	Соответствие.Вставить("ю","yu");
	Соответствие.Вставить("я","ya");
	
	Возврат Соответствие;
КонецФункции

&НаСервере
Функция ПолучитьВремя(Количество) Экспорт
	H = Цел(Количество/3600);
	M = Цел((Количество - H * 3600)/60);
	S = Количество - H * 3600 - M * 60;
	
	Час_Мин_Сек = Строка(Формат(H,"ЧЦ=4; ЧН=; ЧГ=0") + ":"
	+ Формат(M,"ЧЦ=2;ЧН=;ЧВН=") + ":"
	+ Формат(S,"ЧЦ=2;ЧН=;ЧВН="));
	
	Возврат Час_Мин_Сек;
	
КонецФункции

&НаСервере
Функция ПолучитьВремяИзМинут(Количество) Экспорт
	H = Цел(Количество/60);
	M = Цел((Количество - H * 60));
	
	
	Час_Мин = Строка(Формат(H,"ЧЦ=4; ЧН=; ЧГ=0") + ":"
	+ Формат(M,"ЧЦ=2;ЧН=;ЧВН="));
	
	Возврат Час_Мин;
	
КонецФункции

//Функция преобразует тип Число в формате ЧЧ.ДЕСЯТЫЕ ДОЛИ ЧАСА в количество минут
//
&НаСервере
Функция ПолучитьВремяИзЧисла(Время) Экспорт
	Часы = Цел(Время);
	Минуты = (Время - Часы) * 60;
	Результат = Часы * 60 + Минуты;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ПроверитьПаролиПользователей() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	//rarus_AfoD 21.09.2021 < 
	Если Не ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() тогда		
		Возврат;
	КонецЕсли;
	//rarus_AfoD 21.09.2021 > 
	СписокНЗ = РегистрыСведений.vftНастройкиПользователей.СоздатьНаборЗаписей();
	СписокНЗ.Прочитать();
	Для каждого Пользователь Из СписокНЗ Цикл
		ИмяПользователя = Пользователь.Пользователь;
		НовыйПароль = Пользователь.Пароль;
		СтруктураСвойств = Новый Структура("ПользовательИнфБазыУникальныйИдентификатор,ПользовательИнфБазыПароль",Неопределено, НовыйПароль);
		ЗаписатьПользователяИБ(ИмяПользователя,СтруктураСвойств,Неопределено);
	КонецЦикла; 
КонецПроцедуры

//++rarus markim - копия из старой БСП (для упрощения, аналогичная процедура в новой БСП требует доп. трудозатрат)
&НаСервере
Функция ЗаписатьПользователяИБ(Знач Идентификатор, Знач НовыеСвойства, Знач НовыеРоли, Знач СоздатьНового = Ложь, ОписаниеОшибки = "") Экспорт
	
	ПользовательИБ = Неопределено;
	СтарыеСвойства = Неопределено;
	СтарыеРоли     = Неопределено;
	Свойства       = Неопределено;
	Роли           = Неопределено;
	
	ПредварительноеЧтение = ПрочитатьПользователяИБ(Идентификатор, СтарыеСвойства, СтарыеРоли, ОписаниеОшибки);
	
	Если НЕ ПрочитатьПользователяИБ(Идентификатор, Свойства, Роли, ОписаниеОшибки, ПользовательИБ) ИЛИ НЕ ПредварительноеЧтение Тогда
		
		Если СоздатьНового Тогда
			ПользовательИБ = ПользователиИнформационнойБазы.СоздатьПользователя();
		Иначе
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СоздатьНового Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно создать пользователя информационной базы ""%1"",
		                                        |так как он уже существует.'"),
				Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	// Подготовка новых значений свойств
	Для каждого КлючИЗначение Из Свойства Цикл
		Если НовыеСвойства.Свойство(КлючИЗначение.Ключ) И НовыеСвойства[КлючИЗначение.Ключ] <> Неопределено Тогда
			Свойства[КлючИЗначение.Ключ] = НовыеСвойства[КлючИЗначение.Ключ];
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРоли <> Неопределено Тогда
		Роли = НовыеРоли;
	КонецЕсли;
	
	// Установка новых значений свойств
	
	ПользовательИБ.Имя                         = Свойства.ПользовательИнфБазыИмя;
	ПользовательИБ.ПолноеИмя                   = Свойства.ПользовательИнфБазыПолноеИмя;
	ПользовательИБ.АутентификацияСтандартная   = Свойства.ПользовательИнфБазыАутентификацияСтандартная;
	ПользовательИБ.ПоказыватьВСпискеВыбора     = Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора;
	Если Свойства.ПользовательИнфБазыПароль <> Неопределено Тогда
		ПользовательИБ.Пароль                  = Свойства.ПользовательИнфБазыПароль;
	КонецЕсли;
	ПользовательИБ.ЗапрещеноИзменятьПароль     = Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль;
	ПользовательИБ.АутентификацияОС            = Свойства.ПользовательИнфБазыАутентификацияОС;
	ПользовательИБ.ПользовательОС              = Свойства.ПользовательИнфБазыПользовательОС;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыОсновнойИнтерфейс) Тогда
	    ПользовательИБ.ОсновнойИнтерфейс       = Метаданные.Интерфейсы[Свойства.ПользовательИнфБазыОсновнойИнтерфейс];
	Иначе
	    ПользовательИБ.ОсновнойИнтерфейс       = Неопределено;
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыРежимЗапуска) Тогда
	    ПользовательИБ.РежимЗапуска            = РежимЗапускаКлиентскогоПриложения[Свойства.ПользовательИнфБазыРежимЗапуска];
	КонецЕсли;
	Если ЗначениеЗаполнено(Свойства.ПользовательИнфБазыЯзык) Тогда
	    ПользовательИБ.Язык                    = Метаданные.Языки[Свойства.ПользовательИнфБазыЯзык];
	Иначе
	    ПользовательИБ.Язык                    = Неопределено;
	КонецЕсли;
	
	ПользовательИБ.Роли.Очистить();
	Для каждого Роль Из Роли Цикл
		ПользовательИБ.Роли.Добавить(Метаданные.Роли[Роль]);
	КонецЦикла;
	
	// Добавление роли ПолныеПрава, при попытке создать первого пользователя с пустым списком ролей
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() = 0 Тогда
		
		Если НЕ ПользовательИБ.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			ПользовательИБ.Роли.Добавить(Метаданные.Роли.ПолныеПрава);
		КонецЕсли;
		
		Если НЕ ПользовательИБ.Роли.Содержит(Пользователи.ЭтоПолноправныйПользователь(,Истина)) Тогда
			ПользовательИБ.Роли.Добавить(Пользователи.ЭтоПолноправныйПользователь(,Истина));
		КонецЕсли;
	КонецЕсли;
	
	// Попытка записи нового или измененного пользователяИБ
	Попытка
		ПользовательИБ.Записать();
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		Если ИнформацияОбОшибке.Причина = Неопределено Тогда
			ОписаниеОшибки = ИнформацияОбОшибке.Описание;
		Иначе
			ОписаниеОшибки = ИнформацияОбОшибке.Причина.Описание;
		КонецЕсли;
		ОписаниеОшибки = НСтр("ru = 'Ошибка при записи пользователя информационной базы:'") + Символы.ПС + ОписаниеОшибки;
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Пользователи'"), УровеньЖурналаРегистрации.Ошибка, , ,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Ложь;
	КонецПопытки;
	
	НовыеСвойства.ПользовательИнфБазыУникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
	
	ПользователиПереопределяемый.ПриЗаписиПользователяИнформационнойБазы(СтарыеСвойства, Свойства);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ПрочитатьПользователяИБ(Знач Идентификатор, Свойства = Неопределено, Роли = Неопределено, ОписаниеОшибки = "", ПользовательИБ = Неопределено) Экспорт
	
	// Подготовка структур возвращаемых данных
	Свойства = Новый Структура;
	Свойства.Вставить("ПользовательИнфБазыУникальныйИдентификатор",   Новый УникальныйИдентификатор);
	Свойства.Вставить("ПользовательИнфБазыИмя",                       "");
	Свойства.Вставить("ПользовательИнфБазыПолноеИмя",                 "");
	Свойства.Вставить("ПользовательИнфБазыАутентификацияСтандартная", Ложь);
	Свойства.Вставить("ПользовательИнфБазыПоказыватьВСпискеВыбора",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыПароль",                    Неопределено);
	Свойства.Вставить("ПользовательИнфБазыСохраняемоеЗначениеПароля", "");
	Свойства.Вставить("ПользовательИнфБазыПарольУстановлен",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыЗапрещеноИзменятьПароль",   Ложь);
	Свойства.Вставить("ПользовательИнфБазыАутентификацияОС",          Ложь);
	Свойства.Вставить("ПользовательИнфБазыПользовательОС",            "");
	Свойства.Вставить("ПользовательИнфБазыОсновнойИнтерфейс",         ?(Метаданные.ОсновнойИнтерфейс = Неопределено, "", Метаданные.ОсновнойИнтерфейс.Имя));
	Свойства.Вставить("ПользовательИнфБазыРежимЗапуска",              "Авто");
	Свойства.Вставить("ПользовательИнфБазыЯзык",                      ?(Метаданные.ОсновнойЯзык = Неопределено, "", Метаданные.ОсновнойЯзык.Имя));
	
	Роли = Новый Массив;
	
	Если ТипЗнч(Идентификатор) = Тип("УникальныйИдентификатор") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Идентификатор);
	ИначеЕсли ТипЗнч(Идентификатор) = Тип("Строка") Тогда
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(Идентификатор);
	Иначе
		ПользовательИБ = Неопределено;
	КонецЕсли;
	
	Если ПользовательИБ = Неопределено Тогда
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Пользователь информационной базы ""%1""' не найден."), Идентификатор);
		Возврат Ложь;
	КонецЕсли;
	
	Свойства.ПользовательИнфБазыУникальныйИдентификатор     = ПользовательИБ.УникальныйИдентификатор;
	Свойства.ПользовательИнфБазыИмя                         = ПользовательИБ.Имя;
	Свойства.ПользовательИнфБазыПолноеИмя                   = ПользовательИБ.ПолноеИмя;
	Свойства.ПользовательИнфБазыАутентификацияСтандартная   = ПользовательИБ.АутентификацияСтандартная;
	Свойства.ПользовательИнфБазыПоказыватьВСпискеВыбора     = ПользовательИБ.ПоказыватьВСпискеВыбора;
	Свойства.ПользовательИнфБазыСохраняемоеЗначениеПароля   = ПользовательИБ.СохраняемоеЗначениеПароля;
	Свойства.ПользовательИнфБазыПарольУстановлен            = ПользовательИБ.ПарольУстановлен;
	Свойства.ПользовательИнфБазыЗапрещеноИзменятьПароль     = ПользовательИБ.ЗапрещеноИзменятьПароль;
	Свойства.ПользовательИнфБазыАутентификацияОС            = ПользовательИБ.АутентификацияОС;
	Свойства.ПользовательИнфБазыПользовательОС              = ПользовательИБ.ПользовательОС;
	Свойства.ПользовательИнфБазыОсновнойИнтерфейс           = ?(ПользовательИБ.ОсновнойИнтерфейс = Неопределено, "", ПользовательИБ.ОсновнойИнтерфейс.Имя);
	Свойства.ПользовательИнфБазыРежимЗапуска                = ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение,
	                                                            "ОбычноеПриложение",
	                                                            ?(ПользовательИБ.РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение,
	                                                              "УправляемоеПриложение",
	                                                              "Авто"));
	Свойства.ПользовательИнфБазыЯзык                        = ?(ПользовательИБ.Язык = Неопределено, "", ПользовательИБ.Язык.Имя);
	
	Для каждого Роль Из ПользовательИБ.Роли Цикл
		Роли.Добавить(Роль.Имя);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//--rarus markim