
#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
		
	Если НаФормуДокументаДобавляетсяКомандыСУБ(Форма) Тогда
	
	     РазместитьКомандыВзаимодействияСБерегомНаФорме(Форма, ДополнительныеПараметры);
		 
		 УстановитьВидимостьДоступностьЭлементовСУБ(Форма);
		 
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаЗаполнениеДокументовСУБ(Объект) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ") тогда
		Возврат;		
	КонецЕсли;
		
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Объект));
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ФИОКапитана", МетаданныеОбъекта) Тогда
			
		Если Не ЗначениеЗаполнено(Объект.ФИОКапитана) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Состав.Пользователь КАК Пользователь
			|ИЗ
			|	Справочник.ГруппыПользователей.Состав КАК Состав
			|ГДЕ
			|	Состав.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", Справочники.ГруппыПользователей.Капитан);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Выборка.Следующий();
			
			Пользователь =  Выборка.Пользователь;
				
			КапитанСудна =  РегистрыСведений.рарусСоответствиеПользователяФизическомуЛицу.ФизическоеЛицоПользователя(Пользователь,ТекущаяДата());
			
			Если Не КапитанСудна = Неопределено Тогда		
				Объект.ФИОКапитана = КапитанСудна.ФизЛицо;	
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Статус", МетаданныеОбъекта) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Статус) Тогда	
			
			// вопрос по статусу, нужно привести к единому.
			
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.vftАнализСУБ") Тогда			
				Объект.Статус = Перечисления.vftСтатусыДокументовСообщений.Черновик;			
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.vftДокладыОНесоответствии") Тогда
				Объект.Статус = Перечисления.vftСтатусыДокументовСообщений.Черновик;	
			ИначеЕсли  ТипЗнч(Объект) = Тип("ДокументОбъект.vftСообщениеОПотенциальномИнциденте") Тогда
				Объект.Статус = Перечисления.vftСтатусыДокументовСообщений.Черновик;
			ИначеЕсли  ТипЗнч(Объект) = Тип("ДокументОбъект.vftДокладОСостоянииБезопасности") Тогда
	             Объект.Статус = Перечисления.vftСтатусыДокументовСообщений.Черновик;
			ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.vftНесоответствия") Тогда
				Объект.Статус = Перечисления.vftСтатусыДокументовСообщений.Черновик;	
			ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.vftРапортОПоврежденииНеисправности") Тогда
				Объект.Статус = Перечисления.vftСтатусыДокументаРапортОПовреждении.Черновик;
			КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Судно", МетаданныеОбъекта) Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Судно) Тогда		
			Объект.Судно = vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Судно", МетаданныеОбъекта) Тогда
			
		Если Не ЗначениеЗаполнено(Объект.Дата) Тогда			
			Объект.Дата = ТекущаяДата();			
		КонецЕсли;		
			
	КонецЕсли;

КонецПроцедуры

#Область ОбработчикиСобытияФорм

Процедура ДоработатьДинамическийСписокДокументовСУБ(ТекстЗапроса, ИмяОсновнойТаблицы = Неопределено) Экспорт
	
	УсловиеЗапроса = "
	|{ГДЕ
	| (#ОсновнаяТаблица.Судно В (&МассивСудовВходящихВГруппу) ИЛИ &НеИспользоватьОтборСписка)}";	
	
	УсловиеЗапроса = СтрЗаменить(УсловиеЗапроса, "#ОсновнаяТаблица", СтрЗаменить(ИмяОсновнойТаблицы,".",""));
		
	ТекстЗапроса = ТекстЗапроса + УсловиеЗапроса;  
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьВидимостьДоступностьЭлементовСУБ(Форма)
	                                                                                               
	ОбъкетСсылка = Форма.Объект.Ссылка;                                                          
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементыФормы.Статус.Вид = ВидПоляФормы.ПолеНадписи;
	
	Если ТипЗнч(ОбъкетСсылка) = Тип("ДокументСсылка.vftСообщениеОПотенциальномИнциденте") Тогда		
		ВзаимодействияКлиентСервер.УстановитьСвойствоЭлементовГруппы(ЭлементыФормы.ГруппаОтветКомпании,"ТолькоПросмотр",Истина);
	КонецЕсли;
				
КонецПроцедуры

Функция НаФормуДокументаДобавляетсяКомандыСУБ(Форма)
	
	Если Не ФормаЯвляетсяФормойДокументаКоторыйПроверяется(Форма.ИмяФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//rarus_AfoD 27.08.2021 < 
	Если ТипЗнч(Форма.Объект) = Тип("ДанныеФормыСтруктура") И Форма.Объект.Свойство("Ссылка") И 
		(ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.vftДокладыОНесоответствии") ИЛИ ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.vftНесоответствия")) Тогда
		
		ПараметрыОпции = Новый Структура;
		ПараметрыОпции.Вставить("Судно", Форма.Объект.Судно);
		ПараметрыОпции.Вставить("Период", Форма.Объект.Дата);
		
		Если Не ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ", ПараметрыОпции) Тогда
			Возврат Ложь;	
		КонецЕсли;	
		
	Иначе
		
		Возврат ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");
		
	КонецЕсли; 
	//rarus_AfoD 27.08.2021 > 
	
	Возврат Истина;
	
КонецФункции

Функция ФормаЯвляетсяФормойДокументаКоторыйПроверяется(ИмяФормы)
	
	РезультатПроверки = Ложь;
	
	МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	Если МассивИмениФормы.Получить(0) = "Документ" Тогда
		ТипДокументаФормы = Тип("ДокументСсылка."+МассивИмениФормы.Получить(1));
		
		ФормаЯвляетсяОсновнойФормойДокумента = СтрНайти(МассивИмениФормы.Получить(3), "ФормаДокумента")>0;
		
		Если ЭтотТипДокументаДолженИнтегрироваться(ТипДокументаФормы) И ФормаЯвляетсяОсновнойФормойДокумента Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
		
	ИначеЕсли МассивИмениФормы.Получить(0) = "Справочник" Тогда
		ТипДокументаФормы = Тип("СправочникСсылка."+МассивИмениФормы.Получить(1));
		
		ФормаЯвляетсяОсновнойФормойДокумента = СтрНайти(МассивИмениФормы.Получить(3), "ФормаЭлемента") > 0;
		
		Если ФормаЯвляетсяОсновнойФормойДокумента И ЭтотТипДокументаДолженИнтегрироваться(ТипДокументаФормы) Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;	
	
КонецФункции

Функция ЭтотТипДокументаДолженИнтегрироваться(ТипДокумента) Экспорт
	
	Возврат ИнтегрируемыеТипыДокументов().Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

Функция ИнтегрируемыеТипыДокументов() Экспорт
	
	СписокИнтегрируемыхТипов = Метаданные.ОпределяемыеТипы.рарусОбъектыСУБ.Тип.Типы();
	СписокИнтегрируемыхТипов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокИнтегрируемыхТипов, ИсключаемыеТипыДляИнтеграции());
	Возврат СписокИнтегрируемыхТипов;
	
КонецФункции

Функция ИсключаемыеТипыДляИнтеграции() Экспорт
	
	МассивВозврата = Новый Массив;

	Возврат МассивВозврата;
	
КонецФункции
	
Функция ВидимостьКомандыОтправитьВБереговоеПодразделение(Форма, ИмяКоманды) Экспорт
	
	   Возврат ПроверитьСтатус(Форма.Объект.Статус, ИмяКоманды);
	
КонецФункции

Функция ПроверитьСтатус(Статус, ИмяКоманды) Экспорт
	
	СоответствиеСтатусов =  Новый Соответствие;
	
	Если ИмяКоманды = "ОтправитьВБереговоеПодразделение" Тогда
		
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Черновик,  Истина);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Отправлен, Ложь);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Получен,   Ложь);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Закрыт,    Ложь);
		
	Иначе
		
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Черновик,         Ложь);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Отправлен,        Ложь);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Получен,          Истина);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Закрыт,           Ложь);
		СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.ОтправленНаСудно, Истина);

	
	КонецЕсли;
	
	НайденныйСтатус  = СоответствиеСтатусов.Получить(Статус);
		
    Возврат НайденныйСтатус;
	   	
КонецФункции

Функция ФормированиеНаименованияКомандыПоСтатусам(Статус)
	
	ПредыдущиеСтатусы =  Новый Соответствие;
	
	ПредыдущиеСтатусы.Вставить(Перечисления.vftСтатусыДокументовСообщений.Черновик, НСтр("ru = 'Установить предыдущий статус;
	                                                                                                       |en = 'Set previous status'"));
	ПредыдущиеСтатусы.Вставить(Перечисления.vftСтатусыДокументовСообщений.Отправлен, НСтр("ru = 'Установить предыдущий статус: Черновик';
	                                                                                                       |en = 'Set previous status'"));
	ПредыдущиеСтатусы.Вставить(Перечисления.vftСтатусыДокументовСообщений.Закрыт, НСтр("ru = 'Установить предыдущий статус: Получен';
	                                                                                                       |en = 'Set previous status'"));
	
	ПредыдущиеСтатусы.Вставить(Перечисления.vftСтатусыДокументовСообщений.Инициировано, НСтр("ru = 'Установить предыдущий статус: Черновик';
	                                                                                                       |en = 'Set previous status'"));
	
	ПредыдущиеСтатусы.Вставить(Перечисления.vftСтатусыДокументовСообщений.Проведено, НСтр("ru = 'Установить предыдущий статус: Черновик';
	                                                                                                       |en = 'Set previous status'"));
	НайденныйСтатус  = ПредыдущиеСтатусы.Получить(Статус);
	
	Возврат НайденныйСтатус;

КонецФункции

Функция ПолучитьВозможныеСтатусы(Форма) Экспорт
	
	СоответствиеСтатусов = Новый Соответствие;
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(Перечисления.vftСтатусыДокументовСообщений.Черновик);
	
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Отправлен, МассивСтатусов);
	
	Возврат СоответствиеСтатусов;

КонецФункции

Процедура РазместитьКомандуОтменыСтатусаНаФорме(ДополнительныеПараметры) Экспорт
		
	Если Не ДополнительныеПараметры.ИспользоватьКоманду Тогда
		Возврат;
	КонецЕсли;

	МестоРазмещенияКомандПоУмолчанию = ДополнительныеПараметры.МестоРазмещенияКоманд;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если МестоРазмещенияКомандПоУмолчанию = Неопределено Тогда
		
		МестоРазмещенияКомандПоУмолчанию = Форма.КоманднаяПанель;
		
	КонецЕсли;
	
	ТекстЗаголовка = ФормированиеНаименованияКомандыПоСтатусам(Форма.Объект.Статус);
		
	ИмяКомандыСменыСтатуса = "СменитьСтатусДокумента";
	КомандаФормы           = Форма.Команды.Добавить(ИмяКомандыСменыСтатуса);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуСменыСтатуса";
	
	КомандаФормы.Заголовок = ТекстЗаголовка;
	
	ЭлементыФормы = Форма.Элементы;

	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыСменыСтатуса, Тип("КнопкаФормы"),МестоРазмещенияКомандПоУмолчанию);
	Кнопка.ИмяКоманды            = ИмяКомандыСменыСтатуса;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.Картинка              = БиблиотекаКартинок.Заметка;
	Кнопка.Отображение           = ОтображениеКнопки.КартинкаИТекст;
	Кнопка.Видимость             = ВидимостьКоманды(Форма);
	
КонецПроцедуры

Процедура РазместитьКомандыВзаимодействияСБерегомНаФорме(Форма, ДополнительныеПараметры)
	
	Стутус = Форма.Объект.Статус;
	Ссылка = Форма.Объект.Ссылка;
	
	Если Стутус = Перечисления.vftСтатусыДокументовСообщений.Черновик 
		И ТипЗнч(Ссылка) = Тип("СправочникСсылка.vftНесоответствия") Тогда
		Возврат;		
	ИначеЕсли Стутус = Перечисления.vftСтатусыДокументовСообщений.Закрыт  Тогда
		Возврат;		
	ИначеЕсли Стутус = Перечисления.vftСтатусыДокументовСообщений.Отправлен Тогда
		Возврат;	
	КонецЕсли;
	
	МестоРазмещенияКомандПоУмолчанию = Форма.Элементы.ГруппаКомандыСогласования;
	
	Если Стутус = Перечисления.vftСтатусыДокументовСообщений.Черновик Тогда	
		
		ИмяКомандыСменыСтатуса = "ОтправитьВБереговоеПодразделение";
		Заголовок              = НСтр("ru = 'Отправить в береговое подразделение';
		                                    |en = 'Send to coastal unit'");
		Видимость              =  ВидимостьКомандыОтправитьВБереговоеПодразделение(Форма, ИмяКомандыСменыСтатуса);
		
	ИначеЕсли Стутус = Перечисления.vftСтатусыДокументовСообщений.Получен
		Или Стутус = Перечисления.vftСтатусыДокументовСообщений.ОтправленНаСудно Тогда
		
		ИмяКомандыСменыСтатуса = "ЗакрытьДокумент";
		Заголовок              =  НСтр("ru = 'Закрыть и отправить в береговое подразделение';
		                                |en = 'Close and send to coastal unit'");
		
		Видимость              = ВидимостьКомандыОтправитьВБереговоеПодразделение(Форма, ИмяКомандыСменыСтатуса);
		
	КонецЕсли;
	
	КомандаФормы           = Форма.Команды.Добавить(ИмяКомандыСменыСтатуса);
	КомандаФормы.Действие  = "Подключаемый_ВыполнитьКомандуВзаимодействияСБерегом";	
	КомандаФормы.Заголовок = Заголовок;
	
	ЭлементыФормы = Форма.Элементы;
	
	Кнопка = ЭлементыФормы.Добавить(ИмяКомандыСменыСтатуса, Тип("КнопкаФормы"),МестоРазмещенияКомандПоУмолчанию);
	Кнопка.ИмяКоманды            = ИмяКомандыСменыСтатуса;
	Кнопка.ТолькоВоВсехДействиях = Ложь;
	Кнопка.Отображение           = ОтображениеКнопки.Текст;
	Кнопка.ЦветФона              = Новый Цвет(255, 204, 0);
	Кнопка.Видимость             = Видимость;
	
КонецПроцедуры

Функция ВидимостьКоманды(Форма)
	
	Возврат рарусСостоянияРегистрацииОбъектовНаПланахОбменаСервер.ПланОбменаПолныйОбъектДоступенДляРедактирования(Форма.Объект.Ссылка);
				
КонецФункции

Процедура СменитьСтатусДокумента(Форма) Экспорт
	
	
	
	
КонецПроцедуры
	
Функция ПараметрыПриСозданииНаСервере() Экспорт
	
	ПараметрыПриСоздании = Новый Структура("Форма, МестоРазмещенияКоманд, ИспользоватьКоманду");
	
	Возврат ПараметрыПриСоздании;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция ИспользоватьФункционалСУБ(Параметры = Неопределено) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ", Параметры); 
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	Список = Форма.Список; 
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Закрыт");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	ЭлементОформления.Использование = Истина;
	

	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Получен");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
	ЭлементОформления.Использование = Истина;
	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Отправлен");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	ЭлементОформления.Использование = Истина;

	                                                              
КонецПроцедуры

Функция ПолучитьМассивСудовВходящихВГруппу(ГруппаСудов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "	
	|ВЫБРАТЬ
	|	ГруппыСудов.Судно КАК Судно
	|ИЗ
	|	Справочник.vftГруппыСудов.Суда КАК ГруппыСудов
	|ГДЕ
	|	ГруппыСудов.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ГруппаСудов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Судно");
	
КонецФункции

Функция ПолучитьПризнакОтображенияКомандыСменыСтатусов(Статус) Экспорт 
	
	СоответствиеСтатусов =  Новый Соответствие;
	
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Черновик,         Ложь);
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Отправлен,        Истина);
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Получен,          Ложь);
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Закрыт,           Истина);
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Инициировано,     Истина);
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.Проведено,        Истина);
	СоответствиеСтатусов.Вставить(Перечисления.vftСтатусыДокументовСообщений.ОтправленНаСудно, Ложь);

	НайденныйСтатус = СоответствиеСтатусов.Получить(Статус);
	
	Возврат НайденныйСтатус;
	                                                    
КонецФункции

Процедура СменитьСтатусыПодчиненныхЗамечаний(СсылкаНаобъект, НовыйСтастус) Экспорт
	
	ТаблицаПодчиненныхЗамечаний = Справочники.vftДокладыОНесоответствии.ПолучитьТаблицуЗначенийЗамечаний(СсылкаНаобъект);
	
	Если ТаблицаПодчиненныхЗамечаний.Количество() > 0 Тогда
		
		Для Каждого СтрокаТч Из ТаблицаПодчиненныхЗамечаний Цикл
			ОбъектЗамечание = СтрокаТч.Ссылка.ПолучитьОбъект();
			ОбъектЗамечание.Статус = НовыйСтастус; 
			ОбъектЗамечание.Записать();	
		КонецЦикла;	
		
	КонецЕсли;
	
КонецПроцедуры

// ++ rarus zalikh 2021-05-06
// Функция - Найти количество замечаний по текущему мероприятию СУБ и вопросу анкетирования
// Параметры:
//  тМероприятиеСУБ	 - ДокументСсылка.рарусМероприятиеСУБ
//  тВопрос			 - ПланВидовХарактеристикСсылка.ВопросыДляАнкетирвоания
// 
// Возвращаемое значение:
//  КоличествоЗамечаний - количество замечаний по текущему мероприятию СУБ и вопросу анкетирования
//
Функция НайтиКоличествоЗамечанийПоМероприятиюСУБИВопросу(тМероприятиеСУБ, тВопрос) Экспорт
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ vftНесоответствия.Ссылка) КАК КоличествоЗамечаний
	               |ИЗ
	               |	Справочник.vftНесоответствия КАК vftНесоответствия
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА vftНесоответствия.ВладелецЗамечания ССЫЛКА Документ.рарусМероприятиеСУБ
	               |				ТОГДА vftНесоответствия.ВладелецЗамечания = &ВладелецЗамечания
	               |			ИНАЧЕ ЛОЖЬ
	               |		КОНЕЦ
	               |	И vftНесоответствия.ВопросАнкетирования = &ВопросАнкетирования";
	Запрос.УстановитьПараметр("ВладелецЗамечания", тМероприятиеСУБ);
	Запрос.УстановитьПараметр("ВопросАнкетирования", тВопрос);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КоличествоЗамечаний;
	
КонецФункции
// -- rarus zalikh 2021-05-06
#КонецОбласти

#Область Отчеты

Функция ПреобразоватьПодразделениеВСтрокуСКД(ТаблицаПодразделений) Экспорт
	
	СтрокаПодразделение = "";
	
	Если ТаблицаПодразделений.Количество() > 0 Тогда
		
		Для Каждого СтрокаТз Из ТаблицаПодразделений Цикл
			
			ОтветственныеПодразделение = Строка(СтрокаТз.Подразделение) + "; " +  ОтветственныеПодразделение;	
			
		КонецЦикла;
		
		СтрокаРазделитель = "; " ;	
		
		АнкетированиеКлиентСервер.УдалитьПоследниеСимволыИзСтроки(ОтветственныеПодразделение, СтрокаРазделитель);
		
		СтрокаПодразделение = ОтветственныеПодразделение + ".";
	КонецЕсли;
	
	Возврат	СтрокаПодразделение;

КонецФункции

#КонецОбласти

#Область РегламентыеЗадания

Процедура АктуализироватьДокументациюСУБ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	АктуализацияДокументацииСУБ.КарточкаДокументацииСУБ КАК КарточкаДокументацииСУБ
	|ИЗ
	|	РегистрСведений.рарусАктуализацияДокументацииСУБ КАК АктуализацияДокументацииСУБ
	|ГДЕ
	|	АктуализацияДокументацииСУБ.НеВыгружатьНаСуда
	|";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			КарчтокаДокументацииСУБСсылка = Выборка.КарточкаДокументацииСУБ; 	
			
			КарчтокаДокументацииСУБОбъект = КарчтокаДокументацииСУБСсылка.ПолучитьОбъект();
			
			Если КарчтокаДокументацииСУБОбъект <> Неопределено Тогда
				КарчтокаДокументацииСУБОбъект.ПометкаУдаления = Истина;
				КарчтокаДокументацииСУБОбъект.Записать();
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.рарусАктуализацияДокументацииСУБ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КарточкаДокументацииСУБ.Установить(КарчтокаДокументацииСУБСсылка);
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти
