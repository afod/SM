#Область РегистрацияОбмена

Процедура ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО) Экспорт
	
	Если ИмяПланаОбмена = "впОбменТОиР20СМ31" тогда
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.впЗаявкаНаСнабжение")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.впЗаявкаНаСнабжение") тогда
			
			ПередОбработкой_впОбменТОиР20СМ31_впЗаявкаНаСнабжение(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);					
			
		ИначеЕсли ТипЗнч(Объект) = Тип("СправочникОбъект.впЗаявкаНаСнабжениеПрисоединенныеФайлы")
			ИЛИ ТипЗнч(Объект) = Тип("СправочникСсылка.впЗаявкаНаСнабжениеПрисоединенныеФайлы") тогда
			
			ПередОбработкой_впОбменТОиР20СМ31_впЗаявкаНаСнабжениеПрисоединенныеФайлы(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);					
						
		КонецЕсли;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели) Экспорт
	
	Если ИмяПланаОбмена = "впОбменТОиР20СМ31" тогда
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.впЗаявкаНаСнабжение")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.впЗаявкаНаСнабжение") тогда
			
			ПослеОбработки_впОбменТОиР20СМ31_впЗаявкаНаСнабжение(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели);										
						
		КонецЕсли;	
		
	ИначеЕсли ИмяПланаОбмена = "Полный" тогда
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.впЗаявкаНаСнабжение")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументСсылка.впЗаявкаНаСнабжение") тогда
			
			ПослеОбработки_Полный_впЗаявкаНаСнабжение(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели);										
						
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПередОбработкой_впОбменТОиР20СМ31_впЗаявкаНаСнабжение(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО)

	Если Объект.ОбластьРедактирования <> ОбластьРедактированияНаБерегу() тогда
		Отказ = Истина;
	КонецЕсли;	
		
КонецПроцедуры
 
Процедура ПередОбработкой_впОбменТОиР20СМ31_впЗаявкаНаСнабжениеПрисоединенныеФайлы(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО)

	Если ЗначениеЗаполнено(Объект.ВладелецФайла) тогда
		
		Документы.впЗаявкаНаСнабжение.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект.ВладелецФайла, Объектметаданных, Выгрузка, ПРО);	
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПослеОбработки_впОбменТОиР20СМ31_впЗаявкаНаСнабжение(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели)

	ВыборкаФайлы = Справочники.впЗаявкаНаСнабжениеПрисоединенныеФайлы.Выбрать(,,Новый Структура("ВладелецФайла", Объект.Ссылка));	
	
	Пока ВыборкаФайлы.Следующий() цикл
		
		впОбменТОиР20СМ31Обмен.ЗарегистрироватьИзмененияДанных(Получатели, ВыборкаФайлы.Ссылка, Ложь);
		
	КонецЦикла;	

КонецПроцедуры

#Область РегистрацияПолный

// TO DO
// Разместить всю область РегистрацияПолный в отдельном общем мудуле рарусПолныйОбмен
//

Процедура ПередОбработкойПолный(Отказ, Объект, Объектметаданных, Выгрузка, ПРО) Экспорт

	ПередОбработкойВыполнить("Полный", Отказ, Объект, Объектметаданных, Выгрузка, ПРО);		
	
КонецПроцедуры

Процедура ПослеОбработкиПолный(Отказ, Объект, Объектметаданных, Выгрузка, Получатели) Экспорт

	ПослеОбработкиВыполнить("Полный", Отказ, Объект, Объектметаданных, Выгрузка, Получатели);		
	
КонецПроцедуры

Процедура ПередОбработкойВыполнить(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	МодульМенеджера.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);
		
КонецПроцедуры

Процедура ПослеОбработкиВыполнить(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	МодульМенеджера.ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели);
		
КонецПроцедуры

Процедура ПослеОбработки_Полный_впЗаявкаНаСнабжение(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели)

	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() тогда
		Возврат;
	КонецЕсли;
	
	// ++ rarus PleA 07.06.2021 [29363 ]
	Если НЕ Объект.ДополнительныеСвойства.Свойство("НеРегистрироватьПодчиненные") тогда
		// -- rarus PleA
		
		Если Выгрузка = Ложь тогда
			
			ЗарегистрироватьСостояниеЗаявки(Объект, Получатели);
			
			ЗарегистрироватьСостоянияСтрокЗаявки(Объект, Получатели);
			
		КонецЕсли;
		
		// ++ rarus PleA 07.06.2021 [29363 ]
	КонецЕсли;
	// -- rarus PleA
	
КонецПроцедуры

Процедура ЗарегистрироватьСостояниеЗаявки(Объект, Получатели)
	
	НаборЗаписей = РегистрыСведений.рарусСостоянияЗаявокНаСнабжение.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Заказ.Установить(Объект.Ссылка);	
	НаборЗаписей.Прочитать();
	
	Если ТипЗнч(НаборЗаписей.ОбменДанными.Отправитель) = ТипЗнч(Объект.ОбменДанными.Отправитель) тогда
		НаборЗаписей.ОбменДанными.Отправитель = Объект.ОбменДанными.Отправитель;
	КонецЕсли;
	
	ЗарегистрироватьИзмененияДанных(Получатели, НаборЗаписей, Ложь);

КонецПроцедуры

Процедура ЗарегистрироватьСостоянияСтрокЗаявки(Объект, Получатели)
	
	Выборка = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.Выбрать(Новый Структура("Заказ", Объект.Ссылка));
	
	Пока Выборка.Следующий() цикл
		
		НаборЗаписей = РегистрыСведений.рарусСостоянияСтрокЗаявокНаСнабжение.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ);
		НаборЗаписей.Отбор.КодСтроки.Установить(Выборка.КодСтроки);
		НаборЗаписей.Прочитать();
		
		Если ТипЗнч(НаборЗаписей.ОбменДанными.Отправитель) = ТипЗнч(Объект.ОбменДанными.Отправитель) тогда
			НаборЗаписей.ОбменДанными.Отправитель = Объект.ОбменДанными.Отправитель;
		КонецЕсли;
		
		ЗарегистрироватьИзмененияДанных(Получатели, НаборЗаписей, Ложь);
		
	КонецЦикла;

КонецПроцедуры

#Область СлужебныйИнтерфейс

Процедура ЗарегистрироватьИзмененияДанных(Получатели, Данные, Знач ПроверятьРазрешениеВыгрузки=Истина) Экспорт
	
	Для Каждого Узел Из Получатели цикл
		
		Если Узел <> Данные.ОбменДанными.Отправитель тогда
			ОбменДаннымиСобытия.ЗарегистрироватьИзмененияДанных(Узел, Данные, ПроверятьРазрешениеВыгрузки);
		КонецЕсли;
		
	КонецЦикла;	
	
	//ОбменДаннымиСобытия.ДополнитьПолучателей(Данные, Получатели);
	
КонецПроцедуры	

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#Область Конвертация

Процедура ЗаявкаНаСнабжениеПослеЗагрузки(Объект, Ссылка, ОбъектНайден, ОбъектМодифицирован, ПараметрыОбъекта = Неопределено, Отказ = Ложь) Экспорт
	
	УстановитьСтатусСогласования(Объект, Ссылка, ОбъектНайден, ПараметрыОбъекта);
	
	ДобавитьЗаявкуНаСнабжениеВОчередь(Ссылка);
	
	// ++ rarus PleA 22.06.2021 [РАIT-0023342]
	рарусХранениеВерсийОбмен.ПослеЗагрузки(Объект, Ссылка, ОбъектНайден, ОбъектМодифицирован, ПараметрыОбъекта, Отказ);	
	// -- rarus PleA
	
КонецПроцедуры

Процедура ДобавитьЗаявкуНаСнабжениеВОчередь(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) тогда
		
		Отказ = Ложь;
		рарусЗаявкаНаСнабжениеСостояния.ДобавитьЗаявкуНаСнабжениеВОчередь(Ссылка, Отказ);
		
	КонецЕсли;	

КонецПроцедуры	

Процедура СостоянияЗаявокНаСнабжениеПослеЗагрузки(Объект, Ссылка, ОбъектНайден, ОбъектМодифицирован, ПараметрыОбъекта, Отказ) Экспорт
	
	Заявка = ПолучитьЗаявкуПоЗаписиРегистра(Объект);
	
	ДобавитьЗаявкуНаСнабжениеВОчередь(Заявка);
	
КонецПроцедуры

Процедура СостоянияСтрокЗаявокНаСнабжениеПослеЗагрузки(Объект, Ссылка, ОбъектНайден, ОбъектМодифицирован, ПараметрыОбъекта, Отказ) Экспорт
	
	Заявка = ПолучитьЗаявкуПоЗаписиРегистра(Объект);
	
	ДобавитьЗаявкуНаСнабжениеВОчередь(Заявка);

КонецПроцедуры

Функция ПолучитьЗаявкуПоЗаписиРегистра(Объект)
	
	Заявка = Документы.впЗаявкаНаСнабжение.ПустаяСсылка();
	
	Если Объект <> Неопределено тогда
		
		Если ЭтоРегистрСведений(Объект) тогда
			
			Заявка = Объект.Отбор.Заказ.Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Заявка;
			
КонецФункции	

Функция ЭтоРегистрСведений(Объект)

	ОбъектМетаданных = Объект.Метаданные();
		
	Возврат ОбщегоНазначения.ЭтоРегистрСведений(ОбъектМетаданных);

КонецФункции // ()

 
#КонецОбласти 

#Область Служебные

Процедура УстановитьСтатусСогласования(Объект, Ссылка, ОбъектНайден, ПараметрыОбъекта)
	
	Если ПроверитьУсловиеСозданаНаБерегу(ОбъектНайден, Ссылка) тогда
		
		Объект.СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияСозданаНаБерегу();
		
	ИначеЕсли ПроверитьУсловиеДоработкаКапитаном(Объект, Ссылка) тогда
		
		Объект.СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияНаДоработкуКапитаном();	
	//ПАН+
	ИначеЕсли ПолучитьФункциональнуюОпцию("рарусИспользуетсяСхемаСогласованияПоАналогам") Тогда
		
		Объект.СтатусСогласования = рарусЗаявкаНаСнабжениеСервер.СтатусСогласованияСогласована();
	//ПАН-
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьУсловиеСозданаНаБерегу(Знач ОбъектНайден, Знач Ссылка)
	
	Возврат ОбъектНайден = Ложь Или Не ЗначениеЗаполнено(Ссылка);

КонецФункции

Функция ПроверитьУсловиеДоработкаКапитаном(Объект, Ссылка)
		
	//ПАН+
	Если ПолучитьФункциональнуюОпцию("рарусИспользуетсяСхемаСогласованияПоАналогам") Тогда
		Если Объект.МатериалыИРаботы.НайтиСтроки(Новый Структура("СтатусСогласования",ПредопределенноеЗначение("Перечисление.рарусСтатусыСогласованияАналогов.ОтправитьНаСудно"))).Количество() Тогда
			Если Объект.ОбластьРедактирования <> рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне() Тогда
				Объект.ОбластьРедактирования = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();
			КонецЕсли;
			
			Возврат Истина; //на доработку капитану
		КонецЕсли;		
	КонецЕсли;
	//ПАН-
	
	СталоРедактированиеНаСудне = ОбластьРедактирования(Объект) = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();
	БылоРедактированиеНаБерегу = рарусЗаявкаНаСнабжениеСервер.ЭтоРедактированиеНаБерегу(Ссылка);

	Возврат СталоРедактированиеНаСудне И БылоРедактированиеНаБерегу;
	
КонецФункции

Функция ОбластьРедактирования(Объект)
	
	Возврат Объект.ОбластьРедактирования;
	
КонецФункции

Функция ОбластьРедактированияНаБерегу() Экспорт
	
	Возврат рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаБерегу();
	
КонецФункции	

Функция ОбластьРедактированияНаСудне() Экспорт
	
	Возврат рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();
	
КонецФункции
	
#КонецОбласти 
