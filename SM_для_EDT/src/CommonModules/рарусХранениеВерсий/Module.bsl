Функция ОписаниеОбъекта(ТипОбъекта) Экспорт
	
	Описание = рарусХранениеВерсийПереопределяемый.ОписаниеОбъекта(ТипОбъекта);
	
	Возврат Описание;
	
КонецФункции	

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	ДобавитьРеквизитыИсходныхДанных(Форма);
	
	рарусХранениеВерсийПереопределяемый.ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры);
		
КонецПроцедуры

#Область ПодключаемыеКоманды

Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	Команда = Команды.Добавить();
	Команда.Вид = "ПоказатьИсходныеДанные";
	Команда.Важность = "Важное";
	Команда.Назначение = "ДляОбъекта";
	Команда.МножественныйВыбор = Ложь;
	Команда.Менеджер = "рарусХранениеВерсий";
	Команда.Обработчик = "рарусХранениеВерсий.ОбработчикКомандыПоказатьИсходныеДанные";
	Команда.Представление = "Показать исходные данные";
	Команда.ТолькоВоВсехДействиях = Истина;		
	Команда.ЕстьУсловияВидимости = Истина;	
	Команда.Подменю = "";
	Команда.РежимЗаписи = "ЗаписыватьТолькоНовые";
	
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "Дата" , Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	рарусХранениеВерсийПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту(Команда);

КонецПроцедуры

Процедура ОбработчикКомандыПоказатьИсходныеДанные(Источник, ПараметрыКоманды) Экспорт
	
	Если НЕ ЕстьСвойствоПоказатьИсходныеДанные(ПараметрыКоманды.Форма) тогда
		
		Возврат;	
		
	КонецЕсли;
	
	ПараметрыКоманды.Форма.ПоказатьИсходныеДанные = НЕ ПараметрыКоманды.Форма.ПоказатьИсходныеДанные;
	
	ПоказатьИсходныеДанные(Источник, ПараметрыКоманды.Источник, ПараметрыКоманды.Форма);
		
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ПараметрыКоманды.Форма, ПараметрыКоманды.Источник);
			
КонецПроцедуры

#КонецОбласти

Процедура ОбновитьИсходныеДанные(Объект, Форма) Экспорт
	
	Если ЕстьСвойствоПоказатьИсходныеДанные(Форма) тогда
		
		ПоказатьИсходныеДанные(Объект.Ссылка, Объект, Форма)	
	
	КонецЕсли;
		
КонецПроцедуры

Функция ЕстьСвойствоПоказатьИсходныеДанные(Знач Форма)
	
	Возврат ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПоказатьИсходныеДанные");

КонецФункции

Процедура ПоказатьИсходныеДанные(Источник, Объект, Форма) Экспорт
		
	Если Форма.ПоказатьИсходныеДанные тогда
		
		СоздатьЭлементыИсходныхДанных(Источник, Форма);
		
		ЗаполнитьИсходныеДанные(Источник, Объект);
		
	КонецЕсли;
	
	УстановитьВидимостьЭлементыИсходныхДанных(Источник, Форма);

КонецПроцедуры

Процедура УстановитьВидимостьЭлементыИсходныхДанных(Источник, Форма)
	
	Видимость = Ложь;
	Если ЕстьСвойствоПоказатьИсходныеДанные(Форма) тогда
		Видимость = Форма.ПоказатьИсходныеДанные;
	КонецЕсли;
	
	Для Каждого Элемент из Форма.ЭлементыФормыХраненияВерсия цикл
		
		Форма.Элементы[Элемент.ИмяЭлемента].Видимость = Видимость;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьИсходныеДанные(Источник, Объект)
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Источник));	
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
			
			Для Каждого СтрокаДанных Из Объект[ТЧ.Ключ] цикл
				
				ЗаполнитьИсходныеДанныеСтроки(СтрокаДанных, ТЧ.Значение);	
				
			КонецЦикла;	
			
			рарусХранениеВерсийПереопределяемый.ЗаполнитьИсходныеДанныеТабличнойЧасти(Источник, Объект[ТЧ.Ключ]);
			
		КонецЦикла;	
		
	КонецЕсли; 
	
КонецПроцедуры	

Процедура ЗаполнитьИсходныеДанныеСтроки(СтрокаДанных, Реквизиты = Неопределено)
	
	ДанныеСтруктурой = ПолучитьДанныеИзJSON(СтрокаДанных.ВерсияСтроки);
	
	Если Реквизиты <> Неопределено тогда
		
		Для Каждого Элемент Из Реквизиты цикл
			
			РеквизитФормы = "";
			Если ТипЗнч(Элемент.Значение) = Тип("Структура") тогда
				Элемент.Значение.Свойство("РеквизитФормы", РеквизитФормы); 
				Если ЗначениеЗаполнено(РеквизитФормы) тогда
					РеквизитФормы = ИмяРеквизита(РеквизитФормы);
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(РеквизитФормы) тогда
				РеквизитФормы = ИмяРеквизита(Элемент.Ключ);
			КонецЕсли;	
			
			ИмяРеквизита = Элемент.Ключ;
			
			Попытка
				СтрокаДанных[РеквизитФормы] = ДанныеСтруктурой[ИмяРеквизита];
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
	Иначе	
		Для Каждого Элемент Из ДанныеСтруктурой цикл
			
			ИмяРеквизита = ИмяРеквизита(Элемент.Ключ);
			
			Попытка
				СтрокаДанных[ИмяРеквизита] = Элемент.Значение;
			Исключение
			КонецПопытки;
			
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры	

Процедура СоздатьЭлементыИсходныхДанных(Источник, Форма)	
	
	Элементы = форма.Элементы;
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Источник));
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
			
			Для Каждого ЭлементТЧ Из ТЧ.Значение цикл
				
				РеквизитФормы = "";				
				ЗаголовокПоля = ЭлементТЧ.Значение;
				Если ТипЗнч(ЭлементТЧ.Значение) = Тип("Структура") тогда
					ЭлементТЧ.Значение.Свойство("Заголовок", ЗаголовокПоля);	
					ЭлементТЧ.Значение.Свойство("РеквизитФормы", РеквизитФормы);
				КонецЕсли;
				
				
				Если ЗначениеЗаполнено(РеквизитФормы) тогда
					ИмяРеквизита = ИмяРеквизита(РеквизитФормы);				
				Иначе
					ИмяРеквизита = ИмяРеквизита(ЭлементТЧ.Ключ);				
				КонецЕсли;
				
				ИмяЭлемента = ИмяЭлемента(ТЧ.Ключ, ИмяРеквизита);
				
				Если Элементы.Найти(ИмяЭлемента) = Неопределено тогда
					
					СтрокаТаблицыХраненияВерсии = Форма.ЭлементыФормыХраненияВерсия.Добавить();
					СтрокаТаблицыХраненияВерсии.ИмяЭлемента = ИмяЭлемента;
					СтрокаТаблицыХраненияВерсии.ИмяРеквизита = ИмяРеквизита;
					
					рарусХранениеВерсийПереопределяемый.СоздатьЭлемент(
					Форма,
					ИмяЭлемента, 
					СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ИмяРеквизита),
					ЗаголовокПоля
					);
					
				КонецЕсли;	
				
			КонецЦикла;
			
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьРеквизитыИсходныхДанных(Форма) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект") тогда
		Возврат;
	КонецЕсли;
	
	//rarus_AfoD 28.06.2021 < 
	Если Не ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка") тогда
		Возврат;
	КонецЕсли;	
	
	Если ОписаниеОбъекта(ТипЗнч(Форма.Объект.Ссылка)) = Неопределено тогда
	//rarus_AfoD 28.06.2021 > 
		Возврат;
	КонецЕсли; 
	
	Источник = Форма.Объект.Ссылка;
	
	//
	ДобавляемыеРеквизиты = Новый Массив;
	
	РеквизитФормы = Новый РеквизитФормы(
					"ПоказатьИсходныеДанные", 
					 Новый ОписаниеТипов("Булево")
					);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	//
	РеквизитФормы = Новый РеквизитФормы(
					"ЭлементыФормыХраненияВерсия", 
					 Новый ОписаниеТипов("ТаблицаЗначений")
					);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
				
	РеквизитФормы = Новый РеквизитФормы(
					"ИмяЭлемента", 
					 Новый ОписаниеТипов("Строка"),
					 "ЭлементыФормыХраненияВерсия"
					);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
				
	РеквизитФормы = Новый РеквизитФормы(
					"ИмяРеквизита", 
					 Новый ОписаниеТипов("Строка"),
					 "ЭлементыФормыХраненияВерсия"
					);				
				
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	//
	
	РеквизитФормы = Новый РеквизитФормы(
					"НеобходимаПричина", 
					 Новый ОписаниеТипов("Булево")
					);
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	//	
		
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	
	ДобавитьРеквизитыИсходныхДанныхПоОписанию(Источник, РеквизитФормы, Форма);
	
КонецПроцедуры

Процедура ДобавитьРеквизитыИсходныхДанныхПоОписанию(Источник, РеквизитФормы, Форма)	
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Источник));
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
			
			ДобавляемыеРеквизиты = Новый Массив;
			
			Типы = ТипыХранения();
			
			ТипРеквизита = Новый ОписаниеТипов(Типы);
			
			Для Каждого ЭлементТЧ Из ТЧ.Значение цикл
				
				
				ИмяРеквизитФормы = "";								
				Если ТипЗнч(ЭлементТЧ.Значение) = Тип("Структура") тогда					
					ЭлементТЧ.Значение.Свойство("РеквизитФормы", ИмяРеквизитФормы);
				КонецЕсли;
								
				Если ЗначениеЗаполнено(ИмяРеквизитФормы) тогда
					ИмяРеквизита = ИмяРеквизита(ИмяРеквизитФормы);				
				Иначе
					ИмяРеквизита = ИмяРеквизита(ЭлементТЧ.Ключ);				
				КонецЕсли;
				
				РеквизитФормы = Новый РеквизитФормы(
				ИмяРеквизита, 
				ТипРеквизита, 
				СтрШаблон("%1.%2","Объект", ТЧ.Ключ)
				);					
				ДобавляемыеРеквизиты.Добавить(РеквизитФормы);			
				
			КонецЦикла;
			
			//
			РеквизитФормы = Новый РеквизитФормы(
				"НеобходимаПричина", 
				Новый ОписаниеТипов("Булево"),
				СтрШаблон("%1.%2","Объект", ТЧ.Ключ)
				);
				
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			
			РеквизитФормы = Новый РеквизитФормы(
				"ПричинаНеУказанаКартинка", 
				Новый ОписаниеТипов("Булево"),
				СтрШаблон("%1.%2","Объект", ТЧ.Ключ)
				);
				
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			
			РеквизитФормы = Новый РеквизитФормы(
				"ПричинаВерсии", 
				Новый ОписаниеТипов("Строка"),
				СтрШаблон("%1.%2","Объект", ТЧ.Ключ)
				);
				
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			
			РеквизитФормы = Новый РеквизитФормы(
				"ПризнакДобавленияКартинка", 
				Новый ОписаниеТипов("Число"),
				СтрШаблон("%1.%2","Объект", ТЧ.Ключ)
				);
				
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			//
			
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			
		КонецЦикла;	
		
	КонецЕсли;

КонецПроцедуры
	
Функция ЗаблокированаСтрока(СтрокаТЧ)
	
	Возврат СтрокаТЧ.ВерсияСтрокиЗаблокирована;
	
КонецФункции

Процедура ЗаблокироватьВерсии(Объект) Экспорт
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Объект));	
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
			
			Для Каждого СтрокаДанных Из Объект[ТЧ.Ключ] цикл
				
				Если Не ПустаяСтрока(СтрокаДанных.ВерсияСтроки) тогда
					СтрокаДанных.ВерсияСтрокиЗаблокирована = Истина;
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;
			
КонецПроцедуры	

Процедура ОчиститьРеквизитыВерсий(Объект) Экспорт
	
	Объект.ИсторияИзмененияВерсий = "";
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Объект));	
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
			
			Для Каждого СтрокаДанных Из Объект[ТЧ.Ключ] цикл
				
				СтрокаДанных.ВерсияСтроки = "";
				СтрокаДанных.ВерсияСтрокиЗаблокирована = Ложь;
								
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

#Область Служебные

Функция ИмяЭлемента(Знач ИмяТЧ, Знач ИмяРеквизита) Экспорт
	
	Возврат СтрШаблон("%1_%2", ИмяТЧ, ИмяРеквизита);

КонецФункции

Функция ТипыХранения()
	
	Типы = новый Массив;
	
	Для Каждого Тип Из Справочники.ТипВсеСсылки().Типы() цикл
		Типы.Добавить(Тип);	
	КонецЦикла;
	
	Для Каждого Тип Из Перечисления.ТипВсеСсылки().Типы() цикл
		Типы.Добавить(Тип);	
	КонецЦикла;
	
	Типы.Добавить(Тип("Строка"));
	Типы.Добавить(Тип("Число"));
	Типы.Добавить(Тип("Булево"));
	
	Возврат Типы;

КонецФункции

Функция ИмяРеквизита(Имя) Экспорт
	
	Возврат СтрШаблон("%1_%2", Имя, "исх");

КонецФункции

#КонецОбласти 

#Область JSON

Процедура ЗаписатьДанныеJSON(ОписаниеОбъекта, Источник) Экспорт
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл
			
			Реквизиты = Новый Структура;
			
			Для Каждого ЭлементТЧ Из ТЧ.Значение цикл
				
				Реквизиты.Вставить(ЭлементТЧ.Ключ);
				
			КонецЦикла;	
			
			Для Каждого СтрокаТЧ Из Источник[ТЧ.Ключ] Цикл 
				
				Если Не ЗаблокированаСтрока(СтрокаТЧ) тогда
					
					ЗаполнитьЗначенияСвойств(Реквизиты, СтрокаТЧ);
					
					рарусХранениеВерсийПереопределяемый.ЗаполнитьРеквизитыПоСтроке(Реквизиты, СтрокаТЧ, Источник);
					
					СтрокаТЧ.ВерсияСтроки = ВерсияСтрокиJSON(Реквизиты);
				
				КонецЕсли;
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Функция ВерсияСтрокиJSON(Реквизиты)
	
	СтруктураJSON = Новый Структура;
	
	рарусХранениеВерсийПереопределяемый.ВерсияСтрокиJSON(Реквизиты);
	
	Для Каждого Реквизит Из Реквизиты цикл
		
		СтруктураJSON.Вставить(Реквизит.Ключ, ЗначениеJSON(Реквизит.Значение));
		
	КонецЦикла;		
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, СтруктураJSON);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	Возврат СтрокаJSON;
	
КонецФункции	

Функция ЗначениеJSON(Значение) Экспорт
	
	ЗначениеВозврата = "";
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Значение)) тогда
		
		МетаданныеОбъекта = Значение.Метаданные();
		
		Если ОбщегоНазначения.ЭтоПеречисление(МетаданныеОбъекта) тогда									
			ЗначениеВозврата = Новый Структура;
			ЗначениеВозврата.Вставить("УникальныйИдентификатор", ОбщегоНазначения.ИмяЗначенияПеречисления(Значение));
			ЗначениеВозврата.Вставить("Представление", Строка(Значение));
			ЗначениеВозврата.Вставить("Тип",ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(Значение)));			
		Иначе	
			ЗначениеВозврата = Новый Структура;
			ЗначениеВозврата.Вставить("УникальныйИдентификатор", Строка(Значение.УникальныйИдентификатор()));
			ЗначениеВозврата.Вставить("Представление", Строка(Значение));
			ЗначениеВозврата.Вставить("Тип",ОбщегоНазначения.СтроковоеПредставлениеТипа(ТипЗнч(Значение)));
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Значение) Тогда 
		
		ЗначениеВозврата = Значение;
		
	КонецЕсли;	
	
	Возврат ЗначениеВозврата;
	
КонецФункции	

Функция ПолучитьДанныеИзJSON(ВерсияСтроки)
	
	ДанныеJSON = ПрочитатьДанныеJSON(ВерсияСтроки);
	
	Данные = ПреобразоватьДанные(ДанныеJSON);
	
	Возврат Данные;
	
КонецФункции

Функция ПреобразоватьДанные(ДанныеJSON)
	
	Данные = Новый Структура;
	
	Если ЗначениеЗаполнено(ДанныеJSON) тогда
		
		Для Каждого Элемент Из ДанныеJSON цикл
			
			Значение = ПолучитьЗначениеРеквизита(ДанныеJSON, Элемент.Ключ);	
			
			Данные.Вставить(Элемент.Ключ, Значение);
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Возврат Данные;
	
КонецФункции	

Функция ПрочитатьДанныеJSON(ВерсияСтроки)

	Если ПустаяСтрока(ВерсияСтроки) тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ВерсияСтроки);
	Данные = ПрочитатьJSON(ЧтениеJSON);
	
	Возврат Данные;

КонецФункции // ()

Функция ПолучитьЗначениеРеквизита(ОбъектJSON, ИмяРеквизита)
	
	ЗначениеВозврата = Неопределено;
	
	Если ЗначениеЗаполнено(ОбъектJSON) тогда
		
		ЗначениеJSON = Неопределено;
		ОбъектJSON.Свойство(ИмяРеквизита, ЗначениеJSON);
		
		Если ЭтоОъектныйТип(ЗначениеJSON) тогда
			ЗначениеВозврата = ПолучитьСсылкуНаОбъектJSON(ЗначениеJSON);		
		Иначе
			ЗначениеВозврата = ЗначениеJSON
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗначениеВозврата;
	
КонецФункции

Функция ЭтоОъектныйТип(ОбъектJSON)
	
	ЭтоОбъектныйТип = Ложь;
	
	Если ТипЗнч(ОбъектJSON) = Тип("Структура") 
		И ОбъектJSON.Свойство("УникальныйИдентификатор") тогда
		
		ЭтоОбъектныйТип = Истина;	
		
	КонецЕсли;	
	
	Возврат ЭтоОбъектныйТип;
	
КонецФункции	

Функция ПолучитьСсылкуНаОбъектJSON(ОбъектJSON)
	
	Ссылка = Неопределено;
	
	Если ТипЗнч(ОбъектJSON) = Тип("Структура") тогда
		
		ТаблицаСоответствия = СоответствиеТипов();
		
		СтрокаСоответствия = ТаблицаСоответствия.Найти(ОбъектJSON.Тип, "ИмяJSON");
		
		Если СтрокаСоответствия = Неопределено тогда
			ВызватьИсключение СтрШаблон(
				"Не найдено соответствие типа для %1", 
				ОбъектJSON.Тип); 
		КонецЕсли;
			
		ИмяТипа = СтрокаСоответствия["Имя"];
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТипа);
		Ссылка = Менеджер.ПустаяСсылка();
		
		Если ОбъектJSON.УникальныйИдентификатор <> "" Тогда
			Если СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ОбъектJSON.УникальныйИдентификатор) Тогда
				Ссылка = Менеджер.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектJSON.УникальныйИдентификатор));
			Иначе // возможно, это имя предопределенного элемента или перечисление
				Попытка
					Ссылка = Менеджер[ОбъектJSON.УникальныйИдентификатор];
				Исключение
					ВызватьИсключение СтрШаблон(
						НСтр("ru = 'Нет значения ""%1"" среди значений типа ""%2""'"),
						ОбъектJSON.УникальныйИдентификатор,
						ИмяТипа);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ссылка;
	
КонецФункции

Функция СоответствиеТипов() Экспорт
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяJSON", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Имя", 	Новый ОписаниеТипов("Строка"));
	
	СоответствиеТипов = Новый Соответствие;
	
	рарусХранениеВерсийПереопределяемый.СоответствиеТипов(СоответствиеТипов);
	
	Для Каждого Элемент Из СоответствиеТипов цикл
		
		ДобавитьСтроку(Таблица, Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
		
	Возврат Таблица;
	
КонецФункции

// Добавляет строку в таблицу соответствия типов
// 
Процедура ДобавитьСтроку(Таблица, ИмяJSON, Имя) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяJSON = ИмяJSON;
	НоваяСтрока.Имя = Имя;
	
КонецПроцедуры

#КонецОбласти 

#Область РаботаСФормой

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Форма.Объект.Ссылка));	
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
						
			Для Каждого ЭлементТЧ Из ТЧ.Значение цикл	
											
				ИмяРеквизита = ИмяРеквизита(ЭлементТЧ.Ключ);
				
				ИмяЭлемента = ИмяЭлемента(ТЧ.Ключ, ИмяРеквизита);
				
				Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
				ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
				ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
				ПолеЭлемента.Использование = Истина;
								
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ЭлементТЧ.Ключ));
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
				ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ИмяРеквизита));
				ОтборЭлемента.Использование = Истина;
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, "ВерсияСтрокиЗаблокирована"));
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;
				ОтборЭлемента.Использование = Истина;
				
				ЦветОтличияЗначений = WebЦвета.БледноЛиловый;
				
				рарусХранениеВерсийПереопределяемый.ЦветОтличияЗначений(ЦветОтличияЗначений);
				
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветОтличияЗначений);
				
								
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;
	
	рарусХранениеВерсийПереопределяемый.УстановитьУсловноеОформление(Форма);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Форма, ПроверяемыеРеквизиты, Отказ) Экспорт
	
	Объект = Форма.Объект;
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Объект.Ссылка));	
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
			
			Для Каждого СтрокаДанных Из Объект[ТЧ.Ключ] цикл
				
				Если СтрокаДанных.НеобходимаПричина 
					И ПустаяСтрока(СтрокаДанных.ПричинаВерсии) тогда
					
					ОбщегоНазначения.СообщитьПользователю(
						СтрШаблон("Не указана причина редактирования в строке %1", СтрокаДанных.НомерСтроки), 
						,
						СтрШаблон("%1[%2].ПричинаНеУказанаКартинка", ТЧ.Ключ, СтрокаДанных.НомерСтроки-1),
						"Объект",
						Отказ
						);
					
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ЗаписатьКомментарииВИсторию(Объект, ТекущийОбъект, ПараметрыЗаписи) Экспорт

	МассивСтрок = Новый Массив;
	
	рарусХранениеВерсийПереопределяемый.ЗаписатьКомментарииВИсторию(Объект, ТекущийОбъект, ПараметрыЗаписи, МассивСтрок);
	
	Если МассивСтрок.Количество() тогда
		
		МассивСтрок.Добавить(ТекущийОбъект.ИсторияИзмененияВерсий);
		
		ТекущийОбъект.ИсторияИзмененияВерсий = СтрСоединить(МассивСтрок, Символы.ПС);
		
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти 