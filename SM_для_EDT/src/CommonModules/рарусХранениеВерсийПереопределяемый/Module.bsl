
Функция ОписаниеОбъекта(ТипОбъекта) Экспорт
	
	Описание = Новый Структура;
	
	Если ТипОбъекта = Тип("ДокументСсылка.впЗаявкаНаСнабжение") 
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.впЗаявкаНаСнабжение")тогда
		
		Описание = ОписаниеЗаявкиНаСнабжение();
		
	КонецЕсли;
	
	Возврат Описание;
	
КонецФункции

Функция ОписаниеЗаявкиНаСнабжение()
	
	Описание = Новый Структура;
	
	ОписаниеРеквизитовТЧ = Новый Структура;
	ОписаниеРеквизитовТЧ.Вставить("Номенклатура","Номенклатура (исх)");
	
	//ОписаниеРеквизитовТЧ.Вставить("ОписаниеДополнительныхРеквизитовНоменклатуры","Описание (исх)");	
	ОписаниеРеквизитовТЧ.Вставить("ОписаниеНоменклатуры",
		Новый Структура("РеквизитФормы, Заголовок","ОписаниеДополнительныхРеквизитовНоменклатуры", "Описание (исх)")
	);
	
	ОписаниеРеквизитовТЧ.Вставить("КоличествоУпаковок", "Количество (исх)");
	ОписаниеРеквизитовТЧ.Вставить("Упаковка", "Ед. изм (исх)");
	ОписаниеРеквизитовТЧ.Вставить("ОбластьСоздания", "Создана");
	
	ОписаниеТЧ = Новый Структура("МатериалыИРаботы", ОписаниеРеквизитовТЧ);
	
	Описание.Вставить("ТабличныеЧасти", ОписаниеТЧ);
	
	Возврат Описание;
	
КонецФункции

#Область ПриСоздании

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Форма.ИмяФормы = "Документ.впЗаявкаНаСнабжение.Форма.ФормаДокумента" тогда
		
		ПриСозданииНаСерверевпЗаявкаНаСнабжениеФормаДокумента(Форма);	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПриСозданииНаСерверевпЗаявкаНаСнабжениеФормаДокумента(Форма) 
	
	АдресНастроек = Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;	
	ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресНастроек);
	СтрокаКоманды = ТаблицаКоманд.Найти("ПоказатьИсходныеДанные", "Вид");
	
	Если СтрокаКоманды <> Неопределено Тогда
		
		Кнопка = Форма.Элементы.Добавить("ПоказатьИсходныеДанные", Тип("КнопкаФормы"), Форма.Элементы.МатериальныеЗатратыКоманднаяПанель);
		Кнопка.Заголовок = "Показать исходные данные";
		Кнопка.ИмяКоманды = СтрокаКоманды.ИмяВФорме;		
		Кнопка.Отображение = ОтображениеКнопки.Текст;
		
	КонецЕсли;
	
	Элемент = Форма.Элементы.Вставить(
		"МатериальныеЗатратыПричинаНеУказанаКартинка", 
		Тип("ПолеФормы"),
		Форма.Элементы.МатериальныеЗатраты,
		Форма.Элементы.МатериальныеЗатратыНомерСтроки
	);
	
	Элемент.ПутьКДанным = "Объект.МатериалыИРаботы.ПричинаНеУказанаКартинка";	
	Элемент.Вид = ВидПоляФормы.ПолеКартинки;			
	Элемент.КартинкаШапки = БиблиотекаКартинок.Комментарий;
	Элемент.КартинкаЗначений = БиблиотекаКартинок.ОтсутствуетСогласие;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;	
	Элемент.Видимость = Истина;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.РастягиватьПоГоризонтали = Ложь;
	Элемент.АвтоМаксимальнаяШирина = Истина;
	Элемент.Ширина = 3;
	
	Элемент = Форма.Элементы.Вставить(
		"СтраницаИсторияИзмененияВерсий", 
		Тип("ГруппаФормы"),
		Форма.Элементы.Страницы,		
	);  
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.Заголовок = "История изменения";
	
	Элемент = Форма.Элементы.Вставить(
		"ИсторияИзмененияВерсий", 
		Тип("ПолеФормы"),
		Форма.Элементы.СтраницаИсторияИзмененияВерсий		
	);
	
	Элемент.ПутьКДанным = "Объект.ИсторияИзмененияВерсий";
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.МногострочныйРежим = Истина;
	Элемент.ТолькоПросмотр = Истина;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры	

#КонецОбласти 

Процедура ЗаполнитьИсходныеДанныеТабличнойЧасти(Источник, Таблица) Экспорт
	
	Для Каждого СтрокаТаблицы Из Таблица цикл
				
		Если СтрокаТаблицы.ОбластьСоздания_исх = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне() тогда
			СтрокаТаблицы.ПризнакДобавленияКартинка = 0;
		ИначеЕсли  СтрокаТаблицы.ОбластьСоздания_исх = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаБерегу() тогда
			СтрокаТаблицы.ПризнакДобавленияКартинка = 1; 
		Иначе
			СтрокаТаблицы.ПризнакДобавленияКартинка = -1; 	
		КонецЕсли;	
					
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ПриОпределенииКомандПодключенныхКОбъекту(Команда) Экспорт
	
	МассивФорм = Новый Массив;
	МассивФорм.Добавить("Документ.впЗаявкаНаСнабжение.Форма.ФормаДокумента");
	
	Команда.ВидимостьВФормах = СтрСоединить(МассивФорм,","); 
	
КонецПроцедуры

Процедура ЗаполнитьИсходныеДанные(Источник) Экспорт
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Источник));
	
	рарусХранениеВерсий.ЗаписатьДанныеJSON(ОписаниеОбъекта, Источник);
	
КонецПроцедуры	

Процедура ЗаполнитьРеквизитыПоСтроке(Реквизиты, СтрокаТЧ, Источник) Экспорт
	
	ТипОбъекта = ТипЗнч(Источник);
	
	Если ТипОбъекта = Тип("ДокументСсылка.впЗаявкаНаСнабжение") 
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.впЗаявкаНаСнабжение") тогда
		
		Если Не ЗначениеЗаполнено(СтрокаТЧ.Упаковка) тогда
			Реквизиты.Упаковка = СтрокаТЧ.Номенклатура.ЕдиницаИзмерения;
		КонецЕсли;
		
		Реквизиты.ОписаниеНоменклатуры= рарусЗаявкаНаСнабжениеСервер.ОписаниеДополнительныхРеквизитовНоменклатуры(СтрокаТЧ.Номенклатура);
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура СоздатьЭлемент(Форма, Имя, ПутьКДанным, Заголовок) Экспорт
	
	Если СтрНайти(ВРег(ПутьКДанным),  ВРег("ОбластьСоздания")) тогда
		
		ЧастиПути  = СтрРазделить(ПутьКДанным,".");
		ЧастиПути.Удалить(2);
		ПутьТЧ = СтрСоединить(ЧастиПути,".");
		
		Элемент = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Форма.Элементы.МатериальныеЗатраты);
		Элемент.ПутьКДанным = СтрШаблон("%1.%2", ПутьТЧ,"ПризнакДобавленияКартинка");
		
		Элемент.Вид = ВидПоляФормы.ПолеКартинки;			
		//Элемент.КартинкаШапки = БиблиотекаКартинок.рарусКоллекцияКорабльЯкорь;
		Элемент.КартинкаЗначений = БиблиотекаКартинок.рарусКоллекцияКорабльЯкорь;
		//Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;	
		Элемент.Заголовок = Заголовок;
		Элемент.Видимость = Истина;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.АвтоМаксимальнаяШирина = Ложь;
		Элемент.Ширина = 5;
	
	Иначе	
		
		Элемент = Форма.Элементы.Вставить(Имя, Тип("ПолеФормы"), Форма.Элементы.МатериальныеЗатраты);
		Элемент.ПутьКДанным = ПутьКДанным;	
		Элемент.Заголовок = Заголовок;
		Элемент.ТолькоПросмотр = Истина;		
		
	КонецЕсли;
	
	Элемент.ЦветФонаЗаголовка = WebЦвета.Голубой;
		
КонецПроцедуры	

Процедура СоответствиеТипов(СоответствиеТипов) Экспорт
	
	СоответствиеТипов.Вставить("СправочникСсылка.Номенклатура", 					"Справочник.Номенклатура");
	СоответствиеТипов.Вставить("СправочникСсылка.УпаковкиЕдиницыИзмерения",			"Справочник.УпаковкиЕдиницыИзмерения");
	СоответствиеТипов.Вставить("ПеречислениеСсылка.рарусОбластиРедактирования",		"Перечисление.рарусОбластиРедактирования");

КонецПроцедуры

// Добавляет строку в таблицу соответствия типов
// 
Процедура ДобавитьСтроку(Таблица, ИмяHTTP, Имя) Экспорт
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.ИмяHTTP = ИмяHTTP;
	НоваяСтрока.Имя = Имя;
	
КонецПроцедуры

Процедура ВерсияСтрокиJSON(Реквизиты) Экспорт
	
	Если Реквизиты.Свойство("ОбластьСоздания") тогда
		Реквизиты.ОбластьСоздания = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();	
	КонецЕсли;
	
КонецПроцедуры	

#Область РедактированиеСтроки

Функция НеобходимаПричинаРедактирования(Объект, ИмяЭлементаФормы) Экспорт
	
	ТипОбъекта = ТипЗнч(Объект);
	
	НеобходимаПричинаРедактирования = Ложь;
	
	Если ТипОбъекта = Тип("ДокументСсылка.впЗаявкаНаСнабжение") 
		ИЛИ ТипОбъекта = Тип("ДокументОбъект.впЗаявкаНаСнабжение") тогда
		
		МассивЭлементов = Новый Соответствие;
		МассивЭлементов.Вставить("МатериальныеЗатратыНоменклатура", Истина);
		МассивЭлементов.Вставить("МатериальныеЗатратыУпаковка", Истина);
		МассивЭлементов.Вставить("МатериальныеЗатратыКоличествоУпаковок", Истина);
		МассивЭлементов.Вставить("МатериальныеЗатратыОтменено", Истина);
		
		Если МассивЭлементов.Получить(ИмяЭлементаФормы) = Истина тогда
			НеобходимаПричинаРедактирования = Истина;
		КонецЕсли;	
		
	КонецЕсли;
	
	Возврат НеобходимаПричинаРедактирования;
	
КонецФункции

#КонецОбласти 

#Область РаботаСФормой

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(Форма.Объект.Ссылка));	
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл						
						
			Для Каждого ЭлементТЧ Из ТЧ.Значение цикл								
								
				ИмяРеквизита = рарусХранениеВерсий.ИмяРеквизита(ЭлементТЧ.Ключ);
				
				ИмяЭлемента = рарусХранениеВерсий.ИмяЭлемента(ТЧ.Ключ, ИмяРеквизита);
				
				Если ВРег(ЭлементТЧ.Ключ) = ВРег("ОбластьСоздания") тогда
					
					ВыключитьЭлементУсловногоОформления(ИмяЭлемента, Форма);
					
					Элемент = Форма.УсловноеОформление.Элементы.Добавить();
					
					ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
					//ПолеЭлемента.Использование = Истина;
					// выключено в данной версии
					ПолеЭлемента.Использование = Ложь;
					
					ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ИмяРеквизита));
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемента.ПравоеЗначение = рарусЗаявкаНаСнабжениеСервер.ОбластьРедактированияНаСудне();
					ОтборЭлемента.Использование = Истина;
					
					ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, "ВерсияСтрокиЗаблокирована"));
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемента.ПравоеЗначение = Истина;
					ОтборЭлемента.Использование = Истина;
					
				    Цвет = Неопределено;
					ЦветОтличияЗначений(Цвет);
					
					Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет);
					
				ИначеЕсли  ВРег(ЭлементТЧ.Ключ) = ВРег("Упаковка") тогда
					
					ВыключитьЭлементУсловногоОформления(ИмяЭлемента, Форма);
					
					Элемент = Форма.УсловноеОформление.Элементы.Добавить();
					
					ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
					ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента);
					ПолеЭлемента.Использование = Истина;
					
					ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ЭлементТЧ.Ключ));
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
					ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ИмяРеквизита));
					ОтборЭлемента.Использование = Истина;
					
					ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, ЭлементТЧ.Ключ));
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;					
					ОтборЭлемента.Использование = Истина;
					
					ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрШаблон("%1.%2.%3","Объект", ТЧ.Ключ, "ВерсияСтрокиЗаблокирована"));
					ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
					ОтборЭлемента.ПравоеЗначение = Истина;
					ОтборЭлемента.Использование = Истина;
					
					Цвет = Неопределено;
					ЦветОтличияЗначений(Цвет);
					
					Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Цвет); 	
					
				КонецЕсли;
								
			КонецЦикла;	
			
		КонецЦикла;	
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВыключитьЭлементУсловногоОформления(ИмяЭлемента, Форма)
	
	Для Каждого ЭлементУО Из Форма.УсловноеОформление.Элементы цикл
		
		Для Каждого ЭлементПоле Из ЭлементУО.Поля.Элементы Цикл
			
			Если ЭлементПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлемента) тогда
				ЭлементУО.Использование = Ложь;
			КонецЕсли;	
			
		КонецЦикла;	
		
	КонецЦикла;

КонецПроцедуры	

Процедура ЦветОтличияЗначений(Цвет) Экспорт
	
	Цвет = WebЦвета.БледноЛиловый;
	
КонецПроцедуры	

Процедура ЗаписатьКомментарииВИсторию(Объект, ТекущийОбъект, ПараметрыЗаписи, МассивСтрок) Экспорт

	ОписаниеОбъекта = ОписаниеОбъекта(ТипЗнч(ТекущийОбъект));
	
	Если ОписаниеОбъекта.Свойство("ТабличныеЧасти") тогда
		
		Для Каждого ТЧ Из ОписаниеОбъекта.ТабличныеЧасти цикл
			
			Для Каждого СтрокаТаблицы Из Объект[ТЧ.Ключ] цикл
				
				ПричинаВерсии = СтрокаТаблицы.ПричинаВерсии;
				Если ЗначениеЗаполнено(ПричинаВерсии) тогда
					
					НомерСтроки = СтрокаТаблицы.НомерСтроки;
					
					МассивСтрокИзмененныхПолей = Новый Массив;
					
					//
					ЗначениеБыло = ТекущийОбъект.Ссылка[ТЧ.Ключ][НомерСтроки-1].Номенклатура;
					ЗначениеСтало = ТекущийОбъект[ТЧ.Ключ][НомерСтроки-1].Номенклатура;					
					Если ЗначениеБыло <> ЗначениеСтало тогда
						МассивСтрокИзмененныхПолей.Добавить(СтрШаблон("%1 с %2 на %3", "Номенклатура", ЗначениеБыло, ЗначениеСтало));
					КонецЕсли;
					//
					
					//
					ЗначениеБыло = ТекущийОбъект.Ссылка[ТЧ.Ключ][НомерСтроки-1].Количество;
					ЗначениеСтало = ТекущийОбъект[ТЧ.Ключ][НомерСтроки-1].Количество;					
					Если ЗначениеБыло <> ЗначениеСтало тогда
						МассивСтрокИзмененныхПолей.Добавить(СтрШаблон("%1 с %2 на %3", "Количество", ЗначениеБыло, ЗначениеСтало));
					КонецЕсли;
					//
					
					//
					ЗначениеСтало = ТекущийОбъект[ТЧ.Ключ][НомерСтроки-1].Упаковка;					
					Если ЗначениеЗаполнено(ЗначениеСтало) тогда
						ЗначениеБыло = ТекущийОбъект.Ссылка[ТЧ.Ключ][НомерСтроки-1].Упаковка;						
						Если ЗначениеБыло <> ЗначениеСтало тогда
							МассивСтрокИзмененныхПолей.Добавить(СтрШаблон("%1 с %2 на %3", "Упаковка", ЗначениеБыло, ЗначениеСтало));
						КонецЕсли;
					КонецЕсли;
					//
					
					//
					ЗначениеСтало = ТекущийОбъект[ТЧ.Ключ][НомерСтроки-1].Отменено;	
					ЗначениеБыло = ТекущийОбъект.Ссылка[ТЧ.Ключ][НомерСтроки-1].Отменено;				
					Если ЗначениеБыло <> ЗначениеСтало тогда
						МассивСтрокИзмененныхПолей.Добавить(СтрШаблон("%1 с %2 на %3", "Отменено", ЗначениеБыло, ЗначениеСтало));
					КонецЕсли;					
					//
					
					СтрокаИзмененыхПолей = СтрСоединить(МассивСтрокИзмененныхПолей," и ");
					
					Если МассивСтрокИзмененныхПолей.Количество() > 1 тогда
						ПолеПолей = "полей";
					Иначе 
						ПолеПолей = "поля";
					КонецЕсли;	
					
					//"[Дата, время]. [Пользователь] изменил в строке [Номер строки] значение [поля/полей] [[Имя поля] с [Значение было] на [Значение стало]] по причине [Причина изменений] 
					ШаблонСтроки = "%1. %2 изменил в строке %3 значение %4 %5 по причине: %6";
					
					МассивСтрок.Добавить(
							СтрШаблон(ШаблонСтроки,
						 		ТекущаяДатаСеанса(), 
								Пользователи.ТекущийПользователь(),
								НомерСтроки,
								ПолеПолей,
								СтрокаИзмененыхПолей,
								ПричинаВерсии
							)
						);
					
			    КонецЕсли;

			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти 