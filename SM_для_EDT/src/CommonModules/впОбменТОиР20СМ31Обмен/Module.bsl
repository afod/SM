#Область Регистрация

#Область ПрограммныйИнтерфейс

Процедура ПередОбработкой(Отказ, Объект, ОбъектМетаданных, Выгрузка, ПРО) Экспорт

	ПередОбработкойВыполнить("впОбменТОиР20СМ31", Отказ, Объект, ОбъектМетаданных, Выгрузка, ПРО);		
	
КонецПроцедуры

Процедура ПослеОбработки(Отказ, Объект, ОбъектМетаданных, Выгрузка, Получатели) Экспорт

	ПослеОбработкиВыполнить("впОбменТОиР20СМ31", Отказ, Объект, ОбъектМетаданных, Выгрузка, Получатели);		
	
КонецПроцедуры

#Область ФункцииВызываемыеИзДругихМодулей

//Вызывается из модуля менеджера документа "Перемещение товаров"
//При выполнении загрузки документов перемещений из ЕИС
Процедура ПерезаполнитьДокументыПриходаТМЦ_ВФоне(ТаблицаЗагруженныхДокументов) Экспорт
	
	Для Каждого Строка Из ТаблицаЗагруженныхДокументов Цикл
		ДокументПриходаТМЦ = ДокументПриходаТМЦ(Строка.Документ);
		Если НЕ ДокументПриходаТМЦ.Пустая() Тогда
			//Перезаполнить и провести существующий документ//
			обДокументПрихода = ДокументПриходаТМЦ.ПолучитьОбъект();
			обДокументПрихода.СформированСМ = Ложь;
			обДокументПрихода.Комментарий = "Синхронизирован после новой загрузки перемещения из ЕИС";
			ПровестиДокументПриходаПоПеремещению(обДокументПрихода, Строка.Документ);
		ИначеЕсли Строка.Статус = "Принято" Тогда
			//Сформировать новый документ поступления, если он сформирован в ЕИС "За судно"
			обДокументПрихода = НовыйДокументПриходаТМЦ(Строка.Документ);
			ПровестиДокументПриходаПоПеремещению(обДокументПрихода, Строка.Документ);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры
Функция ДокументПриходаТМЦ(ДокументПеремещения)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	впПриходТМЦ.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Документ.впПриходТМЦ КАК впПриходТМЦ
	                      |ГДЕ
	                      |	впПриходТМЦ.Распоряжение = &ДокументПеремещения
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	впПриходТМЦ.Проведен УБЫВ");
	Запрос.УстановитьПараметр("ДокументПеремещения", ДокументПеремещения);
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат ?(Выборка.Следующий(), Выборка.Ссылка, Документы.впПриходТМЦ.ПустаяСсылка());
	
КонецФункции
Функция НовыйДокументПриходаТМЦ(ДокументПеремещения)
	
	обДокумент = Документы.впПриходТМЦ.СоздатьДокумент();
	обДокумент.СформированСМ = Истина;
	обДокумент.ВидОперации = Перечисления.рарусВидыОперацийПриходаТМЦ.ПриходПоПеремещению;
	обДокумент.Распоряжение = ДокументПеремещения;
	обДокумент.Комментарий = "Автоматически сформирован по перемещению из ЕИС(За судно)";
	
	Возврат обДокумент;
	
КонецФункции
Процедура ПровестиДокументПриходаПоПеремещению(ДокументПриходаТМЦ, ДокументПеремещения)
	
	ДокументПриходаТМЦ.Дата = ДокументПеремещения.Дата + 1;
	ДокументПриходаТМЦ.Подразделение = ДокументПеремещения.СкладПолучатель;
	ДокументПриходаТМЦ.Ответственный = ПараметрыСеанса.АвторизованныйПользователь;
	ЗаполнитьЗначенияСвойств(ДокументПриходаТМЦ, ДокументПеремещения, "Организация");
	Если ДокументПриходаТМЦ.ПометкаУдаления Тогда
		ДокументПриходаТМЦ.ПометкаУдаления = Ложь;
	КонецЕсли;
	
	ДокументПриходаТМЦ.ТМЦ.Очистить();
	Для Каждого Строка Из ДокументПеремещения.ТМЦ Цикл
		НоваяСтрока = ДокументПриходаТМЦ.ТМЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Номенклатура,Количество,Заявка,КодСтроки");
	КонецЦикла;
	
	Попытка
		// ++ rarus PleA 13.05.2021 [29089 ]
		Если ЗначениеЗаполнено(ДокументПриходаТМЦ.Ссылка) тогда
			РегистрыСведений.рарусСостоянияОтправкиОбъектов.УстановитьСтатусОбъекта(ДокументПриходаТМЦ.Ссылка, ПредопределенноеЗначение("Перечисление.рарусСостояниеОтправкиОбъекта.ЗагруженИзБМ"));
		КонецЕсли;
		// -- rarus PleA
		ДокументПриходаТМЦ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ТекстОшибки = "Ошибка проведения документа ПриходТМЦ на основании документа перемещения" + Символы.ПС + ОписаниеОшибки;
		ЖурналРегистрации.ДобавитьСообщениеДляЖурналаРегистрации("ОбменЕИС",УровеньЖурналаРегистрации.Ошибка,,,ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

Процедура ПередОбработкойВыполнить(ИмяПланаОбмена, Отказ, Объект, ОбъектМетаданных, Выгрузка, ПРО)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	МодульМенеджера.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, ОбъектМетаданных, Выгрузка, ПРО);
		
КонецПроцедуры

Процедура ПослеОбработкиВыполнить(ИмяПланаОбмена, Отказ, Объект, ОбъектМетаданных, Выгрузка, Получатели)
	
	УстановитьПривилегированныйРежим(Истина);
	
	МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	
	МодульМенеджера.ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, ОбъектМетаданных, Выгрузка, Получатели);
		
КонецПроцедуры

#Область СлужебныйИнтерфейс

Процедура ЗарегистрироватьИзмененияДанных(Получатели, Ссылка, Знач ПроверятьРазрешениеВыгрузки=Истина) Экспорт
	
	Для Каждого Узел Из Получатели цикл
		
		ОбменДаннымиСобытия.ЗарегистрироватьИзмененияДанных(Узел, Ссылка, ПроверятьРазрешениеВыгрузки);
		
	КонецЦикла;	
	
КонецПроцедуры	

#КонецОбласти 

#КонецОбласти 