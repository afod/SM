Функция ИдентификаторыПоказателейФормулы(Формула) Экспорт
    ИдентификаторыПоказателей = Новый Массив;
	
	//РазделителиФормулы = " |[]+-/*?=<>(),{}" + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	РазделителиФормулы = " |[]-/\?=<>(),{}" + Символы.ВК + Символы.ВТаб + Символы.НПП + Символы.ПС + Символы.ПФ + Символы.Таб;
	ЗарезервированныеСлова = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
	"ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,И,ИЛИ,НЕ,OR,AND,NOT");
	
	ЗарезервированныеСлова.Добавить("+ETS+");
	ЗарезервированныеСлова.Добавить("+K+");
	ЗарезервированныеСлова.Добавить("+S+");
	ЗарезервированныеСлова.Добавить("+B+");
	ЗарезервированныеСлова.Добавить("+SV+");
	ЗарезервированныеСлова.Добавить("+A+");
	// ++ rarus Чернавин Г.К 05.11.2020 № 25171
	ЗарезервированныеСлова.Добавить("+P+");
	ЗарезервированныеСлова.Добавить("+M+");
	ЗарезервированныеСлова.Добавить("+V+");
	ЗарезервированныеСлова.Добавить("+D+");
	// -- rarus Чернавин Г.К 05.11.2020
	
	Слова = РазложитьСтрокуВМассивСлов(Формула, РазделителиФормулы);
	Для Каждого Слово Из Слова Цикл
		// Это число
		Если СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(СтрЗаменить(Слово, ".", "")) Тогда
			Продолжить;
		КонецЕсли;
		// Это зарезервированное слово
		Если ЗарезервированныеСлова.Найти(ВРег(Слово)) <> Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		// Это должен быть показатель
		ИдентификаторыПоказателей.Добавить(Слово);
	КонецЦикла;
	
    Возврат ИдентификаторыПоказателей
КонецФункции

// Разбивает строку на несколько строк, используя заданный набор разделителей.
// Если параметр РазделителиСлов не задан, то разделителем слов считается любой из символов, 
// не относящихся к символам латиницы, кириллицы, цифры, подчеркивания.
//
// Параметры:
//  Строка          - Строка - строка, которую необходимо разложить на слова.
//  РазделителиСлов - Строка - строка, содержащая символы-разделители.
//
//  Возвращаемое значение:
//      массив значений, элементы которого - отдельные слова
//
// Пример:
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три") возвратит массив значений: "один", "два2_", "три";
//  РазложитьСтрокуВМассивСлов("один-@#два2_!три", "#@!_") возвратит массив значений: "один-", "два2", "три".
//
Функция РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов = Неопределено) Экспорт
	
	Слова = Новый Массив;
	
	РазмерТекста = СтрДлина(Строка);
	НачалоСлова = 1;
	Для Позиция = 1 По РазмерТекста Цикл
		КодСимвола = КодСимвола(Строка, Позиция);
		Если ЭтоРазделительСлов(КодСимвола, РазделителиСлов) Тогда
			Если Позиция <> НачалоСлова Тогда
				Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
			КонецЕсли;
			НачалоСлова = Позиция + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Позиция <> НачалоСлова Тогда
		Слова.Добавить(Сред(Строка, НачалоСлова, Позиция - НачалоСлова));
	КонецЕсли;
	
	Возврат Слова;
	
КонецФункции

Функция ЭтоРазделительСлов(КодСимвола, РазделителиСлов = Неопределено) Экспорт
	
	Если РазделителиСлов <> Неопределено Тогда
		Возврат Найти(РазделителиСлов, Символ(КодСимвола)) > 0;
	КонецЕсли;
		
	Диапазоны = Новый Массив;
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 48, 57)); 		// цифры
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 65, 90)); 		// латиница большие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 97, 122)); 		// латиница маленькие
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1040, 1103)); 	// кириллица
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1025, 1025)); 	// символ "Ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 1105, 1105)); 	// символ "ё"
	Диапазоны.Добавить(Новый Структура("Мин,Макс", 95, 95)); 		// символ "_"
	
	Для Каждого Диапазон Из Диапазоны Цикл
		Если КодСимвола >= Диапазон.Мин И КодСимвола <= Диапазон.Макс Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЕстьРеквизитВШаблоне(Шаблон, Реквизит) Экспорт
	ЕстьРеквизит = Ложь;
	Для каждого Строка Из Шаблон.СтруктураФайла Цикл
		Формула = Строка.Структура;
		Показатели = ИдентификаторыПоказателейФормулы(Формула);
		Если Показатели.Найти(Реквизит)<>Неопределено Тогда
			ЕстьРеквизит = Истина;	
			Прервать;
		КонецЕсли; 
	КонецЦикла;	
	
	Возврат ЕстьРеквизит;
КонецФункции

&НаСервере
Функция ПолучитьБлижайшийПунктНаРеке(Река, Километр) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Река", Река);
	Запрос.УстановитьПараметр("Километр", Километр);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	рарусПунктыСледования.Ссылка КАК Пункт,
	|	ВЫБОР
	|		КОГДА рарусПунктыСледования.КилометрРеки > &Километр
	|			ТОГДА рарусПунктыСледования.КилометрРеки - &Километр
	|		ИНАЧЕ &Километр - рарусПунктыСледования.КилометрРеки
	|	КОНЕЦ КАК Разница
	|ИЗ
	|	Справочник.vftПунктыСледования КАК рарусПунктыСледования
	|ГДЕ
	|	рарусПунктыСледования.Бассейн = &Река
	|	И НЕ рарусПунктыСледования.ПометкаУдаления
	|	И НЕ рарусПунктыСледования.КилометрРеки = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Разница";
	Результат = Запрос.Выполнить().Выгрузить();	
	Если Результат.Количество() Тогда
		Возврат Результат[0].Пункт; 
	Иначе
		Возврат Неопределено;
	КонецЕсли;			   
	
	
КонецФункции
 