#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
Функция ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	//Если ЗаказыНаВнутреннееПотреблениеДоступны() Тогда
	//	ДобавитьЗаказыНаВнутреннееПотребление(ТаблицаБлоков);
	//КонецЕсли;
	
	// ++ rarus yukuzi 23.08.2021   //
	//Если КурсыВалютДоступны() Тогда
	//	ДобавитьКурсыВалют(ТаблицаБлоков);
	//КонецЕсли;
	//Если ОстаткиСудовогоСкладаДоступны() Тогда
		ДобавитьОстаткиСудовогоСклада(ТаблицаБлоков);
	//КонецЕсли;
	//Если ПлановыеВнеплановыеРемонтыДоступны() Тогда
		ДобавитьПлановыеВнеплановыеРемонты(ТаблицаБлоков);
	//КонецЕсли;
	//Если ПросроченныеРемонтыДоступны() Тогда
		ДобавитьПросроченныеРемонты(ТаблицаБлоков);
	//КонецЕсли;
	//Если ОткрытиеАРМДоступны() Тогда
		ДобавитьОткрытиеАРМ(ТаблицаБлоков);
	//КонецЕсли;
	//Если ЗапланированныеМероприятияСУБДоступны() Тогда
		ДобавитьЗапланированныеМероприятияСУБ(ТаблицаБлоков);
	//КонецЕсли;
	//Если НеустраненныеЗамечанияСУБДоступны() Тогда
		ДобавитьНеустраненныеЗамечанияСУБ(ТаблицаБлоков);
	//КонецЕсли;
	//Если ОбменДаннымиБМДоступны() Тогда
		ДобавитьОбменДаннымиБМ(ТаблицаБлоков);
	//КонецЕсли;
	//Если АнализСУБКапитанамиДоступны() Тогда
		ДобавитьАнализСУБКапитанами(ТаблицаБлоков);
	//КонецЕсли;
	//Если ОтслеживаниеПоказанийНаработкиДоступны() Тогда
		ДобавитьОтслеживаниеПоказанийНаработки(ТаблицаБлоков);
	//КонецЕсли;
	//Если ПриближениеСрокаСудовыхДоступны() Тогда
		ДобавитьПриближениеСрокаСудовых(ТаблицаБлоков);
	//КонецЕсли;


	// -- rarus yukuzi 23.08.2021
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели

#Область ЗаказыНаВнутреннееПотребление

Процедура ДобавитьЗаказыНаВнутреннееПотребление(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗаказыНаВнутреннееПотребление(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаказыНаВнутреннееПотребление(),
		"БлокиИнформационнойПанели.ЗаказыНаВнутреннееПотребление",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомЗаказыНаВнутреннееПотребление",
		СвойстваЗаказыНаВнутреннееПотребление(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗаказНаВнутреннееПотребление());
	
КонецПроцедуры

Функция СвойстваЗаказыНаВнутреннееПотребление()
	
	// ВГраница = Количеству, т.к. последняя строка используется для итоговой записи
	ВГраница = БлокиИнформационнойПанелиКлиентСервер.КоличествоВидовДокументовЗНВП();
	
	Свойства = "ЗаказыНаВнутреннееПотребление_Заголовок, "
					+ "ЗаказыНаВнутреннееПотребление_ПредупрежденияПриЗагрузке, "
					+ "ЗаказыНаВнутреннееПотребление_ДатаОбновления, "
					+ "ЗаказыНаВнутреннееПотребление_ИндексИтога";
	
	Для Индекс = 0 По ВГраница Цикл
		Свойства = Свойства + ", "
			+ БлокиИнформационнойПанелиКлиентСервер.СвойствоВидДокументаЗаказНаВнутреннееПотребление(Индекс);
	КонецЦикла;
	
	Возврат Свойства;
	
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * МассивСкладов - Массив - массив элементов СправочникСсылка.Склады - отбор по складам группы судов
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ЗаказыНаВнутреннееПотребление(Параметры, АдресРезультата = Неопределено) Экспорт
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗаказНаВнутреннееПотребление(), Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат.Вставить("ЗаказыНаВнутреннееПотребление_Заголовок",
				ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаказыНаВнутреннееПотребление()));
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваЗаказыНаВнутреннееПотребление());
	Результат.Вставить("ЗаказыНаВнутреннееПотребление_Заголовок",
		ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗаказыНаВнутреннееПотребление()));
		
	ЗаказыНаВнутреннееПотребление = ДанныеЗаказовНаВнутреннееПотребление(Параметры);
	
	ТаблицаДанныхПоВидамДокументов = ЗаказыНаВнутреннееПотребление.ТаблицаПоВидам;
	МожноВывестиСтрокВидов = БлокиИнформационнойПанелиКлиентСервер.КоличествоВидовДокументовЗНВП();
	ЕстьПредупрежденияОПолученииДанныхЗНВП = ЗаказыНаВнутреннееПотребление.ЕстьПредупреждения;
	
	Если ЕстьПредупрежденияОПолученииДанныхЗНВП Тогда
		// Одну строку резервируем под сообщение о том, что документы получены с предупреждением.
		МожноВывестиСтрокВидов = МожноВывестиСтрокВидов - 1;
	КонецЕсли;
	
	ИндексСтроки = 0;
	
	// Сообщение о получении данных Заказов на внутреннее потребление с предупреждениями.
	Если ЕстьПредупрежденияОПолученииДанныхЗНВП Тогда
		СообщениеОПредупрежденияхПриПолученииДанныхЗНВП = СообщениеОПредупрежденияхПриПолученииДанныхЗНВП();
		Результат.Вставить("ЗаказыНаВнутреннееПотребление_ПредупрежденияПриЗагрузке",
			СообщениеОПредупрежденияхПриПолученииДанныхЗНВП);
		ИндексСтроки = ИндексСтроки + 1;
	КонецЕсли;

	// Информация о количестве с разбивкой по видам документов
	Для каждого СтрокаВидаДокумента Из ТаблицаДанныхПоВидамДокументов Цикл
		
		ВидДокумента = ПредставлениеЗаказаНаВнутреннееПотребление(СтрокаВидаДокумента.КоличествоДокументов, СтрокаВидаДокумента.ВидДокумента, Ложь);
		Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВидДокументаЗаказНаВнутреннееПотребление(ИндексСтроки), ВидДокумента);
		
		ИндексСтроки = ИндексСтроки + 1;
		
		Если ИндексСтроки >= МожноВывестиСтрокВидов Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Для а = 1 по 1000000 Цикл
		д = 5
	КонецЦикла;
	
	// Итоговая строка с общим количеством документов
	Итого = ПредставлениеЗаказаНаВнутреннееПотребление(ЗаказыНаВнутреннееПотребление.ОбщееКоличество, Перечисления.рарусВидыПотребностиЗаявкиНаСнабжение.ПустаяСсылка(), Истина);
	Результат.Вставить(БлокиИнформационнойПанелиКлиентСервер.СвойствоВидДокументаЗаказНаВнутреннееПотребление(ИндексСтроки), Итого);
	Результат.Вставить("ЗаказыНаВнутреннееПотребление_ИндексИтога", ИндексСтроки);
	ИндексСтроки = ИндексСтроки + 1;

	Результат.Вставить("ЗаказыНаВнутреннееПотребление_ДатаОбновления", ДатаОбновленияВиджета());
	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗаказНаВнутреннееПотребление(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);
	
КонецПроцедуры

Функция ДанныеЗаказовНаВнутреннееПотребление(Параметры)
	
	Перем МассивСкладовГруппы, ПериодВиджета;
	
	ДатаНачала = Дата("00010101");
	ДатаОкончания = Дата("00010101");
	
	Запрос = Новый Запрос;
	// ++ rarus yukuzi 31.08.2021   //
	ТекстЗапроса = 
	//	"ВЫБРАТЬ
	//	|	КОЛИЧЕСТВО(ЗаказНаВнутреннееПотребление.Ссылка) КАК КоличествоДокументов,
	//	|	ЗаказНаВнутреннееПотребление.рарусВидРабот КАК ВидДокумента
	//	|ПОМЕСТИТЬ вт_ДанныеДокументов
	//	|ИЗ
	//	|	Документ.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление
	//	|ГДЕ
	//	|	ЗаказНаВнутреннееПотребление.ПометкаУдаления = ЛОЖЬ
	//	|	#ОтборПоСкладам#
	//	|	И ВЫБОР
	//	|			КОГДА &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЗаказНаВнутреннееПотребление.Дата >= &ДатаНачала
	//	|		КОНЕЦ
	//	|	И ВЫБОР
	//	|			КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	//	|				ТОГДА ИСТИНА
	//	|			ИНАЧЕ ЗаказНаВнутреннееПотребление.Дата <= &ДатаОкончания
	//	|		КОНЕЦ
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	ЗаказНаВнутреннееПотребление.рарусВидРабот
	//	|
	//	|ИНДЕКСИРОВАТЬ ПО
	//	|	КоличествоДокументов
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ ПЕРВЫЕ 4
	//	|	вт_ДанныеДокументов.КоличествоДокументов КАК КоличествоДокументов,
	//	|	вт_ДанныеДокументов.ВидДокумента КАК ВидДокумента
	//	|ИЗ
	//	|	вт_ДанныеДокументов КАК вт_ДанныеДокументов
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	КоличествоДокументов УБЫВ
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	СУММА(вт_ДанныеДокументов.КоличествоДокументов) КАК ОбщееКоличествоДокументов
	//	|ИЗ
	//	|	вт_ДанныеДокументов КАК вт_ДанныеДокументов";
	
	"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(ЗаказНаВнутреннееПотребление.Ссылка) КАК КоличествоДокументов,
		|	ЗаказНаВнутреннееПотребление.ВидПотребности КАК ВидДокумента
		|ПОМЕСТИТЬ вт_ДанныеДокументов
		|ИЗ
		|	Документ.впЗаявкаНаСнабжение КАК ЗаказНаВнутреннееПотребление
		|ГДЕ
		|	ЗаказНаВнутреннееПотребление.ПометкаУдаления = ЛОЖЬ
		|	#ОтборПоСкладам#
		|	И ВЫБОР
		|			КОГДА &ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЗаказНаВнутреннееПотребление.Дата >= &ДатаНачала
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЗаказНаВнутреннееПотребление.Дата <= &ДатаОкончания
		|		КОНЕЦ

		|
		|СГРУППИРОВАТЬ ПО
		|	ЗаказНаВнутреннееПотребление.ВидПотребности
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	КоличествоДокументов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 4
		|	вт_ДанныеДокументов.КоличествоДокументов КАК КоличествоДокументов,
		|	вт_ДанныеДокументов.ВидДокумента КАК ВидДокумента
		|ИЗ
		|	вт_ДанныеДокументов КАК вт_ДанныеДокументов
		|
		|УПОРЯДОЧИТЬ ПО
		|	КоличествоДокументов УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(вт_ДанныеДокументов.КоличествоДокументов) КАК ОбщееКоличествоДокументов
		|ИЗ
		|	вт_ДанныеДокументов КАК вт_ДанныеДокументов";
	// -- rarus yukuzi 31.08.2021
	
	// Установка отбора по складам
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("МассивСкладов", МассивСкладовГруппы)
		И ТипЗнч(МассивСкладовГруппы) = Тип("Массив")
		И ЗначениеЗаполнено(МассивСкладовГруппы) Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборПоСкладам#", "И ЗаказНаВнутреннееПотребление.Склад В(&МассивСкладовГруппы)");
		Запрос.УстановитьПараметр("МассивСкладовГруппы", МассивСкладовГруппы);

	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#ОтборПоСкладам#", "");
		
	КонецЕсли;
	
	// Установка периода
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("Период", ПериодВиджета)
		И ТипЗнч(ПериодВиджета) = Тип("СтандартныйПериод")
		И ЗначениеЗаполнено(ПериодВиджета) Тогда
		
		// Сначала проверяем период в шапке панели. Если он заполнен, используем его
		ДатаНачала 		= ПериодВиджета.ДатаНачала;
		ДатаОкончания 	= ПериодВиджета.ДатаОкончания;
		
	Иначе
		// Получим период из стандартного отклонения
		СсылкаНаВиджет = БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗаказНаВнутреннееПотребление();
		СтандартныеПериодыВиджета = ПолучитьМассивСтандартныхПериодовВиджета(СсылкаНаВиджет);
		СтандартныйПериодВиджета = СтандартныеПериодыВиджета[0]; // Всегда должен вернуться массив хотя бы с одной записью
		
		Если ЗначениеЗаполнено(СтандартныйПериодВиджета) Тогда
			
			ДатаНачала 		= СтандартныйПериодВиджета.ДатаНачала;
			ДатаОкончания 	= СтандартныйПериодВиджета.ДатаОкончания;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);		
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);		
	
	Запрос.Текст = ТекстЗапроса;
	
	ДанныеЗаказов = Новый Структура("ЕстьПредупреждения", Ложь);
	
	Попытка
		РезультатЗапроса = Запрос.ВыполнитьПакет();
	Исключение
		ДанныеЗаказов.ЕстьПредупреждения = Истина;
	КонецПопытки;
	
	ВыборкаОбщее = РезультатЗапроса[2].Выбрать();
	ВыборкаОбщее.Следующий();
	
	ДанныеЗаказов.Вставить("ТаблицаПоВидам", РезультатЗапроса[1].Выгрузить());
	ДанныеЗаказов.Вставить("ОбщееКоличество", ВыборкаОбщее.ОбщееКоличествоДокументов);
	
	Возврат ДанныеЗаказов;
	
КонецФункции
	
Функция ПредставлениеЗаказаНаВнутреннееПотребление(Количество, ВидДокумента, Выделить = Ложь)
	
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		СтроковоеПредставление = СтрШаблон("%1 - %2", ВидДокумента, Формат(Количество, ФорматнаяСтрока));
	Иначе
		СтроковоеПредставление = Формат(Количество, ФорматнаяСтрока);
	КонецЕсли;
	
	Шрифт      = ?(Выделить, Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина), ШрифтыСтиля.ШрифтТекстаИнформационнойПанели);
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	Возврат Новый ФорматированнаяСтрока(СтроковоеПредставление, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПолучитьМассивСтандартныхПериодовВиджета(СсылкаНаВиджет) Экспорт
	
	МассивПериодов = Новый Массив;
	ЭлементМассиваПериодов = Новый Структура("Показатель, ДатаНачала, ДатаОкончания", 
												Справочники.рарусПоказателиВиджетов.ПустаяСсылка(), 
												Дата("00010101"), 
												Дата("00010101"));
	СекундВСутках = 86400;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	рарусПериодыВиджетовПоУмолчанию.Ссылка КАК СсылкаНаПериод
		|ПОМЕСТИТЬ ВТ_ОтобранныйПериод
		|ИЗ
		|	Справочник.рарусПериодыВиджетовПоУмолчанию КАК рарусПериодыВиджетовПоУмолчанию
		|ГДЕ
		|	рарусПериодыВиджетовПоУмолчанию.ПометкаУдаления = ЛОЖЬ
		|	И рарусПериодыВиджетовПоУмолчанию.Владелец = &СсылкаНаВиджет
		|
		|УПОРЯДОЧИТЬ ПО
		|	рарусПериодыВиджетовПоУмолчанию.Код УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.Показатель КАК Показатель,
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.СдвигДаты КАК СдвигДаты,
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.ВидПериода КАК ВидПериода
		|ИЗ
		|	ВТ_ОтобранныйПериод КАК ВТ_ОтобранныйПериод
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рарусПериодыВиджетовПоУмолчанию.ПериодыРасчетаПоказателей КАК рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей
		|		ПО ВТ_ОтобранныйПериод.СсылкаНаПериод = рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.Ссылка
		|ГДЕ
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.СдвигДаты <> 0
		|	И рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.ВидПериода <> ЗНАЧЕНИЕ(Перечисление.рарусВидыПериодовВиджетов.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("СсылкаНаВиджет", СсылкаНаВиджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
	    ВыборкаПоПоказателям = РезультатЗапроса.Выбрать();
		мТекущаяДата = ТекущаяДатаСеанса();
		
		Пока ВыборкаПоПоказателям.Следующий() Цикл
			
			Если ВыборкаПоПоказателям.ВидПериода = Перечисления.рарусВидыПериодовВиджетов.ДеньКалендарный Тогда
				
				РасчетнаяДата = мТекущаяДата + СекундВСутках * ВыборкаПоПоказателям.СдвигДаты;
				
			Иначе // Пока только 2 вида периодов
				
				РасчетнаяДата = ДобавитьМесяц(мТекущаяДата, ВыборкаПоПоказателям.СдвигДаты);
				
			КонецЕсли;
			
			ЭлементМассиваПериодов.Показатель 		= ВыборкаПоПоказателям.Показатель;
			ЭлементМассиваПериодов.ДатаНачала 		= НачалоДня(Мин(мТекущаяДата, РасчетнаяДата));
			ЭлементМассиваПериодов.ДатаОкончания 	= КонецДня(Макс(мТекущаяДата, РасчетнаяДата));
			
			МассивПериодов.Добавить(ЭлементМассиваПериодов);
			
		КонецЦикла;
		
	Иначе
		
		МассивПериодов.Добавить(ЭлементМассиваПериодов);
		
	КонецЕсли;

	Возврат МассивПериодов;
	
КонецФункции

Функция ЗаказыНаВнутреннееПотреблениеДоступны()
	
	// Блок доступен для пользователей, которым доступен на просмотр документ "Заказ на внутреннее потребление".
	// ++ rarus yukuzi 23.08.2021   //
	//Возврат ПравоДоступа("Просмотр", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	Возврат ПравоДоступа("Просмотр", Метаданные.Документы.впЗаявкаНаСнабжение);
	// -- rarus yukuzi 23.08.2021
	
КонецФункции

Функция СообщениеОПредупрежденияхПриПолученииДанныхЗНВП()
	
	СообщениеОПредупрежденияхПриПолученииДанныхЗНВП = НСтр("ru = 'Не удалось прочитать данные Заказов на внутреннее потребление'");
	Возврат Новый ФорматированнаяСтрока(СообщениеОПредупрежденияхПриПолученииДанныхЗНВП, , ЦветаСтиля.ВажноеСобытие, , "ПерейтиВЖурналЗаказовНаВнутреннееПотребление");
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗаказыНаВнутреннееПотребление(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяТаблицаБлоков()
	
	ТаблицаБлоков = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаБлоков.Колонки;
	
	Колонки.Добавить("Пометка",                   Новый ОписаниеТипов("Булево"));
	Колонки.Добавить("Имя",                       ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("Синоним",                   ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Колонки.Добавить("ПроцедураПолученияДанных",  ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураОбновленияДанных", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("ПроцедураУправлениеБлоком", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("РеквизитыФормы",            ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Колонки.Добавить("Виджет",            		  Новый ОписаниеТипов("СправочникСсылка.рарусВиджеты"));
	Колонки.Добавить("ЦветФона",                  Новый ОписаниеТипов("Цвет"));
	Колонки.Добавить("Порядок",                   ОбщегоНазначения.ОписаниеТипаЧисло(3));
	
	Возврат ТаблицаБлоков;
	
КонецФункции

Процедура Добавить(ТаблицаБлоков, Имя, Синоним, ПроцедураПолученияДанных, ПроцедураОбновленияДанных, ПроцедураУправлениеБлоком, РеквизитыФормы, Виджет, Порядок = 100)
	
	НовыйБлок = ТаблицаБлоков.Добавить();
	НовыйБлок.Имя                       = Имя;
	НовыйБлок.Синоним                   = Синоним;
	НовыйБлок.ПроцедураПолученияДанных  = ПроцедураПолученияДанных;
	НовыйБлок.ПроцедураОбновленияДанных = ПроцедураОбновленияДанных;
	НовыйБлок.ПроцедураУправлениеБлоком = ПроцедураУправлениеБлоком;
	НовыйБлок.РеквизитыФормы            = РеквизитыФормы;
	НовыйБлок.Порядок                   = Порядок;
	НовыйБлок.Виджет                    = Виджет;
	
КонецПроцедуры

Функция МножественноеПредставление(ПараметрыПредметаИсчисления)
	
	ПредставленияПредмета = СтрРазделить(ПараметрыПредметаИсчисления, ",");
	
	Возврат ?(ПредставленияПредмета.Количество() >= 3, СокрЛП(ПредставленияПредмета[2]), "");
	
КонецФункции

//Функция ПредставлениеСрока(ОтносительныйСрок, ОсталосьДней) Экспорт
//	
//	Если ОтносительныйСрок = Перечисления.ОтносительныеСроки.НесколькоДней Тогда
//		
//		ОсталосьДнейПрописью = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
//			ОсталосьДней, НСтр("ru = 'день, дня, дней'"));
//			
//		ПредставлениеСрока = СтрШаблон(НСтр("ru = 'Через %1'"), ОсталосьДнейПрописью);
//		
//	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Неделя Тогда
//		
//		ПредставлениеСрока = НСтр("ru = 'Через неделю'");
//		
//	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ДвеНедели Тогда
//		
//		ПредставлениеСрока = НСтр("ru = 'Через 2 недели'");
//		
//	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.ТриНедели Тогда
//		
//		ПредставлениеСрока = НСтр("ru = 'Через 3 недели'");
//		
//	ИначеЕсли ОтносительныйСрок = Перечисления.ОтносительныеСроки.Месяц Тогда
//		
//		ПредставлениеСрока = НСтр("ru = 'Через месяц'");
//		
//	Иначе
//		
//		ПредставлениеСрока = Строка(ОтносительныйСрок); // Сегодня, Завтра
//		
//	КонецЕсли;
//	
//	Возврат ПредставлениеСрока;
//	
//КонецФункции

Функция ПредставлениеОтклонения(Знач Отклонение)
	
	Отклонение = Окр(Отклонение, 0);
	
	Стрелка = ?(Отклонение > 0, СтрелкаВверх(), СтрелкаВниз());
	
	МодульОтклонения = Макс(Отклонение, -Отклонение);
	
	ПределОтклонения = ПределОтклонения();
	
	Если Отклонение <> 0 Тогда
		Если Отклонение < ПределОтклонения Тогда
			ПредставлениеОтклонения = Стрелка + Формат(МодульОтклонения, "ЧДЦ=") + "%";
		Иначе
			ПредставлениеОтклонения = Стрелка;
		КонецЕсли;
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтОтклоненияИнформационнойПанели;
	Если Отклонение > 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветПоложительногоОтклоненияИнформационнойПанели;
	ИначеЕсли Отклонение < 0 Тогда
		ЦветТекста = ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели;
	Иначе
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПределОтклонения()
	
	Возврат 999;
	
КонецФункции

Функция СтрелкаВверх()
	
	Возврат Символ(9650);
	
КонецФункции

Функция СтрелкаВниз()
	
	Возврат Символ(9660);
	
КонецФункции

// Заменяет пробелы в строке на неразрывные пробелы для блокировки переносов в браузере
//
Функция СтрокаБезПереносов(ИсходнаяСтрока)
	
	// Для того чтобы строка правильно переносилась в веб-клиенте,
	// вместо запятой используем символ - U+201A:Single Low-9 Quotation Mark (Keystroke: Alt+0130)
	ИсходнаяСтрока = СтрЗаменить(ИсходнаяСтрока, ",", "‚");
	Возврат СтрЗаменить(ИсходнаяСтрока, " ", Символы.НПП);
	
КонецФункции

Функция ЗаголовокБлока(ТекстЗаголовка)
	
	Шрифт = ШрифтыСтиля.ШрифтЗаголовкаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветЗаголовкаИнформационнойПанели;
	
	Возврат Новый ФорматированнаяСтрока(ТекстЗаголовка, Шрифт, ЦветТекста);
	
КонецФункции

Функция ПредставлениеОтклоненияКурса(Отклонение)
	
	Если Отклонение <> 0 Тогда
		ПредставлениеОтклонения = СтрШаблон("%1%2",
			?(Отклонение > 0, "+", ""), Формат(Отклонение, "ЧДЦ=4"));
	Иначе
		ПредставлениеОтклонения = "";
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветПустойГиперссылки;
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеОтклонения, Шрифт, ЦветТекста);
	
КонецФункции

Функция ДатаОбновленияВиджета()
	
	Возврат СтрШаблон("Дата обновления: %1", ТекущаяДатаСеанса());
	
КонецФункции

Процедура ПрочитатьСохраненныеДанныеВиджета(Пользователь, Виджет, Результат, ИдентификаторФоновогоЗадания = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИдентификаторФоновогоЗадания = Неопределено Тогда
		
		НаборЗаписейПоВиджету = РегистрыСведений.рарусДанныеВиджетов.СоздатьНаборЗаписей();
		НаборЗаписейПоВиджету.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписейПоВиджету.Отбор.Виджет.Установить(Виджет);
		
	Иначе
		
		НаборЗаписейПоВиджету = РегистрыСведений.рарусДанныеВиджетов.СоздатьНаборЗаписей();
		НаборЗаписейПоВиджету.Отбор.ИдентификаторФоновогоЗадания.Установить(ИдентификаторФоновогоЗадания);
		
	КонецЕсли;
	
	НаборЗаписейПоВиджету.Прочитать();
	
	Если НаборЗаписейПоВиджету.Количество() Тогда
		ЗаписьПоВиджету = НаборЗаписейПоВиджету[0];
		Результат = ЗаписьПоВиджету.ДанныеВиджета.Получить();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

Процедура СохранитьДанныеВиджета(Пользователь, Виджет, Результат, ИдентификаторФоновогоЗадания)
	
	НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить();
		ЭлементБлокировки.Область = "РегистрСведений.рарусДанныеВиджетов";
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Пользователь", Пользователь);
		ЭлементБлокировки.УстановитьЗначение("Виджет", Виджет);
		Блокировка.Заблокировать();
		
		НаборЗаписейПоВиджету = РегистрыСведений.рарусДанныеВиджетов.СоздатьНаборЗаписей();
		НаборЗаписейПоВиджету.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписейПоВиджету.Отбор.Виджет.Установить(Виджет);
		
		ЗаписьПоВиджету = НаборЗаписейПоВиджету.Добавить();
		ЗаписьПоВиджету.Виджет = Виджет;
		ЗаписьПоВиджету.Пользователь = Пользователь;
		ЗаписьПоВиджету.ИдентификаторФоновогоЗадания = ИдентификаторФоновогоЗадания;
		ЗаписьПоВиджету.ДанныеВиджета = Новый ХранилищеЗначения(Результат);
		
		НаборЗаписейПоВиджету.Записать(Истина);
		
		УстановитьПривилегированныйРежим(Ложь);
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ТекстОшибки = СтрШаблон("Не удалось сохранить данные виджета %1 по причине:%2%3", ОбщегоНазначения.ПредметСтрокой(Виджет), Символы.ПС, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Сохранение данных виджета'"), УровеньЖурналаРегистрации.Ошибка,Метаданные.РегистрыСведений.рарусДанныеВиджетов,,ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры
// ++ rarus yukuzi 23.08.2021   //
Процедура  УстановитьПараметрыОтчета(ОтчетОбъект,СтруктураПараметров)
	СтруктураНастроек = Новый Структура;
	
	
	Настройки = ОтчетОбъект.КомпоновщикНастроек.Настройки;
	Для Каждого ЭлПараметр  Из СтруктураПараметров Цикл
		
		ЭД = Настройки.ПараметрыДанных.Элементы.Найти(ЭлПараметр.Ключ);
		Если не ЭД=Неопределено тогда
			ЭД.Значение = ЭлПараметр.Значение;
			ЭД.Использование = Истина;
		КонецЕсли;
	КонецЦикла;  
	
КонецПроцедуры

Функция Просклонять(Словосочетание, Число, Падеж)
Возврат ПолучитьСклоненияСтрокиПоЧислу(Словосочетание, Число, "",
    "ЧС=Количественное",  "ПД="+Падеж)[0];

	
	

КонецФункции 
Функция СохраненнаяНастройкаПользователя(ИмяОбъекта, ИмяПараметра) Экспорт 
	ЗначениеПараметра=неопределено;
	ПараметрКомпоновки = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	КлючТекущегоВарианта=ХранилищеСистемныхНастроек.Загрузить(ИмяОбъекта+"/КлючТекущегоВарианта");
	ПараметрКомпоновки = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	СписокНастроек=ХранилищеСистемныхНастроек.Загрузить(ИмяОбъекта+"/"+КлючТекущегоВарианта+"/ТекущиеПользовательскиеНастройки");
	Если не СписокНастроек=Неопределено тогда

	СохраненныеНастройкиПользователя=СписокНастроек.Элементы;	
	//СохраненныеНастройкиПользователя=ХранилищеСистемныхНастроек.Загрузить("Отчет."+ИмяОтчета+"/"+"Основной"+"/ТекущиеПользовательскиеНастройки").Элементы;
	Если не СохраненныеНастройкиПользователя=Неопределено тогда
		Для каждого НастройкаКомпоновки Из СохраненныеНастройкиПользователя Цикл
			Если ТипЗнч(НастройкаКомпоновки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") и
				НастройкаКомпоновки.Параметр=ПараметрКомпоновки тогда
				ЗначениеПараметра= НастройкаКомпоновки.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции 

Функция ПолучитьПараметр(ОбъектНастройки, Параметр) Экспорт
	
	ЗначениеПараметра = Неопределено;
	ПолеПараметр = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	Если ТипЗнч(ОбъектНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из ОбъектНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			   И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Для Каждого ЭлементНастройки Из ОбъектНастройки.ПользовательскиеНастройки.Элементы Цикл
			Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			   И ЭлементНастройки.Параметр = ПолеПараметр Тогда
				ЗначениеПараметра = ЭлементНастройки;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
		Если ЗначениеПараметра = Неопределено Тогда
			ЗначениеПараметра = ОбъектНастройки.ФиксированныеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.Найти(ПолеПараметр);
	ИначеЕсли ТипЗнч(ОбъектНастройки) = Тип("ОформлениеКомпоновкиДанных") Тогда
		ЗначениеПараметра = ОбъектНастройки.НайтиЗначениеПараметра(ПолеПараметр);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции
Функция КритическоеОборудование() Экспорт
 Возврат Справочники.впПриоритетыОбъектовРемонта.НайтиПоНаименованию("Критическое оборудование");
КонецФункции 
// -- rarus yukuzi 23.08.2021

// ++ rarus yukuzi 31.08.2021   //
Функция ПериодПоПоказателю(ИмяПоказателя, СтруктураБлижайшихПериодовВиджета) Экспорт 
	СоответствиеПоПоказателям=СтруктураБлижайшихПериодовВиджета.СоответствиеПоПоказателям;
	РазныеПериодыПоПоказателям=СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
		Возврат СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	
	ПериодПоказателя=СоответствиеПоПоказателям.Получить(Справочники.рарусПоказателиВиджетов.НайтиПоКоду(ИмяПоказателя));
	Возврат ПериодПоказателя;
КонецФункции 
	Функция СтруктураБлижайшихПериодовВиджета(Виджет, ПериодВиджетов=неопределено) Экспорт
		СтруктураВозврата=Новый Структура("РазныеПериодыПоПоказателям, ПериодВиджета, ЭлементПериод, СоответствиеПоПоказателям");
		Если ЗначениеЗаполнено(ПериодВиджетов) тогда
			СтруктураВозврата.Вставить("РазныеПериодыПоПоказателям", Ложь);
			СтруктураВозврата.Вставить("ПериодВиджета", ПериодВиджетов);
			Возврат СтруктураВозврата;
		КонецЕсли;	
		Если ТипЗнч(Виджет)=Тип("Строка") тогда
			Виджет=Справочники.рарусВиджеты.НайтиПоНаименованию(Виджет);
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусПоказателиВиджетов.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втПоказатели
		|ИЗ
		|	Справочник.рарусПоказателиВиджетов КАК рарусПоказателиВиджетов
		|ГДЕ
		|	рарусПоказателиВиджетов.УчитыватьПериод
		|	И рарусПоказателиВиджетов.Владелец = &Виджет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(рарусПериодыВиджетовПоУмолчанию.Код) КАК Код
		|ПОМЕСТИТЬ втЭлементПериодаСМаксимальнымКодом
		|ИЗ
		|	Справочник.рарусПериодыВиджетовПоУмолчанию КАК рарусПериодыВиджетовПоУмолчанию
		|ГДЕ
		|	рарусПериодыВиджетовПоУмолчанию.Владелец = &Виджет
		|	И НЕ рарусПериодыВиджетовПоУмолчанию.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	рарусПериодыВиджетовПоУмолчанию.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втПоследнийЭлементПериода
		|ИЗ
		|	Справочник.рарусПериодыВиджетовПоУмолчанию КАК рарусПериодыВиджетовПоУмолчанию
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЭлементПериодаСМаксимальнымКодом КАК втЭлементПериодаСМаксимальнымКодом
		|		ПО рарусПериодыВиджетовПоУмолчанию.Код = втЭлементПериодаСМаксимальнымКодом.Код
		|ГДЕ
		|	рарусПериодыВиджетовПоУмолчанию.Владелец = &Виджет
		|	И НЕ рарусПериодыВиджетовПоУмолчанию.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.Показатель КАК Показатель,
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.СдвигДаты КАК СдвигДаты,
		|	рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.ВидПериода КАК ВидПериода,
		|	втПоследнийЭлементПериода.Ссылка КАК ЭлементПериода
		|ПОМЕСТИТЬ втТЧЭлементаПериода
		|ИЗ
		|	Справочник.рарусПериодыВиджетовПоУмолчанию.ПериодыРасчетаПоказателей КАК рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследнийЭлементПериода КАК втПоследнийЭлементПериода
		|		ПО рарусПериодыВиджетовПоУмолчаниюПериодыРасчетаПоказателей.Ссылка = втПоследнийЭлементПериода.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втПоказатели.Ссылка КАК Ссылка,
		|	СУММА(ВЫБОР
		|			КОГДА втТЧЭлементаПериода.ВидПериода = ЗНАЧЕНИЕ(Перечисление.рарусВидыПериодовВиджетов.ДеньКалендарный)
		|				ТОГДА втТЧЭлементаПериода.СдвигДаты
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СдвигДней,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ втТЧЭлементаПериода.ВидПериода = ЗНАЧЕНИЕ(Перечисление.рарусВидыПериодовВиджетов.ДеньКалендарный)
		|				ТОГДА втТЧЭлементаПериода.СдвигДаты
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СдвигМесяцев,
		|	ВЫБОР
		|		КОГДА втТЧЭлементаПериода.Показатель ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ПериодУстановлен,
		|	втПоследнийЭлементПериода.Ссылка КАК ЭлементПериода
		|ПОМЕСТИТЬ втТаблицаСдвигов
		|ИЗ
		|	втТЧЭлементаПериода КАК втТЧЭлементаПериода
		|		ПОЛНОЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
		|		ПО (втПоказатели.Ссылка = втТЧЭлементаПериода.Показатель),
		|	втПоследнийЭлементПериода КАК втПоследнийЭлементПериода
		|ГДЕ
		|	(НЕ втПоказатели.Ссылка ЕСТЬ NULL
		|			ИЛИ втТЧЭлементаПериода.Показатель = ЗНАЧЕНИЕ(Справочник.рарусПоказателиВиджетов.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	втПоказатели.Ссылка,
		|	втТЧЭлементаПериода.Показатель,
		|	втПоследнийЭлементПериода.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаСдвигов.Ссылка КАК Показатель,
		|	ВЫБОР
		|		КОГДА &ДатаАктуальности < ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАктуальности, МЕСЯЦ, втТаблицаСдвигов.СдвигМесяцев), ДЕНЬ, втТаблицаСдвигов.СдвигДней)
		|			ТОГДА &ДатаАктуальности
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАктуальности, МЕСЯЦ, втТаблицаСдвигов.СдвигМесяцев), ДЕНЬ, втТаблицаСдвигов.СдвигДней)
		|	КОНЕЦ КАК НачалоПериода,
		|	ВЫБОР
		|		КОГДА &ДатаАктуальности >= ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАктуальности, МЕСЯЦ, втТаблицаСдвигов.СдвигМесяцев), ДЕНЬ, втТаблицаСдвигов.СдвигДней)
		|			ТОГДА &ДатаАктуальности
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(&ДатаАктуальности, МЕСЯЦ, втТаблицаСдвигов.СдвигМесяцев), ДЕНЬ, втТаблицаСдвигов.СдвигДней)
		|	КОНЕЦ КАК КонецПериода,
		|	втТаблицаСдвигов.ПериодУстановлен КАК ПериодУстановлен,
		|	втТаблицаСдвигов.ЭлементПериода КАК ЭлементПериода
		|ПОМЕСТИТЬ втТаблицаПериодовПоПоказателям
		|ИЗ
		|	втТаблицаСдвигов КАК втТаблицаСдвигов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаПериодовПоПоказателям.НачалоПериода КАК НачалоПериода,
		|	втТаблицаПериодовПоПоказателям.КонецПериода КАК КонецПериода,
		|	втТаблицаПериодовПоПоказателям.ЭлементПериода КАК ЭлементПериода
		|ИЗ
		|	втТаблицаПериодовПоПоказателям КАК втТаблицаПериодовПоПоказателям
		|
		|СГРУППИРОВАТЬ ПО
		|	втТаблицаПериодовПоПоказателям.КонецПериода,
		|	втТаблицаПериодовПоПоказателям.НачалоПериода,
		|	втТаблицаПериодовПоПоказателям.ЭлементПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаПериодовПоПоказателям.Показатель КАК Показатель,
		|	втТаблицаПериодовПоПоказателям.НачалоПериода КАК НачалоПериода,
		|	втТаблицаПериодовПоПоказателям.КонецПериода КАК КонецПериода,
		|	втТаблицаПериодовПоПоказателям.ПериодУстановлен КАК ПериодУстановлен,
		|	втТаблицаПериодовПоПоказателям.ЭлементПериода КАК ЭлементПериода
		|ИЗ
		|	втТаблицаПериодовПоПоказателям КАК втТаблицаПериодовПоПоказателям";
		Запрос.УстановитьПараметр("Виджет", Виджет);
		Запрос.УстановитьПараметр("ДатаАктуальности", НачалоДня(ТекущаяДата()));
		
		РезультатЗапроса = Запрос.ВыполнитьПакет();
		
		Если РезультатЗапроса[6].Пустой() тогда
			//Возврат неопределено;
			СтруктураВозврата.Вставить("РазныеПериодыПоПоказателям", Ложь);
			ПериодВиджетовСтруктуры=новый СтандартныйПериод;
			ПериодВиджетовСтруктуры.Вариант=ВариантСтандартногоПериода.Сегодня;
			
			СтруктураВозврата.Вставить("ПериодВиджета", ПериодВиджетовСтруктуры);
			Возврат СтруктураВозврата;

		КонецЕсли;
		
		ВыборкаПоДатам=РезультатЗапроса[6].Выбрать();
		Если  ВыборкаПоДатам.Количество()=1 тогда
			ВыборкаПоДатам.Следующий();
			СтруктураВозврата.Вставить("РазныеПериодыПоПоказателям", Ложь);
			ПериодВиджетовСтруктуры=новый СтандартныйПериод;
			ПериодВиджетовСтруктуры.Вариант=ВариантСтандартногоПериода.ПроизвольныйПериод;
			ПериодВиджетовСтруктуры.ДатаНачала=ВыборкаПоДатам.НачалоПериода;
			ПериодВиджетовСтруктуры.ДатаОкончания=ВыборкаПоДатам.КонецПериода;
			СтруктураВозврата.Вставить("ПериодВиджета", ПериодВиджетовСтруктуры);
			Возврат СтруктураВозврата;
		Иначе
			СтруктураВозврата.Вставить("РазныеПериодыПоПоказателям", Истина);
			//ТаблицаПоПоказателям=РезультатЗапроса[7].Выгрузить();
			ВыборкаПоПоказателям=РезультатЗапроса[7].выбрать();
			СоответствиеПоПоказателям=новый Соответствие;
			Пока ВыборкаПоПоказателям.Следующий() Цикл 
				ЭлементПериод=ВыборкаПоПоказателям.ЭлементПериода;
				ПериодПоказателя=Новый СтандартныйПериод;
				ПериодПоказателя.ДатаНачала=ВыборкаПоПоказателям.НачалоПериода;
				ПериодПоказателя.ДатаОкончания=ВыборкаПоПоказателям.КонецПериода;
				СоответствиеПоПоказателям.Вставить(ВыборкаПоПоказателям.Показатель,ПериодПоказателя); 
			КонецЦикла;
			СтруктураВозврата.Вставить("СоответствиеПоПоказателям", СоответствиеПоПоказателям);
			//ЭлементПериод=ТаблицаПоПоказателям[0].ЭлементПериода;
			//ЭлементПериод=ТаблицаПоПоказателям[0].ЭлементПериода;
			СтруктураВозврата.Вставить("ЭлементПериод", ЭлементПериод);
			Возврат СтруктураВозврата;
			
		КонецЕсли;
		
	КонецФункции 


// -- rarus yukuzi 31.08.2021
Процедура ПолучитьПериодДанныхВиджета(Параметры, ДатаНачала, ДатаОкончания)
	
	Перем  ПериодВиджета;
	
	Если ТипЗнч(Параметры) = Тип("Структура")
		И Параметры.Свойство("Период", ПериодВиджета)
		И ТипЗнч(ПериодВиджета) = Тип("СтандартныйПериод")
		И ЗначениеЗаполнено(ПериодВиджета) Тогда
		
		// Сначала проверяем период в шапке панели. Если он заполнен, используем его
		ДатаНачала 		= ПериодВиджета.ДатаНачала;
		ДатаОкончания 	= ПериодВиджета.ДатаОкончания;
		
	Иначе
		// Получим период из стандартного отклонения
		СсылкаНаВиджет = БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗаказНаВнутреннееПотребление();
		СтандартныеПериодыВиджета = ПолучитьМассивСтандартныхПериодовВиджета(СсылкаНаВиджет);
		СтандартныйПериодВиджета = СтандартныеПериодыВиджета[0]; // Всегда должен вернуться массив хотя бы с одной записью
		
		Если ЗначениеЗаполнено(СтандартныйПериодВиджета) Тогда
			
			ДатаНачала 		= СтандартныйПериодВиджета.ДатаНачала;
			ДатаОкончания 	= СтандартныйПериодВиджета.ДатаОкончания;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОстаткиСудовогоСклада

Процедура ДобавитьОстаткиСудовогоСклада(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОстаткиСудовогоСклада(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиСудовогоСклада(),
		"БлокиИнформационнойПанели.ОстаткиСудовогоСклада",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОстаткиСудовогоСклада",
		СвойстваОстаткиСудовогоСклада(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОстаткиСудовогоСклада());
	 
КонецПроцедуры

Функция СвойстваОстаткиСудовогоСклада()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	+ "ОстаткиСудовогоСклада_ПредупрежденияПриЗагрузке, "
	//+ "ОстаткиСудовогоСклада_Период, "
	+ "ОстаткиСудовогоСклада_ДатаОбновления, "
	+ "ОстаткиСудовогоСклада_Строка1_1, "
	+ "ОстаткиСудовогоСклада_Строка1_2, "
	+ "ОстаткиСудовогоСклада_ТекстВиджета, "
	+ "ОстаткиСудовогоСклада_ТекстВиджета1, "
	+ "ОстаткиСудовогоСклада_ТекстВиджета2";
	
	
	Возврат Свойства;
	
	
КонецФункции
Функция ОстаткиСудовогоСклада_НеобходимоЗаказать(ДатаОтчета)
	Данные = Новый ТаблицаЗначений;
	Данные.Колонки.Добавить("Разница",         Новый ОписаниеТипов("Число"));
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ОтчетЗапасы=Отчеты.рарусМинимальныеЗапасыТМЦ.Создать();
	СтрПараметры = Новый Структура;
	СтрПараметры.Вставить("Период", ТекущаяДата());
	ОсновноеСудно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	Если ЗначениеЗаполнено(ОсновноеСудно) тогда
		СтрПараметры.Вставить("ПараметрСудно", vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно"));
	КонецЕсли;

	
	УстановитьПараметрыОтчета(ОтчетЗапасы,СтрПараметры);
	
	НастройкиОтчета = ОтчетЗапасы.КомпоновщикНастроек.ПолучитьНастройки();
	ОтборКомпоновщика = НастройкиОтчета.Отбор;
	
	ВидОбъекта = ОтборКомпоновщика.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ВидОбъекта.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
	ВидОбъекта.Использование = Истина;
	ВидОбъекта.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Разница");
	ВидОбъекта.ПравоеЗначение = 0;
	
	НастройкиОтчета.Структура.Очистить();
	
	
	ГруппировкаДетальныеЗаписи = НастройкиОтчета.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаДетальныеЗаписи.Использование = Истина;
	Автополе = ГруппировкаДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Автополе.Использование = Истина; 
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетЗапасы.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Данные);
	
	// Обозначим начало вывода
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	// Нужна проверка на пустую таблицу	
	
	Если Данные.Количество() <>  0 Тогда
		Возврат Данные.Итог("Разница");
	Иначе
		Возврат 0;
	КонецЕсли;
	
	
КонецФункции // ()

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОстаткиСудовогоСклада(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОстаткиСудовогоСклада(Параметры, АдресРезультата = Неопределено) Экспорт
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;

	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		//ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиСудовогоСклада();
		//Результат.Вставить("ОстаткиСудовогоСклада_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОстаткиСудовогоСклада(), Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат.Вставить("ОстаткиСудовогоСклада_Заголовок",
				ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиСудовогоСклада()));
		КонецЕсли;

		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	//Результат = Новый Структура();
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОстаткиСудовогоСклада();
	Результат.Вставить("ОстаткиСудовогоСклада_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	Если не ОстаткиСудовогоСкладаДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ОстаткиСудовогоСклада_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе

	
	ЧастиСтрок=Новый Массив;
//	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Остатки судового склада", Шрифт, , ,"ВедомостьТМЦ"));
//	ЧастиСтрок.Добавить(" и ");
//	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("снижение остатка ТМЦ", Шрифт, , ,"МинимальныеЗапасыТМЦ"));
//	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(" из критического списка Min-max.", Шрифт, ЦветТекста));

////	ЧастиСтрок.Добавить(" из критического списка Min-max.");
//	//ЧастиСтрок.Добавить(Символы.ПС+Символы.ПС+"Необходимо заказать ");
//	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+Символы.ПС+"Необходимо заказать ", Шрифт, ЦветТекста));

//	НеобходимоЗаказать=-ОстаткиСудовогоСклада_НеобходимоЗаказать(ТекущаяДата());
//	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(НеобходимоЗаказать), Шрифт, , ,"МинимальныеЗапасыТМЦ"));
//	//ЧастиСтрок.Добавить(" для пополнения судовых запасов.");
//	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(" для пополнения судовых запасов.", Шрифт, ЦветТекста));

	
	//Результат.Вставить("ОстаткиСудовогоСклада_ТекстВиджета", Новый ФорматированнаяСтрока(ЧастиСтрок));
	
	Результат.Вставить("ОстаткиСудовогоСклада_ТекстВиджета1", ПредставлениеОстаткиСудовогоСклада1());
	Результат.Вставить("ОстаткиСудовогоСклада_ТекстВиджета2", ПредставлениеОстаткиСудовогоСклада2());

	Результат.Вставить("ОстаткиСудовогоСклада_Строка1_1",Новый ФорматированнаяСтрока("Для пополнения запасов нужно заказать", Шрифт, ЦветТекста));
	НеобходимоЗаказать=-ОстаткиСудовогоСклада_НеобходимоЗаказать(ТекущаяДата());
	Результат.Вставить("ОстаткиСудовогоСклада_Строка1_2",Новый ФорматированнаяСтрока(Строка(НеобходимоЗаказать), Шрифт, , ,"МинимальныеЗапасыТМЦ"));
	
	//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
	//Результат.Вставить("ОстаткиСудовогоСклада_ПредупрежденияПриЗагрузке", "");
	
	
	//ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	КонецЕсли;
	Результат.Вставить("ОстаткиСудовогоСклада_ДатаОбновления", ДатаОбновленияВиджета());
	//ДанныеПериодовОстатковСудовогоСклада=ДанныеПериодовОстатковСудовогоСклада();
	//Результат.Вставить("ОстаткиСудовогоСклада_Период", СтрШаблон("(%1-%2)", 
	//												Формат(ДанныеПериодовОстатковСудовогоСклада.ДатаНачала, "ДФ=dd.MM.yyyy"),
	//												Формат(ДанныеПериодовОстатковСудовогоСклада.ДатаОкончания, "ДФ=dd.MM.yyyy")));

	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОстаткиСудовогоСклада(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);

	
КонецПроцедуры
Функция ПредставлениеОстаткиСудовогоСклада()
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЧастиСтрок=Новый Массив;
	
	НеобходимоЗаказать=-ОстаткиСудовогоСклада_НеобходимоЗаказать(ТекущаяДата());
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Для пополнения запасов нужно заказать ", Шрифт, ЦветТекста));

	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(НеобходимоЗаказать), Шрифт, , ,"МинимальныеЗапасыТМЦ"));
	
	

		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеОстаткиСудовогоСклада1()
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Остатки судового склада", Шрифт, , ,"ВедомостьТМЦ"));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеОстаткиСудовогоСклада2()
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Снижение остатка ТМЦ", Шрифт, , ,"МинимальныеЗапасыТМЦ"));
		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции


Функция ДанныеПериодовОстатковСудовогоСклада()
	ПериодДанных=Новый СтандартныйПериод;

	СохраненнаяНастройкаПериода = СохраненнаяНастройкаПользователя("Отчет.рарусВедомостьТМЦ", "ПериодОтчета");
		Если не ЗначениеЗаполнено(СохраненнаяНастройкаПериода) тогда
			
			
			
			
			ПериодДанных.ДатаНачала= НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), -1));
			ПериодДанных.ДатаОкончания =КонецМесяца(ДобавитьМесяц(ТекущаяДата(), -1));

		КонецЕсли;
	Возврат ПериодДанных;	

КонецФункции 

Функция ОстаткиСудовогоСкладаДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Отчеты.рарусВедомостьТМЦ) и ПравоДоступа("Просмотр", Метаданные.Отчеты.рарусМинимальныеЗапасыТМЦ);
			
	
КонецФункции

#КонецОбласти
#Область ЗапланированныеМероприятияСУБ

Процедура ДобавитьЗапланированныеМероприятияСУБ(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаЗапланированныеМероприятияСУБ(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗапланированныеМероприятияСУБ(),
		"БлокиИнформационнойПанели.ЗапланированныеМероприятияСУБ",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомЗапланированныеМероприятияСУБ",
		СвойстваЗапланированныеМероприятияСУБ(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗапланированныеМероприятияСУБ());
	
КонецПроцедуры

Функция СвойстваЗапланированныеМероприятияСУБ()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ЗапланированныеМероприятияСУБ_Заголовок, "
	+ "ЗапланированныеМероприятияСУБ_ПредупрежденияПриЗагрузке, "
	+ "ЗапланированныеМероприятияСУБ_ДатаОбновления, "
	+ "ЗапланированныеМероприятияСУБ_Период, "
	+ "ЗапланированныеМероприятияСУБ_ТекстВиджета, "
	+ "ЗапланированныеМероприятияСУБ_Строка1_1, "
	+ "ЗапланированныеМероприятияСУБ_Строка1_2, "
	+ "ЗапланированныеМероприятияСУБ_Строка2_1, "
	+ "ЗапланированныеМероприятияСУБ_Строка2_2, "
	+ "ЗапланированныеМероприятияСУБ_ТекстВиджета1, "
	+ "ЗапланированныеМероприятияСУБ_ТекстВиджета2";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьЗапланированныеМероприятияСУБ(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры
Функция ЗапланированныеМероприятияСУБ_Количество(БлижайшийПериод, Просроченные=Ложь)

	ОтчетГрафик=Отчеты.рарусГрафикМероприятийСУБ.Создать();
	СтрПараметры = Новый Структура;
	ПериодОтчета=Новый СтандартныйПериод;
	
	//НачалоПериода= НачалоКвартала(БлижайшийПериод);
	//КонецПериода =КонецКвартала(БлижайшийПериод);
	СтрПараметры.Вставить("НачалоПериода", БлижайшийПериод.ДатаНачала);
	СтрПараметры.Вставить("КонецПериода", БлижайшийПериод.ДатаОкончания);

		
	
	УстановитьПараметрыОтчета(ОтчетГрафик,СтрПараметры);
	
	НастройкиОтчета = ОтчетГрафик.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	ТекстЗапроса = ОтчетГрафик.СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, 
	 "&УсловиеОтбора", 
	  "Истина");
	  
	ОтчетГрафик.СхемаКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос = ТекстЗапроса;

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор,
	"Мероприятие",
	Документы.рарусМероприятиеСУБ.ПустаяСсылка(),
	ВидСравненияКомпоновкиДанных.Равно,
	"Нет мероприятия",
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор,
	"Учение",
	Документы.рарусУчение.ПустаяСсылка(),
	ВидСравненияКомпоновкиДанных.Равно,
	"Нет учения",
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);
	Если Просроченные тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор,
		"ПериодПо",
		ТекущаяДата(),
//		Дата(2021,08,19),
		ВидСравненияКомпоновкиДанных.Меньше,
		"Просроченные",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);	
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиОтчета.Отбор,
		"ПериодПо",
		ТекущаяДата(),
		//Дата(2021,08,19),
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		"не просроченные",
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);	
	КонецЕсли;
	
		
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетГрафик.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	///!!!
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаДанные = Новый ТаблицаЗначений;
	ТаблицаДанные.Колонки.Добавить("ОбъектПроверки");

	ПроцессорВывода.УстановитьОбъект(ТаблицаДанные);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

	Возврат ТаблицаДанные.Количество();
	
	
КонецФункции 
// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ЗапланированныеМероприятияСУБ(Параметры, АдресРезультата = Неопределено) Экспорт
	БлижайшийПериод=ТекущаяДата();
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";

	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		//ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗапланированныеМероприятияСУБ();
		//Результат.Вставить("ЗапланированныеМероприятияСУБ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗапланированныеМероприятияСУБ(), Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат.Вставить("ЗапланированныеМероприятияСУБ_Заголовок",
				ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗапланированныеМероприятияСУБ()));
		КонецЕсли;

		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваЗапланированныеМероприятияСУБ());
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗапланированныеМероприятияСУБ();
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаЗапланированныеМероприятияСУБ();
	Результат.Вставить("ЗапланированныеМероприятияСУБ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	
	Если не ЗапланированныеМероприятияСУБДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ЗапланированныеМероприятияСУБ_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе

	//ЧастиСтрок=Новый Массив;
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Приближение срока", Шрифт, ЦветТекста));

	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(" запланированных мероприятий СУБ", Шрифт, , ,"ГрафикМероприятийСУБ"));
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(", ", Шрифт, ЦветТекста));
	//
	////ЗапланированоНаБлижайшийПериод=ЗапланированныеМероприятияСУБ_КоличествоЗапланированных(БлижайшийПериод);
	//ЗапланированоНаБлижайшийПериод=ЗапланированныеМероприятияСУБ_Количество(БлижайшийПериод, Ложь);

	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ЗапланированоНаБлижайшийПериод), Шрифт, , ,"ГрафикМероприятийСУБ_запланированные"));
	//ПросроченоНаТекущуюДату=ЗапланированныеМероприятияСУБ_Количество(БлижайшийПериод, Истина);
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(", "+Символы.ПС+"просроченные мероприятия СУБ ", Шрифт, ЦветТекста));
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ПросроченоНаТекущуюДату), Шрифт, , ,"ГрафикМероприятийСУБ_просроченные"));
	//Результат.Вставить("ЗапланированныеМероприятияСУБ_ТекстВиджета", Новый ФорматированнаяСтрока(ЧастиСтрок));
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(Виджет, Параметры.Период);
	Результат.Вставить("ЗапланированныеМероприятияСУБ_ТекстВиджета", ПредставлениеЗапланированныеМероприятияСУБ(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	//Результат.Вставить("ЗапланированныеМероприятияСУБ_ТекстВиджета1", ПредставлениеЗапланированныеМероприятияСУБ1(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	//Результат.Вставить("ЗапланированныеМероприятияСУБ_ТекстВиджета2", ПредставлениеЗапланированныеМероприятияСУБ2(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 

	
	Результат.Вставить("ЗапланированныеМероприятияСУБ_Строка1_1",Новый ФорматированнаяСтрока("Приближается срок", Шрифт, ЦветТекста));
	
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С04.2", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	
	//ПоказательЗаКвартал= Новый СтандартныйПериод;
	//ПоказательЗаКвартал.ДатаНачала= НачалоКвартала( ПериодПоказателя.ДатаНачала);
	//ПоказательЗаКвартал.ДатаОкончания= КонецКвартала( ПериодПоказателя.ДатаОкончания);
	//ПоказательЗаГод= Новый СтандартныйПериод;
	//ПоказательЗаГод.ДатаНачала= НачалоГода( ПериодПоказателя.ДатаНачала);
	//ПоказательЗаГод.ДатаОкончания= КонецГода( ПериодПоказателя.ДатаОкончания);
	//отчет  не умеет формироваться ни за день, ни за месяц, ни за квартал, ни за несколько лет - только за текущий год
	//поэтому формируем за текущий год.
	ПоказательЗаГод=Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);

	ЗапланированоНаБлижайшийПериод=ЗапланированныеМероприятияСУБ_Количество(ПоказательЗаГод, Ложь);
	//ЗапланированоНаБлижайшийПериод=ЗапланированныеМероприятияСУБ_Количество(ПоказательЗаКвартал, Ложь);
	
	Результат.Вставить("ЗапланированныеМероприятияСУБ_Строка1_2",Новый ФорматированнаяСтрока(Формат(ЗапланированоНаБлижайшийПериод, ФорматнаяСтрока), Шрифт, , ,"ГрафикМероприятийСУБ_запланированные"));
	
	Результат.Вставить("ЗапланированныеМероприятияСУБ_Строка2_1",Новый ФорматированнаяСтрока("Просрочены", Шрифт, ЦветТекста));
	
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С04.3", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	
	//ПоказательЗаКвартал= Новый СтандартныйПериод;
	//ПоказательЗаКвартал.ДатаНачала= НачалоКвартала( ПериодПоказателя.ДатаНачала);
	//ПоказательЗаКвартал.ДатаОкончания= КонецКвартала( ПериодПоказателя.ДатаОкончания);
	//ПоказательЗаГод= Новый СтандартныйПериод;
	//ПоказательЗаГод.ДатаНачала= НачалоГода( ПериодПоказателя.ДатаНачала);
	//ПоказательЗаГод.ДатаОкончания= КонецГода( ПериодПоказателя.ДатаОкончания);
	
	//отчет  не умеет формироваться ни за день, ни за месяц, ни за квартал, ни за несколько лет - только за текущий год
	//поэтому формируем за текущий год.
	ПоказательЗаГод=Новый СтандартныйПериод(ВариантСтандартногоПериода.ЭтотГод);

	ПросроченоНаТекущуюДату=ЗапланированныеМероприятияСУБ_Количество(ПоказательЗаГод, Истина);

	//ПросроченоНаТекущуюДату=ЗапланированныеМероприятияСУБ_Количество(ПериодПоказателя, Истина);
	//ПросроченоНаТекущуюДату=ЗапланированныеМероприятияСУБ_Количество(ПоказательЗаКвартал, Истина);

	
	Результат.Вставить("ЗапланированныеМероприятияСУБ_Строка2_2",Новый ФорматированнаяСтрока(Формат(ПросроченоНаТекущуюДату, ФорматнаяСтрока), Шрифт, , ,"ГрафикМероприятийСУБ_просроченные"));
	
	//Результат.Вставить("ЗапланированныеМероприятияСУБ_ДатаОбновления", ДатаОбновленияВиджета());
	
	//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
	//Результат.Вставить("ЗапланированныеМероприятияСУБ_ПредупрежденияПриЗагрузке", "");
	КонецЕсли;
	//ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	Результат.Вставить("ЗапланированныеМероприятияСУБ_ДатаОбновления", ДатаОбновленияВиджета());
	
	//Если СтруктураБлижайшихПериодовВиджета=Неопределено тогда
	//	Результат.Вставить("ЗапланированныеМероприятияСУБ_Период", Новый ФорматированнаяСтрока("не указаны периоды"));
	//ИначеЕсли не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
	//	Результат.Вставить("ЗапланированныеМероприятияСУБ_Период", Новый ФорматированнаяСтрока(СтрШаблон("(%1-%2)", 
	//	//Формат(НачалоКвартала(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала), "ДФ=dd.MM.yy"),
	//	//Формат(КонецКвартала(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания), "ДФ=dd.MM.yy"))));
	//	Формат(НачалоГода(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала), "ДФ=dd.MM.yy"),
	//	Формат(КонецГода(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания), "ДФ=dd.MM.yy"))));

	//Иначе
	//	СтрокаПериода=Новый ФорматированнаяСтрока("разные периоды",,,,ПолучитьНавигационнуюСсылку(СтруктураБлижайшихПериодовВиджета.ЭлементПериод));
	//	Результат.Вставить("ЗапланированныеМероприятияСУБ_Период",СтрокаПериода);
	//	
	//КонецЕсли;

	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетЗапланированныеМероприятияСУБ(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры
Функция ПредставлениеЗапланированныеМероприятияСУБ(Виджет, Период, СтруктураБлижайшихПериодовВиджета)

	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Запланированные мероприятия СУБ", Шрифт, , ,"ГрафикМероприятийСУБ"));
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеЗапланированныеМероприятияСУБ1(Виджет, Период, СтруктураБлижайшихПериодовВиджета)

	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	
	ЧастиСтрок=Новый Массив;
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С04.2", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	
    ПоказательЗаКвартал= Новый СтандартныйПериод;
	ПоказательЗаКвартал.ДатаНачала= НачалоКвартала( ПериодПоказателя.ДатаНачала);
	ПоказательЗаКвартал.ДатаОкончания= КонецКвартала( ПериодПоказателя.ДатаОкончания);
	//ЗапланированоНаБлижайшийПериод=ЗапланированныеМероприятияСУБ_Количество(ПериодПоказателя, Ложь);
	ЗапланированоНаБлижайшийПериод=ЗапланированныеМероприятияСУБ_Количество(ПоказательЗаКвартал, Ложь);
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Приближается срок - ", Шрифт, ЦветТекста));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ЗапланированоНаБлижайшийПериод, ФорматнаяСтрока), Шрифт, , ,"ГрафикМероприятийСУБ_запланированные"));
	
		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеЗапланированныеМероприятияСУБ2(Виджет, Период, СтруктураБлижайшихПериодовВиджета)

	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	
	ЧастиСтрок=Новый Массив;
	
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С04.3", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;
	 ПоказательЗаКвартал= Новый СтандартныйПериод;
	ПоказательЗаКвартал.ДатаНачала= НачалоКвартала( ПериодПоказателя.ДатаНачала);
	ПоказательЗаКвартал.ДатаОкончания= КонецКвартала( ПериодПоказателя.ДатаОкончания);

	//ПросроченоНаТекущуюДату=ЗапланированныеМероприятияСУБ_Количество(ПериодПоказателя, Истина);
	ПросроченоНаТекущуюДату=ЗапланированныеМероприятияСУБ_Количество(ПоказательЗаКвартал, Истина);
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Просрочены - ", Шрифт, ЦветТекста));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(ПросроченоНаТекущуюДату, ФорматнаяСтрока), Шрифт, , ,"ГрафикМероприятийСУБ_просроченные"));
		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции



Функция ЗапланированныеМероприятияСУБДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Отчеты.рарусГрафикМероприятийСУБ);
			
	
КонецФункции


#КонецОбласти
#Область ПриближениеСрокаСудовых

Процедура ДобавитьПриближениеСрокаСудовых(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПриближениеСрокаСудовых(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПриближениеСрокаСудовых(),
		"БлокиИнформационнойПанели.ПриближениеСрокаСудовых",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПриближениеСрокаСудовых",
		СвойстваПриближениеСрокаСудовых(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПриближениеСрокаСудовых());
	
КонецПроцедуры

Функция СвойстваПриближениеСрокаСудовых()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ПриближениеСрокаСудовых_Заголовок, "
	+ "ПриближениеСрокаСудовых_ПредупрежденияПриЗагрузке, "
	+ "ПриближениеСрокаСудовых_ДатаОбновления, "
	+ "ПриближениеСрокаСудовых_Период, "
	+ "ПриближениеСрокаСудовых_ТекстВиджета, "
	+ "ПриближениеСрокаСудовых_Строка1_1, "
	+ "ПриближениеСрокаСудовых_Строка1_2, "
	+ "ПриближениеСрокаСудовых_Строка2_1, "
	+ "ПриближениеСрокаСудовых_Строка2_2, "
	+ "ПриближениеСрокаСудовых_Строка3_1, "
	+ "ПриближениеСрокаСудовых_Строка3_2";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПриближениеСрокаСудовых(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры
// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ПриближениеСрокаСудовых(Параметры, АдресРезультата = Неопределено) Экспорт
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";

	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПриближениеСрокаСудовых(), Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			Результат.Вставить("ПриближениеСрокаСудовых_Заголовок",
				ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПриближениеСрокаСудовых()));
		КонецЕсли;

		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваПриближениеСрокаСудовых());
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПриближениеСрокаСудовых();
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПриближениеСрокаСудовых();
	Результат.Вставить("ПриближениеСрокаСудовых_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	
	Если не ПриближениеСрокаСудовыхДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ПриближениеСрокаСудовых_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе
		

	Результат.Вставить("ПриближениеСрокаСудовых_ТекстВиджета", Новый ФорматированнаяСтрока("Все документы", Шрифт, , ,"ВсеДокументы"));
		
	
	
	Результат.Вставить("ПриближениеСрокаСудовых_Строка1_1",Новый ФорматированнаяСтрока("Обратить внимание", Шрифт, ЦветТекста));
	
		
	//КоличествоОбратитьВнимание=ПриближениеСрокаСудовых_Количество(Истина,Ложь, Истина);
	КоличествоОбратитьВнимание=ПриближениеСрокаСудовых_Количество(1);

	
	Результат.Вставить("ПриближениеСрокаСудовых_Строка1_2",Новый ФорматированнаяСтрока(Формат(КоличествоОбратитьВнимание, ФорматнаяСтрока), Шрифт, , ,"ОбратитьВнимание"));
	
	Результат.Вставить("ПриближениеСрокаСудовых_Строка2_1",Новый ФорматированнаяСтрока("менее месяца", Шрифт, ЦветТекста));
	
	//Если РазныеПериодыПоПоказателям  тогда
	//	ПериодПоказателя=ПериодПоПоказателю("С06.3", СтруктураБлижайшихПериодовВиджета)
	//КонецЕсли;	
	
	КоличествоМенееМесяца=ПриближениеСрокаСудовых_Количество(2);

	Результат.Вставить("ПриближениеСрокаСудовых_Строка2_2",Новый ФорматированнаяСтрока(Формат(КоличествоМенееМесяца, ФорматнаяСтрока), Шрифт, , ,"МенееМесяца"));
	
	Результат.Вставить("ПриближениеСрокаСудовых_Строка3_1",Новый ФорматированнаяСтрока("истек срок действия", Шрифт, ЦветТекста));
	
	//Если РазныеПериодыПоПоказателям  тогда
	//	ПериодПоказателя=ПериодПоПоказателю("С06.3", СтруктураБлижайшихПериодовВиджета)
	//КонецЕсли;	
	КоличествоИстекСрок=ПриближениеСрокаСудовых_Количество(3);

	
	Результат.Вставить("ПриближениеСрокаСудовых_Строка3_2",Новый ФорматированнаяСтрока(Формат(КоличествоИстекСрок, ФорматнаяСтрока), Шрифт,?(КоличествоИстекСрок=0, ЦветаСтиля.ЦветГиперссылки, ЦветаСтиля.ЦветОтрицательногоОтклоненияИнформационнойПанели) , ,"ИстекСрокДействия"));
	
	Результат.Вставить("ПриближениеСрокаСудовых_ДатаОбновления", ДатаОбновленияВиджета());
	
	//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
	//Результат.Вставить("ПриближениеСрокаСудовых_ПредупрежденияПриЗагрузке", "");
	КонецЕсли;
	
	Результат.Вставить("ЗапланированныеМероприятияСУБ_ДатаОбновления", ДатаОбновленияВиджета());
	//Если СтруктураБлижайшихПериодовВиджета=Неопределено тогда
	//	Результат.Вставить("ПриближениеСрокаСудовых_Период", Новый ФорматированнаяСтрока("не указаны периоды"));
	//ИначеЕсли не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
	//	Результат.Вставить("ПриближениеСрокаСудовых_Период", Новый ФорматированнаяСтрока(СтрШаблон("(%1-%2)", 
	//	Формат(НачалоКвартала(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала), "ДФ=dd.MM.yy"),
	//	Формат(КонецКвартала(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания), "ДФ=dd.MM.yy"))));
	//Иначе
	//	СтрокаПериода=Новый ФорматированнаяСтрока("разные периоды",,,,ПолучитьНавигационнуюСсылку(СтруктураБлижайшихПериодовВиджета.ЭлементПериод));
	//	Результат.Вставить("ПриближениеСрокаСудовых_Период",СтрокаПериода);
	//	
	//КонецЕсли;

	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПриближениеСрокаСудовых(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры

Функция ПриближениеСрокаСудовых_Количество(ВариантФормирования)
	
	Запрос = Новый Запрос;
	ТекстЗапроса = Справочники.рарусСвидетельстваСудов.ТекстЗапросаСписка();
	УсловиеОтбора = "НЕ СвидетельстваСудов.ВАрхиве";
	УсловиеОтбора = УсловиеОтбора + " и не СвидетельстваСудов.СлужебныйПризнак"; 
	УсловиеОтбора = УсловиеОтбора + " и  СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия";


	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	Если ВариантФормирования=1 тогда
		УсловиеОтбора = УсловиеОтбора + 
		" И ВЫБОР
		|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
		|				И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ = &СрокМенееМесяца
		|И (
		| СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления =0
		|	И	ВЫБОР
		|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
		|				И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 3)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ = &СрокМенее3Месяцев
		|Или ВЫБОР
		|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
		|				И (не СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления = 0
		|					И -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ДЕНЬ) - СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ = &ПрошелСрокДоУведомления)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
		Запрос.Текст= ТекстЗапроса;
		
		Запрос.УстановитьПараметр("СрокМенееМесяца",Ложь);
		Запрос.УстановитьПараметр("СрокМенее3Месяцев",Истина);
		Запрос.УстановитьПараметр("ПрошелСрокДоУведомления",Истина);
		
	ИначеЕсли ВариантФормирования=2 тогда
		УсловиеОтбора = УсловиеОтбора + 
		" и Выбор когда ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= &ТекущаяДата тогда Истина Иначе Ложь КОНЕЦ =&Просрочено 
		|		и  ВЫБОР
		|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
		|				И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ = &СрокМенееМесяца
		|		И (  СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления =0
		|ИЛИ ВЫБОР
		|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
		|				И (не СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления = 0
		|					И -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ДЕНЬ) - СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ = &ПрошелСрокДоУведомления)";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
		Запрос.Текст= ТекстЗапроса;
		
		Запрос.УстановитьПараметр("СрокМенееМесяца",Истина);
		Запрос.УстановитьПараметр("Просрочено",Ложь);
		Запрос.УстановитьПараметр("ПрошелСрокДоУведомления",Истина);
		
		
	ИначеЕсли ВариантФормирования=3 тогда
		УсловиеОтбора = УсловиеОтбора + 
		" и Выбор когда ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= &ТекущаяДата тогда Истина Иначе Ложь КОНЕЦ =&Просрочено
		|		И (  СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления =0
		|ИЛИ ВЫБОР
		|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
		|				И (не СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления = 0
		|					И -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ДЕНЬ) - СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления < 0)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ = &ПрошелСрокДоУведомления)";


		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
		Запрос.Текст= ТекстЗапроса;
		Запрос.УстановитьПараметр("Просрочено",Истина);
		Запрос.УстановитьПараметр("ПрошелСрокДоУведомления",Истина);

	КонецЕсли;

	//Если ВариантФормирования=1 тогда
	//	УсловиеОтбора = УсловиеОтбора + 
	//	" И ВЫБОР
	//	|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//	|				И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ = &СрокМенееМесяца
	//	|И (ВЫБОР
	//	|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//	|				И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 3)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ = &СрокМенее3Месяцев
	//	|Или ВЫБОР
	//	|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//	|				И (СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления = 0
	//	|					ИЛИ -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ДЕНЬ) - СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления < 0)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ = &ПрошелСрокДоУведомления)";
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	//	Запрос.Текст= ТекстЗапроса;
	//	
	//	Запрос.УстановитьПараметр("СрокМенееМесяца",Ложь);
	//	Запрос.УстановитьПараметр("СрокМенее3Месяцев",Истина);
	//	Запрос.УстановитьПараметр("ПрошелСрокДоУведомления",Истина);
	//	
	//ИначеЕсли ВариантФормирования=2 тогда
	//	УсловиеОтбора = УсловиеОтбора + 
	//	" И ВЫБОР
	//	|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//	|				И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, 1)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ = &СрокМенееМесяца
	//	|	И ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) > &ТекущаяДата
	//	|И ВЫБОР
	//	|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//	|				И (СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления = 0
	//	|					ИЛИ -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ДЕНЬ) - СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления < 0)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ = &ПрошелСрокДоУведомления";
	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	//	Запрос.Текст= ТекстЗапроса;
	//	
	//	Запрос.УстановитьПараметр("СрокМенееМесяца",Истина);
	//	Запрос.УстановитьПараметр("ПрошелСрокДоУведомления",Истина);
	//	
	//ИначеЕсли ВариантФормирования=3 тогда
	//	УсловиеОтбора = УсловиеОтбора + 
	//	" и ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) <= &ТекущаяДата
	//	|И ВЫБОР
	//	|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//	|				И (СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления = 0
	//	|					ИЛИ -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, ДЕНЬ) - СвидетельстваСудов.ВидДокумента.КоличествоДнейДоУведомления < 0)
	//	|			ТОГДА ИСТИНА
	//	|		ИНАЧЕ ЛОЖЬ
	//	|	КОНЕЦ = &ПрошелСрокДоУведомления";

	//	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	//	Запрос.Текст= ТекстЗапроса;
	//	
	//	Запрос.УстановитьПараметр("ПрошелСрокДоУведомления",Истина);

	//КонецЕсли;
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();

КонецФункции 

Функция ПриближениеСрокаСудовыхДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Справочники.рарусСвидетельстваСудов);
	    	
КонецФункции


#КонецОбласти

#Область НеустраненныеЗамечанияСУБ

Процедура ДобавитьНеустраненныеЗамечанияСУБ(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаНеустраненныеЗамечанияСУБ(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНеустраненныеЗамечанияСУБ(),
		"БлокиИнформационнойПанели.НеустраненныеЗамечанияСУБ",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомНеустраненныеЗамечанияСУБ",
		СвойстваНеустраненныеЗамечанияСУБ(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетНеустраненныеЗамечанияСУБ());

КонецПроцедуры

Функция СвойстваНеустраненныеЗамечанияСУБ()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "НеустраненныеЗамечанияСУБ_Заголовок, "
	+ "НеустраненныеЗамечанияСУБ_ПредупрежденияПриЗагрузке, "
	+ "НеустраненныеЗамечанияСУБ_ДатаОбновления, "
	+ "НеустраненныеЗамечанияСУБ_Строка1_1, "
	+ "НеустраненныеЗамечанияСУБ_Строка1_2, "
	+ "НеустраненныеЗамечанияСУБ_ТекстВиджета";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьНеустраненныеЗамечанияСУБ(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры
Функция НеустраненныеЗамечанияСУБ_Количество(БлижайшийПериод, Просроченные=Ложь)
	//БлижайшийПериод=ТекущаяДата();
	Данные=Новый ТаблицаЗначений;

	ОтчетЗамечания=Отчеты.рарусОтчетПоЗамечаниям.Создать();
	КомпоновщикНастроек= ОтчетЗамечания.КомпоновщикНастроек;
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,
	"Закрыто",
	Ложь,
	ВидСравненияКомпоновкиДанных.Равно,
	"Неустраненные",
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);
	
	
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетЗамечания.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//// Создадим и инициализируем процессор компоновки
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//Данные=Новый ТаблицаЗначений;
	//ПроцессорВывода.УстановитьОбъект(Данные);
	//
	//// Обозначим начало вывода
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	УстановитьОбязательныеНастройкиЗамечаний(ОтчетЗамечания);
	
	// Подготовим и выведем отчет.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	
	//НастройкиКомпоновкиДанных = ОтчетЗамечания.КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетЗамечания.СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	КлючВарианта = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", "СводныйВариант");
	
	//ТаблицаДанных = ОтчетЗамечания.СформироватьДанныеПоЗамечаниям(КлючВарианта);
	ТаблицаДанных = ОтчетЗамечания.СформироватьДанныеПоЗамечаниям("СводныйВариант");
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаДанных", ТаблицаДанных);
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);

	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Данные);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	
	Возврат Данные.Количество();
	
	//Возврат 0;
КонецФункции

Процедура УстановитьОбязательныеНастройкиЗамечаний(ОтчетЗамечания)
	
	КомпоновщикНастроек=ОтчетЗамечания.КомпоновщикНастроек;
	ПараметрПериод = ПолучитьПараметр(КомпоновщикНастроек, "ДатаОтчета");
	
	
	ДатаОтчета =  ПараметрПериод.Значение.Дата;
		
	ПараметрПериодНовый = ПолучитьПараметр(КомпоновщикНастроек, "Период");
	
	ИспользованиеПериода = Ложь;
	Если ПараметрПериодНовый.Использование Тогда
		ИспользованиеПериода = Истина;
	КонецЕсли;
	
	НачалоПериода = ?(ПараметрПериодНовый.Использование, ПараметрПериодНовый.Значение.ДатаНачала, НачалоГода(ТекущаяДатаСеанса()));
	КонецПериода = ?(ПараметрПериодНовый.Использование, ПараметрПериодНовый.Значение.ДатаОкончания, ТекущаяДатаСеанса());
		
	ПараметрДатаОтчета = ПолучитьПараметр(КомпоновщикНастроек, "ГруппаСудов");
		
	ИспользованиеГруппыСудов = Ложь;
	Если ПараметрДатаОтчета.Использование Тогда
		ИспользованиеГруппыСудов = Истина;
		ГруппаСудов  = ПараметрДатаОтчета.Значение;
	КонецЕсли;
	
	ПараметрДатаОтчета = ПолучитьПараметр(КомпоновщикНастроек, "ОтветственноеПодразделение");
	
	ИспользоватьОтборПоПодразделениям = Ложь;
	Если ПараметрДатаОтчета.Использование Тогда
		ИспользоватьОтборПоПодразделениям = Истина;
		ОтветственноеПодразделение = ПараметрДатаОтчета.Значение;
	КонецЕсли;
	//СтруктураПараметров=Новый Структура;
	//СтруктураПараметров.Вставить("НачалоПериода", НачалоПериода);
	//СтруктураПараметров.Вставить("КонецПериода", КонецПериода);
	//СтруктураПараметров.Вставить("ДатаОтчета", ДатаОтчета);
	////СтруктураПараметров.Вставить("ИспользованиеПериода", ИспользованиеПериода);
	////СтруктураПараметров.Вставить("ИспользованиеГруппыСудов", ИспользованиеГруппыСудов);
	//СтруктураПараметров.Вставить("ГруппаСудов", ГруппаСудов);
	////СтруктураПараметров.Вставить("ИспользоватьОтборПоПодразделениям", ИспользоватьОтборПоПодразделениям);
	//СтруктураПараметров.Вставить("ОтветственноеПодразделение", ОтветственноеПодразделение);



	//
	//УстановитьПараметрыОтчета(ОтчетЗамечания,СтруктураПараметров);
	ОтчетЗамечания.ДатаОтчета=ДатаОтчета;
	ОтчетЗамечания.НачалоПериода=НачалоПериода;
	ОтчетЗамечания.КонецПериода=КонецПериода;
	ОтчетЗамечания.ИспользованиеПериода=ИспользованиеПериода;
	ОтчетЗамечания.ИспользованиеГруппыСудов=ИспользованиеГруппыСудов;
	ОтчетЗамечания.ГруппаСудов=ГруппаСудов;
	ОтчетЗамечания.ИспользоватьОтборПоПодразделениям=ИспользоватьОтборПоПодразделениям;
	ОтчетЗамечания.ОтветственноеПодразделение=ОтветственноеПодразделение;


КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура НеустраненныеЗамечанияСУБ(Параметры, АдресРезультата = Неопределено) Экспорт
	БлижайшийПериод=ТекущаяДата();
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетНеустраненныеЗамечанияСУБ();
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		//ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНеустраненныеЗамечанияСУБ();
		//Результат.Вставить("НеустраненныеЗамечанияСУБ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, Виджет, Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНеустраненныеЗамечанияСУБ();
			Результат.Вставить("НеустраненныеЗамечанияСУБ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		КонецЕсли;

		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	 
	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваНеустраненныеЗамечанияСУБ());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаНеустраненныеЗамечанияСУБ();
	Результат.Вставить("НеустраненныеЗамечанияСУБ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	//ЧастиСтрок=Новый Массив;
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Не устраненных замечаний СУБ - ", Шрифт, ЦветТекста));
	Если не НеустраненныеЗамечанияСУБДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("НеустраненныеЗамечанияСУБ_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе
		
		
		НеустраненныеЗамечанияСУБ_Количество=НеустраненныеЗамечанияСУБ_Количество(БлижайшийПериод, Ложь);
		
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(НеустраненныеЗамечанияСУБ_Количество), Шрифт, , ,"НеустраненныеЗамечанияСУБ"));
	
	Результат.Вставить("НеустраненныеЗамечанияСУБ_Строка1_1",Новый ФорматированнаяСтрока("Неустраненных замечаний СУБ", Шрифт, ЦветТекста));
	
	Результат.Вставить("НеустраненныеЗамечанияСУБ_Строка1_2",Новый ФорматированнаяСтрока( Формат(НеустраненныеЗамечанияСУБ_Количество, ФорматнаяСтрока),Шрифт , , ,"НеустраненныеЗамечанияСУБ"));
	
	//Результат.Вставить("НеустраненныеЗамечанияСУБ_ТекстВиджета", Новый ФорматированнаяСтрока(ЧастиСтрок));
	
	Результат.Вставить("НеустраненныеЗамечанияСУБ_ДатаОбновления", ДатаОбновленияВиджета());
	
	//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
	//Результат.Вставить("НеустраненныеЗамечанияСУБ_ПредупрежденияПриЗагрузке", "");
	КонецЕсли;
	
	//ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	Результат.Вставить("НеустраненныеЗамечанияСУБ_ДатаОбновления", ДатаОбновленияВиджета());
	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетНеустраненныеЗамечанияСУБ(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры


Функция НеустраненныеЗамечанияСУБДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Отчеты.рарусОтчетПоЗамечаниям);
	    	
КонецФункции


#КонецОбласти

#Область ПлановыеВнеплановыеРемонты

Процедура ДобавитьПлановыеВнеплановыеРемонты(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПлановыеВнеплановыеРемонты(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПлановыеВнеплановыеРемонты(),
		"БлокиИнформационнойПанели.ПлановыеВнеплановыеРемонты",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПлановыеВнеплановыеРемонты",
		СвойстваПлановыеВнеплановыеРемонтыа(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПлановыеВнеплановыеРемонты());

	
КонецПроцедуры

Функция СвойстваПлановыеВнеплановыеРемонтыа()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ПлановыеВнеплановыеРемонты_Заголовок, "
	+ "ПлановыеВнеплановыеРемонты_ПредупрежденияПриЗагрузке, "
	+ "ПлановыеВнеплановыеРемонты_Период, "
	+ "ПлановыеВнеплановыеРемонты_ДатаОбновления, "
	+ "ПлановыеВнеплановыеРемонты_ТекстВиджета";
	//+ "ПлановыеВнеплановыеРемонты_ТекстВиджета1,"
	//+ "ПлановыеВнеплановыеРемонты_ТекстВиджета2,"
	//+ "ПлановыеВнеплановыеРемонты_ТекстВиджета3";
	Для ИндексСтроки = 1 По 2 Цикл
		Для ИндексКолонки = 1 По 4 Цикл
			Свойства = Свойства + ", "
			+ "ПлановыеВнеплановыеРемонты_Строка"+ИндексСтроки + "_"+ ИндексКолонки;
		КонецЦикла;
	КонецЦикла;
	
	Для ИндексКолонки = 1 По 2 Цикл
		Свойства = Свойства + ", "
		+ "ПлановыеВнеплановыеРемонты_Строка3" + "_"+ ИндексКолонки;
	КонецЦикла;
	
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПлановыеВнеплановыеРемонты(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ПлановыеВнеплановыеРемонты(Параметры, АдресРезультата = Неопределено) Экспорт
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПлановыеВнеплановыеРемонты();

	Если Параметры.Инициализация Тогда
		Результат = Новый Структура; 
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, Виджет, Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПлановыеВнеплановыеРемонты();
			Результат.Вставить("ПлановыеВнеплановыеРемонты_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//СтруктураБлижайших=ВыборкаБлижайшихПериодовВиджета(Виджет, Параметры.Период);
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(Виджет, Параметры.Период);
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	

	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Результат = Новый Структура(СвойстваПлановыеВнеплановыеРемонтыа());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПлановыеВнеплановыеРемонты();
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	Если не ПлановыеВнеплановыеРемонтыДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ПлановыеВнеплановыеРемонты_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе

	Результат.Вставить("ПлановыеВнеплановыеРемонты_ТекстВиджета", ПредставлениеПлановыеВнеплановыеРемонты(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка1_1",Новый ФорматированнаяСтрока("Плановых", Шрифт, ЦветТекста));
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка1_3",Новый ФорматированнаяСтрока("в т.ч. критичных", Шрифт, ЦветТекста));
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.2", СтруктураБлижайшихПериодовВиджета);
	КонецЕсли;	 
	КоличествоПлановыхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя, Истина, Истина, Ложь, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка1_2",Новый ФорматированнаяСтрока( Формат(КоличествоПлановыхРемонтов, ФорматнаяСтрока),Шрифт , , ,"СписокПлановыхРемонтов"));
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.3", СтруктураБлижайшихПериодовВиджета);
	КонецЕсли;
	КоличествоПлановыхКритичныхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Истина, Истина, Истина, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка1_4",Новый ФорматированнаяСтрока(Формат(КоличествоПлановыхКритичныхРемонтов, ФорматнаяСтрока), Шрифт, , ,"СписокПлановыхКритичныхРемонтов"));
	
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка2_1",Новый ФорматированнаяСтрока("Внеплановых", Шрифт, ЦветТекста));
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка2_3",Новый ФорматированнаяСтрока("в т.ч. критичных", Шрифт, ЦветТекста));
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.4", СтруктураБлижайшихПериодовВиджета);
	КонецЕсли;	 
	КоличествоВнеплановыхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Истина, Ложь, Ложь, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка2_2",Новый ФорматированнаяСтрока( Формат(КоличествоВнеплановыхРемонтов, ФорматнаяСтрока),Шрифт , , ,"СписокВнеплановыхРемонтов"));
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.5", СтруктураБлижайшихПериодовВиджета);
	КонецЕсли;	 
	КоличествоВнеплановыхКритичныхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Истина, Ложь, Истина, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка2_4",Новый ФорматированнаяСтрока(Формат(КоличествоВнеплановыхКритичныхРемонтов, ФорматнаяСтрока), Шрифт, , ,"СписокВнеплановыхКритичныхРемонтов"));
	
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка3_1",Новый ФорматированнаяСтрока("Перенесено ремонтов", Шрифт, ЦветТекста));
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.6", СтруктураБлижайшихПериодовВиджета);
	КонецЕсли;	 
	КоличествоПеренесенныхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	Результат.Вставить("ПлановыеВнеплановыеРемонты_Строка3_2",Новый ФорматированнаяСтрока(Формат(КоличествоПеренесенныхРемонтов, ФорматнаяСтрока), Шрифт , , ,"СписокПеренесенныхРемонтов"));
	
	//Результат.Вставить("ПлановыеВнеплановыеРемонты_ТекстВиджета1", ПредставлениеПлановыеВнеплановыеРемонты1(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	//Результат.Вставить("ПлановыеВнеплановыеРемонты_ТекстВиджета2", ПредставлениеПлановыеВнеплановыеРемонты2(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	//Результат.Вставить("ПлановыеВнеплановыеРемонты_ТекстВиджета3", ПредставлениеПлановыеВнеплановыеРемонты3(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	
	КонецЕсли;	
	Результат.Вставить("ПлановыеВнеплановыеРемонты_ДатаОбновления", ДатаОбновленияВиджета());
	//Результат.Вставить("ПлановыеВнеплановыеРемонты_ПредупрежденияПриЗагрузке", "");
	
	//Структура("РазныеПериодыПоПоказателям, ПериодВиджета, ЭлементПериод, ТаблицаПоПоказателям")
	
	Если СтруктураБлижайшихПериодовВиджета=Неопределено тогда
		Результат.Вставить("ПлановыеВнеплановыеРемонты_Период", Новый ФорматированнаяСтрока("не указаны периоды"));
	ИначеЕсли не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
		Результат.Вставить("ПлановыеВнеплановыеРемонты_Период", Новый ФорматированнаяСтрока(СтрШаблон("(%1-%2)", 
		Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала, "ДФ=dd.MM.yy"),
		Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания, "ДФ=dd.MM.yy"))));
	Иначе
		СтрокаПериода=Новый ФорматированнаяСтрока("разные периоды",,,,ПолучитьНавигационнуюСсылку(СтруктураБлижайшихПериодовВиджета.ЭлементПериод));
		Результат.Вставить("ПлановыеВнеплановыеРемонты_Период",СтрокаПериода);
		
	КонецЕсли;

	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПлановыеВнеплановыеРемонты(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);

	
КонецПроцедуры

Функция ПредставлениеПлановыеВнеплановыеРемонты(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Ожидается ", Шрифт, ЦветТекста));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("выполнение ремонтов: ",Шрифт , , ,"СписокРемонтовБезФильтров"));
		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеПлановыеВнеплановыеРемонты1(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	
	ЧастиСтрок=Новый Массив;
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.2", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	 
	//КоличествоПлановыхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя, Истина, Истина, Ложь, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	//СклонениеПлановых=Просклонять("плановые", КоличествоПлановыхРемонтов, "Винительный");
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока( СклонениеПлановых,Шрифт , , ,"СписокПлановыхРемонтов"));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Плановых ", Шрифт, ЦветТекста));

	КоличествоПлановыхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя, Истина, Истина, Ложь, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	//СклонениеПлановых=Просклонять("плановые", КоличествоПлановыхРемонтов, "Винительный");
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока( Формат(КоличествоПлановыхРемонтов, ФорматнаяСтрока),Шрифт , , ,"СписокПлановыхРемонтов"));

	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(", в т.ч. критичных  ", Шрифт, ЦветТекста));
	//КоличествоПлановыхКритичныхРемонтов=ПлановыеВнеплановыеРемонты_КоличествоПлановыхКритичныхРемонтовПоПоказателюВиджета(Виджет , "С01.3", Период);
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.3", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	 
	КоличествоПлановыхКритичныхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Истина, Истина, Истина, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(КоличествоПлановыхКритичныхРемонтов, ФорматнаяСтрока),Шрифт , , ,"СписокПлановыхКритичныхРемонтов"));
		
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеПлановыеВнеплановыеРемонты2(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	
	ЧастиСтрок=Новый Массив;
	
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.4", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	 
	КоличествоВнеплановыхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Истина, Ложь, Ложь, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	
	//СклонениеВнеплановых=Просклонять("внеплановые", КоличествоВнеплановыхРемонтов, "Винительный");
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(СклонениеВнеплановых, Шрифт, , ,"СписокВнеплановыхРемонтов"));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Внеплановых ", Шрифт, ЦветТекста));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока( Формат(КоличествоВнеплановыхРемонтов, ФорматнаяСтрока),Шрифт , , ,"СписокПлановыхРемонтов"));
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(","+" в т.ч. критичных ", Шрифт, ЦветТекста));
	//КоличествоВнеплановыхКритичныхРемонтов=ПлановыеВнеплановыеРемонты_КоличествоВнеплановыхКритичныхРемонтовПоПоказателюВиджета(Виджет , "С01.5", Период);
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.5", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	 
	КоличествоВнеплановыхКритичныхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Истина, Ложь, Истина, Истина, Ложь, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(КоличествоВнеплановыхКритичныхРемонтов, ФорматнаяСтрока), Шрифт, , ,"СписокВнеплановыхКритичныхРемонтов"));
		
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеПлановыеВнеплановыеРемонты3(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Перенесено ремонтов ", Шрифт, ЦветТекста));
	//КоличествоПеренесенныхРемонтов=ПлановыеВнеплановыеРемонты_КоличествоПеренесенныхРемонтовПоПоказателюВиджета(Виджет , "С01.6", Период);
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С01.6", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	 
	КоличествоПеренесенныхРемонтов=ПлановыеВнеплановыеРемонты_Количество(ПериодПоказателя,Ложь, Ложь, Ложь, Истина, Истина, Истина, Ложь, ТекущаяДата(), СписокОбъектовРемонта);
	
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(КоличествоПеренесенныхРемонтов, ФорматнаяСтрока), Шрифт , , ,"СписокПеренесенныхРемонтов"));
	
	//
	//Шрифт      = Новый Шрифт(ШрифтыСтиля.ШрифтТекстаИнформационнойПанели,,, Истина);
	//ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	//
	
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции


Функция СообщениеОПредупрежденияхПриПолученииДанныхПлановыеВнеплановыеРемонты()
	
	СообщениеОПредупрежденияхПриПолученииДанныхПлановыеВнеплановыеРемонты = НСтр("ru = 'Не удалось прочитать данные по списку ремонтов'");
	Возврат Новый ФорматированнаяСтрока(СообщениеОПредупрежденияхПриПолученииДанныхПлановыеВнеплановыеРемонты, , ЦветаСтиля.ВажноеСобытие, , "СписокРемонтовБезФильтров");
	
КонецФункции


Функция ПлановыеВнеплановыеРемонты_ТекстЗапросаСписка() 
	ТекстЗапроса = 
			"ВЫБРАТЬ
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка КАК Документ,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID КАК ID,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ВидРемонта КАК ВидРемонта,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ДатаНачала КАК ДатаНачала,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ДатаОкончания КАК ДатаОкончания,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.НоваяДатаНачала КАК НоваяДатаНачала,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.НоваяДатаОкончания КАК НоваяДатаОкончания,
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка.Подразделение КАК Судно
		|ПОМЕСТИТЬ втПеренесенныеРемонты
		|ИЗ
		|	Документ.впЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты КАК впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.впОтмененныеПеренесенныеРемонты КАК впОтмененныеПеренесенныеРемонты
		|		ПО впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка = впОтмененныеПеренесенныеРемонты.Регистратор
		|			И впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID = впОтмененныеПеренесенныеРемонты.ID
		|ГДЕ
		|	впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ДатаНачала МЕЖДУ &НачПериода И &КонПериода
		|	И впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка.Согласовано
		|	И впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Перенесен
		|	И впЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ОбъектРемонта В ИЕРАРХИИ(&ОбъектыРемонта)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	впПланГрафикППР.УникальныйИдентификатор КАК ID,
		|	впПланГрафикППР.ДатаНачалаПлан КАК ДатаНачала,
		|	впПланГрафикППР.ДатаОкончанияПлан КАК ДатаОкончания,
		|	впПланГрафикППР.ОбъектРемонта КАК ОбъектРемонта,
		|	впПланГрафикППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	впПланГрафикППР.ПланГрафик КАК ДокументИсточник,
		|	ЛОЖЬ КАК ЗакрываетПредписание,
		|	впПланГрафикППР.ОбъектРемонта.Приоритет В (&КритическоеОборудование) КАК Критичность,
		|	ИСТИНА КАК ПлановыйРемонт,
		|	впПланГрафикППР.ПланГрафик.Подразделение КАК Судно,
		|	ВЫБОР
		|		КОГДА втПеренесенныеРемонты.ID ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Перенесен,
		|	втПеренесенныеРемонты.НоваяДатаНачала КАК НоваяДатаНачала,
		|	втПеренесенныеРемонты.НоваяДатаОкончания КАК НоваяДатаОкончания
		|ПОМЕСТИТЬ втВсеРемонты
		|ИЗ
		|	РегистрСведений.впПланГрафикППР КАК впПланГрафикППР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
		|		ПО впПланГрафикППР.УникальныйИдентификатор = впАктыПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПеренесенныеРемонты КАК втПеренесенныеРемонты
		|		ПО впПланГрафикППР.УникальныйИдентификатор = втПеренесенныеРемонты.ID
		|ГДЕ
		|	НЕ впПланГрафикППР.Удален
		|	И НЕ впПланГрафикППР.Завершен
		|	И НЕ впПланГрафикППР.ЕстьЗаявка
		|	И впПланГрафикППР.ДатаНачалаПлан МЕЖДУ &НачПериода И &КонПериода
		|	И впПланГрафикППР.ОбъектРемонта В ИЕРАРХИИ(&ОбъектыРемонта)
		|	И (впПланГрафикППР.УникальныйИдентификатор В (&ID)
		|			ИЛИ &НеИспользоватьID)
		|	И впАктыПоРемонтам.IDРемонта ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	впВыявленныеДефектыСписокДефектов.ID,
		|	впВыявленныеДефектыСписокДефектов.ДатаНачалаРемонта,
		|	впВыявленныеДефектыСписокДефектов.ДатаОкончанияРемонта,
		|	впВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент,
		|	впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение,
		|	впВыявленныеДефектыСписокДефектов.Ссылка,
		|	впВыявленныеДефектыСписокДефектов.ЗакрываетПредписание,
		|	впВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент.Приоритет В (&КритическоеОборудование),
		|	ЛОЖЬ,
		|	впВыявленныеДефектыСписокДефектов.Ссылка.Подразделение,
		|	ВЫБОР
		|		КОГДА втПеренесенныеРемонты.ID ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	втПеренесенныеРемонты.НоваяДатаНачала,
		|	втПеренесенныеРемонты.НоваяДатаОкончания
		|ИЗ
		|	Документ.впВыявленныеДефекты.СписокДефектов КАК впВыявленныеДефектыСписокДефектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.впВидРемонтаПриВводеНаОснованииВыявленныхДефектов КАК впВидРемонтаПриВводеНаОснованииВыявленныхДефектов
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впЗаявкиПоРемонтам КАК впЗаявкиПоРемонтам
		|		ПО впВыявленныеДефектыСписокДефектов.ID = впЗаявкиПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
		|		ПО впВыявленныеДефектыСписокДефектов.ID = впАктыПоРемонтам.IDРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПеренесенныеРемонты КАК втПеренесенныеРемонты
		|		ПО впВыявленныеДефектыСписокДефектов.ID = втПеренесенныеРемонты.ID
		|ГДЕ
		|	впЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
		|	И впВыявленныеДефектыСписокДефектов.ДатаНачалаРемонта МЕЖДУ &НачПериода И &КонПериода
		|	И впВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент В ИЕРАРХИИ(&ОбъектыРемонта)
		|	И впВыявленныеДефектыСписокДефектов.Ссылка.Проведен
		|	И (впВыявленныеДефектыСписокДефектов.ID В (&ID)
		|			ИЛИ &НеИспользоватьID)
		|	И впАктыПоРемонтам.IDРемонта ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.ID,
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта,
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта,
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта,
		|	впВидРемонтаПриВводеНаОснованииВнешнихОснований.Значение,
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка,
		|	ИСТИНА,
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта.Приоритет В (&КритическоеОборудование),
		|	ЛОЖЬ,
		|	впВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка.Подразделение,
		|	ВЫБОР
		|		КОГДА втПеренесенныеРемонты.ID ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	втПеренесенныеРемонты.НоваяДатаНачала,
		|	втПеренесенныеРемонты.НоваяДатаОкончания
		|ИЗ
		|	Документ.впВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК впВнешнееОснованиеДляРаботОбследованноеОборудование
		|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.впВидРемонтаПриВводеНаОснованииВнешнихОснований КАК впВидРемонтаПриВводеНаОснованииВнешнихОснований
		|		ПО (ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впЗаявкиПоРемонтам КАК впЗаявкиПоРемонтам
		|		ПО впВнешнееОснованиеДляРаботОбследованноеОборудование.ID = впЗаявкиПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
		|		ПО впВнешнееОснованиеДляРаботОбследованноеОборудование.ID = впАктыПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впВыявленныеДефекты.СписокДефектов КАК впВыявленныеДефектыСписокДефектов
		|		ПО впВнешнееОснованиеДляРаботОбследованноеОборудование.ID = впВыявленныеДефектыСписокДефектов.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПеренесенныеРемонты КАК втПеренесенныеРемонты
		|		ПО впВнешнееОснованиеДляРаботОбследованноеОборудование.ID = втПеренесенныеРемонты.ID
		|ГДЕ
		|	впЗаявкиПоРемонтам.IDРемонта ЕСТЬ NULL
		|	И впВнешнееОснованиеДляРаботОбследованноеОборудование.ОбъектРемонта В ИЕРАРХИИ(&ОбъектыРемонта)
		|	И впВнешнееОснованиеДляРаботОбследованноеОборудование.ПлановаяДатаРемонта МЕЖДУ &НачПериода И &КонПериода
		|	И впВнешнееОснованиеДляРаботОбследованноеОборудование.Ссылка.Проведен
		|	И (впВнешнееОснованиеДляРаботОбследованноеОборудование.ID В (&ID)
		|			ИЛИ &НеИспользоватьID)
		|	И впАктыПоРемонтам.IDРемонта ЕСТЬ NULL
		|	И впВыявленныеДефектыСписокДефектов.ID ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID,
		|	РемонтыОборудования.ДатаНачала,
		|	РемонтыОборудования.ДатаОкончания,
		|	РемонтыОборудования.ОбъектРемонта,
		|	РемонтыОборудования.ВидРемонтныхРабот,
		|	РемонтыОборудования.Ссылка,
		|	ИСТИНА,
		|	РемонтыОборудования.ОбъектРемонта.Приоритет В (&КритическоеОборудование),
		|	ЛОЖЬ,
		|	РемонтыОборудования.Ссылка.Подразделение,
		|	ВЫБОР
		|		КОГДА втПеренесенныеРемонты.ID ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	втПеренесенныеРемонты.НоваяДатаНачала,
		|	втПеренесенныеРемонты.НоваяДатаОкончания
		|ИЗ
		|	Документ.впЗаявкаНаРемонт.РемонтыОборудования КАК РемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впАктыПоРемонтам КАК впАктыПоРемонтам
		|		ПО РемонтыОборудования.ID = впАктыПоРемонтам.IDРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПеренесенныеРемонты КАК втПеренесенныеРемонты
		|		ПО РемонтыОборудования.ID = втПеренесенныеРемонты.ID
		|ГДЕ
		|	РемонтыОборудования.ОбъектРемонта В ИЕРАРХИИ(&ОбъектыРемонта)
		|	И РемонтыОборудования.ДатаНачала МЕЖДУ &НачПериода И &КонПериода
		|	И РемонтыОборудования.Ссылка.Проведен
		|	И (РемонтыОборудования.ID В (&ID)
		|			ИЛИ &НеИспользоватьID)
		|	И впАктыПоРемонтам.IDРемонта ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВсеРемонты.ID КАК ID,
		|	втВсеРемонты.ДатаНачала КАК ДатаНачала,
		|	втВсеРемонты.ДатаОкончания КАК ДатаОкончания,
		|	втВсеРемонты.ОбъектРемонта КАК ОбъектРемонта,
		|	втВсеРемонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	втВсеРемонты.ДокументИсточник КАК ДокументИсточник,
		|	втВсеРемонты.ЗакрываетПредписание КАК ЗакрываетПредписание,
		|	втВсеРемонты.Критичность КАК Критичность,
		|	втВсеРемонты.ПлановыйРемонт КАК ПлановыйРемонт,
		|	втВсеРемонты.Судно КАК Судно,
		|	втВсеРемонты.Перенесен КАК Перенесен,
		|	втВсеРемонты.НоваяДатаНачала КАК НоваяДатаНачала,
		|	втВсеРемонты.НоваяДатаОкончания КАК НоваяДатаОкончания
		|ИЗ
		|	втВсеРемонты КАК втВсеРемонты
		|ГДЕ
		|	(НЕ &ОтбиратьПоПлановым
		|			ИЛИ втВсеРемонты.ПлановыйРемонт = &Плановый
		|				И &ОтбиратьПоПлановым)
		|	И (НЕ &ОтбиратьКритическим
		|			ИЛИ втВсеРемонты.Критичность = &Критический
		|				И &ОтбиратьКритическим)
		|	И (НЕ &ОтбиратьПеренесенные
		|			ИЛИ втВсеРемонты.Перенесен = &Перенесен
		|				И &ОтбиратьПеренесенные)
		|	И (НЕ &ОтбиратьПросроченные
		|			ИЛИ втВсеРемонты.ДатаНачала <= &ДатаСравненияПросроченных
		|				И &ОтбиратьПросроченные)";



	
	Возврат ТекстЗапроса;

КонецФункции
Функция ПлановыеВнеплановыеРемонты_ОРПоСудну(Судно)
	ОР = ПредопределенноеЗначение("Справочник.впОбъектыРемонта.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	впОбъектыРемонта.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.впОбъектыРемонта КАК впОбъектыРемонта
	|ГДЕ
	|	впОбъектыРемонта.ПодразделениеИсполнитель = &Судно
	|	И впОбъектыРемонта.Родитель = ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("Судно", Судно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() тогда
		ОР=ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	Возврат ОР;	
	
КонецФункции

Функция ПлановыеВнеплановыеРемонты_Количество(БлижайшийПериодРемонтов, ОтбиратьПоПлановым, Плановый, ОтбиратьКритическим, Критический, ОтбиратьПеренесенные, Перенесен, ОтбиратьПросроченные, ДатаСравненияПросроченных, СписокОбъектовРемонта)
		
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПлановыеВнеплановыеРемонты_ТекстЗапросаСписка();
	
	Запрос.УстановитьПараметр("ID", Неопределено);
	Запрос.УстановитьПараметр("НачПериода", БлижайшийПериодРемонтов.ДатаНачала);
	Запрос.УстановитьПараметр("КонПериода", БлижайшийПериодРемонтов.ДатаОкончания);
	Запрос.УстановитьПараметр("КритическоеОборудование", КритическоеОборудование());
	Запрос.УстановитьПараметр("НеИспользоватьID", Истина);
	//Запрос.УстановитьПараметр("ОтбиратьПоПлановым", Истина);
	//Запрос.УстановитьПараметр("Плановый", Истина);
	//Запрос.УстановитьПараметр("ОтбиратьКритическим", Ложь);
	//Запрос.УстановитьПараметр("Критический", Истина);
	//Запрос.УстановитьПараметр("ОтбиратьПеренесенные", Ложь);
	//Запрос.УстановитьПараметр("Перенесен", Истина);
	//Запрос.УстановитьПараметр("ОтбиратьПросроченные", Ложь);
	//Запрос.УстановитьПараметр("ДатаСравненияПросроченных", ТекущаяДата());
	Запрос.УстановитьПараметр("ОтбиратьПоПлановым", ОтбиратьПоПлановым);
	Запрос.УстановитьПараметр("Плановый", Плановый);
	Запрос.УстановитьПараметр("ОтбиратьКритическим", ОтбиратьКритическим);
	Запрос.УстановитьПараметр("Критический", Критический);
	Запрос.УстановитьПараметр("ОтбиратьПеренесенные", ОтбиратьПеренесенные);
	Запрос.УстановитьПараметр("Перенесен", Перенесен);
	Запрос.УстановитьПараметр("ОтбиратьПросроченные", ОтбиратьПросроченные);
	Запрос.УстановитьПараметр("ДатаСравненияПросроченных", ДатаСравненияПросроченных);



//	СписокОбъектовРемонта= Новый СписокЗначений;
//	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));


	Запрос.УстановитьПараметр("ОбъектыРемонта", СписокОбъектовРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();

КонецФункции 



Функция ПлановыеВнеплановыеРемонтыДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.рарусСписокРемонтов) ;
			
	
КонецФункции


#КонецОбласти
#Область ПросроченныеРемонты

Процедура ДобавитьПросроченныеРемонты(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПросроченныеРемонты(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПросроченныеРемонты(),
		"БлокиИнформационнойПанели.ПросроченныеРемонты",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомПросроченныеРемонты",
		СвойстваПросроченныеРемонты(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПросроченныеРемонты());

	
КонецПроцедуры

Функция СвойстваПросроченныеРемонты()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ПросроченныеРемонты_Заголовок, "
	+ "ПросроченныеРемонты_ПредупрежденияПриЗагрузке, "
//	+ "ПросроченныеРемонты_Период, "
	+ "ПросроченныеРемонты_ДатаОбновления, "
	+ "ПросроченныеРемонты_Строка1_1, "
	+ "ПросроченныеРемонты_Строка1_2, "
	+ "ПросроченныеРемонты_Строка2_1, "
	+ "ПросроченныеРемонты_Строка2_2, "
	+ "ПросроченныеРемонты_ТекстВиджета, "
	+ "ПросроченныеРемонты_ТекстВиджета1";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьПросроченныеРемонты(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ПросроченныеРемонты(Параметры, АдресРезультата = Неопределено) Экспорт
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";

	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПросроченныеРемонты();
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура; 
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, Виджет, Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПросроченныеРемонты();
			Результат.Вставить("ПросроченныеРемонты_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваПросроченныеРемонты());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПросроченныеРемонты();
	Результат.Вставить("ПросроченныеРемонты_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	Если не ПросроченныеРемонтыДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ПросроченныеРемонты_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе

	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(Виджет, Параметры.Период);
	
	//Результат.Вставить("ПросроченныеРемонты_ТекстВиджета", ПредставлениеПросроченныеРемонты(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	//Результат.Вставить("ПросроченныеРемонты_ТекстВиджета1", ПредставлениеПросроченныеРемонты1(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
	
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 

	
	Результат.Вставить("ПросроченныеРемонты_Строка1_1",Новый ФорматированнаяСтрока("Просроченные ремонты", Шрифт, ЦветТекста));
	
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С02.1", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	
	
	
	Результат.Вставить("ПросроченныеРемонты_Строка1_2",Новый ФорматированнаяСтрока(Строка(ПросроченныеРемонты_Количество(ПериодПоказателя)), Шрифт, , ,"СписокПросроченных"));
	
	Результат.Вставить("ПросроченныеРемонты_Строка2_1",Новый ФорматированнаяСтрока("в т. ч. критичные", Шрифт, ЦветТекста));
	
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С02.2", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	
	
	
	Результат.Вставить("ПросроченныеРемонты_Строка2_2",Новый ФорматированнаяСтрока(Строка(ПросроченныеРемонты_КоличествоКритичныхРемонтов(ПериодПоказателя)), Шрифт, , ,"СписокПросроченныхКритичныхРемонтов"));
	
	КонецЕсли;	 

	Результат.Вставить("ПросроченныеРемонты_ДатаОбновления", ДатаОбновленияВиджета());
	
	
	//Результат.Вставить("ПросроченныеРемонты_ПредупрежденияПриЗагрузке", "");
	
	//Если СтруктураБлижайшихПериодовВиджета=Неопределено тогда
	//	Результат.Вставить("ПросроченныеРемонты_Период", Новый ФорматированнаяСтрока("не указаны периоды"));
	//ИначеЕсли не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
	//	Результат.Вставить("ПросроченныеРемонты_Период", Новый ФорматированнаяСтрока(СтрШаблон("(%1-%2)", 
	//	Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала, "ДФ=dd.MM.yy"),
	//	Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания, "ДФ=dd.MM.yy"))));
	//Иначе
	//	СтрокаПериода=Новый ФорматированнаяСтрока("разные периоды",,,,ПолучитьНавигационнуюСсылку(СтруктураБлижайшихПериодовВиджета.ЭлементПериод));
	//	Результат.Вставить("ПросроченныеРемонты_Период",СтрокаПериода);
	//	
	//КонецЕсли;

	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПросроченныеРемонты(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры
Функция ПредставлениеПросроченныеРемонты(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С02.1", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	 
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Просроченные ремонты - ", Шрифт, ЦветТекста));
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ПросроченныеРемонты_Количество()), , , ,"СписокПросроченных"));
	 ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ПросроченныеРемонты_Количество(ПериодПоказателя)), Шрифт, , ,"СписокПросроченных"));
	
	
		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеПросроченныеРемонты1(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧДЦ=; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));
	
	ЧастиСтрок=Новый Массив;
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("в т. ч. критичные -  ", Шрифт, ЦветТекста));

	
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+Символы.ПС+Строка(КоличествоПлановыхРемонтов), , , ,"СписокПлановыхРемонтов"));
	//ЧастиСтрок.Добавить(" плановых, из них по критичному списку ");
	Если РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=ПериодПоПоказателю("С02.2", СтруктураБлижайшихПериодовВиджета)
	КонецЕсли;	
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Строка(ПросроченныеРемонты_КоличествоКритичныхРемонтов(ПериодПоказателя)), Шрифт, , ,"СписокПросроченныхКритичныхРемонтов"));
	
		
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции


Функция ПросроченныеРемонты_Количество(БлижайшийПериодРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = ПлановыеВнеплановыеРемонты_ТекстЗапросаСписка();
	
	Запрос.УстановитьПараметр("ID", Неопределено);
	Запрос.УстановитьПараметр("КонПериода", Дата(3999,1,1));
	Запрос.УстановитьПараметр("КритическоеОборудование", КритическоеОборудование());
	Запрос.УстановитьПараметр("НачПериода", Дата(1,1,1));
	Запрос.УстановитьПараметр("НеИспользоватьID", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПоПлановым", Ложь);
	Запрос.УстановитьПараметр("Плановый", Истина);
	Запрос.УстановитьПараметр("ОтбиратьКритическим", Ложь);
	Запрос.УстановитьПараметр("Критический", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПеренесенные", Ложь);
	Запрос.УстановитьПараметр("Перенесен", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПросроченные", Истина);
	Запрос.УстановитьПараметр("ДатаСравненияПросроченных", ТекущаяДата());

	
	


	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));


	Запрос.УстановитьПараметр("ОбъектыРемонта", СписокОбъектовРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();

КонецФункции 

Функция ПросроченныеРемонты_КоличествоКритичныхРемонтов(БлижайшийПериодРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = ПлановыеВнеплановыеРемонты_ТекстЗапросаСписка();
	
	Запрос.УстановитьПараметр("ID", Неопределено);
	Запрос.УстановитьПараметр("КонПериода", Дата(3999,1,1));
	Запрос.УстановитьПараметр("КритическоеОборудование", КритическоеОборудование());
	Запрос.УстановитьПараметр("НачПериода", Дата(1,1,1));
	Запрос.УстановитьПараметр("НеИспользоватьID", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПоПлановым", Ложь);
	Запрос.УстановитьПараметр("Плановый", Истина);
	Запрос.УстановитьПараметр("ОтбиратьКритическим", Истина);
	Запрос.УстановитьПараметр("Критический", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПеренесенные", Ложь);
	Запрос.УстановитьПараметр("Перенесен", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПросроченные", Истина);
	Запрос.УстановитьПараметр("ДатаСравненияПросроченных", ТекущаяДата());



	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));


	Запрос.УстановитьПараметр("ОбъектыРемонта", СписокОбъектовРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();


	
КонецФункции 

Функция ПросроченныеРемонтыДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.рарусСписокРемонтов) ;
	  	
КонецФункции


#КонецОбласти
#Область ОткрытиеАРМ

Процедура ДобавитьОткрытиеАРМ(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОткрытиеАРМ(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОткрытиеАРМ(),
		"БлокиИнформационнойПанели.ОткрытиеАРМ",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОткрытиеАРМ",
		СвойстваОткрытиеАРМ(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПросроченныеРемонты());

	
КонецПроцедуры

Функция СвойстваОткрытиеАРМ()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ОткрытиеАРМ_Заголовок, "
	+ "ОткрытиеАРМ_ПредупрежденияПриЗагрузке, "
	+ "ОткрытиеАРМ_ДатаОбновления, "
	+ "ОткрытиеАРМ_ТекстВиджета";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОткрытиеАРМ(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОткрытиеАРМ(Параметры, АдресРезультата = Неопределено) Экспорт
		Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;

	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОткрытиеАРМ();
		Результат.Вставить("ОткрытиеАРМ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваОткрытиеАРМ());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОткрытиеАРМ();
	Результат.Вставить("ОткрытиеАРМ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	Если не ОткрытиеАРМДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ОткрытиеАРМ_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе

	//БлижайшийПериодРемонтов=ТекущаяДата();
//ЧастиСтрок=Новый Массив;
//		 ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Открыть АРМ ТОИР"));
			
	Результат.Вставить("ОткрытиеАРМ_ТекстВиджета", Новый ФорматированнаяСтрока("Открыть АРМ ТОИР", Шрифт, , ,"ОткрытьАРМ"));
	

	Результат.Вставить("ОткрытиеАРМ_ДатаОбновления", ДатаОбновленияВиджета());
	
	//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
	//Результат.Вставить("ОткрытиеАРМ_ПредупрежденияПриЗагрузке", "");
	 КонецЕсли;
	//ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	Результат.Вставить("ОткрытиеАРМ_ДатаОбновления", ДатаОбновленияВиджета());
	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОткрытиеАРМ(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры
Функция ОткрытиеАРМ_Количество(БлижайшийПериодРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = ПлановыеВнеплановыеРемонты_ТекстЗапросаСписка();
	
	Запрос.УстановитьПараметр("ID", Неопределено);
	Запрос.УстановитьПараметр("КонПериода", Дата(3999,1,1));
	Запрос.УстановитьПараметр("КритическоеОборудование",КритическоеОборудование());
	Запрос.УстановитьПараметр("НачПериода", Дата(1,1,1));
	Запрос.УстановитьПараметр("НеИспользоватьID", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПоПлановым", Ложь);
	Запрос.УстановитьПараметр("Плановый", Истина);
	Запрос.УстановитьПараметр("ОтбиратьКритическим", Ложь);
	Запрос.УстановитьПараметр("Критический", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПеренесенные", Ложь);
	Запрос.УстановитьПараметр("Перенесен", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПросроченные", Истина);
	Запрос.УстановитьПараметр("ДатаСравненияПросроченных", ТекущаяДата());

	
	


	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));


	Запрос.УстановитьПараметр("ОбъектыРемонта", СписокОбъектовРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();

КонецФункции 

Функция ОткрытиеАРМ_КоличествоКритичныхРемонтов(БлижайшийПериодРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = ПлановыеВнеплановыеРемонты_ТекстЗапросаСписка();
	
	Запрос.УстановитьПараметр("ID", Неопределено);
	Запрос.УстановитьПараметр("КонПериода", Дата(3999,1,1));
	Запрос.УстановитьПараметр("КритическоеОборудование", КритическоеОборудование());
	Запрос.УстановитьПараметр("НачПериода", Дата(1,1,1));
	Запрос.УстановитьПараметр("НеИспользоватьID", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПоПлановым", Ложь);
	Запрос.УстановитьПараметр("Плановый", Истина);
	Запрос.УстановитьПараметр("ОтбиратьКритическим", Истина);
	Запрос.УстановитьПараметр("Критический", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПеренесенные", Ложь);
	Запрос.УстановитьПараметр("Перенесен", Истина);
	Запрос.УстановитьПараметр("ОтбиратьПросроченные", Истина);
	Запрос.УстановитьПараметр("ДатаСравненияПросроченных", ТекущаяДата());



	СписокОбъектовРемонта= Новый СписокЗначений;
	СписокОбъектовРемонта.Добавить(ПлановыеВнеплановыеРемонты_ОРПоСудну( vftОбщегоНазначения.ПолучитьОсновноеСудно()));


	Запрос.УстановитьПараметр("ОбъектыРемонта", СписокОбъектовРемонта);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Возврат ВыборкаДетальныеЗаписи.Количество();


	
КонецФункции 

Функция ОткрытиеАРМДоступны()
	
	Возврат ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.vftФормаЖурнала) ;
	  КонецФункции


#КонецОбласти

#Область ОбменДаннымиБМ

Процедура ДобавитьОбменДаннымиБМ(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОбменДаннымиБМ(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОбменДаннымиБМ(),
		"БлокиИнформационнойПанели.ОбменДаннымиБМ",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОбменДаннымиБМ",
		СвойстваОбменДаннымиБМ(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОбменДаннымиБМ());

	
КонецПроцедуры

Функция СвойстваОбменДаннымиБМ()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ОбменДаннымиБМ_Заголовок, "
	+ "ОбменДаннымиБМ_ПредупрежденияПриЗагрузке, "
	+ "ОбменДаннымиБМ_ДатаОбновления, "
	+ "ОбменДаннымиБМ_Строка1_1, "
	+ "ОбменДаннымиБМ_Строка2_1, "
	+ "ОбменДаннымиБМ_Строка3_1, "
	+ "ОбменДаннымиБМ_Строка3_2, "
	+ "ОбменДаннымиБМ_Строка4_1, "
	+ "ОбменДаннымиБМ_Строка4_2, "
	+ "ОбменДаннымиБМ_Строка5_1, "
	+ "ОбменДаннымиБМ_Строка5_2, "
	+ "ОбменДаннымиБМ_Строка6_1, "
	+ "ОбменДаннымиБМ_Строка6_2, "
	+ "ОбменДаннымиБМ_Строка7_1, "
	+ "ОбменДаннымиБМ_Строка7_2, "
	+ "ОбменДаннымиБМ_Строка8_1, "
	+ "ОбменДаннымиБМ_Строка8_2, "
	+ "ОбменДаннымиБМ_ТекстВиджета";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОбменДаннымиБМ(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОбменДаннымиБМ(Параметры, АдресРезультата = Неопределено) Экспорт
	ШрифтИзСтиля = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	Шрифт= Новый Шрифт(ШрифтИзСтиля, ,8) ;
	//ШрифтПодчеркнутый= Новый Шрифт(ШрифтИзСтиля, ,8,,,Истина) ;
	ШрифтПодчеркнутый= Шрифт ;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	ФорматнаяСтрока = "ЧЦ=10; ЧДЦ=0; ЧГ=0; ЧН=0";
	ФорматнаяСтрокаОбъем = "ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=0";
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетПросроченныеРемонты();
	
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура; 
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, Виджет, Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОбменДаннымиБМ();
			Результат.Вставить("ОбменДаннымиБМ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;

	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваОбменДаннымиБМ());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОбменДаннымиБМ();
	Результат.Вставить("ОбменДаннымиБМ_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	
	Если не ОбменДаннымиБМДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ОбменДаннымиБМ_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе
		//БлижайшийПериодРемонтов=ТекущаяДата();
		ОсновноеСудно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
		ДатаПоследнейОтправки=неопределено;
		ДатаПоследнегоПолучения=неопределено;
		Если ЗначениеЗаполнено(ОсновноеСудно) тогда 
			РезультатыОбмена=ПолучитьРезультатыОбмена(ОсновноеСудно);
			ДатаПоследнейОтправки = РезультатыОбмена.ДатаВыгрузки;
			ДатаПоследнегоПолучения = РезультатыОбмена.ДатаЗагрузки;
			ГлавныйУзел = РезультатыОбмена.ГлавныйУзел;
			//СтруктураВыгружаемыхПоВарианту1 = рарусСинхронизацияССудном.ПолучитьСписокКВыгрузке(ГлавныйУзел, 1);
			
			СтруктураВыгружаемыхПоВариантам=ЗаполнитьДанныеКОбмену(ГлавныйУзел);
		КонецЕсли;
		
		//СтруктураВыгружаемыхПоВарианту =ПолучитьСписокКВыгрузкеПоВарианту(Константы.ГлавныйУзел.Получить(), Вариант);
		//ЧастиСтрок=Новый Массив;
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Регион регистрации: ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(рарусСинхронизацияССудном.ПолучитьРегистрациюВСети().СтрокаРегистрации, Шрифт, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"Последние: ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"отправка ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("           "+"           "+"           "+Формат(ДатаПоследнейОтправки, "ДЛФ=ДВ"), Шрифт, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"получение ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("         "+"           "+"           "+Формат(ДатаПоследнегоПолучения, "ДЛФ=ДВ"), Шрифт, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"Подлежит выгрузке: ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"Срочное ко-во/Кб "+"           "+"           "+"           ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант1,ФорматнаяСтрока)+"/"+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант1,ФорматнаяСтрокаОбъем), Шрифт, , ,"ОбменДаннымиБМ"));
		//
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"Стандартное кол-во/Кб "+"   "+"           "+"           ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант2,ФорматнаяСтрока)+"/"+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант2,ФорматнаяСтрокаОбъем), Шрифт, , ,"ОбменДаннымиБМ"));
		//
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Символы.ПС+"Полное кол-во/Кб "+"           "+"           "+"           ", ШрифтПодчеркнутый, ЦветТекста));
		//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант3,ФорматнаяСтрока)+"/"+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант3,ФорматнаяСтрокаОбъем), Шрифт, , ,"ОбменДаннымиБМ"));
		Результат.Вставить("ОбменДаннымиБМ_Строка1_1",Новый ФорматированнаяСтрока("Регион регистрации: ", ШрифтПодчеркнутый, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка2_1",Новый ФорматированнаяСтрока(рарусСинхронизацияССудном.ПолучитьРегистрациюВСети().СтрокаРегистрации, Шрифт, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка3_1",Новый ФорматированнаяСтрока("последняя отправка:", ШрифтПодчеркнутый, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка3_2",Новый ФорматированнаяСтрока(Формат(ДатаПоследнейОтправки, "ДЛФ=ДВ"), Шрифт, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка4_1",Новый ФорматированнаяСтрока("последняя получение:", ШрифтПодчеркнутый, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка4_2",Новый ФорматированнаяСтрока(Формат(ДатаПоследнегоПолучения, "ДЛФ=ДВ"), Шрифт, ЦветТекста));
		//Результат.Вставить("ОбменДаннымиБМ_Строка5_1",Новый ФорматированнаяСтрока("Подлежит выгрузке:", Шрифт, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка6_1",Новый ФорматированнаяСтрока("К выгрузке: срочное кол-во/Кб", ШрифтПодчеркнутый, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка6_2",Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант1,ФорматнаяСтрока)+" / "+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант1,ФорматнаяСтрокаОбъем), Шрифт, , ,"ОбменДаннымиБМ"));
		Результат.Вставить("ОбменДаннымиБМ_Строка7_1",Новый ФорматированнаяСтрока("К выгрузке: стандарт. кол-во/Кб", ШрифтПодчеркнутый, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка7_2",Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант2,ФорматнаяСтрока)+" / "+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант2,ФорматнаяСтрокаОбъем), Шрифт, , ,"ОбменДаннымиБМ"));
		Результат.Вставить("ОбменДаннымиБМ_Строка8_1",Новый ФорматированнаяСтрока("К выгрузке: полное кол-во/Кб", ШрифтПодчеркнутый, ЦветТекста));
		Результат.Вставить("ОбменДаннымиБМ_Строка8_2",Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант3,ФорматнаяСтрока)+" / "+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант3,ФорматнаяСтрокаОбъем), Шрифт, , ,"ОбменДаннымиБМ"));
		
	КонецЕсли;
	
	Результат.Вставить("ОбменДаннымиБМ_ДатаОбновления", ДатаОбновленияВиджета());
	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОбменДаннымиБМ(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры

Функция ЗаполнитьДанныеКОбмену(ГлавныйУзел)
	СтруктураВыгружаемыхПоВариантам=Новый Структура;
	СтруктураВыгружаемыхПоВариантам.Вставить("КоличествоВариант1",0);
	СтруктураВыгружаемыхПоВариантам.Вставить("КоличествоВариант2",0);
	СтруктураВыгружаемыхПоВариантам.Вставить("КоличествоВариант3",0);
	СтруктураВыгружаемыхПоВариантам.Вставить("ОбъемВариант1",0);
	СтруктураВыгружаемыхПоВариантам.Вставить("ОбъемВариант2",0);
	СтруктураВыгружаемыхПоВариантам.Вставить("ОбъемВариант3",0);

	
	//ДанныеКОбмену=Новый ТаблицаЗначений;
	//ДанныеКОбмену.Колонки.Добавить("Объект");
	//ДанныеКОбмену.Колонки.Добавить("Выгружать", Новый ОписаниеТипов("Булево"));
	//ДанныеКОбмену.Колонки.Добавить("ВыгружатьПоПравилу");
	//ДанныеКОбмену.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число"));
	//ДанныеКОбмену.Колонки.Добавить("ПолноеИмяТипа");
	//ДанныеКОбмену.Колонки.Добавить("КартинкаОбъект");
	//ДанныеКОбмену.Колонки.Добавить("Порядок");
	//ДанныеКОбмену.Колонки.Добавить("ОставшийсяОбъем");
	ТаблицаПодготовленных=Новый ТаблицаЗначений;
	ТаблицаПодготовленных.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число"));
	ТаблицаПодготовленных.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	ТаблицаПодготовленных.Колонки.Добавить("ВидОбъекта",  Новый ОписаниеТипов("ПеречислениеСсылка.рарусВидыОбъектовДляСинхронизации"));
	ТаблицаПодготовленных.Колонки.Добавить("Приоритет",   Новый ОписаниеТипов("Число"));

	
	
	Для ВариантОбмена=1 По 3 Цикл
		//ДанныеКОбмену.Очистить();
			//ПараметрыПроцедуры = Новый Структура("ГлавныйУзел, ВариантОбмена, ДанныеКОбмену", ГлавныйУзел, ВариантОбмена, ДанныеКОбмену);
			//АдресИД=Новый УникальныйИдентификатор;
			////Обработки.рарусМониторОбменаСудна.ПолучитьДанныеКОбмену(ПараметрыПроцедуры, АдресРезультата);
			////	Результат = ПолучитьИзВременногоХранилища(АдресРезультата);	
			//
			//ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(АдресИД);
			//
			//СтруктураВозврата= ДлительныеОперации.ВыполнитьВФоне("Обработки.рарусМониторОбменаСудна.ПолучитьДанныеКОбмену", 
			//ПараметрыПроцедуры, ПараметрыВыполнения);
			//
			//АдресРезультата=СтруктураВозврата.АдресРезультата;		
			//Результат = ПолучитьИзВременногоХранилища(АдресРезультата);
			//ПараметрыОтбора=Новый структура;
			//ПараметрыОтбора.Вставить("Выгружать", Истина);
			//ТЗДанныеКОбмену= Результат.ДанныеКОбмену.Скопировать(ПараметрыОтбора);
			//
			//СтруктураВыгружаемыхПоВариантам["КоличествоВариант"+ВариантОбмена]= ТЗДанныеКОбмену.Количество();
			//СтруктураВыгружаемыхПоВариантам["ОбъемВариант"+ВариантОбмена]= ТЗДанныеКОбмену.Итог("Объем");
			//СписокКВыгрузке = рарусСинхронизацияССудном.ПолучитьСписокКВыгрузке(ГлавныйУзел, ВариантОбмена);
			СтруктураВыгружаемыхПоВарианту = рарусСинхронизацияССудном.ПолучитьСписокКВыгрузке(ГлавныйУзел, ВариантОбмена);
			Обработки.рарусМониторОбменаСудна.ЗаполнитьТаблицуПодготовленных(ТаблицаПодготовленных, СтруктураВыгружаемыхПоВарианту, Истина);
			СтруктураВыгружаемыхПоВариантам["КоличествоВариант"+ВариантОбмена]= ТаблицаПодготовленных.Итог("Количество");
			СтруктураВыгружаемыхПоВариантам["ОбъемВариант"+ВариантОбмена]= ТаблицаПодготовленных.Итог("Объем");
			
		КонецЦикла;
Возврат СтруктураВыгружаемыхПоВариантам;
	КонецФункции

Функция ПолучитьРезультатыОбмена(Судно)
	
	ГлавныйУзел = Константы.ГлавныйУзел.Получить();
	Ответ = Новый Структура("ГлавныйУзел, НомерОтправленного, НомерПринятого, ДатаЗагрузки, ДатаВыгрузки, УспешноЗагружено, УспешноВыгружено, ОшибкаЗагрузки, ОшибкаВыгрузки",
						ПредопределенноеЗначение("ПланОбмена.Полный.ПустаяСсылка"), 0, 0, Дата("00010101"), Дата("00010101"), Ложь, Ложь, "", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Полный.НомерОтправленного КАК НомерОтправленного,
		|	Полный.НомерПринятого КАК НомерПринятого,
		|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаЗагрузки,
		|	NULL КАК ДатаВыгрузки,
		|	ВЫБОР
		|		КОГДА СостоянияУспешныхОбменовДанными.ДатаОкончания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК УспешноЗагружено,
		|	ЛОЖЬ КАК УспешноВыгружено,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(рарусРегистрацияОбмена.Описание КАК СТРОКА(500)), """") КАК ОшибкаЗагрузки,
		|	NULL КАК ОшибкаВыгрузки
		|ПОМЕСТИТЬ ВТ_ДанныеОбмена
		|ИЗ
		|	ПланОбмена.Полный КАК Полный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
		|			ПО СостоянияОбменовДанными.УзелИнформационнойБазы = СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы
		|				И СостоянияОбменовДанными.ДатаОкончания = СостоянияУспешныхОбменовДанными.ДатаОкончания
		|				И СостоянияОбменовДанными.ДействиеПриОбмене = СостоянияУспешныхОбменовДанными.ДействиеПриОбмене
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусРегистрацияОбмена КАК рарусРегистрацияОбмена
		|			ПО СостоянияОбменовДанными.ДатаОкончания = рарусРегистрацияОбмена.Дата
		|				И (рарусРегистрацияОбмена.Судно = &Судно)
		|		ПО (Полный.Ссылка = &ГлавныйУзел)
		|			И Полный.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
		|			И (СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Полный.НомерОтправленного,
		|	Полный.НомерПринятого,
		|	NULL,
		|	СостоянияОбменовДанными.ДатаОкончания,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА СостоянияУспешныхОбменовДанными.ДатаОкончания ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	NULL,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(рарусРегистрацияОбмена.Описание КАК СТРОКА(500)), """")
		|ИЗ
		|	ПланОбмена.Полный КАК Полный
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
		|			ПО СостоянияОбменовДанными.УзелИнформационнойБазы = СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы
		|				И СостоянияОбменовДанными.ДатаОкончания = СостоянияУспешныхОбменовДанными.ДатаОкончания
		|				И СостоянияОбменовДанными.ДействиеПриОбмене = СостоянияУспешныхОбменовДанными.ДействиеПриОбмене
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусРегистрацияОбмена КАК рарусРегистрацияОбмена
		|			ПО СостоянияОбменовДанными.ДатаОкончания = рарусРегистрацияОбмена.Дата
		|				И (рарусРегистрацияОбмена.Судно = &Судно)
		|		ПО (Полный.Ссылка = &ГлавныйУзел)
		|			И Полный.Ссылка = СостоянияОбменовДанными.УзелИнформационнойБазы
		|			И (СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеОбмена.НомерОтправленного КАК НомерОтправленного,
		|	ВТ_ДанныеОбмена.НомерПринятого КАК НомерПринятого,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ДатаЗагрузки) КАК ДатаЗагрузки,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ДатаВыгрузки) КАК ДатаВыгрузки,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.УспешноЗагружено) КАК УспешноЗагружено,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.УспешноВыгружено) КАК УспешноВыгружено,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ОшибкаЗагрузки) КАК ОшибкаЗагрузки,
		|	МАКСИМУМ(ВТ_ДанныеОбмена.ОшибкаВыгрузки) КАК ОшибкаВыгрузки,
		|	&ГлавныйУзел КАК ГлавныйУзел
		|ИЗ
		|	ВТ_ДанныеОбмена КАК ВТ_ДанныеОбмена
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеОбмена.НомерОтправленного,
		|	ВТ_ДанныеОбмена.НомерПринятого";
	
	Запрос.УстановитьПараметр("ГлавныйУзел", ГлавныйУзел);
	Запрос.УстановитьПараметр("Судно", Судно);
	
	ВыборкаПоРезультатам = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаПоРезультатам.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(Ответ, ВыборкаПоРезультатам);
		
	КонецЕсли;
	
	Возврат Ответ;
	
КонецФункции


Функция ОбменДаннымиБМДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Обработки.рарусМониторОбменаСудна) и ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() ;
		
КонецФункции


#КонецОбласти
#Область АнализСУБКапитанами

Процедура ДобавитьАнализСУБКапитанами(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаАнализСУБКапитанами(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаАнализСУБКапитанами(),
		"БлокиИнформационнойПанели.АнализСУБКапитанами",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомАнализСУБКапитанами",
		СвойстваАнализСУБКапитанами(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетАнализСУБКапитанами());

	
КонецПроцедуры

Функция СвойстваАнализСУБКапитанами()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "АнализСУБКапитанами_Заголовок, "
	+ "АнализСУБКапитанами_ПредупрежденияПриЗагрузке, "
	+ "АнализСУБКапитанами_Период, "
	+ "АнализСУБКапитанами_ДатаОбновления, "
	+ "АнализСУБКапитанами_ТекстВиджета";
	
	
	Возврат Свойства;
	
	
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьАнализСУБКапитанами(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура АнализСУБКапитанами(Параметры, АдресРезультата = Неопределено) Экспорт
		Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
		ЦветТекстаВнимание = WebЦвета.Красный;
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура;
		ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаАнализСУБКапитанами();
		Результат.Вставить("АнализСУБКапитанами_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//Результат = Новый Структура(СвойстваОстаткиСудовогоСклада());
	Результат = Новый Структура(СвойстваАнализСУБКапитанами());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаАнализСУБКапитанами();
	Результат.Вставить("АнализСУБКапитанами_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	Если не АнализСУБКапитанамиДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("АнализСУБКапитанами_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе

	
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетАнализСУБКапитанами();
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(Виджет, Параметры.Период);
	ЧастиСтрок=Новый Массив;
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант1,"ЧЦ=10; ЧДЦ=0; ЧГ=0; ЧН=0")+"/"+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант1,"ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=0"), Шрифт, , ,"ОбменДаннымиБМ"));
	ЕстьАнализСУБКапитанами=АнализСУБКапитанами_ЕстьАнализСУБКапитанами(Виджет , "С08.1", СтруктураБлижайшихПериодовВиджета.ПериодВиджета);
	ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(?(ЕстьАнализСУБКапитанами,"Анализ СУБ капитанами не ожидается","Внимание, ожидается анализ СУБ капитанами"), Шрифт,?(ЕстьАнализСУБКапитанами,ЦветаСтиля.ГиперссылкаЦвет,ЦветТекстаВнимание), ,"ЖурналАнализСУБ"));
	
	
	
		
	Результат.Вставить("АнализСУБКапитанами_ТекстВиджета", Новый ФорматированнаяСтрока(ЧастиСтрок));
	
	//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
	//Результат.Вставить("АнализСУБКапитанами_ПредупрежденияПриЗагрузке", "");
	КонецЕсли;
	//ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	Результат.Вставить("АнализСУБКапитанами_ДатаОбновления", ДатаОбновленияВиджета());
	
	Если СтруктураБлижайшихПериодовВиджета=Неопределено тогда
		Результат.Вставить("АнализСУБКапитанами_Период", Новый ФорматированнаяСтрока("не указаны периоды"));
	ИначеЕсли не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
		Результат.Вставить("АнализСУБКапитанами_Период", Новый ФорматированнаяСтрока(СтрШаблон("(%1-%2)", 
		Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала, "ДФ=dd.MM.yy"),
		Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания, "ДФ=dd.MM.yy"))));
	Иначе
		СтрокаПериода=Новый ФорматированнаяСтрока("разные периоды",,,,ПолучитьНавигационнуюСсылку(СтруктураБлижайшихПериодовВиджета.ЭлементПериод));
		Результат.Вставить("АнализСУБКапитанами_Период",СтрокаПериода);
		
	КонецЕсли;

	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетАнализСУБКапитанами(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры
Функция АнализСУБКапитанами_ЕстьАнализСУБКапитанами(Виджет,НаименованиеПоказателя, БлижайшийПериодРемонтов)
	//Показатель=Справочники.рарусПоказателиВиджетов.НайтиПоНаименованию(НаименованиеПоказателя,,,Виджет);
	//БлижайшийПериодРемонтов=ТекущаяДата();
	
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументvftАнализСУБ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.vftАнализСУБ КАК ДокументvftАнализСУБ
		|ГДЕ
		|	(ДокументvftАнализСУБ.Судно В (&Судно)
		|			ИЛИ &НетОтбораСудно = ИСТИНА)
		|	И ДокументvftАнализСУБ.Дата МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И НЕ ДокументvftАнализСУБ.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументvftАнализСУБ.Ссылка";

	ОсновноеСудно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	Запрос.УстановитьПараметр("Судно", ОсновноеСудно);

	Если ЗначениеЗаполнено(ОсновноеСудно) тогда
		Запрос.УстановитьПараметр("НетОтбораСудно", Ложь);
			иначе
		Запрос.УстановитьПараметр("НетОтбораСудно", Истина);
		
	КонецЕсли;

	
	//БлижайшийПериодРемонтов=ПериодПоПоказателю(НаименованиеПоказателя, ПериодВиджетов);
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетАнализСУБКапитанами();
	

	Запрос.УстановитьПараметр("ДатаНачала", БлижайшийПериодРемонтов.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаКонца", БлижайшийПериодРемонтов.ДатаОкончания);

	РезультатЗапроса = Запрос.Выполнить();
	
	Если не РезультатЗапроса.Пустой() тогда
		Возврат Истина;
	Иначе   Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции 

Функция АнализСУБКапитанамиДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Документы.vftАнализСУБ) ;
	    	
КонецФункции


#КонецОбласти
#Область ОтслеживаниеПоказанийНаработки

Процедура ДобавитьОтслеживаниеПоказанийНаработки(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаОтслеживаниеПоказанийНаработки(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОтслеживаниеПоказанийНаработки(),
		"БлокиИнформационнойПанели.ОтслеживаниеПоказанийНаработки",
		,
		"БлокиИнформационнойПанелиКлиентСервер.УправлениеБлокомОтслеживаниеПоказанийНаработки",
		СвойстваОтслеживаниеПоказанийНаработки(),
		БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОтслеживаниеПоказанийНаработки());

	
КонецПроцедуры

Функция СвойстваОтслеживаниеПоказанийНаработки()
	
	//Свойства = "ОстаткиСудовогоСклада_Заголовок, "
	//+ "ОстаткиСудовогоСклада_ТекстВиджета ";
	Свойства = "ОтслеживаниеПоказанийНаработки_Заголовок, "
	+ "ОтслеживаниеПоказанийНаработки_ПредупрежденияПриЗагрузке, "
	+ "ОтслеживаниеПоказанийНаработки_ДатаОбновления, "
	+ "ОтслеживаниеПоказанийНаработки_Период, "
	+ "ОтслеживаниеПоказанийНаработки_Строка1_1, "
	+ "ОтслеживаниеПоказанийНаработки_Строка1_2, "
	+ "ОтслеживаниеПоказанийНаработки_ТекстВиджета, "
	+ "ОтслеживаниеПоказанийНаработки_ТекстВиджета1";
	
	
	Возврат Свойства;
	
	
КонецФункции

Функция ПолучитьДанныеНаработкиЗаПериод(БлижайшийПериод, Судно) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ различные
	|	впНаработкаОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
	|ИЗ
	|	РегистрСведений.впНаработкаОбъектовРемонта КАК впНаработкаОбъектовРемонта
	|ГДЕ
	|	впНаработкаОбъектовРемонта.ОбъектРемонта В ИЕРАРХИИ(&ОбъектРемонтаСудно)
	|	И впНаработкаОбъектовРемонта.Период МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И НЕ впНаработкаОбъектовРемонта.НовоеЗначение = 0";
	
	Запрос.УстановитьПараметр("ДатаКонца", БлижайшийПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("ДатаНачала", БлижайшийПериод.ДатаНачала);
	ОРСудно=ПлановыеВнеплановыеРемонты_ОРПоСудну(Судно);
	Запрос.УстановитьПараметр("ОбъектРемонтаСудно", ОРСудно);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивОбъектовСНаработкой = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ОбъектРемонта");
	
	СписокОбъектовСНаработкой = новый СписокЗначений; 
	СписокОбъектовСНаработкой.ЗагрузитьЗначения(МассивОбъектовСНаработкой);
	Возврат СписокОбъектовСНаработкой;

	// Возвращает список всех неудаленных критических объектов за все время работы, по которым хотя бы раз вводилась наработка...
	// через формирование отчета
	
	//ОтчетНаработка=Отчеты.впНаработкаОборудования.Создать();
	//КомпоновщикНастроек= ОтчетНаработка.КомпоновщикНастроек;
	//НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	//
	//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	//ПериодДляОтчета=Новый СтандартныйПериод(Дата(1,1,1),БлижайшийПериод.ДатаНачала); 
	////НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Период", БлижайшийПериод);
	////!!!
	//НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПериодДляОтчета);
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,
	//"ОбъектРемонта.Приоритет",
	//КритическоеОборудование(),
	//ВидСравненияКомпоновкиДанных.Равно,
	//"Критические",
	//Истина,
	//РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);
	//
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,
	//	"ОбъектРемонта.ПодразделениеИсполнитель",
	//	vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно"),
	//	ВидСравненияКомпоновкиДанных.Равно,
	//	,
	//	Истина,
	//	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);

	//
	//// Подготовим и выведем отчет.
	////КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;    
	//
	//  ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,"ДатаРегистрацииНаработки",БлижайшийПериод.ДатаНачала,ВидСравненияКомпоновкиДанных.Больше);
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,"ОбъектРемонта.ПометкаУдаления",Ложь,ВидСравненияКомпоновкиДанных.Равно);

	//
	//НастройкиКомпоновкиДанных.Структура.Очистить();

	//ГруппировкаПоОР = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	//ПолеГруппировки = ГруппировкаПоОР.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	//ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
	//ГруппировкаПоОР.Использование = Истина;
	//Автополе = ГруппировкаПоОР.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	//Автополе.Использование = Истина; 

	//
	//
	//МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетНаработка.СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	//
	//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	//
	//КлючВарианта = Неопределено;
	//КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", "Основной");
	//
	//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);

	//
	//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	//Данные=Новый ТаблицаЗначений;
	//ПроцессорВывода.УстановитьОбъект(Данные);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	//Результат = Новый СписокЗначений;
	//Результат.ЗагрузитьЗначения(Данные.ВыгрузитьКолонку("ОбъектРемонта"));
	//
	//
	//Возврат Результат;
КонецФункции

// Обновляет данные блока
//
// Параметры:
//   Параметры - Структура
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * БыстроеОбновление - Булево - учитывать актуальность данных при обновлении
//
Процедура ОбновитьОтслеживаниеПоказанийНаработки(Параметры) Экспорт
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	
КонецПроцедуры

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ОтслеживаниеПоказанийНаработки(Параметры, АдресРезультата = Неопределено) Экспорт
		Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
		Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОтслеживаниеПоказанийНаработки();
		ФорматнаяСтрока = "ЧЦ=10; ЧДЦ=0; ЧГ=0; ЧН=0";
	Если Параметры.Инициализация Тогда
		Результат = Новый Структура; 
		ПрочитатьСохраненныеДанныеВиджета(Параметры.Пользователь, Виджет, Результат);
		Если НЕ ЗначениеЗаполнено(Результат) Тогда
			ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОтслеживаниеПоказанийНаработки();
			Результат.Вставить("ОтслеживаниеПоказанийНаработки_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
		КонецЕсли;
		ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
		Возврат;
	КонецЕсли;
	
	//СтруктураБлижайших=ВыборкаБлижайшихПериодовВиджета(Виджет, Параметры.Период);
	СтруктураБлижайшихПериодовВиджета=СтруктураБлижайшихПериодовВиджета(Виджет, Параметры.Период);

		
	Результат = Новый Структура(СвойстваОтслеживаниеПоказанийНаработки());
	
	ЗаголовокБлока = БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаОтслеживаниеПоказанийНаработки();
	Результат.Вставить("ОтслеживаниеПоказанийНаработки_Заголовок", ЗаголовокБлока(ЗаголовокБлока));
	Виджет=БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОтслеживаниеПоказанийНаработки();
	
	Если не ОтслеживаниеПоказанийНаработкиДоступны() Тогда
		СообщениеОПредупреждениях = НСтр("ru = 'Ошибка доступа к данным виджета'");
		СтрокаСообщения= Новый ФорматированнаяСтрока(СообщениеОПредупреждениях, , ЦветаСтиля.ВажноеСобытие);
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_ПредупрежденияПриЗагрузке",
		СтрокаСообщения);
		
	Иначе
		
		
		//Результат.Вставить("ОтслеживаниеПоказанийНаработки_ТекстВиджета", ПредставлениеОтслеживаниеПоказанийНаработки(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_Строка1_1",Новый ФорматированнаяСтрока("Необходимо передать показания наработки по критическому оборудованию", Шрифт, ЦветТекста));
		БлижайшийПериод=ПериодПоПоказателю("С09.2", СтруктураБлижайшихПериодовВиджета);
		
		КоличествоОбъектовРемонтаСНаработкой=ОтслеживаниеПоказанийНаработки_Количество(БлижайшийПериод);
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_Строка1_2",Новый ФорматированнаяСтрока(Формат(КоличествоОбъектовРемонтаСНаработкой,ФорматнаяСтрока), Шрифт, ,,"ОтчетНаработка"));
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_ТекстВиджета1", ПредставлениеОтслеживаниеПоказанийНаработки1(Виджет, Параметры.Период, СтруктураБлижайшихПериодовВиджета));
		//!!!???надо определиться в каком случае должны выдаватьс сообщения о предупреждениях
		//Результат.Вставить("ОтслеживаниеПоказанийНаработки_ПредупрежденияПриЗагрузке", "");
	КонецЕсли;
	//ПоместитьВоВременноеХранилище(Результат, Параметры.АдресХранилища);
	Результат.Вставить("ОтслеживаниеПоказанийНаработки_ДатаОбновления", ДатаОбновленияВиджета());
	
	Если СтруктураБлижайшихПериодовВиджета=Неопределено тогда
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_Период", Новый ФорматированнаяСтрока("не указаны периоды"));
	ИначеЕсли не СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям тогда
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_Период", Новый ФорматированнаяСтрока(СтрШаблон("(%1-%2)", 
		Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаНачала, "ДФ=dd.MM.yy"),
		Формат(СтруктураБлижайшихПериодовВиджета.ПериодВиджета.ДатаОкончания, "ДФ=dd.MM.yy"))));
	Иначе
		СтрокаПериода=Новый ФорматированнаяСтрока("разные периоды",,,,ПолучитьНавигационнуюСсылку(СтруктураБлижайшихПериодовВиджета.ЭлементПериод));
		Результат.Вставить("ОтслеживаниеПоказанийНаработки_Период",СтрокаПериода);
		
	КонецЕсли;

	
	СохранитьДанныеВиджета(Параметры.Пользователь,
							БлокиИнформационнойПанелиКлиентСервер.СсылкаНаВиджетОтслеживаниеПоказанийНаработки(), 
							Результат, 
							Параметры.ФоновоеЗаданиеУИДРезультата);
	ПоместитьВоВременноеХранилище(Параметры.ФоновоеЗаданиеУИДРезультата, АдресРезультата);


	
КонецПроцедуры
Функция ПредставлениеОтслеживаниеПоказанийНаработки(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧЦ=10; ЧДЦ=0; ЧГ=0; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
		ЧастиСтрок=Новый Массив;
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(СтруктураВыгружаемыхПоВариантам.КоличествоВариант1,"ЧЦ=10; ЧДЦ=0; ЧГ=0; ЧН=0")+"/"+Формат(СтруктураВыгружаемыхПоВариантам.ОбъемВариант1,"ЧЦ=15; ЧДЦ=2; ЧГ=0; ЧН=0"), Шрифт, , ,"ОбменДаннымиБМ"));
	
	//ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(?(ЕстьАнализСУБКапитанами,"Анализ СУБ капитанами не ожидается","Внимание, ожидается анализ СУБ капитанами"), Шрифт,?(ЕстьАнализСУБКапитанами,ЦветаСтиля.ГиперссылкаЦвет,ЦветТекстаВнимание), ,"ЖурналАнализСУБ"));
	 ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Необходимо передать показания наработки по критическому оборудованию ", Шрифт, ЦветТекста));
	 	
	БлижайшийПериод=ПериодПоПоказателю("С09.2", СтруктураБлижайшихПериодовВиджета);

	 КоличествоОбъектовРемонтаСНаработкой=ОтслеживаниеПоказанийНаработки_Количество(БлижайшийПериод);
	 //КоличествоОбъектовРемонтаСНаработкой=77;
	 ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока(Формат(КоличествоОбъектовРемонтаСНаработкой,ФорматнаяСтрока), Шрифт, ,,"ОтчетНаработка"));

		
	
		
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции
Функция ПредставлениеОтслеживаниеПоказанийНаработки1(Виджет, Период, СтруктураБлижайшихПериодовВиджета)
	ПериодПоказателя=Новый СтандартныйПериод;
	РазныеПериодыПоПоказателям= СтруктураБлижайшихПериодовВиджета.РазныеПериодыПоПоказателям;
	Если не РазныеПериодыПоПоказателям  тогда
		ПериодПоказателя=СтруктураБлижайшихПериодовВиджета.ПериодВиджета;
	КонецЕсли;	 
	ФорматнаяСтрока = "ЧЦ=10; ЧДЦ=0; ЧГ=0; ЧН=0";
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
		ЧастиСтрок=Новый Массив;
		 ЧастиСтрок.Добавить(Новый ФорматированнаяСтрока("Ввести показания ", Шрифт, ,,"ОткрытьАРМ"));
			
	
	Возврат Новый ФорматированнаяСтрока(ЧастиСтрок);
	
КонецФункции


Функция ОтслеживаниеПоказанийНаработки_Количество(БлижайшийПериод)
	
	Данные=Новый ТаблицаЗначений;

	ОтчетНаработка=Отчеты.впНаработкаОборудования.Создать();
	КомпоновщикНастроек= ОтчетНаработка.КомпоновщикНастроек;
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;	
	
	//НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Период", БлижайшийПериод);
	ПериодДляОтчета=Новый СтандартныйПериод(Дата(1,1,1),БлижайшийПериод.ДатаНачала); 
	//НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Период", БлижайшийПериод);
	//!!!
	НастройкиКомпоновкиДанных.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПериодДляОтчета);

	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,
	"ОбъектРемонта.Приоритет",
	КритическоеОборудование(),
	ВидСравненияКомпоновкиДанных.Равно,
	"Критические",
	Истина,
	РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);
	ОсновноеСудно=vftОбщегоНазначения.ПолучитьЗначениеПоУмолчанию("ОсновноеСудно");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор,
		"ОбъектРемонта.ПодразделениеИсполнитель",
		ОсновноеСудно,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина,
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный, новый УникальныйИдентификатор);

		СписокОбъектовРемонтаСНаработкой = ПолучитьДанныеНаработкиЗаПериод(БлижайшийПериод,ОсновноеСудно );
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(НастройкиКомпоновкиДанных.Отбор, 			//  ОбластьПоискаДобавления - КоллекцияЭлементовОтбораКомпоновкиДанных - контейнер с элементами и группами отбора, 
		"ОбъектРемонта",													//   ИмяПоля            - Строка - поле, по которому необходимо установить отбор.
		СписокОбъектовРемонтаСНаработкой, 												//   ПравоеЗначение     - Произвольный - значение отбора.
		ВидСравненияКомпоновкиДанных.НеВСписке,                             //   ВидСравнения  - ВидСравненияКомпоновкиДанных - условие отбора.
		,                                                                   //   Представление - Строка - представление элемента компоновки данных.
		Истина,                                                             //   Использование - Булево - флажок использования этого отбора.
		РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);   		//   РежимОтображения - РежимОтображенияЭлементаНастройкиКомпоновкиДанных - способ отображения этого отбора пользователю.
		
		
		
		
		НастройкиКомпоновкиДанных.Структура.Очистить();
		
		ГруппировкаПоОР = НастройкиКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = ГруппировкаПоОР.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
	ГруппировкаПоОР.Использование = Истина;
	Автополе = ГруппировкаПоОР.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Автополе.Использование = Истина; 

	
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетНаработка.СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	
	КлючВарианта = Неопределено;
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта", "Основной");
	
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);

	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(Данные);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
	Возврат Данные.Количество();
	
	//Возврат 0;
КонецФункции

Функция ОтслеживаниеПоказанийНаработкиДоступны()
	
		Возврат ПравоДоступа("Просмотр", Метаданные.Отчеты.впНаработкаОборудования) ;
			
	
КонецФункции


#КонецОбласти
