////////////////////////////////////////////////////////////////////////////////
// 
// Подсистема "Обмен СМ"
// 
////////////////////////////////////////////////////////////////////////////////

// Обработчик подписки на событие "впРассчитатьРазмерОбъектаДляВыгрузки"
Процедура впРассчитатьРазмерОбъектаДляВыгрузкиПриЗаписи(Источник, Отказ) Экспорт
	
	// ++ rarus makole 2021-03-23 [Задача № 27987]
	// Исправить ошибку при которой расчет размера мешает проводить удаление помеченных объектов
	МассивФЗУдалениеПомеченныхИнтерактивное = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("Наименование, Состояние", 
										"Удаление помеченных объектов (интерактивное)",
										СостояниеФоновогоЗадания.Активно));
	МассивФЗУдалениеПомеченныхРегламентное = ФоновыеЗадания.ПолучитьФоновыеЗадания(Новый Структура("ИмяМетода, Состояние", 
										"УдалениеПомеченныхОбъектовСлужебный.УдалениеПомеченныхПоРасписанию",
										СостояниеФоновогоЗадания.Активно));
	
	Если МассивФЗУдалениеПомеченныхИнтерактивное.Количество()
		ИЛИ МассивФЗУдалениеПомеченныхРегламентное.Количество() Тогда
		Возврат
	КонецЕсли;
	// -- rarus makole 2021-03-23 [Задача № 27987]
	
	Если Источник.ОбменДанными.Загрузка = Истина 
		И ТипЗнч(Источник.ОбменДанными.Отправитель) = Тип("ПланОбменаСсылка.Полный")
		ИЛИ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектыКВыгрузке = Новый Массив;
	МетаданныеИсточника = Источник.Метаданные();
	ТипИсточника = ТипЗнч(Источник);
	// ++ rarus makole 2021-03-22 [Задача № 27987]
	// Установка пометки удаления не влияет на размер объекта в выгрузке
	Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеИсточника) 
		И Источник.ПометкаУдаления = Истина Тогда
		Возврат
	КонецЕсли;
	// -- rarus makole 2021-03-22 [Задача № 27987]
	
	ЭтоГруппа = (ОбщегоНазначения.ЭтоСправочник(МетаданныеИсточника) 
				ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеИсточника))
				И Источник.ЭтоГруппа;
	МетаданныеВНабор = Ложь;
	РегистрацияНаВсеУзлы = Истина;
	Регистратор = Неопределено;
	УзелПлана = ПредопределенноеЗначение("ПланОбмена.Полный.ПустаяСсылка");
	//Структура объекта
	ШаблонСтруктурыРеквизитов = ПолучитьСтруктуруИзОбъекта(ТипИсточника, ЭтоГруппа);
	ШаблонСтруктурыТЧ = ?(ШаблонСтруктурыРеквизитов.Свойство("ТабличныеЧасти"),
					ШаблонСтруктурыРеквизитов.ТабличныеЧасти,
					Новый Структура);
	Если ОбщегоНазначения.ЭтоКонстанта(МетаданныеИсточника) Тогда
		СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, Источник);
		МетаданныеВНабор = Истина;
		СсылкаНаИдентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(МетаданныеИсточника.ПолноеИмя());
		ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
	ИначеЕсли ОбщегоНазначения.ЭтоРегистр(МетаданныеИсточника) Тогда
		// Исправить позже
		//УзлыПолучатели = Источник.ОбменДанными.Получатели;
		//Если УзлыПолучатели.Количество() > 0 Тогда
		//	
		//	МассивУзловПолучателей = Новый Массив;
		//	Для каждого УзелПолучатель из УзлыПолучатели Цикл
		//		МассивУзловПолучателей.Добавить(УзелПолучатель)
		//	КонецЦикла;
		//	РегистрацияНаВсеУзлы = ОбщегоНазначения.КоллекцииИдентичны(МассивУзловПолучателей, ОбменДаннымиСобытия.ВсеУзлыПланаОбмена("Полный"));
		//	
		//	ЗапросПоИзменениям = Новый Запрос;
		//	ЗапросПоИзменениям.Текст = ТекстЗапросаПоИзменениямРегистра(МетаданныеИсточника);
		//	ЗапросПоИзменениям.УстановитьПараметр("МассивУзловПолучателей", МассивУзловПолучателей);
		//	ТаблицаИзменений = ЗапросПоИзменениям.Выполнить().Выгрузить();
		//	
		//	ДанныеИсточника = Источник.Выгрузить();
		//	
		//	ОбработатьТаблицуИзменений(ТаблицаИзменений, ДанныеИсточника, МассивУзловПолучателей);
		//	
		//	ЕстьРегистратор = ШаблонСтруктурыРеквизитов.Свойство("Регистратор");
		//	МассивРегистраторов = ?(ЕстьРегистратор, ТаблицаИзменений.ВыгрузитьКолонку("Регистратор"), Новый Массив(1));
		//	МассивРегистраторов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивРегистраторов);
		//	МетаданныеВНабор = Истина;
		//	ИмяТипа = МетаданныеИсточника.ПолноеИмя();
		//	СсылкаНаИдентификатор = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ИмяТипа);
		//	
		//	Для каждого УзелПлана Из МассивУзловПолучателей Цикл
		//		Для каждого Регистратор Из МассивРегистраторов Цикл
		//			Если ЕстьРегистратор Тогда
		//				СтрокиПоУзлу = ТаблицаИзменений.НайтиСтроки(Новый Структура("Узел, Регистратор", УзелПлана, Регистратор));
		//			Иначе
		//				СтрокиПоУзлу = ТаблицаИзменений.НайтиСтроки(Новый Структура("Узел", УзелПлана));
		//			КонецЕсли;
		//			
		//			Если СтрокиПоУзлу.Количество() Тогда
		//				// Массив строк ТЗ не сериализуется, поэтому преобразуем его в новую ТЗ
		//				ТаблицаПоУзлу = ТаблицаИзменений.СкопироватьКолонки();
		//				Для каждого СтрокаПоУзлу из СтрокиПоУзлу Цикл
		//					НоваяСтрока = ТаблицаПоУзлу.Добавить();
		//					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПоУзлу);
		//				КонецЦикла;
		//				
		//				СтруктураРеквизитов = Новый Структура("ИмяТипа, Записи", ИмяТипа, ТаблицаПоУзлу);
		//				ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
		//				
		//				ПараметрФЗ = Новый Массив;
		//				ПараметрФЗ.Добавить(ОбъектыКВыгрузке);
		//				ПараметрФЗ.Добавить(МетаданныеВНабор);
		//				ПараметрФЗ.Добавить(УзелПлана);
		//				ПараметрФЗ.Добавить(СсылкаНаИдентификатор);
		//				ПараметрФЗ.Добавить(Регистратор);
		//				ФоновыеЗадания.Выполнить("рарусСинхронизацияССудном.РассчитатьРазмерВФоне", ПараметрФЗ,, "Рассчитать размер объекта " + Строка(Источник));	
		//				
		//			КонецЕсли;
		//		КонецЦикла;
		//	КонецЦикла;
		//	
		//КонецЕсли;
		Возврат; // Дальше обрабатываются только объекты ссылочного типа, для которых не нужна привязка к узлу
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеИсточника) Тогда
		СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, Источник.Ссылка);
		ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
		Регистратор = Источник.Ссылка;
	ИначеЕсли Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
		СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, Источник.Ссылка);
		СтруктураРеквизитов.Вставить("ДД", РаботаСФайлами.ДвоичныеДанныеФайла(Источник.Ссылка, Ложь));
		ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
	Иначе
		СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, Источник.Ссылка);
		ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
	КонецЕсли;
	
	ПараметрФЗ = Новый Массив;
	ПараметрФЗ.Добавить(ОбъектыКВыгрузке);
	ПараметрФЗ.Добавить(МетаданныеВНабор);
	ПараметрФЗ.Добавить(УзелПлана);
	ПараметрФЗ.Добавить(СсылкаНаИдентификатор);
	ПараметрФЗ.Добавить(Регистратор);
	Если Не МетаданныеВНабор Тогда
		ПараметрФЗ.Добавить(Источник.Ссылка);
	КонецЕсли;
	ФоновыеЗадания.Выполнить("рарусСинхронизацияССудном.РассчитатьРазмерВФоне", ПараметрФЗ,, "Рассчитать размер объекта " + Строка(Источник));	
	
КонецПроцедуры

Процедура РассчитатьРазмерВФоне(ОбъектыКВыгрузке, МетаданныеВНабор, УзелПлана, СсылкаНаИдентификатор, Регистратор, Источник = Неопределено) Экспорт
	
	РазмерВыгрузки = ПолучитьФайлОтветаHttpСервиса(ОбъектыКВыгрузке, Истина);
	
	ЗаписатьРазмерВРегистр(РазмерВыгрузки, МетаданныеВНабор, УзелПлана, СсылкаНаИдентификатор, Регистратор, Источник);
	
КонецПроцедуры

Процедура ЗаписатьРазмерВРегистр(РазмерВыгрузки, 
								МетаданныеВНабор, 
								УзелПлана, 
								СсылкаНаИдентификатор = Неопределено, 
								Регистратор = Неопределено, 
								Источник = Неопределено)
								
	УстановитьПривилегированныйРежим(Истина);							
	НаборЗаписей = РегистрыСведений.рарусРазмерыОбъектовВВыгрузке.СоздатьНаборЗаписей(); 

	Если МетаданныеВНабор Тогда
		НаборЗаписей.Отбор.Объект.Установить(СсылкаНаИдентификатор);
		НаборЗаписей.Отбор.Узел.Установить(УзелПлана);
		НаборЗаписей.Отбор.Владелец.Установить(Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = СсылкаНаИдентификатор;
		НоваяЗапись.Узел = УзелПлана;
		НоваяЗапись.Владелец = Регистратор;
	Иначе
		НаборЗаписей.Отбор.Объект.Установить(Источник); 
		НаборЗаписей.Отбор.Владелец.Установить(Регистратор);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = Источник;
		НоваяЗапись.Владелец = Регистратор;
	КонецЕсли;
	НоваяЗапись.Размер = РазмерВыгрузки; 

	НаборЗаписей.Записать();
	УстановитьПривилегированныйРежим(Ложь);							
	
КонецПроцедуры

Функция ТекстЗапросаПоИзменениямРегистра(МетаданныеРегистра)
	
	ПолноеИмяТаблицы = МетаданныеРегистра.ПолноеИмя();
	ОсновнойОтбор = ОсновнойОтборРегистра(МетаданныеРегистра);
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	*
		|ИЗ
		|	[ПолноеИмяТаблицыИзменений] КАК ТаблицаИзменений
		|		ЛЕВОЕ СОЕДИНЕНИЕ [ПолноеИмяТаблицы] КАК [ИмяТаблицы]
		|		ПО [УсловиеСоединения]
		|ГДЕ
		|	ТаблицаИзменений.Узел В (&МассивУзловПолучателей)";


	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяТаблицы]", ПолноеИмяТаблицы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяТаблицы]", МетаданныеРегистра.Имя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ПолноеИмяТаблицыИзменений]", ПолноеИмяТаблицы + ".Изменения");

	ПервоеИзмерение = Истина;

	Для каждого ИзмерениеРегистра из ОсновнойОтбор Цикл
		
		Если ПервоеИзмерение Тогда
			УсловиеСоединения = СтрШаблон("ТаблицаИзменений.%1 = %2.%1 %3", ИзмерениеРегистра, МетаданныеРегистра.Имя, Символы.ПС);
			ПервоеИзмерение = Ложь;
		Иначе
			УсловиеСоединения = СтрШаблон("%1 И ТаблицаИзменений.%2 = %3.%2 %4", УсловиеСоединения, ИзмерениеРегистра, МетаданныеРегистра.Имя, Символы.ПС)
		КонецЕсли;
		
	КонецЦикла;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеСоединения]", УсловиеСоединения);
			
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОсновнойОтборРегистра(ОбъектМетаданных) Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначения.ЭтоРегистрНакопления(ОбъектМетаданных)
		ИЛИ ОбъектМетаданных.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		
		Результат.Добавить("Регистратор");
		Возврат Результат;
		
	ИначеЕсли ОбъектМетаданных.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
		И ОбъектМетаданных.ОсновнойОтборПоПериоду Тогда
		
		Результат.Добавить("Период");
		
	КонецЕсли;
	
	Для Каждого Измерение Из ОбъектМетаданных.Измерения Цикл
		
		Если Измерение.ОсновнойОтбор Тогда
			
			Результат.Добавить(Измерение.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьТаблицуИзменений(ТаблицаИзменений, ДанныеИсточника, МассивУзловПолучателей)
	
	СтруктураКолонок = Новый Структура;
	СтрокаДляСверткиТИ = "Узел";
	Для каждого Колонка из ДанныеИсточника.Колонки Цикл
		Если Колонка.Имя <> "Индекс" И Колонка.Имя <> "МоментВремени" Тогда
			СтруктураКолонок.Вставить(Колонка.Имя);
			СтрокаДляСверткиТИ = СтрокаДляСверткиТИ + "," + Колонка.Имя;
		КонецЕсли;
	КонецЦикла;
	
	//Удалим лишние колонки Таблицы изменений
	ТаблицаИзменений.Свернуть(СтрокаДляСверткиТИ);
		
	//Проверим, зарегистрированы ли эти изменения на узлах и если нет - добавим к имеющимся изменениям
	Для каждого СтрокаИсточника Из ДанныеИсточника Цикл
		ЗаполнитьЗначенияСвойств(СтруктураКолонок, СтрокаИсточника);
		МассивСтрокВТИ = ТаблицаИзменений.НайтиСтроки(СтруктураКолонок);
		Если МассивСтрокВТИ.Количество() = 0 Тогда
			//Добавить новую регистрацию в разрезе узлов
			Для каждого УзелПлана Из МассивУзловПолучателей Цикл
				НоваяСтрокаТИ = ТаблицаИзменений.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТИ, СтруктураКолонок);
				НоваяСтрокаТИ.Узел = УзелПлана;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьФайлОтветаHttpСервиса(СтруктураОтвета, ВозвращатьТолькоВес = Ложь) Экспорт
	
	ВременныйКаталог = ФайловаяСистема.СоздатьВременныйКаталог();
	ИмяФайла = Строка(Новый УникальныйИдентификатор);
	ИмяВременногоФайла = ИмяФайла + ".txt";
	ИмяАрхивногоФайла = ИмяФайла + ".zip";
	ПолноеИмяВременногоФайла = ВременныйКаталог + ИмяВременногоФайла;
	ПолноеИмяАрхивногоФайла = ВременныйКаталог + ИмяАрхивногоФайла;

	//Сериализация ответа
	мСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
	мЗаписьJSON = Новый ЗаписьJSON;
	мЗаписьJSON.УстановитьСтроку();
	мСериализаторXDTO.ЗаписатьJSON(мЗаписьJSON, СтруктураОтвета, НазначениеТипаXML.Явное);
	СтрокаРезультат = мЗаписьJSON.Закрыть();
	
	//Запись временного файла ответа
	мФайлJSON = Новый ЗаписьТекста(ПолноеИмяВременногоФайла, КодировкаТекста.UTF8);
	мФайлJSON.Записать(СтрокаРезультат);
	мФайлJSON.Закрыть();
	
	//Архивация ответа с паролем "1"
	ЗаписьZIP = Новый ЗаписьZipФайла(ПолноеИмяАрхивногоФайла,"1");
	ЗаписьZIP.Добавить(ПолноеИмяВременногоФайла, РежимСохраненияПутейZIP.НеСохранятьПути);
	ЗаписьZIP.Записать();
	
	Если ВозвращатьТолькоВес Тогда
		
		ФайлДляРасчетаРазмера = Новый Файл(ПолноеИмяАрхивногоФайла);
		РазмерВыгружаемыхДанных = 0;
		Если ФайлДляРасчетаРазмера.Существует() Тогда
			РазмерВыгружаемыхДанных = ФайлДляРасчетаРазмера.Размер()
		КонецЕсли;
		
		//Удаление временного каталога
		Попытка
		   ФайловаяСистема.УдалитьВременныйКаталог(ВременныйКаталог);
		Исключение
		   ЗаписьЖурналаРегистрации(НСтр("ru = 'Удаление каталога временных файлов'"), УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	    КонецПопытки;
	   
		Возврат РазмерВыгружаемыхДанных;
		
	Иначе
	
		Возврат Новый Структура("ВременныйКаталог, ИмяАрхивногоФайла, ПолноеИмяАрхивногоФайла", ВременныйКаталог, ИмяАрхивногоФайла, ПолноеИмяАрхивногоФайла);
		
	КонецЕсли;

КонецФункции

Функция ПолучитьСтруктуруИзОбъекта(ТипОбъекта, ЭтоГруппа = Ложь) 
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
	СтруктураРеквизитов = Новый Структура("ИмяТипа", МетаданныеТипа.ПолноеИмя());
	
	Если СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "Документ")
		ИЛИ СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "БизнесПроцесс") Тогда
	
		СтруктураТЧ = Новый Структура;
		Для каждого Реквизит из МетаданныеТипа.Реквизиты Цикл
		    СтруктураРеквизитов.Вставить(Реквизит.Имя)
		КонецЦикла;      
		Для каждого СтРеквизит из МетаданныеТипа.СтандартныеРеквизиты Цикл
		    СтруктураРеквизитов.Вставить(СтРеквизит.Имя)
		КонецЦикла;
		// ++ rarus makole 2021-04-02
		ОбщиеРеквизиты = ОбщиеРеквизитыОбъекта(МетаданныеТипа);
		Для каждого ОбщРеквизит из ОбщиеРеквизиты Цикл
		    СтруктураРеквизитов.Вставить(ОбщРеквизит)
		КонецЦикла;
		// -- rarus makole 2021-04-02
		Для каждого ТабличнаяЧасть из МетаданныеТипа.ТабличныеЧасти Цикл
			СтруктураТЧ.Вставить(ТабличнаяЧасть.Имя)
		КонецЦикла;
		Если СтруктураТЧ.Количество() Тогда
			СтруктураРеквизитов.Вставить("ТабличныеЧасти", СтруктураТЧ)
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "Справочник") 
		ИЛИ СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "ПланВидовХарактеристик") Тогда
	
		СтруктураТЧ = Новый Структура;
		Для каждого Реквизит из МетаданныеТипа.Реквизиты Цикл
			Если ЭтоГруппа 
				И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
		    	СтруктураРеквизитов.Вставить(Реквизит.Имя)
			ИначеЕсли НЕ ЭтоГруппа
				И Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
				ИЛИ Реквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
		    	СтруктураРеквизитов.Вставить(Реквизит.Имя)
			КонецЕсли;
		КонецЦикла;      
		// ++ rarus makole 2021-07-21
		ЭтоПВХ = СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "ПланВидовХарактеристик");
		// -- rarus makole 2021-07-21
		Для каждого СтРеквизит из МетаданныеТипа.СтандартныеРеквизиты Цикл
			// ++ rarus makole 2021-07-21
			Если ЭтоПВХ И ЭтоГруппа И СтРеквизит.Имя = "ТипЗначения" Тогда
				Продолжить
			КонецЕсли;
			// -- rarus makole 2021-07-21
		    СтруктураРеквизитов.Вставить(СтРеквизит.Имя)
		КонецЦикла;      
		Для каждого ТабличнаяЧасть из МетаданныеТипа.ТабличныеЧасти Цикл
			Если ЭтоГруппа 
				И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы
				ИЛИ ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
				СтруктураТЧ.Вставить(ТабличнаяЧасть.Имя)
			ИначеЕсли НЕ ЭтоГруппа
				И ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента
				ИЛИ ТабличнаяЧасть.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппыИЭлемента Тогда
				СтруктураТЧ.Вставить(ТабличнаяЧасть.Имя)
			КонецЕсли;
		КонецЦикла;
		Если СтруктураТЧ.Количество() Тогда
			СтруктураРеквизитов.Вставить("ТабличныеЧасти", СтруктураТЧ)
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "РегистрСведений")
		ИЛИ СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "РегистрНакопления") Тогда
		
		Для каждого Измерение из МетаданныеТипа.Измерения Цикл
		    СтруктураРеквизитов.Вставить(Измерение.Имя)
		КонецЦикла;      
		Для каждого СтРеквизит из МетаданныеТипа.СтандартныеРеквизиты Цикл
		    СтруктураРеквизитов.Вставить(СтРеквизит.Имя)
		КонецЦикла;      
		Для каждого Ресурс из МетаданныеТипа.Ресурсы Цикл
		    СтруктураРеквизитов.Вставить(Ресурс.Имя)
		КонецЦикла;      
		Для каждого Реквизит из МетаданныеТипа.Реквизиты Цикл
		    СтруктураРеквизитов.Вставить(Реквизит.Имя)
		КонецЦикла;
		
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "Константа") Тогда
		
		СтруктураРеквизитов.Вставить("Значение")
		
	ИначеЕсли СтрНачинаетсяС(СтруктураРеквизитов.ИмяТипа, "Задача") Тогда

		СтруктураТЧ = Новый Структура;
		Для каждого Реквизит из МетаданныеТипа.Реквизиты Цикл
		    СтруктураРеквизитов.Вставить(Реквизит.Имя)
		КонецЦикла;      
		Для каждого РеквизитАдр из МетаданныеТипа.РеквизитыАдресации Цикл
		    СтруктураРеквизитов.Вставить(РеквизитАдр.Имя)
		КонецЦикла;      
		Для каждого СтРеквизит из МетаданныеТипа.СтандартныеРеквизиты Цикл
		    СтруктураРеквизитов.Вставить(СтРеквизит.Имя)
		КонецЦикла;      
		Для каждого ТабличнаяЧасть из МетаданныеТипа.ТабличныеЧасти Цикл
			СтруктураТЧ.Вставить(ТабличнаяЧасть.Имя)
		КонецЦикла;
		Если СтруктураТЧ.Количество() Тогда
			СтруктураРеквизитов.Вставить("ТабличныеЧасти", СтруктураТЧ)
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураРеквизитов; 
	
КонецФункции
// ++ rarus makole 2021-04-02
Функция ОбщиеРеквизитыОбъекта(ОбъектМетаданных)
	
	МассивОбщихРеквизитов = Новый Массив;
	ОбщиеРеквизиты = Метаданные.ОбщиеРеквизиты;
	Для каждого ОбщийРеквизит Из ОбщиеРеквизиты Цикл
		ЭлементСостава = ОбщийРеквизит.Состав.Найти(ОбъектМетаданных);
		Если ЭлементСостава <> Неопределено
			И ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Использовать Тогда
			МассивОбщихРеквизитов.Добавить(ОбщийРеквизит.Имя)
		КонецЕсли;
	КонецЦикла;
		
	Возврат МассивОбщихРеквизитов;
	
КонецФункции
// -- rarus makole 2021-04-02
Функция ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, Источник, Удаление = Ложь)
	
	//rarus_AfoD 12.07.2021 < 
	УстановитьПривилегированныйРежим(Истина);
	//rarus_AfoD 12.07.2021 > 

	Если Удаление
		И ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
		СтруктураРеквизитов = Новый Структура("ИмяТипа, Ссылка, Удаление", ШаблонСтруктурыРеквизитов.ИмяТипа, Источник, Удаление);
	Иначе 
		СтруктураРеквизитов = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонСтруктурыРеквизитов);
		СтруктураТЧ = ОбщегоНазначения.СкопироватьРекурсивно(ШаблонСтруктурыТЧ);
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Источник)) Тогда
			ОбъектКВыгрузке = Источник.ПолучитьОбъект()
		Иначе
			ОбъектКВыгрузке = Источник
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, ОбъектКВыгрузке);
		Для каждого ТЧ из СтруктураТЧ Цикл
			ТЧОбъекта = ОбъектКВыгрузке[ТЧ.Ключ];
			СтруктураТЧ.Вставить(ТЧ.Ключ, ТЧОбъекта.Выгрузить());
		КонецЦикла;
		Если СтруктураТЧ.Количество() Тогда
			СтруктураРеквизитов.Вставить("ТабличныеЧасти", СтруктураТЧ)
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;
	
КонецФункции

Функция ПолучитьВыборкуИзменений(Узел, Вариант, ПолнаяТаблица = Ложь) Экспорт
	
	СоставПланаОбмена = Узел.Метаданные().Состав;
	СхемаЗапросаПоИзменениям = Новый СхемаЗапроса;
	Пакет0 = СхемаЗапросаПоИзменениям.ПакетЗапросов[0];
	ПакетКонстант = СхемаЗапросаПоИзменениям.ПакетЗапросов.Добавить();
	ПервыйЭлемент = Истина;
	ПервыйЭлементКонстант = Истина;
	ЭтоСудно = ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ();
	Если ЭтоСудно Тогда
		УзелСудна = ПланыОбмена.Полный.ЭтотУзел();
		ТаблицаНастроекВарианта = СоставОбъектовПоВарианту(УзелСудна, Вариант);
	Иначе
		ТаблицаНастроекВарианта = СоставОбъектовПоВарианту(Узел, Вариант);
	КонецЕсли;
	
	Если ТаблицаНастроекВарианта.Количество() = 0 Тогда
		ВызватьИсключение("Настройки выгрузки для данного узла не найдены");
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Соберём текст запроса по составу плана обмена
	Для каждого ЭлементСоставаПланаОбмена Из СоставПланаОбмена Цикл
		
		ПолноеИмяМетаданныхЭлемента = ЭлементСоставаПланаОбмена.Метаданные.ПолноеИмя();
		ИмяМетаданныхЭлемента = ЭлементСоставаПланаОбмена.Метаданные.Имя;
		
		// ПолнаяТаблица - полная выборка
		НетВНастройкахКВыгрузке = ТаблицаНастроекВарианта.НайтиСтроки(Новый Структура("Объект, мВыгружать", ПолноеИмяМетаданныхЭлемента, Истина)).Количество() = 0;
		Если Не ПолнаяТаблица И НетВНастройкахКВыгрузке Тогда
			Продолжить // Формируем запрос только по объектам, включаемым в выгрузку по настройке варианта
		КонецЕсли;
		
		ПсевдонимТаблицыИзменения = "Изм";
				
		Если СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "Документ")
			ИЛИ СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "Справочник") 
			ИЛИ СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "ПланВидовХарактеристик")
			ИЛИ СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "БизнесПроцесс")
			ИЛИ СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "Задача") Тогда
			
			// Всегда есть 1 строка операторов, если это первый элемент запишем в неё
			ОператорВыбораИзменений = ?(ПервыйЭлемент, Пакет0.Операторы[0], Пакет0.Операторы.Добавить());
			ИсточникВыборкиДокумент = ОператорВыбораИзменений.Источники.Добавить(СтрШаблон("%1.Изменения", ПолноеИмяМетаданныхЭлемента), 
										ПсевдонимТаблицыИзменения); 
			ИсточникВыборкиРегистрРазмеров = ОператорВыбораИзменений.Источники.Добавить("РегистрСведений.рарусРазмерыОбъектовВВыгрузке",
										"Разм");
			ИсточникВыборкиОбъект	= ОператорВыбораИзменений.Источники.Добавить(ПолноеИмяМетаданныхЭлемента, "СсОб");//ИмяМетаданныхЭлемента);
			ИсточникВыборкиДокумент.Соединения.Добавить(ИсточникВыборкиРегистрРазмеров, СтрШаблон("%1.Ссылка = Разм.Объект", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.Ссылка", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ТИПЗНАЧЕНИЯ(%1.Ссылка)", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Разм.Размер, 0)");
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ВЫБОР КОГДА %1.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", "СсОб"));
			Если ПолнаяТаблица Тогда
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(Формат(НетВНастройкахКВыгрузке, "Л=ru_RU; БЛ=Истина; БИ=Ложь")) //да - это нет, а нет - это да
			КонецЕсли;
			ОператорВыбораИзменений.Отбор.Добавить(СтрШаблон("%1.Узел = &Узел", ПсевдонимТаблицыИзменения));
			ПервыйЭлемент = Ложь;
			
		ИначеЕсли СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "Регистр") Тогда
			
			МетаданныеРегистра = ЭлементСоставаПланаОбмена.Метаданные;
			ОсновнойОтбор = ОсновнойОтборРегистра(МетаданныеРегистра);
			
			ПакетРегистра = СхемаЗапросаПоИзменениям.ПакетЗапросов.Добавить();
			ИтогиПакета = ПакетРегистра.КонтрольныеТочкиИтогов;
			ВыраженияИтоговПакета = ПакетРегистра.ВыраженияИтогов;
			
			ОператорВыбораИзменений = ПакетРегистра.Операторы[0];
			// Таблицы-источники
			ИсточникВыборкиИзменений = ОператорВыбораИзменений.Источники.Добавить(СтрШаблон("%1.Изменения", ПолноеИмяМетаданныхЭлемента), 
										ПсевдонимТаблицыИзменения);
			ИсточникВыборкиРегистр = ОператорВыбораИзменений.Источники.Добавить(ПолноеИмяМетаданныхЭлемента, "Рег"); 
			ИсточникВыборкиРегистрРазмеров = ОператорВыбораИзменений.Источники.Добавить("РегистрСведений.рарусРазмерыОбъектовВВыгрузке",
										"Разм");//"рарусРазмерыОбъектовВВыгрузке");
			// Соединения по измерениям основного отбора
			ИндексИзмерения = 0;
			Для каждого ИзмерениеРегистра из ОсновнойОтбор Цикл
				ИсточникВыборкиИзменений.Соединения.Добавить(ИсточникВыборкиРегистр,
									СтрШаблон("%1.%2 = %3.%2",ПсевдонимТаблицыИзменения, ИзмерениеРегистра, "Рег"));
				// Выбираемые поля по основному отбору таблицы изменений
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", ПсевдонимТаблицыИзменения, ИзмерениеРегистра));
				// Имена полей по основному отбору таблицы изменений 
				ПакетРегистра.Колонки[ИндексИзмерения].Псевдоним = СтрШаблон("Отбор%1", ИзмерениеРегистра);
				// Итоги по полям основного отбора для выделения наборов записей
				ИтогиПакета.Добавить(СтрШаблон("Отбор%1", ИзмерениеРегистра));
				
				ИндексИзмерения = ИндексИзмерения + 1;
			КонецЦикла;
			
			// Поля запроса по полям регистра
			Для каждого ИзмерениеРегистра Из МетаданныеРегистра.Измерения Цикл
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", "Рег", ИзмерениеРегистра.Имя));
				ПакетРегистра.Колонки[ИндексИзмерения].Псевдоним = ИзмерениеРегистра.Имя;
		   		ИндексИзмерения = ИндексИзмерения + 1;
			КонецЦикла;
			
			Для каждого РесурсРегистра Из МетаданныеРегистра.Ресурсы Цикл
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", "Рег", РесурсРегистра.Имя));
				ПакетРегистра.Колонки[ИндексИзмерения].Псевдоним = РесурсРегистра.Имя;
		   		ИндексИзмерения = ИндексИзмерения + 1;
			КонецЦикла;
			
			Для каждого РеквизитРегистра Из МетаданныеРегистра.Реквизиты Цикл
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", "Рег", РеквизитРегистра.Имя));
				ПакетРегистра.Колонки[ИндексИзмерения].Псевдоним = РеквизитРегистра.Имя;
		   		ИндексИзмерения = ИндексИзмерения + 1;
			КонецЦикла;
			
			Для каждого СтРеквизитРегистра Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.%2", "Рег", СтРеквизитРегистра.Имя));
				ПакетРегистра.Колонки[ИндексИзмерения].Псевдоним = СтРеквизитРегистра.Имя;
		   		ИндексИзмерения = ИндексИзмерения + 1;
			КонецЦикла;
			
			// Соденинение с таблицей размера по узлу
			ИсточникВыборкиИзменений.Соединения.Добавить(ИсточникВыборкиРегистрРазмеров,
									СтрШаблон("%1.Узел = Разм.Узел", ПсевдонимТаблицыИзменения));
			Если ОсновнойОтбор.Найти("Регистратор") <> Неопределено Тогда
				// Если регистр подчинен регистратору, то дополнительный отбор с регистром размеров по владельцу						
				ИсточникВыборкиИзменений.Соединения.Добавить(ИсточникВыборкиРегистрРазмеров,
									СтрШаблон("%1.Регистратор = Разм.Владелец", ПсевдонимТаблицыИзменения))
			КонецЕсли;
			// Соединение с таблицей размера - отбор по идентификатору объектов метаданных					
			ИсточникВыборкиИзменений.Соединения.Добавить(ИсточникВыборкиРегистрРазмеров,
									СтрШаблон("ВЫРАЗИТЬ(Разм.Объект КАК Справочник.ИдентификаторыОбъектовМетаданных).ПолноеИмя = ""%1""", ПолноеИмяМетаданныхЭлемента));
			// Выбираемые поля
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("""%1""",ПолноеИмяМетаданныхЭлемента)); // Тип объекта
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ВЫБОР КОГДА %1.%2 ЕСТЬ NULL ТОГДА 0 ИНАЧЕ ЕСТЬNULL(Разм.Размер, 0) КОНЕЦ", "Рег", ОсновнойОтбор[0]));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ВЫБОР КОГДА %1.%2 ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", "Рег", ОсновнойОтбор[0]));
			// Имена полей
			ПакетРегистра.Колонки[ИндексИзмерения].Псевдоним = "Тип";
			ПакетРегистра.Колонки[ИндексИзмерения + 1].Псевдоним = "РазмерВФайле";
			ПакетРегистра.Колонки[ИндексИзмерения + 2].Псевдоним = "Удаление";
			// Выражения итогов
			ВыраженияИтоговПакета.Добавить("МАКСИМУМ(Тип)");
			ВыраженияИтоговПакета.Добавить("СУММА(РазмерВФайле)");
			
			Если ПолнаяТаблица Тогда
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(Формат(НетВНастройкахКВыгрузке, "Л=ru_RU; БЛ=Истина; БИ=Ложь"));  // да - это нет, а нет - это да
				ПакетРегистра.Колонки[ИндексИзмерения + 3].Псевдоним = "мВыгружать";
				ВыраженияИтоговПакета.Добавить("МАКСИМУМ(мВыгружать)");
			КонецЕсли;
			
			ОператорВыбораИзменений.Отбор.Добавить(СтрШаблон("%1.Узел = &Узел", ПсевдонимТаблицыИзменения));
		ИначеЕсли СтрНачинаетсяС(ПолноеИмяМетаданныхЭлемента, "Константа") Тогда
			
			ОператорВыбораИзменений = ?(ПервыйЭлементКонстант, ПакетКонстант.Операторы[0], ПакетКонстант.Операторы.Добавить());
			ИсточникВыборкиКонстантаИзменения = ОператорВыбораИзменений.Источники.Добавить(СтрШаблон("%1.Изменения", ПолноеИмяМетаданныхЭлемента), 
										ПсевдонимТаблицыИзменения); 
			ИсточникВыборкиРегистрРазмеров = ОператорВыбораИзменений.Источники.Добавить("РегистрСведений.рарусРазмерыОбъектовВВыгрузке",
										"Разм");
			ИсточникВыборкиКонстанта	= ОператорВыбораИзменений.Источники.Добавить(ПолноеИмяМетаданныхЭлемента, "Конст");
			ИсточникВыборкиКонстантаИзменения.Соединения.Добавить(ИсточникВыборкиКонстанта, "ИСТИНА");
			ИсточникВыборкиКонстанта.Соединения.Добавить(ИсточникВыборкиРегистрРазмеров, СтрШаблон("ВЫБОР КОГДА ВЫРАЗИТЬ(Разм.Объект КАК Справочник.ИдентификаторыОбъектовМетаданных).ПолноеИмя = ""%1"" ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", ПолноеИмяМетаданныхЭлемента));
			Если ЭлементСоставаПланаОбмена.Метаданные.Тип = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(0)) Тогда
				ДлинаСтрокиЗначения = СтрДлина(Константы[ИмяМетаданныхЭлемента].Получить());
				Если ДлинаСтрокиЗначения > 1024 Тогда
					ПакетКонстант.Операторы.Удалить(ПакетКонстант.Операторы.Индекс(ОператорВыбораИзменений));
					Продолжить // Ограничение платформы
				Иначе
					ДлинаСтрокиЗначения = ?(ДлинаСтрокиЗначения = 0, 10, ДлинаСтрокиЗначения);
					ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ВЫРАЗИТЬ(%1.Значение КАК Строка(%2))", "Конст", Формат(ДлинаСтрокиЗначения, "ЧГ=0")), 0);
				КонецЕсли;
			Иначе
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.Значение", "Конст"), 0);
			КонецЕсли;
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("""КонстантаМенеджер.%1""", ИмяМетаданныхЭлемента));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("ЕСТЬNULL(Разм.Размер, 0)");
			Если ПолнаяТаблица Тогда
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(Формат(НетВНастройкахКВыгрузке, "Л=ru_RU; БЛ=Истина; БИ=Ложь")) //да - это нет, а нет - это да
			КонецЕсли;
			ОператорВыбораИзменений.Отбор.Добавить(СтрШаблон("%1.Узел = &Узел", ПсевдонимТаблицыИзменения));
			ПервыйЭлементКонстант = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Пакет0.Колонки[0].Псевдоним = "Ссылка";
	Пакет0.Колонки[1].Псевдоним = "Тип";
	Пакет0.Колонки[2].Псевдоним = "РазмерВФайле";
	Пакет0.Колонки[3].Псевдоним = "Удаление";
	
	Если ПакетКонстант.Колонки.Количество() = 0 Тогда // Констант в настройках может не быть
		ОператорВыбораИзменений = ПакетКонстант.Операторы[0];
		ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("ИСТИНА");
		ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("""ПустаяКонстанта""");
		ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("0");
	КонецЕсли;
	
	ПакетКонстант.Колонки[0].Псевдоним = "Значение";
	ПакетКонстант.Колонки[1].Псевдоним = "Тип";
	ПакетКонстант.Колонки[2].Псевдоним = "РазмерВФайле";
	
	Если ПолнаяТаблица Тогда
		Пакет0.Колонки[4].Псевдоним = "мВыгружать";
		ПакетКонстант.Колонки[3].Псевдоним = "мВыгружать";
	КонецЕсли;
	
	Пакет0.ВыраженияИтогов.Добавить("СУММА(РазмерВФайле)");
	Пакет0.КонтрольныеТочкиИтогов.Добавить("Тип");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапросаПоИзменениям.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Узел", Узел);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ПолучитьОбъектыКВыгрузке(Узел, Вариант) Экспорт
	
	ОбъектыКВыгрузке = Новый Массив;
	МассивДляПовторнойРегистрации = Новый Массив;
	
	// Массив пакетов. В пакете 0 - ссылочные с группировкой по типу, в остальных - изменения по регистрам
	РезультатЗапроса = ПолучитьВыборкуИзменений(Узел, Вариант, Истина); 
	
	ВыборкаСсылочные = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	//++ Рарус Кукулин 15.11.20 БСО.СМ.006
	ВыборкаКритичные = ?(Вариант = 0, Неопределено, ПолучитьВыборкуКритичныхДанных(РезультатЗапроса,Узел,Вариант,Истина));
	
	Если ВыборкаКритичные <> Неопределено Тогда
		Пока ВыборкаКритичные.Следующий() Цикл
			МетаданныеТипа = Метаданные.НайтиПоТипу(ВыборкаКритичные.Тип);
			ШаблонСтруктурыРеквизитов = ПолучитьСтруктуруИзОбъекта(ВыборкаКритичные.Тип);
			ШаблонСтруктурыТЧ = ?(ШаблонСтруктурыРеквизитов.Свойство("ТабличныеЧасти"),
			ШаблонСтруктурыРеквизитов.ТабличныеЧасти,
			Новый Структура);
			
			// ++ rarus makole 2020-11-28
			// Обработка иерархических объектов
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеТипа)
				ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеТипа) Тогда				
				ШаблонСтруктурыРеквизитовГруппа = ПолучитьСтруктуруИзОбъекта(ВыборкаКритичные.Тип, Истина);
				ШаблонСтруктурыТЧГруппа = ?(ШаблонСтруктурыРеквизитовГруппа.Свойство("ТабличныеЧасти"),
								ШаблонСтруктурыРеквизитов.ТабличныеЧасти,
								Новый Структура);
			КонецЕсли;
			// -- rarus makole 2020-11-28
				
			ВыборкаДетальныеЗаписи = ВыборкаКритичные.Выбрать();
				
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				// ++ rarus makole 2020-11-28
				// Обработка иерархических объектов
				Если ШаблонСтруктурыРеквизитов.Свойство("ЭтоГруппа")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Ссылка, "ЭтоГруппа") = Истина Тогда
					СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитовГруппа, ШаблонСтруктурыТЧГруппа, ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Удаление);
				Иначе
					СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Удаление);
				КонецЕсли;
				// -- rarus makole 2020-11-28
				Если ВыборкаДетальныеЗаписи.мВыгружать Тогда
					// ++ rarus makole 2020-11-28
					//СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, ВыборкаДетальныеЗаписи.Ссылка);
					// -- rarus makole 2020-11-28
					ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
				Иначе
					// Чтобы не потерять регистрацию объектов после частичной выгрузки, будем снова регистрировать их к обмену
					// ++ rarus makole 2020-11-28
					//МассивДляПовторнойРегистрации.Добавить(ВыборкаДетальныеЗаписи.Ссылка)
					МассивДляПовторнойРегистрации.Добавить(СтруктураРеквизитов)
					// -- rarus makole 2020-11-28
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	//-- Рарус Кукулин 15.11.20 БСО.СМ.006
	
	Пока ВыборкаСсылочные.Следующий() Цикл // Обход по типам ссылочных объектов
		
		МетаданныеТипа = Метаданные.НайтиПоТипу(ВыборкаСсылочные.Тип);
		
		//Структура объекта
		ШаблонСтруктурыРеквизитов = ПолучитьСтруктуруИзОбъекта(ВыборкаСсылочные.Тип);
		//У справочника пользователей не нужно передавать реквизиты, связанные с пользователем ИБ
		Если ВыборкаСсылочные.Тип = Тип("СправочникСсылка.Пользователи") Тогда
			ШаблонСтруктурыРеквизитов.Удалить("ИдентификаторПользователяИБ");
			ШаблонСтруктурыРеквизитов.Удалить("ИдентификаторПользователяСервиса");
			ШаблонСтруктурыРеквизитов.Удалить("СвойстваПользователяИБ");
		КонецЕсли;
		ШаблонСтруктурыТЧ = ?(ШаблонСтруктурыРеквизитов.Свойство("ТабличныеЧасти"),
						ШаблонСтруктурыРеквизитов.ТабличныеЧасти,
						Новый Структура);
						
		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеТипа)
			ИЛИ ОбщегоНазначения.ЭтоПланВидовХарактеристик(МетаданныеТипа) Тогда				
							
			ШаблонСтруктурыРеквизитовГруппа = ПолучитьСтруктуруИзОбъекта(ВыборкаСсылочные.Тип, Истина);
			ШаблонСтруктурыТЧГруппа = ?(ШаблонСтруктурыРеквизитовГруппа.Свойство("ТабличныеЧасти"),
							ШаблонСтруктурыРеквизитов.ТабличныеЧасти,
							Новый Структура);
		КонецЕсли;
						
		ВыборкаДетальныеЗаписи = ВыборкаСсылочные.Выбрать();
	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ШаблонСтруктурыРеквизитов.Свойство("ЭтоГруппа")
				И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыборкаДетальныеЗаписи.Ссылка, "ЭтоГруппа") = Истина Тогда
				СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитовГруппа, ШаблонСтруктурыТЧГруппа, ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Удаление);
			Иначе
				СтруктураРеквизитов = ЗаполнитьСтруктуруДаннымиОбъекта(ШаблонСтруктурыРеквизитов, ШаблонСтруктурыТЧ, ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Удаление);
			КонецЕсли;
			
			Если ВыборкаДетальныеЗаписи.мВыгружать Тогда
				ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов);
			ИначеЕсли НЕ ОбъектЕстьВМассиве(ОбъектыКВыгрузке, СтруктураРеквизитов) Тогда // Проверка на присутствие объекта в выгрузке на случай добавления его как критичного
				// Чтобы не потерять регистрацию объектов после частичной выгрузки, будем снова регистрировать их к обмену
				МассивДляПовторнойРегистрации.Добавить(СтруктураРеквизитов)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ВыборкаКонстанты = РезультатЗапроса[1].Выбрать();
	Пока ВыборкаКонстанты.Следующий() Цикл
		Если Не ВыборкаКонстанты.Тип = "ПустаяКонстанта" Тогда
			СтруктураРеквизитов = ПолучитьСтруктуруИзОбъекта(ТИП(ВыборкаКонстанты.Тип));
			СтруктураРеквизитов.Значение = ВыборкаКонстанты.Значение;
			Если ВыборкаКонстанты.мВыгружать Тогда
				ОбъектыКВыгрузке.Добавить(СтруктураРеквизитов)
			Иначе 
				МассивДляПовторнойРегистрации.Добавить(СтруктураРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	КоличествоПакетов = РезультатЗапроса.Количество(); 
	Если КоличествоПакетов > 2 Тогда
		Для Пакет = 2 По КоличествоПакетов - 1 Цикл
			ВыборкаДляТипа = РезультатЗапроса[Пакет].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ВыборкаДляТипа.Следующий() Тогда
				
				ТаблицаРегистра = Новый ТаблицаЗначений;
				Для каждого КолонкаРегистра Из РезультатЗапроса[Пакет].Колонки Цикл
					ТаблицаРегистра.Колонки.Добавить(КолонкаРегистра.Имя, Новый ОписаниеТипов(КолонкаРегистра.ТипЗначения));
				КонецЦикла;
				ТаблицаКВыгрузке = ТаблицаРегистра.СкопироватьКолонки();
				ТаблицаКПовторнойРегистрации = ТаблицаРегистра.СкопироватьКолонки();
				
				ОсновнойОтборРегистра = ОсновнойОтборРегистра(Метаданные.НайтиПоПолномуИмени(ВыборкаДляТипа.Тип));
				ОтборНабораЗаписей = Новый Структура;
				СтруктураОтбора = Неопределено;
				Для каждого ПолеОсновногоОтбора Из ОсновнойОтборРегистра Цикл
					КлючОтбора = СтрШаблон("Отбор%1", ПолеОсновногоОтбора); 
					ОтборНабораЗаписей.Вставить(КлючОтбора); 
				КонецЦикла;
			    ПоследнийУровеньГруппировки = ОсновнойОтборРегистра.Количество() - 1;
				
				ВыборкаПакета = РезультатЗапроса[Пакет].Выбрать();
				Пока ВыборкаПакета.Следующий() Цикл
					Если ВыборкаПакета.ТипЗаписи() = ТипЗаписиЗапроса.ИтогПоГруппировке
						И ВыборкаПакета.Уровень() = ПоследнийУровеньГруппировки Тогда
						
						// Сохраним предыдущий набор
						Если ТаблицаКВыгрузке.Количество() > 0 Тогда
							ДобавитьТаблицуВМассив(ВыборкаДляТипа.Тип, ОбъектыКВыгрузке, СтруктураОтбора, ТаблицаКВыгрузке);
							ТаблицаКВыгрузке = ТаблицаРегистра.СкопироватьКолонки();
						КонецЕсли;
						
						Если ТаблицаКПовторнойРегистрации.Количество() > 0 Тогда
							ДобавитьТаблицуВМассив(ВыборкаДляТипа.Тип, ОбъектыКВыгрузке, СтруктураОтбора, ТаблицаКПовторнойРегистрации);
							ТаблицаКПовторнойРегистрации = ТаблицаРегистра.СкопироватьКолонки();
						КонецЕсли;	
						
						// Готовим новый набор
						СтруктураОтбора = ОбщегоНазначения.СкопироватьРекурсивно(ОтборНабораЗаписей);
						ЗаполнитьЗначенияСвойств(СтруктураОтбора, ВыборкаПакета);
						
					ИначеЕсли ВыборкаПакета.ТипЗаписи() = ТипЗаписиЗапроса.ДетальнаяЗапись Тогда
						
						Если ВыборкаПакета.мВыгружать Тогда
							СтрокаКВыгрузке = ТаблицаКВыгрузке.Добавить();
						    ЗаполнитьЗначенияСвойств(СтрокаКВыгрузке, ВыборкаПакета);
						Иначе
							// Чтобы не потерять регистрацию изменений регистра после частичной выгрузки, будем снова регистрировать их к обмену
							СтрокаКПовторнойРегистрации = ТаблицаКПовторнойРегистрации.Добавить();
							ЗаполнитьЗначенияСвойств(СтрокаКПовторнойРегистрации, ВыборкаПакета);
						КонецЕсли;
					КонецЕсли;
										
				КонецЦикла;
				
				// Сохраним последний набор
				Если ТаблицаКВыгрузке.Количество() > 0 Тогда
					ДобавитьТаблицуВМассив(ВыборкаДляТипа.Тип, ОбъектыКВыгрузке, СтруктураОтбора, ТаблицаКВыгрузке);
				КонецЕсли;
				
				Если ТаблицаКПовторнойРегистрации.Количество() > 0 Тогда
					ДобавитьТаблицуВМассив(ВыборкаДляТипа.Тип, МассивДляПовторнойРегистрации, СтруктураОтбора, ТаблицаКПовторнойРегистрации);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ДобавитьДвоичныеДанные(ОбъектыКВыгрузке, МассивДляПовторнойРегистрации);
	
	Возврат Новый Структура("ОбъектыКВыгрузке, МассивДляПовторнойРегистрации", ОбъектыКВыгрузке, МассивДляПовторнойРегистрации);
	
КонецФункции

Функция ОбъектЕстьВМассиве(ПроверяемыйМассив, СтруктураОбъекта)
	
	ЕстьОбъект = Ложь;
	
	Для каждого ЭлементМассива Из ПроверяемыйМассив Цикл
		Если ОбщегоНазначения.ДанныеСовпадают(ЭлементМассива, СтруктураОбъекта) Тогда
			ЕстьОбъект = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОбъект;
	
КонецФункции

Функция ПолучитьСписокКВыгрузке(Узел, Вариант) Экспорт
	
	СписокКВыгрузке = Новый Структура;
	Документов = 0;
	РазмерДокументов = 0;
	Справочников = 0;
	РазмерСправочников = 0;
	Файлов = 0;
	РазмерФайлов = 0;
	Регистров = 0;
	РазмерРегистров = 0;
	
	РезультатЗапроса = ПолучитьВыборкуИзменений(Узел, Вариант);
	ВыборкаСсылочные = РезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаКонстант = РезультатЗапроса[1].Выгрузить();
	
	//++ Рарус Кукулин 15.11.20 БСО.СМ.006
	КритичныхДанных = 0;
	РазмерКритичныхДанных = 0;
	
	ВыборкаКритичные = ПолучитьВыборкуКритичныхДанных(РезультатЗапроса, Узел, Вариант);
	МассивКритичных = Новый Массив;
	Если ВыборкаКритичные <> Неопределено Тогда
		Пока ВыборкаКритичные.Следующий() Цикл
			
			ВыборкаДетальныеЗаписи = ВыборкаКритичные.Выбрать();
			
			КоличествоОбъектов = ВыборкаДетальныеЗаписи.Количество();
					
			КритичныхДанных = КритичныхДанных + КоличествоОбъектов;
			РазмерКритичныхДанных = РазмерКритичныхДанных + ВыборкаКритичные.РазмерВФайле;
			
		КонецЦикла;
	КонецЕсли;
	//-- Рарус Кукулин 15.11.20 БСО.СМ.006
	
	Пока ВыборкаСсылочные.Следующий() Цикл
		
		//Структура объекта
		МетаданныеТипа = Метаданные.НайтиПоТипу(ВыборкаСсылочные.Тип);
		ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа);
		ЭтоФайл = СтрНайти(МетаданныеТипа.ПолноеИмя(), "ПрисоединенныеФайлы") <> 0;
		ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(МетаданныеТипа) И НЕ ЭтоФайл;
		
		ВыборкаДетальныеЗаписи = ВыборкаСсылочные.Выбрать();
	
		КоличествоОбъектов = ВыборкаДетальныеЗаписи.Количество();
		
		Если ЭтоДокумент Тогда
			Документов = Документов + КоличествоОбъектов;
			РазмерДокументов = РазмерДокументов + ВыборкаСсылочные.РазмерВФайле;
		ИначеЕсли ЭтоСправочник Тогда
			Справочников = Справочников + КоличествоОбъектов;
			РазмерСправочников = РазмерСправочников + ВыборкаСсылочные.РазмерВФайле;
		ИначеЕсли ЭтоФайл Тогда 
			Файлов = Файлов + КоличествоОбъектов;
			РазмерФайлов = РазмерФайлов + ВыборкаСсылочные.РазмерВФайле;
		КонецЕсли;
		
	КонецЦикла;
	
	РазмерКонстант = ТаблицаКонстант.Итог("РазмерВФайле");
	Если РазмерКонстант > 0 Тогда
		Регистров = Регистров + ТаблицаКонстант.Количество(); // Регистры и константы выгружаем в один
		РазмерРегистров = РазмерРегистров + РазмерКонстант;	  // показатель "ВспомогательныеДанные"
	КонецЕсли;
	
	КоличествоПакетов = РезультатЗапроса.Количество(); 
	Если КоличествоПакетов > 2 Тогда
		Для Пакет = 2 По КоличествоПакетов - 1 Цикл
			ДеревоИзмененийРегистра = РезультатЗапроса[Пакет].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
			Если ДеревоИзмененийРегистра.Строки.Количество() = 0
				ИЛИ (ДеревоИзмененийРегистра.Строки.Количество() > 0
				И ДеревоИзмененийРегистра.Строки[0].Тип = "РегистрСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег") Тогда // Настройки не учитываем, они сразу отправляются
				Продолжить
			КонецЕсли;
			
			Если ДеревоИзмененийРегистра.Колонки.Найти("Регистратор") = Неопределено Тогда
				Регистров = Регистров + 1;
				РазмерРегистров = РазмерРегистров + ДеревоИзмененийРегистра.Строки.Итог("РазмерВФайле");
			Иначе
				РазмерДокументов = РазмерДокументов + ДеревоИзмененийРегистра.Строки.Итог("РазмерВФайле") // Движения документа относим к самому документу
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;	
	
	СписокКВыгрузке.Вставить("Документы", СтрШаблон("%1;%2", Формат(Документов, "ЧГ=0"), Формат(Окр((РазмерДокументов) / 1024,2,РежимОкругления.Окр15как20), "ЧГ=0")));
	СписокКВыгрузке.Вставить("Справочники", СтрШаблон("%1;%2", Формат(Справочников, "ЧГ=0"), Формат(Окр((РазмерСправочников) / 1024,2,РежимОкругления.Окр15как20), "ЧГ=0")));
	СписокКВыгрузке.Вставить("Файлы", СтрШаблон("%1;%2", Формат(Файлов, "ЧГ=0"), Формат(Окр((РазмерФайлов) / 1024,2,РежимОкругления.Окр15как20), "ЧГ=0")));
	СписокКВыгрузке.Вставить("СлужебныеДанные", СтрШаблон("%1;%2", Формат(Регистров, "ЧГ=0"), Формат(Окр((РазмерРегистров) / 1024,2,РежимОкругления.Окр15как20), "ЧГ=0")));
	//++ Рарус Кукулин 15.11.20 БСО.СМ.006
	СписокКВыгрузке.Вставить("КритичныеДанные", СтрШаблон("%1;%2", Формат(КритичныхДанных, "ЧГ=0"), Формат(Окр((РазмерКритичныхДанных) / 1024,2,РежимОкругления.Окр15как20), "ЧГ=0")));
	//-- Рарус Кукулин 15.11.20 БСО.СМ.006
	
	Возврат СписокКВыгрузке;
	
КонецФункции

Процедура ОбработатьМассивЗагруженныхОбъектов(МассивОбъектов, УзелПланаОбмена) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для каждого СтруктураОбъекта Из МассивОбъектов Цикл
		
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(СтруктураОбъекта.ИмяТипа);
		ОбъектНеВСоставеКонфигурации = МетаданныеОбъекта = Неопределено;
		
		Если ОбъектНеВСоставеКонфигурации Тогда // В ЦБ появился новый объект, которого ещё нет в узле, не грузим его
			Продолжить
		КонецЕсли;
		
		//rarus_AfoD 12.07.2021 < // важно исключить из обмена
		Если СтруктураОбъекта.ИмяТипа = "РегистрСведений.ВерсииПодсистем"
			ИЛИ СтруктураОбъекта.ИмяТипа = "РегистрСведений.ВерсииПодсистемОбластейДанных" Тогда
			Продолжить;
		КонецЕсли; 
		//rarus_AfoD 12.07.2021 > 
		
		// Новый объект могли забыть внести в состав плана обмена в текущей версии конфигурации узла,
		// для них не нужно указывать ОбменДанными.Отправитель
		ОбъектВСоставеПлана = Не УзелПланаОбмена.Метаданные().Состав.Найти(МетаданныеОбъекта) = Неопределено;
		
		Если СтруктураОбъекта.Свойство("Ссылка") Тогда
		
			ПолученныйОбъект = СтруктураОбъекта.Ссылка.ПолучитьОбъект();
			ЭтоНовыйОбъект = ПолученныйОбъект = Неопределено;
			
			Если ЭтоНовыйОбъект 
				И СтруктураОбъекта.Свойство("Удаление")
				И СтруктураОбъекта.Удаление Тогда
				Продолжить; // Пришло удаление объекта, которого ещё нет в базе. Просто игнорируем
			ИначеЕсли ЭтоНовыйОбъект Тогда
				МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъекта.ИмяТипа);
				
				Если СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "Документ") Тогда
					ПолученныйОбъект = МенеджерОбъекта.СоздатьДокумент()
				ИначеЕсли СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "Справочник") 
					ИЛИ СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "ПланВидовХарактеристик") Тогда
					Если СтруктураОбъекта.Свойство("ЭтоГруппа") И СтруктураОбъекта.ЭтоГруппа Тогда
						ПолученныйОбъект = МенеджерОбъекта.СоздатьГруппу()
					Иначе
						ПолученныйОбъект = МенеджерОбъекта.СоздатьЭлемент()
					КонецЕсли;
				ИначеЕсли СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "БизнесПроцесс") Тогда
					ПолученныйОбъект = МенеджерОбъекта.СоздатьБизнесПроцесс()
				ИначеЕсли СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "Задача") Тогда
					ПолученныйОбъект = МенеджерОбъекта.СоздатьЗадачу()
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ПолученныйОбъект, СтруктураОбъекта);
				ПолученныйОбъект.УстановитьСсылкуНового(СтруктураОбъекта.Ссылка);
			Иначе
				
				Если СтруктураОбъекта.Свойство("Удаление")
					И СтруктураОбъекта.Удаление Тогда
					УдалениеОбъекта = Новый УдалениеОбъекта(СтруктураОбъекта.Ссылка);
					УдалениеОбъекта.ОбменДанными.Загрузка = Истина;
					Если ОбъектВСоставеПлана Тогда
						УдалениеОбъекта.ОбменДанными.Отправитель = УзелПланаОбмена
					КонецЕсли;
					УдалениеОбъекта.Записать();
					Продолжить;
				КонецЕсли;
				
			   	ЗаполнитьЗначенияСвойств(ПолученныйОбъект, СтруктураОбъекта);
			КонецЕсли;
			
			Если СтруктураОбъекта.Свойство("ТабличныеЧасти") Тогда
				Для каждого ТЧ Из СтруктураОбъекта.ТабличныеЧасти Цикл
					ПолученныйОбъект[ТЧ.Ключ].Загрузить(ТЧ.Значение);
				КонецЦикла;
			КонецЕсли;
			
			ПолученныйОбъект.ОбменДанными.Загрузка = Истина;
			Если ОбъектВСоставеПлана Тогда
				ПолученныйОбъект.ОбменДанными.Отправитель = УзелПланаОбмена;
			КонецЕсли;
			
			// ++ rarus makole 2021-03-22 [28073]
			// Не открываются файлы к Акту оказанию услуг в рабочей, при этом в ЦБ они читаются и открываются нормально
			// Сохраним полученные двоичные данные файла
			ТипПолученногоОбъекта = ТипЗнч(ПолученныйОбъект);  
			Если Метаданные.ОпределяемыеТипы.ПрисоединенныйФайлОбъект.Тип.СодержитТип(ТипПолученногоОбъекта)
				И СтруктураОбъекта.Свойство("ДД") Тогда
				ЗаписатьДвоичныеДанныеПолученногоФайла(ПолученныйОбъект, СтруктураОбъекта);
				Продолжить; // Файл записывается при записи двоичных данных
			КонецЕсли;
			// -- rarus makole 2021-03-22 [28073]
			
			ПолученныйОбъект.Записать();
			
			// ++ rarus makole 2021-03-22
			// Сохраним полученные двоичные данные файла
			//ТипПолученногоОбъекта = ТипЗнч(ПолученныйОбъект.Ссылка);
			//Если Метаданные.ОпределяемыеТипы.ПрисоединенныйФайл.Тип.СодержитТип(ТипПолученногоОбъекта)
			//	И СтруктураОбъекта.Свойство("ДД") Тогда
			//	ЗаписатьДвоичныеДанныеПолученногоФайла(ПолученныйОбъект.Ссылка, СтруктураОбъекта);
			//КонецЕсли;
			// -- rarus makole 2021-03-22
			
		ИначеЕсли СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "Регистр") Тогда
			
			МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(СтруктураОбъекта.ИмяТипа);
			МассивЭлементовОсновногоОтбораРегистра = ОсновнойОтборРегистра(МетаданныеРегистра);
			
			НовыйНабор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъекта.ИмяТипа).СоздатьНаборЗаписей();
			Для каждого ЭлементОтбора Из МассивЭлементовОсновногоОтбораРегистра Цикл
				НовыйНабор.Отбор[ЭлементОтбора].Установить(СтруктураОбъекта.ОтборНабора["Отбор" + ЭлементОтбора]);
			КонецЦикла;
				
			// ++ rarus makole 2021-03-22
			Если СтруктураОбъекта.ИмяТипа = "РегистрСведений.СведенияОФайлах" Тогда
				ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов()
			КонецЕсли;
			// -- rarus makole 2021-03-22
				
			Для каждого ЗаписьРегистра Из СтруктураОбъекта.Записи Цикл
				
				Если ЗаписьРегистра.Удаление Тогда
					Продолжить
				КонецЕсли;
				
				НоваяЗапись = НовыйНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьРегистра);
				// ++ rarus makole 2021-03-22
				Если СтруктураОбъекта.ИмяТипа = "РегистрСведений.СведенияОФайлах" Тогда
					НоваяЗапись.ТипХраненияФайла = ТипХраненияФайла
				КонецЕсли;
				// -- rarus makole 2021-03-22
				
			КонецЦикла;
			
			НовыйНабор.ОбменДанными.Загрузка = Истина;
			Если ОбъектВСоставеПлана Тогда
				НовыйНабор.ОбменДанными.Отправитель = УзелПланаОбмена;
			КонецЕсли;
			
		   	НовыйНабор.Записать(Истина);
			
		ИначеЕсли СтрНачинаетсяС(СтруктураОбъекта.ИмяТипа, "Константа") Тогда
			
			КонстантаМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъекта.ИмяТипа);
			МенеджерЗначения = КонстантаМенеджер.СоздатьМенеджерЗначения();
			МенеджерЗначения.Значение = СтруктураОбъекта.Значение;
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			Если ОбъектВСоставеПлана Тогда
				МенеджерЗначения.ОбменДанными.Отправитель = УзелПланаОбмена;
			КонецЕсли;
			МенеджерЗначения.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СоставОбъектовПоВарианту(Узел, Вариант) Экспорт
	
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Узел, "Код");
	Если Вариант = 0 Тогда // Обмен служебной информацией, по любому варианту выгружаем только настройки
		СоставОбъектов = Новый ТаблицаЗначений;
		СоставОбъектов.Колонки.Добавить("Объект", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(70)));
		СоставОбъектов.Колонки.Добавить("мВыгружать", Новый ОписаниеТипов("Булево"));
		СоставОбъектов.Колонки.Добавить("мЗагружать", Новый ОписаниеТипов("Булево"));
		
		СтрокаСостава = СоставОбъектов.Добавить();
		СтрокаСостава.Объект = "РегистрСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег";
		СтрокаСостава.мВыгружать = Истина;
		СтрокаСостава.мЗагружать = Истина;
		
		Возврат СоставОбъектов;
	Иначе
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИдентификаторыОбъектовМетаданных.ПолноеИмя КАК Объект,
			|	рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.Выгружать КАК мВыгружать,
			|	рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.Загружать КАК мЗагружать
			|ИЗ
			|	РегистрСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег КАК рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК ИдентификаторыОбъектовМетаданных
			|		ПО рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.Объект = ИдентификаторыОбъектовМетаданных.Ссылка
			|			И (рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.КодУзла = &КодУзла)
			|			И (рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.Вариант = &Вариант)";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("Вариант", Вариант);
		Запрос.УстановитьПараметр("КодУзла", КодУзла);
		
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции
//++ Рарус Кукулин 26.11.20 БСО.СМ.005
Функция ПолучитьВыборкуКритичныхДанных(РезультатЗапросаПоОсновнойНастройке,Узел,Вариант,ПолнаяТаблица = Ложь)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект КАК Ссылка,
		|	ТИПЗНАЧЕНИЯ(рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект) КАК Тип
		|ИЗ
		|	РегистрСведений.рарусКритичныеДанныеДляВыгрузкиНаСудно КАК рарусКритичныеДанныеДляВыгрузкиНаСудно
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусРазмерыОбъектовВВыгрузке КАК рарусРазмерыОбъектовВВыгрузке
		|		ПО рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект = рарусРазмерыОбъектовВВыгрузке.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект,
		|	ТИПЗНАЧЕНИЯ(рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Тип
		|ИТОГИ ПО
		|	Тип
		|АВТОУПОРЯДОЧИВАНИЕ");
	Запрос.УстановитьПараметр("Вариант",Вариант);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	КонецЕсли;
	
	МассивУжеВыгружаемых = Новый Массив;
	ВыборкаПоОсновнойНастройке = РезультатЗапросаПоОсновнойНастройке[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОсновнойНастройке.Следующий() Цикл
		ВыборкаПоОсновнойНастройкеДЗ = ВыборкаПоОсновнойНастройке.Выбрать();
		Пока ВыборкаПоОсновнойНастройкеДЗ.Следующий() Цикл
			Если ПолнаяТаблица Тогда
				Если ВыборкаПоОсновнойНастройкеДЗ.мВыгружать Тогда
					МассивУжеВыгружаемых.Добавить(ВыборкаПоОсновнойНастройкеДЗ.Ссылка);
				КонецЕсли;
			Иначе
				МассивУжеВыгружаемых.Добавить(ВыборкаПоОсновнойНастройкеДЗ.Ссылка);
			КонецЕсли;					
		КонецЦикла;
	КонецЦикла;
	
	СхемаЗапросаПоИзменениям = Новый СхемаЗапроса;
	Пакет0 = СхемаЗапросаПоИзменениям.ПакетЗапросов[0];
	ПервыйЭлемент = Истина;
	ТаблицаНастроекВарианта = СоставОбъектовПоВарианту(Узел, Вариант);		
	МассивСсылокОтбора = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		ВыборкаДетЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетЗаписи.Следующий() Цикл
			МассивСсылокОтбора.Добавить(ВыборкаДетЗаписи.Ссылка);
		КонецЦикла;
		
		ТекМетаданные = Метаданные.НайтиПоТипу(Выборка.Тип);
		ПолноеИмяМетаданныхЭлемента = ТекМетаданные.ПолноеИмя();
		ИмяМетаданныхЭлемента = ТекМетаданные.Имя;
		
		ПсевдонимТаблицыИзменения = СтрШаблон("%1Изменения", ИмяМетаданныхЭлемента);
				
			
			// Всегда есть 1 строка операторов, если это первый элемент запишем в неё
			ОператорВыбораИзменений = ?(ПервыйЭлемент, Пакет0.Операторы[0], Пакет0.Операторы.Добавить());
			ИсточникВыборкиДокумент = ОператорВыбораИзменений.Источники.Добавить(СтрШаблон("%1.Изменения", ПолноеИмяМетаданныхЭлемента), 
										ПсевдонимТаблицыИзменения); 
			ИсточникВыборкиРегистрРазмеров = ОператорВыбораИзменений.Источники.Добавить("РегистрСведений.рарусРазмерыОбъектовВВыгрузке",
										"рарусРазмерыОбъектовВВыгрузке");
			ИсточникВыборкиОбъект	= ОператорВыбораИзменений.Источники.Добавить(ПолноеИмяМетаданныхЭлемента, ИмяМетаданныхЭлемента);
			ИсточникВыборкиДокумент.Соединения.Добавить(ИсточникВыборкиРегистрРазмеров, СтрШаблон("%1.Ссылка = рарусРазмерыОбъектовВВыгрузке.Объект", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("%1.Ссылка", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ТИПЗНАЧЕНИЯ(%1.Ссылка)", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("ЕСТЬNULL(рарусРазмерыОбъектовВВыгрузке.Размер, 0)");
			ОператорВыбораИзменений.ВыбираемыеПоля.Добавить(СтрШаблон("ВЫБОР КОГДА %1.Ссылка ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ", ИмяМетаданныхЭлемента));
			Если ПолнаяТаблица Тогда
				ОператорВыбораИзменений.ВыбираемыеПоля.Добавить("Истина"); 
			КонецЕсли;
			ОператорВыбораИзменений.Отбор.Добавить(СтрШаблон("%1.Узел = &Узел", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.Отбор.Добавить(СтрШаблон("%1.Ссылка В (&МассивСсылокОтбора)", ПсевдонимТаблицыИзменения));
			ОператорВыбораИзменений.Отбор.Добавить(СтрШаблон("Не %1.Ссылка В (&МассивУжеВыгружаемых)", ПсевдонимТаблицыИзменения));
			ПервыйЭлемент = Ложь;
			
				
	КонецЦикла;
	
	Пакет0.Колонки[0].Псевдоним = "Ссылка";
	Пакет0.Колонки[1].Псевдоним = "Тип";
	Пакет0.Колонки[2].Псевдоним = "РазмерВФайле";
	Пакет0.Колонки[3].Псевдоним = "Удаление";
	Если ПолнаяТаблица Тогда
		Пакет0.Колонки[4].Псевдоним = "мВыгружать"
	КонецЕсли;
	
	Пакет0.ВыраженияИтогов.Добавить("СУММА(РазмерВФайле)");
	Пакет0.КонтрольныеТочкиИтогов.Добавить("Тип");
	
	Запрос = Новый Запрос;
	Запрос.Текст = СхемаЗапросаПоИзменениям.ПолучитьТекстЗапроса();
	Запрос.УстановитьПараметр("Узел", Узел);
	Запрос.УстановитьПараметр("МассивСсылокОтбора", МассивСсылокОтбора);
	Запрос.УстановитьПараметр("МассивУжеВыгружаемых", МассивУжеВыгружаемых);
	
	Возврат Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции //-- Рарус Кукулин 26.11.20 БСО.СМ.005

Процедура ДобавитьДвоичныеДанные(ОбъектыКВыгрузке, МассивДляПовторнойРегистрации) Экспорт
	
	Для Каждого СтрВыгрузки Из ОбъектыКВыгрузке Цикл
		Если СтрВыгрузки.Свойство("Ссылка")
			И НЕ СтрВыгрузки.Свойство("Удаление") 
			И СтрНайти(СтрВыгрузки.ИмяТипа, "ПрисоединенныеФайлы") <> 0 Тогда
			
			ДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(СтрВыгрузки.Ссылка, Ложь);
			// ++ rarus makole 2021-06-17
			//СтрВыгрузки.Вставить("ДД", ДанныеФайла);
			Если ЗначениеЗаполнено(ДанныеФайла) Тогда
				СтрВыгрузки.Вставить("ДД", ДанныеФайла);
			// ++ rarus makole 2021-08-11
			// При удалении файла из карточки файла, фактически он остаётся помеченным на удаление, но его двоичные данные удаляются.
			// Если не проверять на пометку удаления при отсутствии ДД возникала ошибка "Пустого файла", что не верно
			//Иначе
			ИначеЕсли НЕ СтрВыгрузки.ПометкаУдаления Тогда
			// -- rarus makole 2021-08-11
				ВызватьИсключение(СтрШаблон("Попытка выгрузки пустого файла %1.%2. Заполните файл либо исключите его из выгрузки.
											|Операция прервана", СтрВыгрузки.Наименование, СтрВыгрузки.Расширение));
			КонецЕсли;
			// -- rarus makole 2021-06-17
			
			// Перенесём регистры СведенияОФайлах и НаличиеФайлов в массив к выгрузке
	        КоличествоКПовторнойРегистрации = МассивДляПовторнойРегистрации.Количество();
			ИндексВМассиве = КоличествоКПовторнойРегистрации - 1;
			Пока ИндексВМассиве >= 0 Цикл
				ЭлементКПовторнойРегистрации = МассивДляПовторнойРегистрации[ИндексВМассиве];
				Если (ЭлементКПовторнойРегистрации.ИмяТипа = "РегистрСведений.СведенияОФайлах"
					И ЭлементКПовторнойРегистрации.ОтборНабора.ОтборФайл = СтрВыгрузки.Ссылка)
					ИЛИ (ЭлементКПовторнойРегистрации.ИмяТипа = "РегистрСведений.НаличиеФайлов"
					И ЭлементКПовторнойРегистрации.ОтборНабора.ОтборОбъектСФайлами = СтрВыгрузки.ВладелецФайла) Тогда
					ОбъектыКВыгрузке.Добавить(ЭлементКПовторнойРегистрации);
					МассивДляПовторнойРегистрации.Удалить(ИндексВМассиве);
				КонецЕсли;
				ИндексВМассиве = ИндексВМассиве - 1;
			КонецЦикла;
			
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры 

// ++ rarus makole 2021-03-22 [28073]
// Не открываются файлы к Акту оказанию услуг в рабочей, при этом в ЦБ они читаются и открываются нормально
//Процедура ЗаписатьДвоичныеДанныеПолученногоФайла(СсылкаНаФайл, СтруктураОбъекта)
	//РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(СсылкаНаФайл, СтруктураОбъекта.ДД);
Процедура ЗаписатьДвоичныеДанныеПолученногоФайла(ОбъектФайл, СтруктураОбъекта)
	ТипХраненияФайла = РаботаСФайламиСлужебный.ТипХраненияФайлов();	
	ОбъектФайл.ТипХраненияФайла = ТипХраненияФайла;
	Если ТипХраненияФайла = ПредопределенноеЗначение("Перечисление.ТипыХраненияФайлов.ВТомахНаДиске") Тогда
		// ++ rarus makole 2021-09-13
		РаботаСФайламиВТомахСлужебный.ДобавитьФайл(ОбъектФайл, СтруктураОбъекта.ДД)
		// -- rarus makole 2021-09-13
	Иначе
		// В подписке ВыполнитьДействияПриЗаписиПрисоединенногоФайла данные сохранятся в регистре
		ОбъектФайл.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", СтруктураОбъекта.ДД);
	КонецЕсли;
	ОбъектФайл.Записать(); // ++ rarus makole 2021-09-13
	// -- rarus makole 2021-03-22 [28073]
КонецПроцедуры

//Подключаемая команда установки признака критичности данных
Функция ПодключатьКомандуКритичности(МетаданныеОбъекта) Экспорт
	
	// ++ rarus makole 2021-04-29
	//Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
	Если ПравоДоступа("Чтение", Метаданные.РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег)
		И vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
	// -- rarus makole 2021-04-29
		ОбъектВСоставеРИБ = ПланыОбмена.Полный.ЭтотУзел().Метаданные().Состав.Содержит(МетаданныеОбъекта);
		ЕстьОтключенные = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ЕстьОтключенные(МетаданныеОбъекта);
		ЭтоДокумент = ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта);
		ЭтоСправочник = ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта);
		
		Возврат ОбъектВСоставеРИБ И (ЭтоДокумент ИЛИ ЭтоСправочник) И ЕстьОтключенные;
	Иначе 
		Возврат Ложь
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьКомандуВключенияКритичностиДанных (Команды) Экспорт
	
	// Команда с установленным флагом
	КомандаКритичности = Команды.Добавить();
	КомандаКритичности.Вид = "ОбменССудном1";
	КомандаКритичности.Важность = "Важное";
	КомандаКритичности.Назначение = "ДляОбъекта";
	КомандаКритичности.МножественныйВыбор = Ложь;
	КомандаКритичности.Менеджер = "рарусСинхронизацияССудном";
	КомандаКритичности.Обработчик = "рарусСинхронизацияССудном.ОбработчикКомандыПризнакаКритичности";
	КомандаКритичности.Представление = "Выгрузка на судно критична";
	КомандаКритичности.ТолькоВоВсехДействиях = Истина;
	КомандаКритичности.ЕстьУсловияВидимости = Истина;
	КомандаКритичности.Картинка = БиблиотекаКартинок.ФлагУстановлен;
	КомандаКритичности.Подменю = "ПодменюБСО1";
	КомандаКритичности.РежимЗаписи = "ЗаписыватьТолькоНовые";
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаКритичности, "ВыгрузкаКритична" , Истина, ВидСравненияКомпоновкиДанных.Равно);
	
	// Команда со снятым флагом
	КомандаКритичности = Команды.Добавить();
	КомандаКритичности.Вид = "ОбменССудном2";
	КомандаКритичности.Важность = "Важное";
	КомандаКритичности.Назначение = "ДляОбъекта";
	КомандаКритичности.МножественныйВыбор = Ложь;
	КомандаКритичности.Менеджер = "рарусСинхронизацияССудном";
	КомандаКритичности.Обработчик = "рарусСинхронизацияССудном.ОбработчикКомандыПризнакаКритичности";
	КомандаКритичности.Представление = "Выгрузка на судно критична";
	КомандаКритичности.ТолькоВоВсехДействиях = Истина;
	КомандаКритичности.ЕстьУсловияВидимости = Истина;
	КомандаКритичности.Картинка = БиблиотекаКартинок.ФлагНеУстановлен;
	КомандаКритичности.Подменю = "ПодменюБСО2";
	КомандаКритичности.РежимЗаписи = "ЗаписыватьТолькоНовые";
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаКритичности, "ВыгрузкаКритична" , Ложь, ВидСравненияКомпоновкиДанных.Равно);

КонецПроцедуры

Процедура ОбработчикКомандыПризнакаКритичности(Источник, ПараметрыКоманды) Экспорт
	
	КритичностьУстановлена = КритичностьУстановлена(Источник);
	КрНабор = РегистрыСведений.рарусКритичныеДанныеДляВыгрузкиНаСудно.СоздатьНаборЗаписей();
	КрНабор.Отбор.Объект.Установить(Источник);
	
	Если НЕ КритичностьУстановлена Тогда
		НовЗапись = КрНабор.Добавить();
		НовЗапись.Объект = Источник;
	КонецЕсли;
	
	КрНабор.Записать();
	
	ПараметрыКоманды.Форма.ВыгрузкаКритична = НЕ КритичностьУстановлена;
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ПараметрыКоманды.Форма, ПараметрыКоманды.Источник);
	
КонецПроцедуры

Процедура ДобавитьРеквизитКритичностиВыгрузкиНаФорму(Форма, Отказ) Экспорт
	
	Если НЕ Отказ И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И Форма.Объект.Свойство("Ссылка") Тогда
		
		МетаданныеОбъекта = Форма.Объект.Ссылка.Метаданные();
		Если ПодключатьКомандуКритичности(МетаданныеОбъекта) Тогда
			
			КритичностьУстановлена = КритичностьУстановлена(Форма.Объект.Ссылка);
			
			ДобавляемыеРеквизиты = Новый Массив;
			ТипРеквизита = Новый ОписаниеТипов("Булево");
			РеквизитФормы = Новый РеквизитФормы("ВыгрузкаКритична",	ТипРеквизита);	
								  							 
			ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
			Форма.ВыгрузкаКритична = КритичностьУстановлена;	
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры
//Подключаемая команда установки признака критичности данных

// Функция, возвращает признак критичности данных.
//
// Параметры:
//  ОбъектПроверки	- СправочникСсылка, ДокументСсылка - ссылка на проверяемый объект.
Функция КритичностьУстановлена(ОбъектПроверки) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ОбъектПроверки));
	ПараметрЗапроса = Новый ТаблицаЗначений;
	ПараметрЗапроса.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
	СтрокаПараметра = ПараметрЗапроса.Добавить();
	СтрокаПараметра.Ссылка = ОбъектПроверки;
	
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Объект.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ДанныеОбъекта
		|ИЗ
		|	&Объект КАК Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Критично
		|ИЗ
		|	ВТ_ДанныеОбъекта КАК ВТ_ДанныеОбъекта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусКритичныеДанныеДляВыгрузкиНаСудно КАК рарусКритичныеДанныеДляВыгрузкиНаСудно
		|		ПО (ВТ_ДанныеОбъекта.Ссылка = (ВЫРАЗИТЬ(рарусКритичныеДанныеДляВыгрузкиНаСудно.Объект КАК [ТипОбъектаПроверки])))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ТипОбъектаПроверки]", ОбъектПроверки.Метаданные().ПолноеИмя());
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Объект", ПараметрЗапроса);
	ВыборкаПоОбъекту = Запрос.Выполнить().Выбрать();
	
	ВыборкаПоОбъекту.Следующий();
	
	Возврат ВыборкаПоОбъекту.Критично;
	
КонецФункции

Процедура ДобавитьТаблицуВМассив(ИмяТипа, Массив, ОтборНабора, Таблица)
	
	Таблица.Колонки.Удалить("мВыгружать"); 	// Лишние данные, 
	Таблица.Колонки.Удалить("Тип");        	// уже обработаны и
	Таблица.Колонки.Удалить("РазмерВФайле");// в выгрузке они не нужны					
	СтруктураДанныхРегистра = Новый Структура("ИмяТипа, ОтборНабора, Записи", ИмяТипа, ОтборНабора, Таблица);
	Массив.Добавить(СтруктураДанныхРегистра);
	
КонецПроцедуры

Процедура ЗарегистрироватьНевыгруженные(Узел, МассивДляПовторнойРегистрации) Экспорт
	
	Для каждого НевыгружаемыйОбъект Из МассивДляПовторнойРегистрации Цикл
		Если НевыгружаемыйОбъект.Свойство("Ссылка") Тогда
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, НевыгружаемыйОбъект.Ссылка)
		ИначеЕсли СтрНачинаетсяС(НевыгружаемыйОбъект.ИмяТипа, "Регистр") Тогда
			МетаданныеРегистра = Метаданные.НайтиПоПолномуИмени(НевыгружаемыйОбъект.ИмяТипа);
			МассивЭлементовОсновногоОтбораРегистра = рарусСинхронизацияССудном.ОсновнойОтборРегистра(МетаданныеРегистра);
			Для каждого ЗаписьРегистра Из НевыгружаемыйОбъект.Записи Цикл
				НовыйНабор = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НевыгружаемыйОбъект.ИмяТипа).СоздатьНаборЗаписей();
				Для каждого ЭлементОтбора Из МассивЭлементовОсновногоОтбораРегистра Цикл
					НовыйНабор.Отбор[ЭлементОтбора].Установить(ЗаписьРегистра["Отбор" + ЭлементОтбора]);
				КонецЦикла;
				НоваяЗапись = НовыйНабор.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьРегистра);
				ПланыОбмена.ЗарегистрироватьИзменения(Узел, НовыйНабор)
			КонецЦикла;
		ИначеЕсли СтрНачинаетсяС(НевыгружаемыйОбъект.ИмяТипа, "Константа") Тогда
			КонстантаМенеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НевыгружаемыйОбъект.ИмяТипа);
			ПланыОбмена.ЗарегистрироватьИзменения(Узел, КонстантаМенеджер);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОбменаССудномПоУмолчанию(КодУзла) Экспорт
	
	ТаблицаНастроек = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ПолучитьНастройкиПоУмолчанию();
	СоставПланаОбмена = Метаданные.ПланыОбмена.Полный.Состав;
	
	НастройкиНаборСрочных = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СоздатьНаборЗаписей();
	НастройкиНаборСрочных.Отбор.КодУзла.Установить(КодУзла);
	НастройкиНаборСрочных.Отбор.Вариант.Установить(1);
	
	НастройкиНаборСтандарт = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СоздатьНаборЗаписей();
	НастройкиНаборСтандарт.Отбор.КодУзла.Установить(КодУзла);
	НастройкиНаборСтандарт.Отбор.Вариант.Установить(2);
	
	НастройкиНаборПолный = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СоздатьНаборЗаписей();
	НастройкиНаборПолный.Отбор.КодУзла.Установить(КодУзла);
	НастройкиНаборПолный.Отбор.Вариант.Установить(3);
	
	Для каждого ЭлементСостава Из СоставПланаОбмена Цикл
	
	    Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные);
		СтрокаНастройки = ТаблицаНастроек.Найти(Объект, "Объект");
		
		Если СтрокаНастройки <> Неопределено Тогда
			НоваяЗаписьСрочных = НастройкиНаборСрочных.Добавить();
			НоваяЗаписьСрочных.КодУзла 		= КодУзла;
			НоваяЗаписьСрочных.Вариант 		= 1;
			НоваяЗаписьСрочных.Объект 		= СтрокаНастройки.Объект;
			НоваяЗаписьСрочных.Выгружать 	= СтрокаНастройки.Выгружать1;
			НоваяЗаписьСрочных.Загружать 	= СтрокаНастройки.Загружать1;
			
			НоваяЗаписьСтандарт = НастройкиНаборСтандарт.Добавить();
			НоваяЗаписьСтандарт.КодУзла 	= КодУзла;
			НоваяЗаписьСтандарт.Вариант 	= 2;
			НоваяЗаписьСтандарт.Объект 		= СтрокаНастройки.Объект;
			НоваяЗаписьСтандарт.Выгружать 	= СтрокаНастройки.Выгружать2;
			НоваяЗаписьСтандарт.Загружать 	= СтрокаНастройки.Загружать2;
		КонецЕсли;
		
		НоваяЗаписьПолных = НастройкиНаборПолный.Добавить();
		НоваяЗаписьПолных.КодУзла 	= КодУзла;
		НоваяЗаписьПолных.Вариант 	= 3;
		НоваяЗаписьПолных.Объект 		= Объект;
		НоваяЗаписьПолных.Выгружать 	= ИСТИНА;
		НоваяЗаписьПолных.Загружать 	= ИСТИНА;
		
	КонецЦикла;
	
	НастройкиНаборСрочных.Записать();
	НастройкиНаборСтандарт.Записать();
	НастройкиНаборПолный.Записать();
	
КонецПроцедуры

// Обработчик обновления для актуализации настроек обмена по РИБ
Процедура ОбновитьНастройкиОбменаССудномПоРИБ(Параметры) Экспорт
	
	// ++ rarus makole 2021-08-13
	// Изменил код на полную замену настроек
	
	//Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда // Обновляем только в узле, т.к. главный узел может быть обновлён гораздо раньше и состав объектов может не совпасть
	//
	//	СоставПланаОбмена = Метаданные.ПланыОбмена.Полный.Состав;
	//	
	//	Запрос = Новый Запрос;
	//	Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.Объект КАК Объект,
	//		|	Полный.Код КАК КодУзла
	//		|ПОМЕСТИТЬ ВТ_Настройки
	//		|ИЗ
	//		|	ПланОбмена.Полный КАК Полный
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег КАК рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег
	//		|		ПО Полный.Код = рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.КодУзла
	//		|			И (рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.Вариант = 3)
	//		|ГДЕ
	//		|	Полный.ЭтотУзел = ИСТИНА
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Настройки.Объект КАК Объект
	//		|ИЗ
	//		|	ВТ_Настройки КАК ВТ_Настройки
	//		|;
	//		|
	//		|////////////////////////////////////////////////////////////////////////////////
	//		|ВЫБРАТЬ
	//		|	ВТ_Настройки.КодУзла КАК КодУзла
	//		|ИЗ
	//		|	ВТ_Настройки КАК ВТ_Настройки
	//		|
	//		|СГРУППИРОВАТЬ ПО
	//		|	ВТ_Настройки.КодУзла";
	//	
	//	РезультатЗапроса = Запрос.ВыполнитьПакет();
	//	
	//	МассивОбъектов = РезультатЗапроса[1].Выгрузить().ВыгрузитьКолонку("Объект");
	//	ВыборкаКода = РезультатЗапроса[2].Выбрать();
	//	ВыборкаКода.Следующий();
	//	КодУзла = ВыборкаКода.КодУзла;
	//	
	//	Для каждого ЭлементСостава Из СоставПланаОбмена Цикл
	//		Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные);
	//		Если МассивОбъектов.Найти(Объект) = Неопределено Тогда
	//			ЗаписьРегистра = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СоздатьМенеджерЗаписи();
	//			ЗаписьРегистра.КодУзла = КодУзла;
	//			ЗаписьРегистра.Объект = Объект;
	//			ЗаписьРегистра.Вариант = 3;
	//			ЗаписьРегистра.Выгружать = Истина;
	//			ЗаписьРегистра.Загружать = Истина;
	//			ЗаписьРегистра.Записать();
	//		КонецЕсли;
	//	КонецЦикла;
	//			
	//КонецЕсли;
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат
	КонецЕсли;
	
	УзелСудна = ПланыОбмена.Полный.ЭтотУзел();
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелСудна, "Код");
	ПараметрыЗаписи = Новый Структура("КодУзла, Объект, Вариант, Выгружать, Загружать", КодУзла,,3);
	
	//Очистим старые настройки по узлу и варианту
	НаборЗаписейНастроек = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СоздатьНаборЗаписей();
	НаборЗаписейНастроек.Отбор.КодУзла.Установить(КодУзла);
	НаборЗаписейНастроек.Отбор.Вариант.Установить(3);
	НаборЗаписейНастроек.Записать(Истина);
	
	СоставПланаОбмена = Метаданные.ПланыОбмена.Полный.Состав;
	
	Для каждого ЭлементСостава Из СоставПланаОбмена Цикл
		
		ПараметрыЗаписи.Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ЭлементСостава.Метаданные);
		ПараметрыЗаписи.Выгружать = Истина;
		ПараметрыЗаписи.Загружать = Истина;
		
		РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ДобавитьЗапись(ПараметрыЗаписи);
		
	КонецЦикла;
	
	// -- rarus makole 2021-08-13
			
КонецПроцедуры

Функция ПолучитьРегистрациюВСети(ТолькоПроверкаНаСпутник = Ложь) Экспорт
	
	// Соединение с сервисом
	Соединение = Новый HTTPСоединение("ipwhois.app",,,,,,Новый ЗащищенноеСоединениеOpenSSL());
	HTTPЗапрос = Новый HTTPЗапрос("xml/?objects=ip,country,city&lang=ru");
	ОтветAPI = Соединение.Получить(HTTPЗапрос);
	
	// Получение объекта ЧтениеXML из ответа API
	ТекстОтвета = ОтветAPI.ПолучитьТелоКакСтроку(КодировкаТекста.UTF8);
	мЧтениеXML = Новый ЧтениеXML;
	мЧтениеXML.УстановитьСтроку(ТекстОтвета);
	
	IP = "";
	Страна = "";
	Город = "";
	
	// Разбор XML
	Пока мЧтениеXML.Прочитать() Цикл
		
		Если мЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И мЧтениеXML.Имя = "ip" Тогда
			
			мЧтениеXML.Прочитать();
			
            Если мЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
                IP = мЧтениеXML.Значение
			КонецЕсли;
			
		ИначеЕсли  мЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И мЧтениеXML.Имя = "country" Тогда                
			
			мЧтениеXML.Прочитать();
			
            Если мЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
                Страна = мЧтениеXML.Значение
			КонецЕсли;
			
		ИначеЕсли  мЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента 
			И мЧтениеXML.Имя = "city" Тогда                
			
			мЧтениеXML.Прочитать();
			
            Если мЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
                Город = мЧтениеXML.Значение
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	IPВСегментеСпутника = IPВходитВСпутниковыйСегмент(IP);
	СтруктураРезультат = Новый Структура("ЭтоСпутник, Скорость, Единица, СтрокаРегистрации", IPВСегментеСпутника.ЭтоСпутник, 0, 0, IP);
	
	Если ТолькоПроверкаНаСпутник Тогда
		Возврат СтруктураРезультат
	КонецЕсли;
	
	Если IPВСегментеСпутника.ЭтоСпутник Тогда
		
		СтрокаРегистрации = ВРег(СтрШаблон("СПУТНИК, %1, IP: %2", IPВСегментеСпутника.Оператор, IP));
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	рарусСтандартыПередачиДанных.Скорость КАК Скорость,
		|	рарусСтандартыПередачиДанных.Единица КАК Единица
		|ИЗ
		|	Справочник.рарусОператорыСпутниковогоСегмента КАК рарусОператорыСпутниковогоСегмента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рарусСтандартыПередачиДанных КАК рарусСтандартыПередачиДанных
		|		ПО рарусОператорыСпутниковогоСегмента.СтандартПередачиДанных = рарусСтандартыПередачиДанных.Ссылка
		|ГДЕ
		|	рарусОператорыСпутниковогоСегмента.Ссылка = &Оператор";
		Запрос.УстановитьПараметр("Оператор", IPВСегментеСпутника.Оператор);
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			СтруктураРезультат.Скорость 			= Результат.Скорость;
			СтруктураРезультат.Единица 				= Результат.Единица;
		КонецЕсли;
		
	ИначеЕсли ВРег(Страна) = "РОССИЯ" Тогда
		ДанныеСтандарта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Справочники.рарусСтандартыПередачиДанных.G3, "Скорость, Единица"); 
		СтрокаРегистрации = ВРег(СтрШаблон("%1, %2, IP: %3", Страна, Город, IP));
		
		СтруктураРезультат.Скорость 			= ДанныеСтандарта.Скорость;
		СтруктураРезультат.Единица 				= ДанныеСтандарта.Единица;
	Иначе
		ДанныеСтандарта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Справочники.рарусСтандартыПередачиДанных.Роуминг, "Скорость, Единица"); 
		СтрокаРегистрации = ВРег(СтрШаблон("%1, %2, IP: %3", Страна, Город, IP));
		
		СтруктураРезультат.Скорость 			= ДанныеСтандарта.Скорость;
		СтруктураРезультат.Единица 				= ДанныеСтандарта.Единица;
	КонецЕсли;
	
	СтруктураРезультат.СтрокаРегистрации 	= СтрокаРегистрации;
	
	Возврат СтруктураРезультат;
		
КонецФункции

Функция IPВходитВСпутниковыйСегмент(IP)
	
	МассивИзIP = СтрРазделить(IP, ".", Истина);
	Результат = Новый Структура("ЭтоСпутник", Ложь);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АВТОНОМЕРЗАПИСИ() КАК НомерСтроки,
		|	рарусПринадлежностьIPАдресовСпутниковомуСегменту.Оператор КАК Оператор,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресНачалаДиапазона, 0, 3) КАК Начало1,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресНачалаДиапазона, 5, 3) КАК Начало2,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресНачалаДиапазона, 9, 3) КАК Начало3,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресНачалаДиапазона, 13, 3) КАК Начало4,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресОкончанияДиапазона, 0, 3) КАК Конец1,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресОкончанияДиапазона, 5, 3) КАК Конец2,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресОкончанияДиапазона, 9, 3) КАК Конец3,
		|	ПОДСТРОКА(рарусПринадлежностьIPАдресовСпутниковомуСегменту.IPАдресОкончанияДиапазона, 13, 3) КАК Конец4
		|ПОМЕСТИТЬ ВТ_ДанныеРегистра
		|ИЗ
		|	РегистрСведений.рарусПринадлежностьIPАдресовСпутниковомуСегменту КАК рарусПринадлежностьIPАдресовСпутниковомуСегменту
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК С,
		|	1 КАК П
		|ПОМЕСТИТЬ Р16
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	1,
		|	10
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	2,
		|	100
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	3,
		|	1000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	4,
		|	10000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	5,
		|	100000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	6,
		|	1000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	7,
		|	10000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	8,
		|	100000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	9,
		|	1000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	10,
		|	10000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	11,
		|	100000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	12,
		|	1000000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	13,
		|	10000000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	14,
		|	100000000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	15,
		|	1000000000000000
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	16,
		|	10000000000000000
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор КАК Оператор,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П) КАК Начало1,
		|	NULL КАК Начало2,
		|	NULL КАК Начало3,
		|	NULL КАК Начало4,
		|	NULL КАК Конец1,
		|	NULL КАК Конец2,
		|	NULL КАК Конец3,
		|	NULL КАК Конец4,
		|	ВТ_ДанныеРегистра.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТ_Подытог
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Начало1, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Начало2, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Начало3, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Начало4, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Конец1, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	NULL,
		|	NULL,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Конец2, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	NULL,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Конец3, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_ДанныеРегистра.Оператор,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	СУММА(А.П * Б.С) / МИНИМУМ(А.П),
		|	ВТ_ДанныеРегистра.НомерСтроки
		|ИЗ
		|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра,
		|	Р16 КАК А,
		|	Р16 КАК Б
		|ГДЕ
		|	Б.С < 10
		|	И ПОДСТРОКА(ВТ_ДанныеРегистра.Конец4, 17 - А.С, 1) = ПОДСТРОКА(""0123456789"", Б.С + 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ДанныеРегистра.Оператор,
		|	ВТ_ДанныеРегистра.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Подытог.Оператор КАК Оператор,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Начало1), 0) КАК Начало1,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Начало2), 0) КАК Начало2,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Начало3), 0) КАК Начало3,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Начало4), 0) КАК Начало4,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Конец1), 0) КАК Конец1,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Конец2), 0) КАК Конец2,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Конец3), 0) КАК Конец3,
		|	ЕСТЬNULL(МАКСИМУМ(ВТ_Подытог.Конец4), 0) КАК Конец4
		|ПОМЕСТИТЬ ВТ_ИтогПоРегистру
		|ИЗ
		|	ВТ_Подытог КАК ВТ_Подытог
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Подытог.Оператор,
		|	ВТ_Подытог.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВТ_ИтогПоРегистру.Оператор КАК Оператор
		|ИЗ
		|	ВТ_ИтогПоРегистру КАК ВТ_ИтогПоРегистру
		|ГДЕ
		|	(&Разряд1 >= ВТ_ИтогПоРегистру.Начало1
		|			ИЛИ ВТ_ИтогПоРегистру.Начало1 = 0)
		|	И (&Разряд1 <= ВТ_ИтогПоРегистру.Конец1
		|			ИЛИ ВТ_ИтогПоРегистру.Конец1 = 0)
		|	И (&Разряд2 >= ВТ_ИтогПоРегистру.Начало2
		|			ИЛИ ВТ_ИтогПоРегистру.Начало2 = 0)
		|	И (&Разряд2 <= ВТ_ИтогПоРегистру.Конец2
		|			ИЛИ ВТ_ИтогПоРегистру.Конец2 = 0)
		|	И (&Разряд3 >= ВТ_ИтогПоРегистру.Начало3
		|			ИЛИ ВТ_ИтогПоРегистру.Начало3 = 0)
		|	И (&Разряд3 <= ВТ_ИтогПоРегистру.Конец3
		|			ИЛИ ВТ_ИтогПоРегистру.Конец3 = 0)
		|	И (&Разряд4 >= ВТ_ИтогПоРегистру.Начало4
		|			ИЛИ ВТ_ИтогПоРегистру.Начало4 = 0)
		|	И (&Разряд4 <= ВТ_ИтогПоРегистру.Конец4
		|			ИЛИ ВТ_ИтогПоРегистру.Конец4 = 0)";
	
	Запрос.УстановитьПараметр("Разряд1", Число(МассивИзIP[0]));
	Запрос.УстановитьПараметр("Разряд2", Число(МассивИзIP[1]));
	Запрос.УстановитьПараметр("Разряд3", Число(МассивИзIP[2]));
	Запрос.УстановитьПараметр("Разряд4", Число(МассивИзIP[3]));
	
	ВыборкаОператоров = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОператоров.Следующий() Тогда
		Результат.ЭтоСпутник = Истина;
		Результат.Вставить("Оператор", ВыборкаОператоров.Оператор); 
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Процедура ЗаблокироватьУзел(СсылкаНаУзел) Экспорт
		
	БлокировкаУзла = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаУзла.Добавить("ПланОбмена.Полный");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Ссылка", СсылкаНаУзел);
	БлокировкаУзла.Заблокировать();
		
КонецПроцедуры

// ++ rarus PleA 03.03.2021 
Процедура ДобавитьРеквизитНомерВерсииНаСудне(Форма, Отказ) Экспорт
	
	Если Форма.ИмяФормы = "ОбщаяФорма.СинхронизацияДанных" тогда 			
		
		ДобавляемыеРеквизиты = Новый Массив;
		ТипРеквизита = Новый ОписаниеТипов("Строка");
		
		РеквизитФормы = Новый РеквизитФормы("НомерВерсииНаСудне", ТипРеквизита, "СписокПриложений");					
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		РеквизитФормы = Новый РеквизитФормы("НомерВерсииПлатформыНаСудне", ТипРеквизита, "СписокПриложений");	
		ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
			
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		
		Элементы = Форма.Элементы;
		
		Элемент = Элементы.Вставить("НомерВерсииНаСудне", Тип("ПолеФормы"), Элементы.СписокПриложений);
		Элемент.ПутьКДанным = "СписокПриложений.НомерВерсииНаСудне";	
		Элемент.Заголовок = "Версия конфигурации на судне";
		Элемент.ТолькоПросмотр = Истина;
		
		Элемент = Элементы.Вставить("НомерВерсииПлатформыНаСудне", Тип("ПолеФормы"), Элементы.СписокПриложений);
		Элемент.ПутьКДанным = "СписокПриложений.НомерВерсииПлатформыНаСудне";	
		Элемент.Заголовок = "Версия платформы на судне";
		Элемент.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры
// -- rarus PleA

// ++ rarus makole 2021-03-30
Процедура рарусПроверитьВозможностьИзмененияОбработчик(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка
		ИЛИ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() 
		ИЛИ НЕ рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчетДляДокумента(Источник)
		ИЛИ рарусИмущественныйУчетСервер.ЭтоЗагруженИзБМ(Источник.Ссылка) Тогда
		Возврат
	КонецЕсли;
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
	
		Если ТипЗнч(Источник.ДополнительныеСвойства) = Тип("Структура")
			И Источник.ДополнительныеСвойства.Свойство("ПроведениеДокументов")
			И Источник.ДополнительныеСвойства.ПроведениеДокументов.СвойстваДокумента.ЭтоНовый = Ложь Тогда
			Если Не ОбъектМожноРедактироватьПоСтатусуОтправки(Источник.Ссылка) Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьПользователю("Документ передан в береговую систему, редактирование запрещено");
			КонецЕсли;
		Иначе
			РегистрыСведений.рарусСостоянияОтправкиОбъектов.УстановитьСтатусОбъекта(Источник.Ссылка, ПредопределенноеЗначение("Перечисление.рарусСостояниеОтправкиОбъекта.Черновик"));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Функция ОбъектМожноРедактироватьПоСтатусуОтправки(СсылкаНаОбъект) Экспорт
	
	Если СсылкаНаОбъект.Пустая() Тогда
		Возврат Истина;
	КонецЕсли;
	
	МожноПоСтатусу = РегистрыСведений.рарусСостоянияОтправкиОбъектов.ОбъектДоступенДляРедактирования(СсылкаНаОбъект);
	
	Если МожноПоСтатусу Тогда
		Возврат Истина
	Иначе
		Возврат Ложь
	КонецЕсли;
	
КонецФункции
// -- rarus makole 2021-03-30

// ++ rarus makole 2021-06-29
Процедура ЗафиксироватьРезультатыОбменаВРегистрах(УзелИнформационнойБазы, ДействиеПриОбмене, РезультатВыполненияОбмена, ДатаНачала, ДатаОкончания, НомерСообщения = 0, ИмяКомпьютера = "") Экспорт
	
	// ++ rarus makole 2021-09-13 [ВПIT-0030171]
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		Судно = рарусОбщегоНазначенияСервер.ОсновноеСудно();
	Иначе
		Судно = СудноПоУзлу(УзелИнформационнойБазы);
	КонецЕсли;
	
	Если Судно <> Неопределено Тогда
		
		Если РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
			ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями Тогда
			
			Если ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных Тогда
				РезультатОбмена = Перечисления.рарусРезультатыОбмена.ВыгрузкаОК;
				Описание = "Монитор: Выгрузка данных завершена успешно.";
			Иначе
				РезультатОбмена = Перечисления.рарусРезультатыОбмена.ЗагрузкаОК;
				Описание = "Монитор: Загрузка данных завершена успешно.";
			КонецЕсли;
			
		Иначе
			
			Если ДействиеПриОбмене = Перечисления.ДействияПриОбмене.ВыгрузкаДанных Тогда
				РезультатОбмена = Перечисления.рарусРезультатыОбмена.ВыгрузкаОшибка;
			Иначе
				РезультатОбмена = Перечисления.рарусРезультатыОбмена.ЗагрузкаОшибка;
			КонецЕсли;
			
			Описание = ?(РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Предупреждение_СообщениеОбменаБылоРанееПринято,
						"Монитор: Данные были загружены ранее. Нет новых данных для загрузки",
						"Монитор: Ошибка при обмене данными. Подробности см. в Журнале регистрации");
			
		КонецЕсли;
	
		РегистрыСведений.рарусРегистрацияОбмена.ДобавитьЗапись(Новый Структура("Судно, Дата, РезультатОбмена, Описание, НомерСообщения, ИмяКомпьютера",
																Судно,
																ДатаОкончания,
																РезультатОбмена,
																Описание,
																НомерСообщения,
																ИмяКомпьютера));
		ОбменДаннымиСервер.ОчисткаРегистраРегистрацииОбмена();
		
	КонецЕсли;
	// -- rarus makole 2021-09-13 [ВПIT-0030171]
	
	РегистрыСведений.СостоянияОбменовДанными.ДобавитьЗапись(Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, РезультатВыполненияОбмена, ДатаНачала, ДатаОкончания",
																УзелИнформационнойБазы,
																ДействиеПриОбмене,
																РезультатВыполненияОбмена,
																ДатаНачала,
																ДатаОкончания));
																
	
	Если РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.Выполнено
		ИЛИ РезультатВыполненияОбмена = Перечисления.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями Тогда
																
		РегистрыСведений.СостоянияУспешныхОбменовДанными.ДобавитьЗапись(Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, ДатаОкончания",
																УзелИнформационнойБазы,
																ДействиеПриОбмене,
																ДатаОкончания));
	КонецЕсли;
															
КонецПроцедуры
// -- rarus makole 2021-06-29

// ++ rarus makole 2021-09-13 [ВПIT-0030171]
Функция СудноПоУзлу(УзелИнформационнойБазы)
	
	Перем Судно;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПолныйСуда.Судно КАК Судно
		|ИЗ
		|	ПланОбмена.Полный.Суда КАК ПолныйСуда
		|ГДЕ
		|	ПолныйСуда.Ссылка = &УзелИнформационнойБазы";
	
	Запрос.УстановитьПараметр("УзелИнформационнойБазы", УзелИнформационнойБазы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
	
		ВыборкаСудно = РезультатЗапроса.Выбрать();
		
		Если ВыборкаСудно.Следующий() Тогда
			Судно = ВыборкаСудно.Судно
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Судно;
	
КонецФункции
// -- rarus makole 2021-09-13 [ВПIT-0030171]

// ++ rarus makole 2021-08-13
Процедура ОбновитьНастройкиСинхронизацииСудноБерег(Параметры = Неопределено) Экспорт
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат
	КонецЕсли;
	
	УзелСудна = ПланыОбмена.Полный.ЭтотУзел();
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелСудна, "Код");
	ПараметрыЗаписи = Новый Структура("КодУзла, Объект, Вариант, Выгружать, Загружать", КодУзла);
	
	//Очистим старые настройки по узлу
	ОчиститьНастройкиВарианта(КодУзла, 1);
	ОчиститьНастройкиВарианта(КодУзла, 2);
	
	НастройкиПоУмолчанию = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ПолучитьНастройкиПоУмолчанию();
	
	Для каждого Настройка Из НастройкиПоУмолчанию Цикл
		
		СохранитьНастройку(ПараметрыЗаписи, Настройка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьНастройкиСинхронизацииСудноБерег(Параметры = Неопределено) Экспорт
	
	Если vftОбщегоНазначения.ЭтоГлавныйУзел() Тогда
		Возврат
	КонецЕсли;
	
	УзелСудна = ПланыОбмена.Полный.ЭтотУзел();
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УзелСудна, "Код");
	ПараметрыЗаписи = Новый Структура("КодУзла, Объект, Вариант, Выгружать, Загружать", КодУзла);
	
	НастройкиПоУмолчанию = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ПолучитьНастройкиПоУмолчанию();
	СохраненныеНастройкиВыборка = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СохраненныеНастройки(КодУзла);
	
	Для каждого Настройка Из НастройкиПоУмолчанию Цикл
		
		Если СохраненныеНастройкиВыборка.НайтиСледующий(Настройка.Объект, "Объект") Тогда
			СохраненныеНастройкиВыборка.Сбросить();
			Продолжить;
		КонецЕсли;
		
		СохранитьНастройку(ПараметрыЗаписи, Настройка);
		
		СохраненныеНастройкиВыборка.Сбросить();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНастройкиВарианта(КодУзла, Вариант)
	
	НаборЗаписейНастроек = РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.СоздатьНаборЗаписей();
	НаборЗаписейНастроек.Отбор.КодУзла.Установить(КодУзла);
	НаборЗаписейНастроек.Отбор.Вариант.Установить(Вариант);
	НаборЗаписейНастроек.Записать(Истина);
	
КонецПроцедуры

Процедура СохранитьНастройку(ПараметрыЗаписи, Настройка);
	
	ПараметрыЗаписи.Объект = Настройка.Объект;
	ПараметрыЗаписи.Вариант = 1;
	ПараметрыЗаписи.Выгружать = Настройка.Выгружать1;
	ПараметрыЗаписи.Загружать = Настройка.Загружать1;
	РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ДобавитьЗапись(ПараметрыЗаписи);
	
	ПараметрыЗаписи.Вариант = 2;
	ПараметрыЗаписи.Выгружать = Настройка.Выгружать2;
	ПараметрыЗаписи.Загружать = Настройка.Загружать2;
	РегистрыСведений.рарусНастройкиСоставаОбъектовСинхронизацииСудноБерег.ДобавитьЗапись(ПараметрыЗаписи);
	
КонецПроцедуры
// -- rarus makole 2021-08-13

// ++ rarus makole 2021-06-29

// Обработчик обновления с версии 3.4.2.1 на 3.4.2.2
// Увеличиваем номер отправленного сообщения в узле судна
Процедура УвеличитьНомерОтправленного() Экспорт
	
	Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
		
		ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
		
		ОбъектУзла = ГлавныйУзел.ПолучитьОбъект();
		ОбъектУзла.НомерОтправленного = ОбъектУзла.НомерОтправленного + 10;
		ОбъектУзла.Записать();
		
	КонецЕсли;
	
КонецПроцедуры
// -- rarus makole 2021-06-29