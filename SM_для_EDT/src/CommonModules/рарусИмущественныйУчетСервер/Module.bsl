
#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - ФиксированнаяСтруктура - свойства документа (См. ПроведениеДокументов.СвойстваДокумента).
//
// Возвращаемое значение:
//  Структура - параметры учетного механизма (См. ПроведениеДокументов.ПараметрыУчетногоМеханизма()).
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ИмуществоНаСудах = Документ.Движения.Найти("рарусИмуществоНаСудах");
		ТоварыКОтгрузке = Документ.Движения.Найти("рарусТоварыКОтгрузке");
		
		Если ИмуществоНаСудах <> Неопределено Тогда
			Параметры.ПодчиненныеРегистры.Добавить(ИмуществоНаСудах.Метаданные());
			// ++ rarus makole 2021-08-05 [РАIT-0023494]
			// Контроль остатков ТМЦ
			Если рарусИмущественныйУчетСервер.КонтролироватьОстаткиТМЦДляДокумента(Документ) Тогда
				Параметры.КонтрольныеРегистрыИзменений.Добавить(ИмуществоНаСудах.Метаданные());
			КонецЕсли;
			// -- rarus makole 2021-08-05 [РАIT-0023494]
		КонецЕсли;
		
		Если ТоварыКОтгрузке <> Неопределено Тогда
			Параметры.ПодчиненныеРегистры.Добавить(ТоварыКОтгрузке.Метаданные())
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Процедура формирования движений по подчиненному регистру имущественного учета на судах.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Движения.Найти("рарусИмуществоНаСудах") <> Неопределено Тогда
		ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "рарусИмуществоНаСудах")
	КонецЕсли;
	
	Если Движения.Найти("рарусТоварыКОтгрузке") <> Неопределено Тогда
		ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "рарусТоварыКОтгрузке")
	КонецЕсли;
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	// ++ rarus makole 2021-08-05 [РАIT-0023494]
	// Контроль остатков ТМЦ
	#Область рарусИмуществоНаСудах
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРарусИмуществоНаСудахИзменения") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
			|	ИмуществоНаСудахОстатки.Статус КАК Статус,
			|	ИмуществоНаСудахОстатки.Склад КАК Склад,
			|	СУММА(ИмуществоНаСудахОстатки.КоличествоОстаток) КАК Количество
			|ИЗ
			|	ДвиженияРарусИмуществоНаСудахИзменения КАК ТаблицаИзменений
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.рарусИмуществоНаСудах.Остатки(
			|				,
			|				(Номенклатура, Статус, Склад) В
			|					(ВЫБРАТЬ
			|						Таблица.Номенклатура,
			|						Таблица.Статус,
			|						Таблица.Склад
			|					ИЗ
			|						ДвиженияРарусИмуществоНаСудахИзменения КАК Таблица)) КАК ИмуществоНаСудахОстатки
			|		ПО ТаблицаИзменений.Номенклатура = ИмуществоНаСудахОстатки.Номенклатура
			|			И ТаблицаИзменений.Статус = ИмуществоНаСудахОстатки.Статус
			|			И ТаблицаИзменений.Склад = ИмуществоНаСудахОстатки.Склад
			|
			|СГРУППИРОВАТЬ ПО
			|	ИмуществоНаСудахОстатки.Номенклатура,
			|	ИмуществоНаСудахОстатки.Статус,
			|	ИмуществоНаСудахОстатки.Склад
			|
			|ИМЕЮЩИЕ
			|	СУММА(ИмуществоНаСудахОстатки.КоличествоОстаток) < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРарусИмуществоНаСудах");
		
	КонецЕсли;
	
	#КонецОбласти
	// -- rarus makole 2021-08-05 [РАIT-0023494]
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	// ++ rarus makole 2021-08-05 [РАIT-0023494]
	// Контроль остатков ТМЦ
	#Область рарусИмуществоНаСудах
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРарусИмуществоНаСудахИзменения") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Номенклатура %1
			|Превышен оперативный складской остаток на складе ""%3"" на %4 %5';
			|en = 'Products %2
			|Exceeded operational stock balance in the warehouse ""%3"" by %4 %5'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРарусИмуществоНаСудах Цикл
			
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаОшибки.Номенклатура, "Наименование, НаименованиеНаАнглийском, ЕдиницаИзмерения");
			ПредставлениеНоменклатуры = РеквизитыНоменклатуры.Наименование;
			ПредставлениеНоменклатурыАнгл = РеквизитыНоменклатуры.НаименованиеНаАнглийском;
			Склад = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаОшибки.Склад, "Наименование");
			
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПредставлениеНоменклатуры, ПредставлениеНоменклатурыАнгл,
				Склад, -СтрокаОшибки.Количество, РеквизитыНоменклатуры.ЕдиницаИзмерения);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	// -- rarus makole 2021-08-05 [РАIT-0023494]
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПодписок

Процедура рарусУстановкаНовогоКодаСинхронизацииПередЗаписью(Источник) Экспорт
	
	// ++ rarus atyutyakin 11.02.2021  [ФТ.ИМ.03.01]
	ФорсироватьУстановкуКода = (Источник.ДополнительныеСвойства.Свойство("УстановитьНовыйКодСинхронизации")
		И Источник.ДополнительныеСвойства.УстановитьНовыйКодСинхронизации = Истина);
	
	Если ФорсироватьУстановкуКода Тогда
		// устанавливаем новый код в любом случае
	ИначеЕсли Источник.ОбменДанными.Загрузка ИЛИ НЕ ПустаяСтрока(Источник.рарусКодСинхронизации) Тогда
		Возврат;
	ИначеЕсли НЕ ИспользоватьИмущественныйУчетДляДокумента(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.рарусРасходТМЦ")
		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.рарусИзменениеСтатусаТМЦ") Тогда
		Судно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Склад, "Судно");
		Источник.рарусКодСинхронизации = РегистрыСведений.рарусИндексКодаСинхронизации.НовыйКодСинхронизации(Судно);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.впПриходТМЦ") Тогда
		Источник.рарусКодСинхронизации = РегистрыСведений.рарусИндексКодаСинхронизации.НовыйКодСинхронизации(Источник.Подразделение);
	Иначе
		Источник.рарусКодСинхронизации = РегистрыСведений.рарусИндексКодаСинхронизации.НовыйКодСинхронизации();
	КонецЕсли;
	
	//Если Источник.ЭтоНовый()
	//	И ПустаяСтрока(Источник.рарусКодСинхронизации) Тогда
	//	Если ТипЗнч(Источник) = Тип("ДокументОбъект.рарусРасходТМЦ")
	//		ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.рарусИзменениеСтатусаТМЦ") Тогда
	//		Судно = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Склад, "Судно");
	//		Источник.рарусКодСинхронизации = РегистрыСведений.рарусИндексКодаСинхронизации.НовыйКодСинхронизации(Судно);
	//	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.впПриходТМЦ") Тогда
	//		Источник.рарусКодСинхронизации = РегистрыСведений.рарусИндексКодаСинхронизации.НовыйКодСинхронизации(Источник.Подразделение);
	//	Иначе
	//		Источник.рарусКодСинхронизации = РегистрыСведений.рарусИндексКодаСинхронизации.НовыйКодСинхронизации();
	//	КонецЕсли;
	//КонецЕсли;
	
	// -- rarus atyutyakin 11.02.2021
	
КонецПроцедуры

Процедура рарусОчисткаКодаСинхронизацииПриКопированииОбработчик(Источник) Экспорт
	
	Источник.рарусКодСинхронизации = "";
	
КонецПроцедуры

Процедура рарусПостановкаВОчередьАктаОВыполненииЭтапаРаботДляПроведенияРасхода(Источник, Отказ) Экспорт
	
	Если НЕ ИспользоватьИмущественныйУчет() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
		
	ЗаписьОчереди = РегистрыСведений.рарусОчередьАктовОВыполненииЭтапаРаботДляПроведенияРасходов.СоздатьМенеджерЗаписи();
	ЗаписьОчереди.АктОВыполненииЭтапаРабот = Источник.Ссылка;
	ЗаписьОчереди.Идентификатор = Новый УникальныйИдентификатор;
	
	Попытка
		ЗаписьОчереди.Записать(Истина);
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОшибкаПостановкиАктаВОчередь"
		, УровеньЖурналаРегистрации.Ошибка, 
		,
		, "Ошибка постановки в очередь для создания Расхода ТМЦ Акта о выполнении этапа работ: """ + ОписаниеОшибки );
		ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ИнвентаризацияТМЦ

Процедура ЗаполнитьПриходТМЦПоИнвентаризации(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийПриходаТМЦ.ОприходованиеИзлишков");
	ДокументОбъект.Подразделение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Склад, "Судно");
	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	ДокументОбъект.Комментарий = СтрШаблон("Категория %1, %2", ДанныеЗаполнения.КатегорияНоменклатуры, Строка(ДанныеЗаполнения.ДокументОснование));
	ДокументОбъект.ОприходованиеБывшегоВУпотреблении = ДанныеЗаполнения.ОприходованиеБывшегоВУпотреблении;
	ДокументОбъект.ТМЦ.Загрузить(ТаблицаКЗаполнениюТЧ(ДанныеЗаполнения.Данные));
	
КонецПроцедуры

Процедура ЗаполнитьРасходТМЦПоИнвентаризации(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	
	Если ДанныеЗаполнения.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование") Тогда
		ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.ИзВыданного");
	ИначеЕсли ДанныеЗаполнения.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ") Тогда
		ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.БУ");
	Иначе
		ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада");
	КонецЕсли;
	
	ДокументОбъект.Склад = ДанныеЗаполнения.Склад;
	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	ДокументОбъект.Комментарий = СтрШаблон("Категория %1, %2", ДанныеЗаполнения.КатегорияНоменклатуры, Строка(ДанныеЗаполнения.ДокументОснование));
	ДокументОбъект.ТМЦ.Загрузить(ТаблицаКЗаполнениюТЧ(ДанныеЗаполнения.Данные));
	
КонецПроцедуры

Процедура ЗаполнитьИзменениеСтатусаТМЦПоИнвентаризации(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	ДокументОбъект.Склад = ДанныеЗаполнения.Склад;
	ДокументОбъект.Организация = ДанныеЗаполнения.Организация;
	ДокументОбъект.Комментарий = СтрШаблон("Категория %1, %2", ДанныеЗаполнения.КатегорияНоменклатуры, Строка(ДанныеЗаполнения.ДокументОснование));
	ДокументОбъект.Товары.Загрузить(ТаблицаКЗаполнениюТЧ(ДанныеЗаполнения.Данные));
	
КонецПроцедуры

Функция ТаблицаКЗаполнениюТЧ(МассивДанныхТЧТовары)
	
	ТЗТоварыИнвентаризации = Новый ТаблицаЗначений;
	Для каждого КлючСтруктуры Из МассивДанныхТЧТовары[0] Цикл
		ТЗТоварыИнвентаризации.Колонки.Добавить(КлючСтруктуры.Ключ)
	КонецЦикла;
	
	Для каждого ЭлементМассиваДанных Из МассивДанныхТЧТовары Цикл
		НоваяСтрокаТЗ = ТЗТоварыИнвентаризации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементМассиваДанных);
	КонецЦикла;
	
	Возврат ТЗТоварыИнвентаризации;
	
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыИФункции

Функция ИспользоватьИмущественныйУчет(Параметры = Неопределено) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("рарусИспользоватьИмущественныйУчет", Параметры);
	
КонецФункции	

Функция ИспользоватьИмущественныйУчетДляДокумента(Объект) Экспорт
	
	// ++ rarus makole 2021-08-05
	// Вынес код получения параметров в отдельную функцию
	ПараметрыФО = ПараметрыФОИзОбъекта(Объект);
	// -- rarus makole 2021-08-05

	Возврат рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчет(ПараметрыФО);
	
КонецФункции

// ++ rarus makole 2021-08-04 [РАIT-0023494]
// Контроль остатков ТМЦ
Функция КонтролироватьОстаткиТМЦ(Параметры = Неопределено) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("рарусКонтролироватьОстаткиТМЦ", Параметры);
	
КонецФункции

Функция КонтролироватьОстаткиТМЦДляДокумента(Объект) Экспорт
	
	ПараметрыФО = ПараметрыФОИзОбъекта(Объект);
	Возврат ПолучитьФункциональнуюОпцию("рарусКонтролироватьОстаткиТМЦ", ПараметрыФО);
	
КонецФункции

Функция ПараметрыФОИзОбъекта(Объект)
	
	ПрочитатьИзСсылки = Ложь;
	ИсточникДанных = Неопределено;
	Если ОбщегоНазначения.ЗначениеСсылочногоТипа(Объект) Тогда
		ОбъектСсылка = Объект;
		ПрочитатьИзСсылки = Истина;
	ИначеЕсли ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ОбъектСсылка = Объект.Ссылка;
		ИсточникДанных = Объект;
	Иначе    // Это ДокументОбъект
		ОбъектСсылка = Объект.Ссылка;
		ИсточникДанных = Объект;
	КонецЕсли;
	ТипСсылкиДокумента = ТипЗнч(ОбъектСсылка);
	
	
	Если ТипСсылкиДокумента = Тип("ДокументСсылка.рарусОтражениеИмуществаВУчете") Тогда
		
		// этот документ всегда использует имущественный учет
		Возврат Истина;
		
	ИначеЕсли ТипСсылкиДокумента = Тип("ДокументСсылка.рарусИзменениеСтатусаТМЦ")
		ИЛИ ТипСсылкиДокумента = Тип("ДокументСсылка.рарусРасходТМЦ")
		// ++ rarus makole 2021-09-14
		ИЛИ ТипСсылкиДокумента = Тип("ДокументСсылка.рарусИнвентаризацияТМЦ") Тогда
		// -- rarus makole 2021-09-14
		Если ПрочитатьИзСсылки Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Дата, Склад.Судно");
			ДатаДокумента = РеквизитыДокумента.Дата;
			СудноДокумента = РеквизитыДокумента.СкладСудно; 
		Иначе
			ДатаДокумента = ИсточникДанных.Дата;
			СудноДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИсточникДанных.Склад, "Судно");
		КонецЕсли;
		
	ИначеЕсли ТипСсылкиДокумента = Тип("ДокументСсылка.впПриходТМЦ")
		ИЛИ ТипСсылкиДокумента = Тип("ДокументСсылка.впЗаявкаНаСнабжение")
		// ++ rarus makole 2021-08-06 [РАIT-0023494]
		ИЛИ ТипСсылкиДокумента = Тип("ДокументСсылка.впАктОВыполненииЭтапаРабот") Тогда
		// -- rarus makole 2021-08-06 [РАIT-0023494]
		Если ПрочитатьИзСсылки Тогда
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Дата, Подразделение");
			ДатаДокумента = РеквизитыДокумента.Дата;
			СудноДокумента = РеквизитыДокумента.Подразделение; 
		Иначе
			ДатаДокумента = ИсточникДанных.Дата;
			СудноДокумента = ИсточникДанных.Подразделение;
		КонецЕсли;
		
	КонецЕсли; 
	
	Возврат Новый Структура("Период, Судно", ДатаДокумента, СудноДокумента);
	
КонецФункции
// -- rarus makole 2021-08-04 [РАIT-0023494]

Процедура ОбновитьОстаткиНоменклатурыВТаблицеФормы(Объект, Таблица, ИмяКолонкиОстатка, Дата, Склад) Экспорт
	
	Если рарусИмущественныйУчетСервер.ИспользоватьИмущественныйУчетДляДокумента(Объект) Тогда
		
		НоменклатураДокумента = Таблица.Выгрузить(, "Номенклатура").ВыгрузитьКолонку("Номенклатура");
		// ++ rarus makole 2021-04-05
		// Для нового документа до записи устанавливается время начала дня. Остатки будут получены на это время,
		// что не правильно. Перенесём дату нового документа на текущее время
		ТекущаяДата = ТекущаяДатаСеанса();
		Если Объект.Ссылка.Пустая()
			И Дата = НачалоДня(ТекущаяДата) Тогда
			Дата = ТекущаяДата
		КонецЕсли;
		// -- rarus makole 2021-04-05
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата", Дата);
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураДокумента);
		Запрос.УстановитьПараметр("Склад", Склад);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	рарусИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
		|	рарусИмуществоНаСудахОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
		|			&Дата,
		|			Номенклатура В (&Номенклатура)
		// ++ rarus makole 2021-04-05
		//|				И Статус В (ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе), ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ))
		|				И Статус В (&УчитываемыеСтатусыИмущества)
		// -- rarus makole 2021-04-05
		|				И Склад = &Склад) КАК рарусИмуществоНаСудахОстатки";
		
		// ++ rarus makole 2021-04-05
		// Задача от dore: показывать остатки, соответсвующие виду операции документа РасходТМЦ
		Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.рарусРасходТМЦ") Тогда
			Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада") Тогда
				УчитываемыеСтатусыИмущества = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе")
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.БУ") Тогда
				УчитываемыеСтатусыИмущества = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ")
			ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.ИзВыданного") Тогда
				УчитываемыеСтатусыИмущества = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование")
			КонецЕсли;
		Иначе
			УчитываемыеСтатусыИмущества = Новый Массив;
			УчитываемыеСтатусыИмущества.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе"));
			УчитываемыеСтатусыИмущества.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ"));
		КонецЕсли;
		Запрос.УстановитьПараметр("УчитываемыеСтатусыИмущества", УчитываемыеСтатусыИмущества);
		// -- rarus makole 2021-04-05
		
		УстановитьПривилегированныйРежим(Истина);
		Остатки = Запрос.Выполнить().Выгрузить();
		Остатки.Индексы.Добавить("Номенклатура");
		УстановитьПривилегированныйРежим(Ложь);
		
	Иначе
		
		Остатки = Неопределено;
		
	КонецЕсли; 
	
	
	ОтборПоНоменклатуре = Новый Структура("Номенклатура");
	Для Каждого СтрокаТЧ Из Таблица Цикл
		
		ОстатокНаСкладе = 0;
		Если Остатки <> Неопределено Тогда
			// ++ rarus makole 2021-04-05
			ОтборПоНоменклатуре.Номенклатура = СтрокаТЧ.Номенклатура;
			// -- rarus makole 2021-04-05
			ЗаполнитьЗначенияСвойств(ОтборПоНоменклатуре, СтрокаТЧ);
			СтрокиОстатков = Остатки.НайтиСтроки(ОтборПоНоменклатуре);
			Если СтрокиОстатков.Количество() > 0 Тогда
				ОстатокНаСкладе = СтрокиОстатков[0].КоличествоОстаток;
			КонецЕсли;
		КонецЕсли; 
		
		СтрокаТЧ[ИмяКолонкиОстатка] = ОстатокНаСкладе;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеНаОсновании

Функция ДобавитьКомандуСоздатьИзменениеСтатусаТМЦНаОснованииПриходТМЦ(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.впПриходТМЦ) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.впПриходТМЦ.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "рарусИмущественныйУчетКлиент.СоздатьИзменениеСтатусаТМЦНаОснованииПриходТМЦ";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.рарусИзменениеСтатусаТМЦ);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "рарусИспользоватьИмущественныйУчет";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьКомандуСоздатьРасходТМЦНаОснованииПриходТМЦ(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.рарусРасходТМЦ) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.впПриходТМЦ.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "рарусИмущественныйУчетКлиент.СоздатьРасходТМЦНаОснованииПриходТМЦ";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.рарусРасходТМЦ);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "рарусИспользоватьИмущественныйУчет";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДобавитьКомандуСоздатьРасходТМЦНаОснованииИзменениеСтатусаТМЦ(КомандыСозданияНаОсновании) Экспорт
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.рарусИзменениеСтатусаТМЦ) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = Метаданные.Документы.рарусИзменениеСтатусаТМЦ.ПолноеИмя();
		КомандаСоздатьНаОсновании.Обработчик = "рарусИмущественныйУчетКлиент.СоздатьРасходТМЦНаОснованииИзменениеСтатусаТМЦ";
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначения.ПредставлениеОбъекта(Метаданные.Документы.рарусРасходТМЦ);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Записывать";
		КомандаСоздатьНаОсновании.ФункциональныеОпции = "рарусИспользоватьИмущественныйУчет";
		
		Возврат КомандаСоздатьНаОсновании;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция КатегорииНоменклатурыДокументаВыдаваемыеЭкипажу(Документ) Экспорт
	
	Возврат КатегорииНоменклатурыДокумента(Документ, Истина);
	
КонецФункции

Функция КатегорииНоменклатурыДокументаНеВыдаваемыеЭкипажу(Документ) Экспорт
	
	Возврат КатегорииНоменклатурыДокумента(Документ, Ложь);
	
КонецФункции

Функция КатегорииНоменклатурыДокумента(Документ, ОтборПоВыдаваемыеЭкипажу = Неопределено) Экспорт
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.впПриходТМЦ") Тогда
		ИмяТабличнойЧастиДокумента = "Документ.впПриходТМЦ.ТМЦ";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.рарусРасходТМЦ") Тогда
		ИмяТабличнойЧастиДокумента = "Документ.рарусРасходТМЦ.ТМЦ";
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.рарусИзменениеСтатусаТМЦ") Тогда
		ИмяТабличнойЧастиДокумента = "Документ.рарусИзменениеСтатусаТМЦ.Товары";
	Иначе
		Возврат Новый Массив;
	КонецЕсли; 
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СпрКатегории.Ссылка КАК Категория
	|ИЗ
	|	&ИмяТабличнойЧастиДокумента КАК ТаблицаТоваров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТоваров.Номенклатура = СпрНоменклатура.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рарусКатегорииНоменклатуры КАК СпрКатегории
	|		ПО (СпрНоменклатура.Категория = СпрКатегории.Ссылка)
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &Документ
	|	И НЕ СпрНоменклатура.ЭтоТопливо
	|	И СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|	И &УсловиеВыдаваемыеЭкипажу
	|
	|УПОРЯДОЧИТЬ ПО
	|	Категория
	|АВТОУПОРЯДОЧИВАНИЕ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяТабличнойЧастиДокумента", ИмяТабличнойЧастиДокумента);
	
	Если ТипЗнч(ОтборПоВыдаваемыеЭкипажу) = Тип("Булево") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВыдаваемыеЭкипажу", "Категория.ВыдаетсяЭкипажу = &ОтборПоВыдаваемыеЭкипажу");
		Запрос.УстановитьПараметр("ОтборПоВыдаваемыеЭкипажу", ОтборПоВыдаваемыеЭкипажу);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеВыдаваемыеЭкипажу", "(ИСТИНА)");
	КонецЕсли; 
	
	УстановитьПривилегированныйРежим(Истина);
	Категории = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Категория");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Категории;
	
КонецФункции

Процедура ВыполнитьЗаполнениеДокумента(ДанныеФормыНовогоДокумента, ДанныеЗаполнения) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеФормыНовогоДокумента.Ссылка);
	ДокументОбъектДляЗаполнения = МенеджерДокумента.СоздатьДокумент();
	ДокументОбъектДляЗаполнения.Заполнить(ДанныеЗаполнения);
	ЗначениеВДанныеФормы(ДокументОбъектДляЗаполнения, ДанныеФормыНовогоДокумента);
	
КонецПроцедуры

Процедура ЗаполнитьИзменениеСтатусаТМЦПоПриходТМЦ(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДокументОснование,
		"Организация, Подразделение");
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	ДокументОбъект.Склад = рарусОбщегоНазначенияСервер.СкладСудна(РеквизитыОснования.Подразделение);
	ДокументОбъект.Организация = РеквизитыОснования.Организация;
	ДокументОбъект.Комментарий = СтрШаблон("Категория %1, %2", ДанныеЗаполнения.Категория, Строка(ДанныеЗаполнения.ДокументОснование));
	ДокументОбъект.Отбор = ДанныеЗаполнения.Категория;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.ДокументОснование);
	Запрос.УстановитьПараметр("Категория", ДанныеЗаполнения.Категория);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТоваров.Количество КАК КоличествоВыдано
	|ИЗ
	|	Документ.впПриходТМЦ.ТМЦ КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &ДокументОснование
	|	И ТаблицаТоваров.Номенклатура.Категория = &Категория
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки";
	ТоварыКатегории = Запрос.Выполнить().Выгрузить();
	
	ДокументОбъект.Товары.Загрузить(ТоварыКатегории);
	
КонецПроцедуры

Процедура ЗаполнитьРасходТМЦПоПриходТМЦ(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДокументОснование,
		"Организация, Подразделение");
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	ДокументОбъект.Склад = рарусОбщегоНазначенияСервер.СкладСудна(РеквизитыОснования.Подразделение);
	ДокументОбъект.Организация = РеквизитыОснования.Организация;
	ДокументОбъект.Комментарий = СтрШаблон("Категория %1, %2", ДанныеЗаполнения.Категория, Строка(ДанныеЗаполнения.ДокументОснование));
	ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.ДокументОснование);
	Запрос.УстановитьПараметр("Категория", ДанныеЗаполнения.Категория);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Количество КАК Количество
	|ИЗ
	|	Документ.впПриходТМЦ.ТМЦ КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &ДокументОснование
	|	И ТаблицаТоваров.Номенклатура.Категория = &Категория
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки";
	ТоварыКатегории = Запрос.Выполнить().Выгрузить();
	
	ДокументОбъект.ТМЦ.Загрузить(ТоварыКатегории);
	
КонецПроцедуры

Процедура ЗаполнитьРасходТМЦПоИзменениеСтатусаТМЦ(ДокументОбъект, ДанныеЗаполнения) Экспорт
	
	РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.ДокументОснование,
		"Организация, Склад");
	
	ДокументОбъект.ДокументОснование = ДанныеЗаполнения.ДокументОснование;
	ДокументОбъект.Склад = РеквизитыОснования.Склад;
	ДокументОбъект.Организация = РеквизитыОснования.Организация;
	ДокументОбъект.Комментарий = СтрШаблон("Категория %1, %2", ДанныеЗаполнения.Категория, Строка(ДанныеЗаполнения.ДокументОснование));
	ДокументОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование", ДанныеЗаполнения.ДокументОснование);
	Запрос.УстановитьПараметр("Категория", ДанныеЗаполнения.Категория);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.КоличествоВыдано КАК Количество
	|ИЗ
	|	Документ.рарусИзменениеСтатусаТМЦ.Товары КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Ссылка = &ДокументОснование
	|	И ТаблицаТоваров.Номенклатура.Категория = &Категория
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаТоваров.НомерСтроки";
	ТоварыКатегории = Запрос.Выполнить().Выгрузить();
	
	ДокументОбъект.ТМЦ.Загрузить(ТоварыКатегории);
	
КонецПроцедуры

Процедура СозданиеРасходовПоАктамОВыполненииЭтапаРабот()  Экспорт
	
	// ++ rarus makole 2021-06-24 [Задача № 29463]
	Если НЕ ИспользоватьИмущественныйУчет() Тогда
		Возврат;
	КонецЕсли;
	// -- rarus makole 2021-06-24 [Задача № 29463]
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.рарусСозданиеРасходовПоАктамОВыполненииЭтапаРабот);	
	
	ПараметрыОчереди = ПараметрыОчередиАктов();
	
	// ++ rarus makole 2021-09-29 [РАIT-0023495]
	// Доработка отдельных механизмов по учёту и списанию ТМЦ на судах 
	//ОтложенноеПроведениеРасходовПоАктам(ПараметрыОчереди.ТаблицаОчереди);
	ОтложенноеПроведениеРасходовПоАктамСЗабалансом(ПараметрыОчереди.ТаблицаОчереди);
	ОтметитьОчередьРезультатамиОбработки(ПараметрыОчереди);
	// -- rarus makole 2021-09-29 [РАIT-0023495]
	ЗаписатьОчередь(ПараметрыОчереди);
	
КонецПроцедуры

#КонецОбласти

#Область Обмен

// ++ rarus makole 2021-04-02
Функция ЭтоЗагруженИзБМ(СсылкаНаОбъект) Экспорт
	
	Возврат РегистрыСведений.рарусСостоянияОтправкиОбъектов.ТекущийСтатусОбъекта(СсылкаНаОбъект) = ПредопределенноеЗначение("Перечисление.рарусСостояниеОтправкиОбъекта.ЗагруженИзБМ");
	
КонецФункции
// -- rarus makole 2021-04-02

// ++ rarus makole 2021-03-31
// Признак удалён
//Процедура УстановитьПризнакПолученияВБМ(Объект) Экспорт
//	
//	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ПолученВБМ") Тогда
//		Объект.ПолученВБМ = Истина;
//	КонецЕсли;
//	
//КонецПроцедуры
// -- rarus makole 2021-03-31

// ++ rarus makole 2021-04-21 [Задача № 28685]
// Кнопку Отправить в береговую систему сделать аналогично Заявке на снабжение
Процедура ДобавитьКнопкуОтправкиНаБерег(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Объект")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "Ссылка")
		И РегистрыСведений.рарусСостоянияОтправкиОбъектов.РегистрироватьСтатусОбъекта(Форма.Объект.Ссылка) Тогда
		
		АдресНастроек = Форма.ПараметрыПодключаемыхКоманд.АдресТаблицыКоманд;	
		ТаблицаКоманд = ПолучитьИзВременногоХранилища(АдресНастроек);
		СтрокаКоманды = ТаблицаКоманд.Найти("ОтправкаНаБерег", "Вид");
		
		Если СтрокаКоманды <> Неопределено Тогда
		
	        КнопкаОтправитьВБС = Форма.Элементы.Добавить("ОтправитьВБС",Тип("КнопкаФормы"));
	        КнопкаОтправитьВБС.Заголовок = "Отправить в береговую систему";
	        КнопкаОтправитьВБС.ИмяКоманды = СтрокаКоманды.ИмяВФорме;
			КнопкаОтправитьВБС.ЦветФона = Новый Цвет(255, 204, 0);
			КнопкаОтправитьВБС.Отображение = ОтображениеКнопки.Текст;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры
// -- rarus makole 2021-04-21 [Задача № 28685]

#КонецОбласти 

#Область СозданиеРасходовПоАктамОВыполненииЭтапаРаботСлужебные

// ++ rarus makole 2021-06-24 [Задача № 29463]

// Обработчик обновления СМ 3.4.1.1
//
// Регламентное задание выключается в ЦБ и включается в узле
//
Процедура УстановкаИспользованияРегламентногоЗаданияСозданиеРасходовПоАктамОВыполненииЭтапаРабот(Параметры = Неопределено) Экспорт
	
	Задание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.рарусСозданиеРасходовПоАктамОВыполненииЭтапаРабот);
	ЭтоГлавныйУзел = vftОбщегоНазначения.ЭтоГлавныйУзел();
	
	Если ЭтоГлавныйУзел И Задание.Использование = Истина Тогда
		Задание.Использование = Ложь;
		Задание.Записать();
	ИначеЕсли НЕ ЭтоГлавныйУзел И Задание.Использование = Ложь Тогда
		Задание.Использование = Истина;
		Задание.Записать();
	КонецЕсли;
	
КонецПроцедуры 
// -- rarus makole 2021-06-24 [Задача № 29463]

Процедура ОтложенноеПроведениеРасходовПоАктам(ТаблицаОчереди) 
	
	Склад = рарусОбщегоНазначенияСервер.СкладСудна();
	
	СписокАктов = ТаблицаОчереди.ВыгрузитьКолонку("АктОВыполненииЭтапаРабот");
	
	// ++ rarus makole 2021-07-02 [РАIT-0023374]
	// Учёт номенклатуры разного качества 
	ИспользуетсяУчетКачества = ПолучитьФункциональнуюОпцию("ИспользоватьКачествоТоваров");
	// -- rarus makole 2021-07-02 [РАIT-0023374]
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	СоздатьВТПоРасходуТМЦвАктах(СписокАктов, Запрос);
	РасходыПоАктам = ПолучитьРасходыПоАктам(СписокАктов);
	
	НачатьТранзакцию();

	Для н = 0 по  РасходыПоАктам.Количество()-1 Цикл
		УдалитьРасходТМЦПоАкту(РасходыПоАктам[н].Расход);
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	СписокНоменклатуры = ПолучитьСписокНоменклатурыБлокировки(Запрос);
	
	Если СписокНоменклатуры.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Если НЕ ЗаблокироватьРегистрИмущественногоУчета(СписокНоменклатуры, Склад) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		// ++ rarus makole 2021-07-02 [РАIT-0023374]
		Если НЕ ИспользуетсяУчетКачества Тогда
			ТаблицаОстатков = ПолучитьОстаткиПоИмуществу(Запрос, Склад);
		КонецЕсли;
		// -- rarus makole 2021-07-02 [РАIT-0023374]
		
		РезультатЗапросаПоТМЦ = РезультатЗапросаПоРасходуТМЦвАктах(Запрос);
		
		СтруктураОтбораПоНоменклатуре = Новый Структура("Номенклатура", Неопределено);
		
		ТаблицаНоменклатурыБУ = Новый ТаблицаЗначений;
		ТаблицаНоменклатурыБУ.Колонки.Добавить("Номенклатура");
		ТаблицаНоменклатурыБУ.Колонки.Добавить("Количество");
		
		ТаблицаНоменклатурыСоСклада = ТаблицаНоменклатурыБУ.Скопировать();
		
		СтруктураТаблиц = Новый Структура("ТаблицаНоменклатурыБУ, ТаблицаНоменклатурыСоСклада", ТаблицаНоменклатурыБУ, ТаблицаНоменклатурыСоСклада);
		
		ВыборкаАкты = РезультатЗапросаПоТМЦ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАкты.Следующий() Цикл
			
			СтрокиОчереди  = ТаблицаОчереди.НайтиСтроки(Новый Структура("АктОВыполненииЭтапаРабот", ВыборкаАкты.Акт));
			
			Если СтрокиОчереди.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОчереди = СтрокиОчереди[0];
			Акт = СтрокаОчереди.АктОВыполненииЭтапаРабот;
			
			ВыборкаКатегории = ВыборкаАкты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКатегории.Следующий() Цикл
				
				СтруктураТаблиц.ТаблицаНоменклатурыБУ.Очистить();
				СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Очистить();
				
				ВыборкаНоменклатура = ВыборкаКатегории.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНоменклатура.Следующий() Цикл
					
					// ++ rarus makole 2021-07-02 [РАIT-0023374]
					Если ИспользуетсяУчетКачества Тогда
						
						Если ВыборкаНоменклатура.Качество = Перечисления.ГрадацииКачества.Новый Тогда
							СтрТаб = СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Добавить();
							ЗаполнитьЗначенияСвойств(СтрТаб, ВыборкаНоменклатура);
						ИначеЕсли ВыборкаНоменклатура.Качество = Перечисления.ГрадацииКачества.БУ
							ИЛИ ВыборкаНоменклатура.Качество = Перечисления.ГрадацииКачества.Восстановленный Тогда
							СтрТабБУ = СтруктураТаблиц.ТаблицаНоменклатурыБУ.Добавить();
							ЗаполнитьЗначенияСвойств(СтрТабБУ, ВыборкаНоменклатура);
						КонецЕсли;
						
					Иначе
					// -- rarus makole 2021-07-02 [РАIT-0023374]
					
						Номенклатура = ВыборкаНоменклатура.Номенклатура;
						Количество = ВыборкаНоменклатура.Количество;
						
						СтруктураОтбораПоНоменклатуре.Номенклатура = Номенклатура;
						ОстаткиБУ = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораПоНоменклатуре);

						Если ОстаткиБУ.Количество() = 0 Тогда
							
							СтрТаб = СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Добавить();
							ЗаполнитьЗначенияСвойств(СтрТаб, ВыборкаНоменклатура);
							
						Иначе
							
							СтрТабБУ = СтруктураТаблиц.ТаблицаНоменклатурыБУ.Добавить();
							СтрТабБУ.Номенклатура = Номенклатура;
							СтрТабБУ.Количество = Мин(Количество, ОстаткиБУ[0].Количество);
							
							ОстаткиБУ[0].Количество = ОстаткиБУ[0].Количество - СтрТабБУ.Количество;
							
							Если СтрТабБУ.Количество < Количество Тогда
								СтрТаб = СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Добавить();
								СтрТаб.Номенклатура = Номенклатура;
								СтрТаб.Количество = Количество - СтрТабБУ.Количество;
							КонецЕсли;
							
						КонецЕсли;
								
					// ++ rarus makole 2021-07-02 [РАIT-0023374]
					КонецЕсли;
					// -- rarus makole 2021-07-02 [РАIT-0023374]
				КонецЦикла;
				
				Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
					
					Если КлючИЗначение.Значение.Количество() = 0 Тогда
						продолжить;
					КонецЕсли;
					
					ДокументРасход = Документы.рарусРасходТМЦ.СоздатьДокумент();
					
					ДокументРасход.Организация = Акт.Организация;
					ДокументРасход.Ответственный = Акт.Ответственный;
					ДокументРасход.Комментарий = "#Создан автоматически по Акту о выполнении этапа работ#";
					ДокументРасход.ДокументОснование = Акт;
					ДокументРасход.Дата = Акт.Дата;
					ДокументРасход.Склад = Склад;
					ДокументРасход.ВидОперации = ?(КлючИЗначение.Ключ = "ТаблицаНоменклатурыБУ", ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.БУ"), ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада"));
					// ++ rarus makole 2021-04-01
					ДокументРасход.СформированСМ = Истина;
					// -- rarus makole 2021-04-01
					
					ДокументРасход.ТМЦ.Загрузить(КлючИЗначение.Значение);
					
					Попытка
						ДокументРасход.Записать(РежимЗаписиДокумента.Проведение);
						// ++ rarus makole 2021-04-22 [Задача № 28687]
						// По списаниям ТМЦ, автоматически создаваемым в класс. ТОИР автоматически включать отправку 
						// на берег при создании и проведении
						рарусИмущественныйУчетВызовСервера.УстановитьСтатусЗарегистрированоКОтправке(ДокументРасход.Ссылка);
						// -- rarus makole 2021-04-22 [Задача № 28687]
					Исключение
						ОтменитьТранзакцию();
						ОписаниеОшибки = ОписаниеОшибки();
						ЗаписьЖурналаРегистрации("ОшибкаЗаписиРасходаПоАктуОВыполненииЭтапаРабот"
						, УровеньЖурналаРегистрации.Ошибка, 
						,
						, "Ошибка записи Расхода ТМЦ по Акту о выполнении этапа работ: """ + ОписаниеОшибки );
						ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

						ВызватьИсключение;
						
					КонецПопытки;
					
					СтрокаОчереди.Обработана = Истина;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

// ++ rarus makole 2021-09-28 [РАIT-0023495]
// Доработка отдельных механизмов по учёту и списанию ТМЦ на судах
Процедура ОтложенноеПроведениеРасходовПоАктамСЗабалансом(ТаблицаОчереди) 
	
	Склад = рарусОбщегоНазначенияСервер.СкладСудна();
	СписокАктов = ТаблицаОчереди.ВыгрузитьКолонку("АктОВыполненииЭтапаРабот");
	
	Запрос = Новый Запрос;
	МВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МВТ;
	СоздатьВТПоРасходуТМЦвАктах(СписокАктов, Запрос);
	РасходыПоАктам = ПолучитьРасходыПоАктам(СписокАктов);
	
	НачатьТранзакцию();

	Для каждого СтрокаРасхода Из РасходыПоАктам Цикл
		УдалитьРасходТМЦПоАкту(СтрокаРасхода.Расход)
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	СписокНоменклатуры = ПолучитьСписокНоменклатурыБлокировки(Запрос);
	
	Если СписокНоменклатуры.Количество() > 0 Тогда
		
		НачатьТранзакцию();
		
		Если НЕ ЗаблокироватьРегистрИмущественногоУчета(СписокНоменклатуры, Склад) Тогда
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ТаблицаОстатков = ПолучитьОстаткиПоИмуществуСЗабалансом(Запрос, Склад);
		
		РезультатЗапросаПоТМЦ = РезультатЗапросаПоРасходуТМЦвАктах(Запрос);
		
		СтруктураОтбораПоНоменклатуре = Новый Структура("Номенклатура", Неопределено);
		
		ТаблицаНоменклатурыБУ = Новый ТаблицаЗначений;
		ТаблицаНоменклатурыБУ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
		ТаблицаНоменклатурыБУ.Колонки.Добавить("Количество", ОбщегоНазначения.ОписаниеТипаЧисло(15, 3));
		
		ТаблицаНоменклатурыЗабаланс = ТаблицаНоменклатурыБУ.Скопировать();
		ТаблицаНоменклатурыСоСклада = ТаблицаНоменклатурыБУ.Скопировать();
		ТаблицаНоменклатурыСоСклада.Колонки.Добавить("НеСписано", Новый ОписаниеТипов("Булево"));
		
		СтруктураТаблиц = Новый Структура("ТаблицаНоменклатурыБУ, ТаблицаНоменклатурыСоСклада, ТаблицаНоменклатурыЗабаланс", ТаблицаНоменклатурыБУ, ТаблицаНоменклатурыСоСклада, ТаблицаНоменклатурыЗабаланс);
		
		ВыборкаАкты = РезультатЗапросаПоТМЦ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАкты.Следующий() Цикл
			
			СтрокиОчереди  = ТаблицаОчереди.НайтиСтроки(Новый Структура("АктОВыполненииЭтапаРабот", ВыборкаАкты.Акт));
			
			Если СтрокиОчереди.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НачатьТранзакцию();
			
			СтрокаОчереди = СтрокиОчереди[0];
			Акт = СтрокаОчереди.АктОВыполненииЭтапаРабот;
			КонтролироватьОстатки = рарусИмущественныйУчетСервер.КонтролироватьОстаткиТМЦДляДокумента(Акт);
				
			ЕстьОшибкиФормирования = Ложь;
			
			ВыборкаКатегории = ВыборкаАкты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКатегории.Следующий() Цикл
				
				Если ЕстьОшибкиФормирования Тогда
					Прервать
				КонецЕсли;
				
				СтруктураТаблиц.ТаблицаНоменклатурыЗабаланс.Очистить();
				СтруктураТаблиц.ТаблицаНоменклатурыБУ.Очистить();
				СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Очистить();
				
				ВыборкаНоменклатура = ВыборкаКатегории.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНоменклатура.Следующий() Цикл
					
					Номенклатура = ВыборкаНоменклатура.Номенклатура;
					Количество = ВыборкаНоменклатура.Количество;
					СтрокаСклад = Неопределено;
					
					СтруктураОтбораПоНоменклатуре.Номенклатура = Номенклатура;
					Остатки = ТаблицаОстатков.НайтиСтроки(СтруктураОтбораПоНоменклатуре);

					Если КонтролироватьОстатки = Ложь Тогда
						
						СтрТабСкл = СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Добавить();
						ЗаполнитьЗначенияСвойств(СтрТабСкл, ВыборкаНоменклатура);
						
					Иначе
						
						Для каждого СтрокаОстатка Из Остатки Цикл
							
							Если Количество = 0 Тогда
								Прервать;
							Иначе
								
								// Пытаемся списать ТМЦ из остатков. Сначала Забаланс ("Из выданного"), потом "Бывшее в употреблении", потом "Со склада" 
								КСписанию = Мин(Количество, СтрокаОстатка.Количество);
								
								Если СтрокаОстатка.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование") Тогда
									СтрТаб = СтруктураТаблиц.ТаблицаНоменклатурыЗабаланс.Добавить()
								ИначеЕсли СтрокаОстатка.Статус = ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ") Тогда
									СтрТаб = СтруктураТаблиц.ТаблицаНоменклатурыБУ.Добавить()
								Иначе
									СтрТаб = СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Добавить();
									СтрокаСклад = СтрТаб;
								КонецЕсли;
								
								СтрТаб.Номенклатура = ВыборкаНоменклатура.Номенклатура;
								СтрТаб.Количество	= КСписанию;
								
								// Уменьшим остаток номенклатуры на количество к списанию
								СтрокаОстатка.Количество = СтрокаОстатка.Количество - КСписанию;
								// Уменьшим требуемое количество 
								Количество = Количество - КСписанию;
								
							КонецЕсли;
							
						КонецЦикла;
						
						Если Количество > 0 Тогда
							
							// Не удалось всё списать, отнесём это на складской документ, который выгрузим непроведённым
							
							Если СтрокаСклад = Неопределено Тогда
								СтрокаСклад = СтруктураТаблиц.ТаблицаНоменклатурыСоСклада.Добавить();
								СтрокаСклад.Номенклатура = ВыборкаНоменклатура.Номенклатура;
							КонецЕсли;
							
							СтрокаСклад.Количество 			= СтрокаСклад.Количество + Количество;
							СтрокаСклад.НеСписано 			= Истина;
							
						КонецЕсли;
												
					КонецЕсли;
							
				КонецЦикла;
				
				Для Каждого КлючИЗначение из СтруктураТаблиц Цикл
					
					Если ЕстьОшибкиФормирования Тогда
						Прервать
					КонецЕсли;
					
					Если КлючИЗначение.Значение.Количество() = 0 Тогда
						продолжить;
					КонецЕсли;
					
					ЕстьНесписанные = Ложь;
					Комментарий = "#Создан автоматически по Акту о выполнении этапа работ#";
					
					Если КлючИЗначение.Ключ = "ТаблицаНоменклатурыЗабаланс" Тогда
						ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.ИзВыданного")
					ИначеЕсли КлючИЗначение.Ключ = "ТаблицаНоменклатурыБУ" Тогда
						ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.БУ");
					Иначе
						ВидОперации = ПредопределенноеЗначение("Перечисление.рарусВидыОперацийРасходаТМЦ.СоСклада");
						ЕстьНесписанные = КлючИЗначение.Значение.НайтиСтроки(Новый Структура("НеСписано", Истина)).Количество() > 0;
						Комментарий = Комментарий + ?(ЕстьНесписанные, " #Недостаточно ТМЦ в остатках на судне#", "");
					КонецЕсли;
					
					ДокументРасход = Документы.рарусРасходТМЦ.СоздатьДокумент();
					
					ДокументРасход.Организация = Акт.Организация;
					ДокументРасход.Ответственный = Акт.Ответственный;
					ДокументРасход.Комментарий = Комментарий;
					ДокументРасход.ДокументОснование = Акт;
					ДокументРасход.Дата = Акт.Дата;
					ДокументРасход.Склад = Склад;
					ДокументРасход.ВидОперации = ВидОперации;
					ДокументРасход.СформированСМ = Истина;
					
					ДокументРасход.ТМЦ.Загрузить(КлючИЗначение.Значение);
					
					Попытка
						ДокументРасход.Записать(?(ЕстьНесписанные, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение));
						рарусИмущественныйУчетВызовСервера.УстановитьСтатусЗарегистрированоКОтправке(ДокументРасход.Ссылка);
						СтрокаОчереди.Обработана = Истина;
					Исключение
						ОписаниеОшибки = ОписаниеОшибки();
						ЗаписьЖурналаРегистрации("ОшибкаЗаписиРасходаПоАктуОВыполненииЭтапаРабот"
						, УровеньЖурналаРегистрации.Ошибка, 
						,
						, "Ошибка записи Расхода ТМЦ по Акту о выполнении этапа работ: """ + ОписаниеОшибки );
						ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));

						СтрокаОчереди.Обработана = Ложь;
						// исключение не вызываем, т.к. остальные акты могут нормально обработаться, а этот мы просто оставим в очереди
						ЕстьОшибкиФормирования = Истина;
					КонецПопытки;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Если ЕстьОшибкиФормирования = Истина Тогда
				ОтменитьТранзакцию()
			Иначе
				ЗафиксироватьТранзакцию()
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры
// -- rarus makole 2021-09-28 [РАIT-0023495]

// ++ rarus makole 2021-04-23
//Функция ПараметрыОчередиАктов() Экспорт
Функция ПараметрыОчередиАктов()
// -- rarus makole 2021-04-23
	
	ПараметрыОчереди = Новый Структура;
	
	Очередь = ПрочитатьОчередь();
	
	// ++ rarus makole 2021-10-13
	ОчиститьОчередьОтЗаблокированных(Очередь);
	// -- rarus makole 2021-10-13
	
	ТаблицаОчереди = Очередь.Скопировать();
	ТаблицаОчереди.Свернуть("АктОВыполненииЭтапаРабот, Обработана");
	ПараметрыОчереди.Вставить("ОчередьРегистра", Очередь);
	ПараметрыОчереди.Вставить("ТаблицаОчереди", ТаблицаОчереди);
	
	Возврат ПараметрыОчереди;
		
КонецФункции	

Функция ПрочитатьОчередь()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	// ++ rarus makole 2021-10-13 [Задание 000000045640 от 06.10.21]
	// не пытаться переформировывать документы расхода, если они уже отправлены в ЕИС
	//"ВЫБРАТЬ
	//|	Регистр.АктОВыполненииЭтапаРабот КАК АктОВыполненииЭтапаРабот,
	//|	ЛОЖЬ КАК Обработана,
	//|	Регистр.Идентификатор КАК Идентификатор
	//|ИЗ
	//|	РегистрСведений.рарусОчередьАктовОВыполненииЭтапаРаботДляПроведенияРасходов КАК Регистр
	//|
	//|УПОРЯДОЧИТЬ ПО
	//|	Регистр.АктОВыполненииЭтапаРабот.Дата,
	//|	Регистр.АктОВыполненииЭтапаРабот.Ссылка";
	
	"ВЫБРАТЬ
	|	Регистр.АктОВыполненииЭтапаРабот КАК АктОВыполненииЭтапаРабот,
	|	ЛОЖЬ КАК Обработана,
	|	Регистр.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ВТ_ОчередьАктов
	|ИЗ
	|	РегистрСведений.рарусОчередьАктовОВыполненииЭтапаРаботДляПроведенияРасходов КАК Регистр
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// Если хоть один документ расхода не в разрешённом статусе, то весь акт блокируем от переформирования
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(рарусСостоянияОтправкиОбъектов.СостояниеОтправки, ЗНАЧЕНИЕ(Перечисление.рарусСостояниеОтправкиОбъекта.Отправлен)) = ЗНАЧЕНИЕ(Перечисление.рарусСостояниеОтправкиОбъекта.Черновик)
	|					ИЛИ ЕСТЬNULL(рарусСостоянияОтправкиОбъектов.СостояниеОтправки, ЗНАЧЕНИЕ(Перечисление.рарусСостояниеОтправкиОбъекта.Отправлен)) = ЗНАЧЕНИЕ(Перечисление.рарусСостояниеОтправкиОбъекта.ЗарегистрированКОтправке)
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Заблокирован,
	|	рарусРасходТМЦ.ДокументОснование КАК Акт
	|ПОМЕСТИТЬ ВТ_БлокировкаРасходаАкта
	|ИЗ
	|	Документ.рарусРасходТМЦ КАК рарусРасходТМЦ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусСостоянияОтправкиОбъектов КАК рарусСостоянияОтправкиОбъектов
	|		ПО (рарусРасходТМЦ.Ссылка = (ВЫРАЗИТЬ(рарусСостоянияОтправкиОбъектов.КонтролируемыйОбъект КАК Документ.рарусРасходТМЦ)))
	|ГДЕ
	|	рарусРасходТМЦ.ПометкаУдаления = ЛОЖЬ
	|	И рарусРасходТМЦ.ДокументОснование В
	|			(ВЫБРАТЬ
	|				ОчередьАктов.АктОВыполненииЭтапаРабот КАК Акт
	|			ИЗ
	|				ВТ_ОчередьАктов КАК ОчередьАктов)
	|
	|СГРУППИРОВАТЬ ПО
	|	рарусРасходТМЦ.ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОчередьАктов.АктОВыполненииЭтапаРабот КАК АктОВыполненииЭтапаРабот,
	|	ВТ_ОчередьАктов.Обработана КАК Обработана,
	|	ВТ_ОчередьАктов.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(ВТ_БлокировкаРасходаАкта.Заблокирован, ЛОЖЬ) КАК Заблокирован
	|ИЗ
	|	ВТ_ОчередьАктов КАК ВТ_ОчередьАктов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БлокировкаРасходаАкта КАК ВТ_БлокировкаРасходаАкта
	|		ПО (ВТ_ОчередьАктов.АктОВыполненииЭтапаРабот = ВТ_БлокировкаРасходаАкта.Акт)";
	// -- rarus makole 2021-10-13
	
	Очередь = Запрос.Выполнить().Выгрузить();
	
	Возврат Очередь;
		
КонецФункции

// ++ rarus makole 2021-04-23
//Процедура ЗаписатьОчередь(ПараметрыОчереди) Экспорт
Процедура ЗаписатьОчередь(ПараметрыОчереди)
// -- rarus makole 2021-04-23

	// ++ rarus makole 2021-10-14
	// не требуется очищать очередь в транзакции. Очистку выполняем по возможности для всей очереди, в попытке
	
	//НачатьТранзакцию();
	//
	//Попытка
	//
	//	Для Каждого ЭлементОчереди Из ПараметрыОчереди.ОчередьРегистра цикл
	//		
	//		НЗ = РегистрыСведений.рарусОчередьАктовОВыполненииЭтапаРаботДляПроведенияРасходов.СоздатьНаборЗаписей();
	//		НЗ.Отбор.АктОВыполненииЭтапаРабот.Установить(ЭлементОчереди.АктОВыполненииЭтапаРабот);
	//		НЗ.Отбор.Идентификатор.Установить(ЭлементОчереди.Идентификатор);
	//		НЗ.Записать();
	//		
	//	КонецЦикла;	
	//	
	//	ЗафиксироватьТранзакцию();
	//
	//Исключение
	//	
	//	ОтменитьТранзакцию();
	//	
	//КонецПопытки;
	
	Для Каждого ЭлементОчереди Из ПараметрыОчереди.ОчередьРегистра цикл
		
		// ++ rarus makole 2021-10-13
		Если ЭлементОчереди.Обработана = Ложь Тогда
			Продолжить
		КонецЕсли;
		// -- rarus makole 2021-10-13
		
		НЗ = РегистрыСведений.рарусОчередьАктовОВыполненииЭтапаРаботДляПроведенияРасходов.СоздатьНаборЗаписей();
		НЗ.Отбор.АктОВыполненииЭтапаРабот.Установить(ЭлементОчереди.АктОВыполненииЭтапаРабот);
		НЗ.Отбор.Идентификатор.Установить(ЭлементОчереди.Идентификатор);
		Попытка
			НЗ.Записать()
		Исключение
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Не удалось удалить Акт из очереди создания расходов'"),
					        УровеньЖурналаРегистрации.Ошибка,
					        Метаданные.РегистрыСведений.рарусОчередьАктовОВыполненииЭтапаРаботДляПроведенияРасходов,
					        ЭлементОчереди.АктОВыполненииЭтапаРабот,
					        ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
	КонецЦикла;	
	// -- rarus makole 2021-10-14
			
КонецПроцедуры	

Функция ЗаблокироватьРегистрИмущественногоУчета(СписокНоменклатуры, Склад)
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.рарусИмуществоНаСудах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СписокНоменклатуры;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.УстановитьЗначение("Склад", Склад); 
	
	Попытка
		Блокировка.Заблокировать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОшибкаЗаписиРасходаПоАктуОВыполненииЭтапаРабот"
		, УровеньЖурналаРегистрации.Ошибка, 
		,
		, "Ошибка установки блокировки регистра для получения остатков: """ + ОписаниеОшибки );
		
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура УдалитьРасходТМЦПоАкту(РасходСсылка)
	
	ДокументРасход = РасходСсылка.ПолучитьОбъект();
	
	Попытка
		ДокументРасход.УстановитьПометкуУдаления(Истина);
	Исключение
		ОтменитьТранзакцию();	
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОшибкаЗаписиРасходаПоАктуОВыполненииЭтапаРабот"
		, УровеньЖурналаРегистрации.Ошибка, 
		,
		, "Ошибка удаления Расхода ТМЦ по Акту о выполнении этапа работ: """ + ОписаниеОшибки );
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьВТПоРасходуТМЦвАктах(СписокАктов, Запрос)
	
	Запрос.УстановитьПараметр("СписокАктов", СписокАктов);
	Запрос.Текст = "ВЫБРАТЬ
	|	впАктОВыполненииЭтапаРаботМатериальныеЗатраты.Номенклатура КАК Номенклатура,
	|	впАктОВыполненииЭтапаРаботМатериальныеЗатраты.Количество КАК Количество,
	|	впАктОВыполненииЭтапаРабот.Ссылка КАК Акт,
	|	НоменклатураСправочник.Категория КАК Категория
	|ПОМЕСТИТЬ вт_Акты
	|ИЗ
	|	Документ.впАктОВыполненииЭтапаРабот.МатериальныеЗатраты КАК впАктОВыполненииЭтапаРаботМатериальныеЗатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот КАК впАктОВыполненииЭтапаРабот
	|		ПО впАктОВыполненииЭтапаРаботМатериальныеЗатраты.Ссылка = впАктОВыполненииЭтапаРабот.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО впАктОВыполненииЭтапаРаботМатериальныеЗатраты.Номенклатура = НоменклатураСправочник.Ссылка
	|ГДЕ
	|	впАктОВыполненииЭтапаРабот.Проведен
	|	И впАктОВыполненииЭтапаРабот.ЗавершитьРемонтныеРаботы
	|	И впАктОВыполненииЭтапаРабот.Ссылка В(&СписокАктов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	впАктОВыполненииЭтапаРаботЗапчастиРемонта.Номенклатура,
	|	впАктОВыполненииЭтапаРаботЗапчастиРемонта.Количество,
	|	впАктОВыполненииЭтапаРабот.Ссылка,
	|	НоменклатураСправочник.Категория
	|ИЗ
	|	Документ.впАктОВыполненииЭтапаРабот.ЗапчастиРемонта КАК впАктОВыполненииЭтапаРаботЗапчастиРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот КАК впАктОВыполненииЭтапаРабот
	|		ПО впАктОВыполненииЭтапаРаботЗапчастиРемонта.Ссылка = впАктОВыполненииЭтапаРабот.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураСправочник
	|		ПО впАктОВыполненииЭтапаРаботЗапчастиРемонта.Номенклатура = НоменклатураСправочник.Ссылка
	|ГДЕ
	|	впАктОВыполненииЭтапаРабот.Проведен
	|	И впАктОВыполненииЭтапаРабот.ЗавершитьРемонтныеРаботы
	|	И впАктОВыполненииЭтапаРабот.Ссылка В(&СписокАктов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ПолучитьСписокНоменклатурыБлокировки(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	вт_Акты.Номенклатура КАК Номенклатура
	|ИЗ
	|	вт_Акты КАК вт_Акты";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьОстаткиПоИмуществу(Запрос, Склад);
	
	Запрос.УстановитьПараметр("ДатаОстатка", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("БУ", ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ"));
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
	|	СУММА(рарусИмуществоНаСудахОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
	|			&ДатаОстатка,
	|			Склад = &Склад
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						вт_Акты.Номенклатура
	|					ИЗ
	|						вт_Акты)
	|				И Статус = &БУ) КАК рарусИмуществоНаСудахОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	рарусИмуществоНаСудахОстатки.Номенклатура";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// ++ rarus makole 2021-09-28 [РАIT-0023495]
// Доработка отдельных механизмов по учёту и списанию ТМЦ на судах 
Функция ПолучитьОстаткиПоИмуществуСЗабалансом(Запрос, Склад);
	
	Запрос.УстановитьПараметр("ДатаОстатка", ТекущаяДатаСеанса());
	
	МассивСтатусов = Новый Массив;
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.НаСкладе"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ"));
	МассивСтатусов.Добавить(ПредопределенноеЗначение("Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование"));
	Запрос.УстановитьПараметр("МассивСтатусов", МассивСтатусов);
	
	Запрос.УстановитьПараметр("Склад", Склад);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	рарусИмуществоНаСудахОстатки.Номенклатура КАК Номенклатура,
	               |	рарусИмуществоНаСудахОстатки.Статус КАК Статус,
	               |	СУММА(рарусИмуществоНаСудахОстатки.КоличествоОстаток) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА рарусИмуществоНаСудахОстатки.Статус = ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ВыданоВПользование)
	               |			ТОГДА 1
	               |		КОГДА рарусИмуществоНаСудахОстатки.Статус = ЗНАЧЕНИЕ(Перечисление.рарусСтатусыИмуществаНаСудне.ОприходованоБУ)
	               |			ТОГДА 2
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК Порядок
	               |ИЗ
	               |	РегистрНакопления.рарусИмуществоНаСудах.Остатки(
	               |			&ДатаОстатка,
	               |			Склад = &Склад
	               |				И Номенклатура В
	               |					(ВЫБРАТЬ
	               |						вт_Акты.Номенклатура
	               |					ИЗ
	               |						вт_Акты)
	               |				И Статус В (&МассивСтатусов)) КАК рарусИмуществоНаСудахОстатки
	               |ГДЕ
	               |	рарусИмуществоНаСудахОстатки.КоличествоОстаток > 0
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	рарусИмуществоНаСудахОстатки.Номенклатура,
	               |	рарусИмуществоНаСудахОстатки.Статус
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Номенклатура,
	               |	Порядок
	               |АВТОУПОРЯДОЧИВАНИЕ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
// -- rarus makole 2021-09-28 [РАIT-0023495]

// ++ rarus makole 2021-10-13
Процедура ОчиститьОчередьОтЗаблокированных(Очередь)
	
	МассивЗаблокированныхСтрок = Очередь.НайтиСтроки(Новый Структура("Заблокирован", Истина));
	ТаблицаКОчистке = Очередь.СкопироватьКолонки("АктОВыполненииЭтапаРабот, Идентификатор, Обработана");
	
	Для каждого ЗаблокированнаяСтрока Из МассивЗаблокированныхСтрок Цикл
		СтрокаКОчисткеОчереди = ТаблицаКОчистке.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКОчисткеОчереди, ЗаблокированнаяСтрока);
		СтрокаКОчисткеОчереди.Обработана = Истина;
		Очередь.Удалить(ЗаблокированнаяСтрока);
	КонецЦикла;
	
	Если ТаблицаКОчистке.Количество() Тогда
		ЗаписатьОчередь(Новый Структура("ОчередьРегистра", ТаблицаКОчистке))
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьОчередьРезультатамиОбработки(ПараметрыОчереди)
	
	ОчередьРегистра = ПараметрыОчереди.ОчередьРегистра; // по данным регистра очереди, с идентификаторами
	ТаблицаОчереди = ПараметрыОчереди.ТаблицаОчереди; // свёрнутая таблица, без идентификаторов, с результатами обработки
	
	Для каждого РезультатОбработки Из ТаблицаОчереди Цикл
		
		СтрокиОчереди = ОчередьРегистра.НайтиСтроки(Новый Структура("АктОВыполненииЭтапаРабот", РезультатОбработки.АктОВыполненииЭтапаРабот));
		
		Для каждого СтрокаОчереди Из СтрокиОчереди Цикл
			СтрокаОчереди.Обработана = РезультатОбработки.Обработана
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
// -- rarus makole 2021-10-13

Функция РезультатЗапросаПоРасходуТМЦвАктах(Запрос)
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	вт_Акты.Номенклатура КАК Номенклатура,
	               |	вт_Акты.Количество КАК Количество,
	               |	вт_Акты.Акт КАК Акт,
				   // ++ rarus makole 2021-07-02 [РАIT-0023374]
				   // Учёт номенклатуры разного качества 
				   //|	вт_Акты.Категория КАК Категория
				   |	вт_Акты.Категория КАК Категория,
				   |	вт_Акты.Номенклатура.Качество КАК Качество
				   // -- rarus makole 2021-07-02 [РАIT-0023374]
	               |ИЗ
	               |	вт_Акты КАК вт_Акты
	               |ИТОГИ
	               |	СУММА(Количество)
	               |ПО
	               |	Акт,
	               |	Категория,
	               |	Номенклатура";
	
	Возврат Запрос.Выполнить();
	
КонецФункции

// ++ rarus makole 2021-04-23
//Функция ПолучитьРасходыПоАктам(Акт) Экспорт
Функция ПолучитьРасходыПоАктам(Акт)
// -- rarus makole 2021-04-23
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Акт", Акт);
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусРасходТМЦ.Ссылка КАК Расход,
	|	рарусРасходТМЦ.ДокументОснование КАК Акт
	|ИЗ
	|	Документ.рарусРасходТМЦ КАК рарусРасходТМЦ
	|ГДЕ
	|	рарусРасходТМЦ.ДокументОснование В(&Акт)
	|	И рарусРасходТМЦ.Проведен";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти