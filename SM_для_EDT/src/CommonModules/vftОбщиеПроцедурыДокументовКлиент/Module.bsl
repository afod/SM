
#Область Обработка_Документов 
Функция ПолучитьСтатусПоИмениКоманды(ИмяКоманды)  Экспорт
	
	ИдентификаторСтатуса = Прав(ИмяКоманды,СтрДлина(ИмяКоманды) - Найти(ИмяКоманды,"_"));
	
	Возврат СоответствиеСтатусаИНомера().Получить(ИдентификаторСтатуса);	
	
КонецФункции

Функция СоответствиеСтатусаИНомера() 
	
	СоответствиеСтатусов = Новый Соответствие;
	
	СоответствиеСтатусов.Вставить("1", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Черновик"));
	СоответствиеСтатусов.Вставить("2", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Отправлен"));
	СоответствиеСтатусов.Вставить("3", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Получен"));
	СоответствиеСтатусов.Вставить("4", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Закрыт"));
	
	Возврат СоответствиеСтатусов;
	
КонецФункции

//rarus_rasuli_30.03.18 ++
Функция ПолучитьСтатусПоИмениКомандыРапорт(ИмяКоманды)  Экспорт
	
	ИдентификаторСтатуса = Прав(ИмяКоманды,СтрДлина(ИмяКоманды) - Найти(ИмяКоманды,"_"));
	
	Возврат СоответствиеСтатусаИНомераРапорт().Получить(ИдентификаторСтатуса);	
	
КонецФункции
//rarus_rasuli_30.03.18 --

//rarus_rasuli_30.03.18 ++
Функция СоответствиеСтатусаИНомераРапорт() 
	
	СоответствиеСтатусов = Новый Соответствие;
	
	СоответствиеСтатусов.Вставить("1", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Черновик"));
	СоответствиеСтатусов.Вставить("2", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Отправлен"));
	СоответствиеСтатусов.Вставить("3", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Рассмотрен"));
	СоответствиеСтатусов.Вставить("4", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Получен"));
	СоответствиеСтатусов.Вставить("5", ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Закрыт"));
	
	Возврат СоответствиеСтатусов;
	
КонецФункции
//rarus_rasuli_30.03.18 --

#КонецОбласти

#Область Обработка_Списков_Документов

Процедура УстановитьУсловноеОформление(Список)  Экспорт
	
	//Закрыт	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Закрыт");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	ЭлементОформления.Использование = Истина;
	
	//Получен	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Получен");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
	ЭлементОформления.Использование = Истина;
	
	//Отправлен	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументовСообщений.Отправлен");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	ЭлементОформления.Использование = Истина;
	
	
КонецПроцедуры

//rarus_rasuli_30.03.18 ++
Процедура УстановитьУсловноеОформлениеРапорт(Список)  Экспорт
	
	//Закрыт	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Закрыт");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	ЭлементОформления.Использование = Истина;
	
	//Получен	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Получен");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ТемноОранжевый);
	ЭлементОформления.Использование = Истина;
	
	//Отправлен	
	ЭлементОформления = Список.УсловноеОформление.Элементы.Добавить(); 
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Статус"); // имя поля
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; // либо задаем свой
	ЭлементОтбора.ПравоеЗначение = ПредопределенноеЗначение("Перечисление.vftСтатусыДокументаРапортОПовреждении.Отправлен");
	ЭлементОтбора.Использование = Истина; 
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Зеленый);
	ЭлементОформления.Использование = Истина;
	
	
КонецПроцедуры
//rarus_rasuli_30.03.18 --

Процедура УстановитьПараметрГруппаСудов(Список, ГруппаСудов) Экспорт
	
	МассивСудов = vftОбщиеПроцедурыДокументовСервер.ПолучитьПереченьСудовПоГруппе(ГруппаСудов);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"Судно",МассивСудов,Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список,"НетОтбораСудно",?(ЗначениеЗаполнено(ГруппаСудов),Ложь,Истина),Истина);	
	
КонецПроцедуры

#КонецОбласти

#Область Печать_Документов

#Область Удалить_печать_word
#Область Сообщение_о_Несоответствии
Процедура ПечатьСообщенийОПотенциальномИнциденте(МассивДокументов) Экспорт
	//
	//#Если НЕ ВебКлиент Тогда
	//	МассивСтруктурДокументов = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыСообщенийОПотенциальномИнциденте(МассивДокументов);
	//	
	//	Если МассивСтруктурДокументов.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Макет		 = УправлениеПечатью.МакетПечатнойФормы("Документ.VftСообщениеОПотенциальномИнциденте.ПФ_DOC_СообщениеОПотенциальномИнциденте");
	//	СсылкаМакет  = УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(Макет,"DOC");
	//	
	//	
	//	Для каждого Документ Из МассивСтруктурДокументов Цикл
	//		
	//		
	//		
	//		ПечатнаяФорма	= УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента("DOC",СсылкаМакет.НастройкиСтраницыМакета);
	//		
	//		ОписаниеОбластей = Новый Структура;    
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",     "ВерхнийКолонтитул");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Документ",               "Общая");
	//		//УправлениеПечатьюКлиент.ПолучитьОбласть("DOC",);
	//		
	//		Область = УправлениеПечатьюКлиент.ОбластьМакета(СсылкаМакет, ОписаниеОбластей["ВерхнийКолонтитул"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
	//		
	//		Область = УправлениеПечатьюКлиент.ОбластьМакета(СсылкаМакет, ОписаниеОбластей["Документ"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, Документ, Ложь);
	//		
	//		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	//		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	//				
	//		
	//	КонецЦикла;
	//	УправлениеПечатьюКлиент.ОчиститьСсылки(СсылкаМакет);
	//	
	//#КонецЕсли
	//
КонецПроцедуры

#КонецОбласти

#Область Анализ_СУБ
Процедура ПечатьАнализСУБ(МассивДокументов) Экспорт
	//
	//#Если НЕ ВебКлиент Тогда
	//	МассивСтруктурДокументов = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыАнализСУБ(МассивДокументов);
	//	
	//	Если МассивСтруктурДокументов.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Макет		 = УправлениеПечатью.ПолучитьМакет("Документ.vftАнализСУБ.ПФ_DOC_АнализСУБ");
	//	СсылкаМакет  = УправлениеПечатьюКлиент.ИнициализироватьМакет(Макет,"DOC");		
	//	
	//	Для каждого Документ Из МассивСтруктурДокументов Цикл			
	//		
	//		ПечатнаяФорма	= УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму("DOC",СсылкаМакет.НастройкиСтраницыМакета);
	//		
	//		ОписаниеОбластей = Новый Структура;    
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",     	"ВерхнийКолонтитул");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Документ",               	"Общая");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Подвал",               	"Общая");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "СтрокаТаблицыСУБ",         "СтрокаТаблицы");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаТаблицыТовары",       "СтрокаТаблицы");
	
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["ВерхнийКолонтитул"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
	//		
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["Документ"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, Документ.Шапка, Ложь);
	//		
	//		//Для Каждого Строка из Документ.Предложения Цикл
	//		//	Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["СтрокаТаблицы"]);
	//		//	УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, Строка, Истина);
	//		//КонецЦикла;
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["ШапкаТаблицыТовары"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
	//		
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["СтрокаТаблицыСУБ"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, Документ.Предложения, Ложь);
	//		//УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
	
	//		
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["Подвал"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, Документ.Шапка, Ложь);
	//		
	
	//		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	//		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	//		
	//		
	//		
	//		
	//	КонецЦикла;
	//	УправлениеПечатьюКлиент.ОчиститьСсылки(СсылкаМакет);
	//	
	//	
	//	
	//#КонецЕсли
	//
КонецПроцедуры

#КонецОбласти

#Область Доклад_о_Несоответствии
Процедура ПечатьДокладаОНесоответствии(МассивДокументов) Экспорт
	//
	//#Если НЕ ВебКлиент Тогда
	//	МассивСтруктурДокументов = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыДокладОНесоответствии(МассивДокументов);
	//	
	//	Если МассивСтруктурДокументов.Количество() = 0 Тогда
	//		Возврат;
	//	КонецЕсли;
	//	
	//	Макет		 = УправлениеПечатью.ПолучитьМакет("Справочник.vftНесоответствия.ПФ_DOC_ДокладОНесоответствии");
	//	СсылкаМакет  = УправлениеПечатьюКлиент.ИнициализироватьМакет(Макет,"DOC");		
	//	
	//	Для каждого Документ Из МассивСтруктурДокументов Цикл			
	//		
	//		ПечатнаяФорма	= УправлениеПечатьюКлиент.ИнициализироватьПечатнуюФорму("DOC",СсылкаМакет.НастройкиСтраницыМакета);
	//		
	//		ОписаниеОбластей = Новый Структура;    
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",     "ВерхнийКолонтитул");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Несоответствие",        "СтрокаТаблицы");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ШапкаДоклада",          "СтрокаТаблицы");
	//		УправлениеПечатью.ДобавитьОписаниеОбласти(ОписаниеОбластей, "Дополнительно",         "СтрокаТаблицы");
	
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["ВерхнийКолонтитул"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбласть(ПечатнаяФорма, Область, Ложь);
	//		
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["ШапкаДоклада"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область,  Документ.Шапка, Ложь);
	//		
	//		Сч = 1;
	//		Для каждого Несоответствие из Документ.Несоответствия Цикл
	//			Массив = новый Массив;
	//			Массив.Добавить(Несоответствие);
	//			Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["Несоответствие"]);
	//			Область.Document.Variables.Item("ПричинаНесоответстви").Value = Несоответствие.ПричинаНесоответствия;
	//			Область.Document.Fields.UpDate();
	
	//			//Область.Document.Bookmarks(СокрЛП("ПричинаНесоответствия")).Select();
	//			//Область.Document.Application.Selection.TypeText(СокрЛП(Несоответствие.ПричинаНесоответствия));
	//			//
	//			//Область.Document.Bookmarks(СокрЛП("ОписаниеНесоответствия")).Select();
	//			//Область.Document.Application.Selection.TypeText(СокрЛП(Несоответствие.ОписаниеНесоответствия));
	
	//			
	//			УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область, Массив, Ложь);
	//			
	//			//АктивныйДокумент = ПолучитьМакет("Макет");
	//			//КомОбъект = АктивныйДокумент.Получить();
	//			//КомОбъект.Application.Visible=1;
	//			//Область.Bookmarks(СокрЛП("ПричинаНесоответстви")).Select();
	//			//КомОбъект.Application.Selection.TypeText(СокрЛП("Несоответствие.ПричинаНесоответствия")
	//			
	//			//НовоеИмя = "ПричинаНесоответстви" +Строка(Сч);
	//			//Область.Document.Variables.Item("ПричинаНесоответстви").Name = НовоеИмя;
	//			//Область.Document.Variables.Item("ПричинаНесоответстви").Value = Несоответствие.ПричинаНесоответствия;
	//			//Область.Document.Fields.UpDate();
	//			//ПечатнаяФорма.COMСоединение.ActiveDocument.Variables.Item("ПричинаНесоответстви").Value = Несоответствие.ПричинаНесоответствия;
	//			//ПечатнаяФорма.COMСоединение.ActiveDocument.Fields.UpDate();
	//			//УправлениеПечатьюКлиент.ПрисоединитьОбластьИЗаполнитьПараметры(ПечатнаяФорма, Область, Несоответствие, Ложь);
	//		Сч = Сч + 1;	
	//		КонецЦикла;
	//		
	//		Массив = новый Массив;
	//		Массив.Добавить(Документ.Шапка);
	//		Область = УправлениеПечатьюКлиент.ПолучитьОбласть(СсылкаМакет, ОписаниеОбластей["Дополнительно"]);
	//		УправлениеПечатьюКлиент.ПрисоединитьИЗаполнитьКоллекцию(ПечатнаяФорма, Область,  Массив, Ложь);
	//		
	
	//		УправлениеПечатьюКлиент.ПоказатьДокумент(ПечатнаяФорма);
	//		УправлениеПечатьюКлиент.ОчиститьСсылки(ПечатнаяФорма, Ложь);
	//		
	//		
	//		
	//		
	//	КонецЦикла;
	//	УправлениеПечатьюКлиент.ОчиститьСсылки(СсылкаМакет);
	//	
	//	
	//	
	//#КонецЕсли
	//
КонецПроцедуры
#КонецОбласти  
#КонецОбласти


Процедура СохранитьТабличныеДокументыВDOCX(МассивТД,ПутьКМакету, Ориентация = Неопределено, Каталог=Неопределено) Экспорт
	
	// ++ rarus kloa 08.01.2019  
	Если Каталог = Неопределено Тогда
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Заголовок = "Выберите каталог для сохранения файлов";
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			Каталог = ДиалогОткрытияФайла.Каталог;
		Иначе
			//++rarus markim
			ПоказатьПредупреждение(,НСтр("ru = 'Каталог не выбран!'; en = 'Folder not selected!'"));
			//--rarus markim
			Возврат;
		КонецЕсли;
	КонецЕсли; 
//++rarus markim	
	Макет		 	= vftОбщиеПроцедурыДокументовСервер.ПолучитьМакет(ПутьКМакету);
	СсылкаМакет  	= УправлениеПечатьюКлиент.ИнициализироватьМакетОфисногоДокумента(Макет,"DOC");
//--rarus markim	
	Для Каждого ОписаниеТД из МассивТД Цикл
		
		ОписаниеСсылки = СтрЗаменить(Строка(ОписаниеТД.Документ),":","_");
		ОписаниеСсылки = СтрЗаменить(ОписаниеСсылки,"\","_");
		ОписаниеСсылки = СтрЗаменить(ОписаниеСсылки,"/","_");
		
		ИмяФайла = Каталог+"\ "+ОписаниеСсылки+" "+Формат(ТекущаяДата(),"ДФ='dd MMMM yyyy hh_mm_ss'")+".docx";
		ОписаниеТД.ТабличныйДокумент.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.DOCX);
		
		Word			= Неопределено;
		ДокументWORD 	= Неопределено;
		Попытка
			Word = Новый COMОбъект("Word.Application");
			ДокументWORD = Word.Documents.Open(ИмяФайла); 
			ДокументWORD.Activate();
			Если Ориентация <> Неопределено Тогда
				ДокументWORD.PageSetup.Orientation = Ориентация;
			КонецЕсли;
			ОписаниеОбластей = Новый Структура;   
		//++rarus markim
			vftОбщиеПроцедурыДокументовСервер.ДобавитьОписаниеОбласти(ОписаниеОбластей, "ВерхнийКолонтитул",     "ВерхнийКолонтитул");
			Область = УправлениеПечатьюКлиент.ОбластьМакета(СсылкаМакет, ОписаниеОбластей["ВерхнийКолонтитул"]);
		//--rarus markim	
			
			Область.Header.Range.Copy();
			ДокументWORD.Sections(1).Headers.Item(1).Range.Paste();
			// ++ rarus kloa 29.12.2018  
			ДокументWORD.Sections(1).Headers.Item(1).Range.ParagraphFormat.SpaceAfter = 0;
			Word.Selection.ParagraphFormat.SpaceAfter = 0;
			// -- rarus kloa 29.12.2018 
			
			ДокументWORD.Save();
			ДокументWORD.Close();				
			Word.Quit();
			// ++ rarus markim  
			Если ТипЗнч(ОписаниеТД.Документ) = Тип("Строка") Тогда
				ПоказатьОповещениеПользователя("Документ напечатан.");
			Иначе
				ПоказатьОповещениеПользователя("Документ напечатан.", ПолучитьНавигационнуюСсылку(ОписаниеТД.Документ)); 
			КонецЕсли;
			// -- rarus markim 
		Исключение
			
			Если ДокументWORD <> Неопределено Тогда
				ДокументWORD.Close();
			КонецЕсли;				
			
			Если Word <> Неопределено Тогда
				Word.Quit();
			КонецЕсли;
			
			Сообщение = новый СообщениеПользователю;
			Сообщение.Текст = "Документ " + Строка(ОписаниеТД.Документ) +" не был сохранен.По причине:
			|"+ОписаниеОшибки();
			Сообщение.Сообщить();
			
			
		КонецПопытки;
	КонецЦикла;
	
	УправлениеПечатьюКлиент.ОчиститьСсылки(СсылкаМакет);
	
КонецПроцедуры	

#КонецОбласти