
Перем ЭтоФоновоеЗадание;

////////////////////////////////////////////////////////////////////////////////
//процедуры и функции совместимости с конфигурацией 
//"Библиотека стандартных подсистем", редакция 2.1 
//(далее по тексту "БСП")
//Версия БСП = "2.1.4.34"

//ule
//http://its.1c.ru/db/bspdoc#content:200:hdoc
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	////////////////////////////////////////////////////////////////////////////////
	//1. Вид
	// Строка, вид обработки, возможные значения: 
	// ДополнительнаяОбработка
	// ДополнительныйОтчет
	// ЗаполнениеОбъекта 
	// Отчет
	// ПечатнаяФорма
	// СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид"            , "ДополнительныйОтчет");
	//1. Вид
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//2. Назначение
	// Массив строк имен объектов метаданных в формате: 
	// <ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>].
	// Например, «Документ.СчетЗаказ» или «Справочник.*».
	// Примечание: параметр имеет смысл только для назначаемых обработок, 
	// для глобальных – не используется.
	ПараметрыРегистрации.Вставить("Назначение"     , "");
	//2. Назначение
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//3. Наименование 
	// Наименование обработки, которым будет заполнено наименование элемента справочника, 
	// краткое описание для идентификации обработки администратором.
	ПараметрыРегистрации.Вставить("Наименование"   , ЭтотОбъект.Метаданные().Синоним);
	//3. Наименование 
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//4. Версия
	// Версия обработки в формате <старший номер>.<младший номер> 
	// используется при загрузке обработок в информационную базу. 
	// Например: 1.0.
	//Ульянов Е.А.: Предпочитаю хранить номер версии в комментарии к объекту
	КомментарийОбработки = ЭтотОбъект.Метаданные().Комментарий;
	ПозицияНезначащихСимволов = Найти(КомментарийОбработки,"//");
	Если ПозицияНезначащихСимволов <> 0 Тогда
		КомментарийОбработки = СокрЛП(Лев(КомментарийОбработки,ПозицияНезначащихСимволов - 1));
	Иначе
		КомментарийОбработки = СокрЛП(КомментарийОбработки);
	КонецЕсли;
	ПараметрыРегистрации.Вставить("Версия"         ,КомментарийОбработки);
	//4. Версия
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//5. БезопасныйРежим
	// Принимает значение Истина или Ложь, в зависимости от того, требуется ли 
	// устанавливать или отключать безопасный режим при исполнении обработки (отчета).
	// Если Истина, обработка (отчет) будет запущена в безопасном режиме При этом в 
	// частности, не гарантируется корректная работа дополнительных обработок под 
	// пользователями без полных прав в тех случаях, когда обработка вызывает код 
	// конфигурации, который не рассчитан на работу в безопасном режиме (в том числе,
	// неявно, когда срабатывает код модуля объекта и подписок на события при записи
	// данных).
	//
	// Более подробно о безопасном режиме см. документацию к платформе 1С:Предприятие.
	ПараметрыРегистрации.Вставить("БезопасныйРежим", ЛОЖЬ);
	//5. БезопасныйРежим
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//6. Информация
	// Краткая информация по обработке, описание обработки.
	ПараметрыРегистрации.Вставить("Информация"     , "");
	//6. Информация 
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//7. ВерсияБСП
	// Минимальная версия БСП, на которую рассчитывает код дополнительной обработки.
	// Должна быть задана не младше 1.2.1.4. 
    //
	// Номер версии БСП задается в формате «РР.ПП.ВВ.СС» (РР – старший номер редакции;
	// ПП – младший номер редакции; ВВ – номер версии; СС – номер сборки).
	ПараметрыРегистрации.Вставить("ВерсияБСП"      , "2.1.4.34");
	//7. ВерсияБСП
	////////////////////////////////////////////////////////////////////////////////
	
	////////////////////////////////////////////////////////////////////////////////
	//8. Команды
	// Команды, поставляемые обработкой. Таблица значений 
	ТаблицаКоманд = Новый ТаблицаЗначений;
	
	// с колонками:
	//////////////////////////////////////
	// Представление – представление команды в пользовательском интерфейсе;
	ТаблицаКоманд.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//
	// Идентификатор – идентификатор команды; любая строка, уникальная в пределах
	//	данной обработки (отчета). *
	//  * Для обработок с печатными формами на основе макета табличного документа 
	//    должен содержать список макетов, на основе которых нужно получить печатную
	//    форму (см. описание параметра ИменаМакетов процедуры 
	//    УправлениеПечатьюКлиент.ВыполнитьКомандуПечати в разделе Печать).
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//////////////////////////////////////
	// Использование – вариант запуска команды:
	//
	// ● ОткрытиеФормы – открыть форму обработки;
	//
	// ● ВызовКлиентскогоМетода – вызвать клиентскую экспортную процедуру из модуля
	//  формы обработки;
	//
	// ● ВызовСерверногоМетода – вызвать серверную экспортную процедуру из модуля
	//  объекта обработки.
	//
	// ● СценарийВБезопасномРежиме – вызвать  серверную экспортную функцию из модуля
	//  объекта для формирования сценария выполнения (специальный вариант запуска 
	//  для использования программного интерфейса, расширяющего доступные разработчику
	//  дополнительной обработки операции, при выполнении дополнительной обработки
	//  в безопасном режиме, подробнее см. Расширение безопасного режима).
	ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//////////////////////////////////////
	// ПоказыватьОповещение – Истина, если требуется показать оповещение 
	//  при начале и при завершении работы обработки. Например, при запуске обработки
	//  без открытия формы.
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//////////////////////////////////////
	// Модификатор – дополнительный модификатор команды. Используется для 
	//  дополнительных обработок печатных форм на основе табличных макетов, для 
	//  таких команд должен содержать строку ПечатьMXL (см. пример в демонстрационной
	//  конфигурации).
	ТаблицаКоманд.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = "Открыть отчет """ + ЭтотОбъект.Метаданные().Синоним + """...";
	НоваяКоманда.Идентификатор = "ВнешняяОбработка_" + ЭтотОбъект.Метаданные().Имя;
	НоваяКоманда.Использование = "ОткрытиеФормы";
	НоваяКоманда.ПоказыватьОповещение = ЛОЖЬ;
	НоваяКоманда.Модификатор = "";
	
	Если ЭтоФоновоеЗадание Тогда
		НоваяКоманда = ТаблицаКоманд.Добавить();
		НоваяКоманда.Представление = "Запустить """ + ЭтотОбъект.Метаданные().Синоним + """...";
		НоваяКоманда.Идентификатор = "ВнешняяОбработка_" + ЭтотОбъект.Метаданные().Имя;
		НоваяКоманда.Использование = "ВызовСерверногоМетода";
		НоваяКоманда.ПоказыватьОповещение = ЛОЖЬ;
		НоваяКоманда.Модификатор = "";
	КонецЕсли;

	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	//8. Команды
	////////////////////////////////////////////////////////////////////////////////
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции//СведенияОВнешнейОбработке()

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	//УстановитьОбязательныеНастройки(КомпоновщикНастроек, ПользовательскиеНастройкиМодифицированы);
	
	// Сформируем отчет
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ВидОтчета			= 0;
	ОтборПоКритичности 	= Ложь;
	ПараметрКритичность = Ложь;

	ПараметрПериод = "";
	//ЭтоРасшифровка = КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("Расшифровка");
	//Если ЭтоРасшифровка Тогда
	//	ПараметрыДанных = КомпоновщикНастроек.Настройки.ПараметрыДанных;
	//Иначе
		ПараметрыДанных = КомпоновщикНастроек.ПользовательскиеНастройки;
	//КонецЕсли;
	Для Каждого ЭлементНастроек Из ПараметрыДанных.Элементы Цикл
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если СокрЛП(ЭлементНастроек.Параметр) = "Период" Тогда
				ПараметрПериод = ЭлементНастроек.Значение;
			ИначеЕсли СокрЛП(ЭлементНастроек.Параметр) = "ВидОтчета" Тогда
				ВидОтчета = ЭлементНастроек.Значение;
			ИначеЕсли СокрЛП(ЭлементНастроек.Параметр) = "Критичность" Тогда
				ОтборПоКритичности 	= ЭлементНастроек.Использование;
				ПараметрКритичность = ЭлементНастроек.Значение;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	Если НЕ ЗначениеЗаполнено(ПараметрПериод) Тогда
		//ПараметрПериод = ПериодРасшифровки;
		//Если НЕ ЗначениеЗаполнено(ПараметрПериод) Тогда
			СтрокаСообщения = НСтр("ru = 'Не установлено значение параметра ""Дата отчета"".';
									|en = 'Value of the ""Report date"" parameter is not set.'");
			ВызватьИсключение СтрокаСообщения;
		//КонецЕсли;
	КонецЕсли;
	
	Для Каждого УровеньСтруктураОтчета Из НастройкиОтчета.Структура Цикл
		Если УровеньСтруктураОтчета.Имя = "Расшифровка" Тогда
			Если УровеньСтруктураОтчета.ПоляГруппировки.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("РасширеннаяРасшифровка") Тогда
				// ++ rarus zalikh 2021-09-29 [РАIT-0023499]
				// изменено, добавлены поля с датами
				УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Очистить();
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ID");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ВидРемонта");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("РегистраторФакт");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаНачалаФакт");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаОкончанияФакт");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("РегистраторПлан");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаНачалаПлан");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаОкончанияПлан");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("НормативныйРемонт");
				// -- rarus zalikh 2021-09-29 [РАIT-0023499]
				
				//RARUS-NN EvgenU № 2021_06_29 ++
			ИначеЕсли УровеньСтруктураОтчета.ПоляГруппировки.Элементы[0].Поле = Новый ПолеКомпоновкиДанных("РасширеннаяРасшифровкаСДатами") Тогда
				УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Очистить();
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ID");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("РегистраторПлан");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаНачалаПлан");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаОкончанияПлан");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("РегистраторФакт");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаНачалаФакт");
				нПоле = УровеньСтруктураОтчета.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				нПоле.Поле = Новый ПолеКомпоновкиДанных("ДатаОкончанияФакт");
				//RARUS-NN EvgenU " 2021_06_29 --
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ВнешниеНаборыДанных  = Новый Структура("Данные", ПолучитьДанные(ПараметрПериод, ВидОтчета, ОтборПоКритичности, ПараметрКритичность));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Сообщим форме отчета, что настройки модифицированы
	//Если ПользовательскиеНастройкиМодифицированы Тогда
	//	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	//КонецЕсли;

КонецПроцедуры


Функция ПолучитьДанные(ПараметрПериод, ВидОтчета, ОтборПоКритичности, ПараметрКритичность) 
	
	Запрос = Новый Запрос; 
	Запрос.УстановитьПараметр("НачалоПериода"		, ПараметрПериод.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода"		, ПараметрПериод.ДатаОкончания);
	Запрос.УстановитьПараметр("ВидОтчета"			, ВидОтчета);
	Запрос.УстановитьПараметр("ОтборПоКритичности"	, ОтборПоКритичности);
	Запрос.УстановитьПараметр("ПараметрКритичность"	, ПараметрКритичность);

	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеДоп.ОбъектРемонта.ПодразделениеИсполнитель КАК Судно,
	|	ДанныеДоп.ОбъектРемонта КАК ОбъектРемонта,
	|	Данные.IDРемонта КАК ID,
	|	ДанныеДоп.ВидРемонтныхРабот КАК ВидРемонта,
	|	Данные.Регистратор КАК РегистраторФакт,
	|	NULL КАК РегистраторПлан,
	|	0 КАК КоличествоПлан,
	|	1 КАК КоличествоФакт,
	|	NULL КАК ДатаНачалаПлан,
	|	NULL КАК ДатаОкончанияПлан,
	|	Данные.ДатаНачала КАК ДатаНачалаФакт,
	|	Данные.ДатаОкончания КАК ДатаОкончанияФакт,
	|	ВЫБОР
	|		КОГДА ДанныеДоп.ВидРемонтныхРабот = впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение
	|				И ДанныеДоп.Выполнено
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоПланПункт9
	|ПОМЕСТИТЬ врРемонты
	|ИЗ
	|	РегистрСведений.впАктыПоРемонтам КАК Данные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.впАктОВыполненииЭтапаРабот.РемонтыОборудования КАК ДанныеДоп
	|		ПО Данные.Регистратор = ДанныеДоп.Ссылка
	|			И Данные.IDРемонта = ДанныеДоп.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Константа.впВидРемонтаПриВводеНаОснованииВыявленныхДефектов КАК впВидРемонтаПриВводеНаОснованииВыявленныхДефектов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	Данные.ДатаОкончания >= &НачалоПериода
	|	И Данные.ДатаНачала <= &КонецПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДоп.ОбъектРемонта.ПодразделениеИсполнитель,
	|	ДанныеДоп.ОбъектРемонта,
	|	Данные.IDРемонта,
	|	ДанныеДоп.ВидРемонтныхРабот,
	|	Данные.Регистратор,
	|	Данные.ДатаНачала,
	|	Данные.ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ДанныеДоп.ВидРемонтныхРабот = впВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Значение
	|				И ДанныеДоп.Выполнено
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Данные.ОбъектРемонта.ПодразделениеИсполнитель,
	|	Данные.ОбъектРемонта,
	|	Данные.УникальныйИдентификатор,
	|	Данные.ВидРемонтныхРабот,
	|	NULL,
	|	Данные.ПланГрафик,
	|	1,
	|	0,
	|	Данные.ДатаНачалаПлан,
	|	Данные.ДатаОкончанияПлан,
	|	NULL,
	|	NULL,
	|	0
	|ИЗ
	|	РегистрСведений.впПланГрафикППР КАК Данные
	|ГДЕ
	|	Данные.ДатаОкончанияПлан >= ДОБАВИТЬКДАТЕ(&НачалоПериода, МЕСЯЦ, -12)
	|	И Данные.ДатаНачалаПлан <= &КонецПериода
	|	И Данные.ПланГрафик ССЫЛКА Документ.впПланГрафикРемонта
	|   И Не Данные.Удален
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК ТехКарта
	|ПОМЕСТИТЬ Вт_ТехКарты
	|ИЗ
	|	врРемонты КАК Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.впНормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|		ПО Данные.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|			И Данные.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ТехКарты.ОбъектРемонта КАК ОбъектРемонта,
	|	Вт_ТехКарты.ВидРемонта КАК ВидРемонта,
	|	Вт_ТехКарты.НормативныйРемонт КАК НормативныйРемонт,
	|	МАКСИМУМ(ЕСТЬNULL(торо_ТехКартыСписокОпераций.Операция.Критичность, ЛОЖЬ)) КАК Критичнная
	|ПОМЕСТИТЬ втКритичность
	|ИЗ
	|	Вт_ТехКарты КАК Вт_ТехКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.впТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	|		ПО Вт_ТехКарты.ТехКарта = торо_ТехКартыСписокОпераций.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Вт_ТехКарты.ОбъектРемонта,
	|	Вт_ТехКарты.ВидРемонта,
	|	Вт_ТехКарты.НормативныйРемонт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА врРемонты.Судно ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.vftСуда.ПустаяССылка)
	|		КОГДА &ВидОтчета = 1
	|			ТОГДА врРемонты.Судно.Родитель
	|		ИНАЧЕ врРемонты.Судно
	|	КОНЕЦ КАК Судно,
	|	врРемонты.ОбъектРемонта КАК ОбъектРемонта,
	|	врРемонты.ID КАК ID,
	|	врРемонты.ВидРемонта КАК ВидРемонта,
	|	врРемонты.РегистраторФакт КАК РегистраторФакт,
	|	врРемонты.РегистраторПлан КАК РегистраторПлан,
	|	врРемонты.КоличествоПлан КАК КоличествоПлан,
	|	врРемонты.КоличествоФакт КАК КоличествоФакт,
	|	врРемонты.ДатаНачалаПлан КАК ДатаНачалаПлан,
	|	врРемонты.ДатаОкончанияПлан КАК ДатаОкончанияПлан,
	|	врРемонты.ДатаНачалаФакт КАК ДатаНачалаФакт,
	|	врРемонты.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
	|	втКритичность.НормативныйРемонт КАК НормативныйРемонт,
	|	ЕСТЬNULL(втКритичность.Критичнная, ЛОЖЬ) КАК Критичность,
	|	врРемонты.КоличествоПланПункт9 КАК КоличествоПланПункт9
	|ПОМЕСТИТЬ врОсновная
	|ИЗ
	|	врРемонты КАК врРемонты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКритичность КАК втКритичность
	|		ПО врРемонты.ОбъектРемонта = втКритичность.ОбъектРемонта
	|			И врРемонты.ВидРемонта = втКритичность.ВидРемонта
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоКритичности
	|				ТОГДА ЕСТЬNULL(втКритичность.Критичнная, ЛОЖЬ) = &ПараметрКритичность
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОсновная.Судно КАК Судно
	|ИЗ
	|	врОсновная КАК врОсновная
	|
	|СГРУППИРОВАТЬ ПО
	|	врОсновная.Судно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОсновная.Судно КАК Судно,
	|	врОсновная.ОбъектРемонта КАК ОбъектРемонта,
	|	врОсновная.ID КАК ID,
	|	врОсновная.ВидРемонта КАК ВидРемонта,
	|	СУММА(ЕСТЬNULL(врОсновная.КоличествоПлан, 0)) КАК КоличествоПлан,
	|	СУММА(врОсновная.КоличествоФакт) КАК КоличествоФакт,
	|	ЕСТЬNULL(МИНИМУМ(врОсновная.ДатаНачалаПлан), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПлан,
	|	ЕСТЬNULL(МАКСИМУМ(врОсновная.ДатаОкончанияПлан), ДАТАВРЕМЯ(2999, 12, 31)) КАК ДатаОкончанияПлан,
	|	ЕСТЬNULL(МИНИМУМ(врОсновная.ДатаНачалаФакт), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаФакт,
	|	ЕСТЬNULL(МАКСИМУМ(врОсновная.ДатаОкончанияФакт), ДАТАВРЕМЯ(2999, 12, 31)) КАК ДатаОкончанияФакт,
	|	врОсновная.НормативныйРемонт КАК НормативныйРемонт,
	|	МАКСИМУМ(врОсновная.Критичность) КАК Критичность,
	|	врОсновная.КоличествоПланПункт9 КАК КоличествоПланПункт9
	|ИЗ
	|	врОсновная КАК врОсновная
	|
	|СГРУППИРОВАТЬ ПО
	|	врОсновная.Судно,
	|	врОсновная.ОбъектРемонта,
	|	врОсновная.ID,
	|	врОсновная.ВидРемонта,
	|	врОсновная.НормативныйРемонт,
	|	врОсновная.КоличествоПланПункт9
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОсновная.Судно КАК Судно,
	|	врОсновная.ОбъектРемонта КАК ОбъектРемонта,
	|	врОсновная.ID КАК ID,
	|	врОсновная.ВидРемонта КАК ВидРемонта,
	|	врОсновная.РегистраторФакт КАК РегистраторФакт,
	|	врОсновная.РегистраторПлан КАК РегистраторПлан,
	|	врОсновная.КоличествоПлан КАК КоличествоПлан,
	|	врОсновная.КоличествоФакт КАК КоличествоФакт,
	|	врОсновная.ДатаНачалаПлан КАК ДатаНачалаПлан,
	|	врОсновная.ДатаОкончанияПлан КАК ДатаОкончанияПлан,
	|	врОсновная.ДатаНачалаФакт КАК ДатаНачалаФакт,
	|	врОсновная.ДатаОкончанияФакт КАК ДатаОкончанияФакт,
	|	врОсновная.НормативныйРемонт КАК НормативныйРемонт,
	|	врОсновная.Критичность КАК Критичность,
	|	врОсновная.КоличествоПланПункт9 КАК КоличествоПланПункт9
	|ИЗ
	|	врОсновная КАК врОсновная";
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаСуда = Результат[Результат.Количество() - 3].Выгрузить();
	ТаблицаАнализ = Результат[Результат.Количество() - 2].Выгрузить();
	ТаблицаДетали = Результат[Результат.Количество() - 1].Выгрузить();
	                                                                                                                                           ;
	ТаблицаДанных = Новый ТаблицаЗначений;
	Для Каждого Колонка из ТаблицаДетали.Колонки Цикл
		ТаблицаДанных.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	ТаблицаДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанных.Колонки.Добавить("ПоказательПорядок", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2)));
	ТаблицаДанных.Колонки.Добавить("ПоказательЗаголовок", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(150)));
	ТаблицаДанных.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2)));
	
	Для Каждого СтрокаСуда из ТаблицаСуда Цикл
		СтруктуриПоискаСудно = Новый Структура("Судно", СтрокаСуда.Судно);
		СтрокиПоСудну = ТаблицаАнализ.НайтиСтроки(СтруктуриПоискаСудно);
		Период = НачалоМесяца(ПараметрПериод.ДатаНачала);
		Добавлен1 = Ложь;
		Добавлен2 = Ложь;
		Добавлен3 = Ложь;
		Добавлен4 = Ложь;
		Добавлен5 = Ложь;
		Добавлен6 = Ложь;
		Добавлен7 = Ложь;
		Добавлен8 = Ложь;
		Добавлен9 = Ложь;
		Добавлен10 = Ложь;
		Пока Период < ПараметрПериод.ДатаОкончания Цикл
			ДатаНачала = НачалоМесяца(Период);
			ДатаОкончания = КонецМесяца(Период);
			КоличествоПоставлено = 0;
			КоличествоВыполнено = 0;
			для Каждого СтрокаТаблицы Из СтрокиПоСудну Цикл
				МассивДобавления = Новый Массив;
				
				//1. Количество плановых работ за месяц
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаНачалаПлан) 
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 1, "Количество плановых работ за месяц", "План"));
					//RARUS-NN EvgenU № 2021_06_28 ++
					//КоличествоПоставлено = КоличествоПоставлено + 1;
					//RARUS-NN EvgenU " 2021_06_28 --
					Добавлен1 = Истина;
				КонецЕсли;
				
				//2. Количество завершенных работ за месяц
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаОкончанияФакт)
					И ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаОкончанияПлан) Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 2, "Количество завершенных работ за месяц", "Факт"));
					//RARUS-NN EvgenU № 2021_06_28 ++
					//КоличествоВыполнено = КоличествоВыполнено + 1;
					//RARUS-NN EvgenU " 2021_06_28 --
					Добавлен2 = Истина;
				КонецЕсли;
				
				//3. Просроченные некритические работы за месяц
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаНачалаПлан)
					И ДатаОкончания < СтрокаТаблицы.ДатаОкончанияФакт
					И СтрокаТаблицы.Критичность = ЛОЖЬ 
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 3, "Просроченные некритические работы за месяц", "План"));
					Добавлен3 = Истина;
				КонецЕсли;
				
				//4. Просроченные критические работы за месяц
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаНачалаПлан)
					И ДатаОкончания < СтрокаТаблицы.ДатаОкончанияФакт
					И СтрокаТаблицы.Критичность = Истина  
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 4, "Просроченные критические работы за месяц", "План"));
					Добавлен4 = Истина;
				КонецЕсли;
				
				//5. Всего просроченных работ за месяц
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаНачалаПлан)
					И ДатаОкончания < СтрокаТаблицы.ДатаОкончанияФакт 
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 5, "Всего просроченных работ за месяц", "План"));
					Добавлен5 = Истина;
				КонецЕсли;
				
				//7. Просроченные в прошлых месяцах, завершенные в текущем месяце
				Если ДатаНачала > НачалоМесяца(СтрокаТаблицы.ДатаНачалаПлан) 
					И ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаОкончанияФакт)
					И СтрокаТаблицы.КоличествоПлан > 0 
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 7, "Просроченные в прошлых месяцах, завершенные в текущем месяце", "Факт"));
					Добавлен7 = Истина;
				КонецЕсли;
				
				//8. Просроченные с прошлых месяцов, незавершенные в текущем
				Если  ДатаНачала > НачалоМесяца(СтрокаТаблицы.ДатаНачалаПлан) 
					И ДатаОкончания < СтрокаТаблицы.ДатаОкончанияФакт 
					И СтрокаТаблицы.КоличествоПлан > 0 
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 8, "Просроченные с прошлых месяцов, незавершенные в текущем", "План"));
					Добавлен8 = Истина;
				КонецЕсли;
				
				//9. Внеплановые работы (выполненные)
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаОкончанияФакт)
					И СтрокаТаблицы.КоличествоПланПункт9 > 0  
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 9, "Внеплановые работы (выполненные)", "Факт"));
					Добавлен9 = Истина;
				КонецЕсли;
				
				//10. Плановые работы, выполненные раньше срока
				Если  ДатаНачала = НачалоМесяца(СтрокаТаблицы.ДатаОкончанияФакт)
					И НачалоМесяца(СтрокаТаблицы.ДатаОкончанияФакт) < НачалоМесяца(СтрокаТаблицы.ДатаОкончанияПлан)
					И СтрокаТаблицы.КоличествоПлан > 0 
					Тогда
					МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 10, "Плановые работы, выполненные раньше срока", "Факт"));
					Добавлен10 = Истина;
				КонецЕсли;
				
				Если МассивДобавления.Количество() Тогда
					
					Для Каждого СтруктураДобавления Из МассивДобавления Цикл
						СтруктуриПоиска = Новый Структура("Судно, ОбъектРемонта, ID, ВидРемонта");
						Если СтруктураДобавления.ПланФакт = "План" Тогда
							СтруктуриПоиска.Вставить("КоличествоПлан",1);
						Иначе
							СтруктуриПоиска.Вставить("КоличествоФакт",1);
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтруктуриПоиска, СтрокаТаблицы);
						НайдСтроки = ТаблицаДетали.НайтиСтроки(СтруктуриПоиска);
						Для Каждого СтрокаДетали Из НайдСтроки Цикл
							нСтрока = ТаблицаДанных.Добавить();
							ЗаполнитьЗначенияСвойств(нСтрока,СтрокаДетали); 
							ЗаполнитьЗначенияСвойств(нСтрока,СтруктураДобавления); 
							нСтрока.Значение = 1;
							нСтрока.Период = Период;
							//RARUS-NN EvgenU № 2021_06_28 ++
							Если      СтруктураДобавления.ПоказательПорядок = 1 Тогда 
								КоличествоПоставлено = КоличествоПоставлено + 1;
							ИначеЕсли СтруктураДобавления.ПоказательПорядок = 2 Тогда 
								КоличествоВыполнено = КоличествоВыполнено + 1;
							КонецЕсли;
							//RARUS-NN EvgenU " 2021_06_28 --
						КонецЦикла;
					КонецЦикла;
					
					
				КонецЕсли;
				
				
			КонецЦикла;
				
			//6. Процент невыполнения (%)
			Если  Истина Тогда
				СтруктураДобавления = Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 6, "Процент невыполнения (%)");
				нСтрока = ТаблицаДанных.Добавить();
				//ЗаполнитьЗначенияСвойств(нСтрока,СтрокаТаблицы); 
				нСтрока.Судно = СтрокаСуда.Судно;
				нСтрока.ДатаНачалаПлан = ДатаНачала;
				нСтрока.ДатаОкончанияПлан = ДатаНачала;
				нСтрока.ДатаНачалаФакт = ДатаОкончания;
				нСтрока.ДатаОкончанияФакт = ДатаОкончания;
				ЗаполнитьЗначенияСвойств(нСтрока,СтруктураДобавления); 
				Если КоличествоПоставлено = 0 Тогда
					нСтрока.Значение = 0;
				Иначе
					нСтрока.Значение = (КоличествоПоставлено - КоличествоВыполнено) / КоличествоПоставлено * 100;
				КонецЕсли;
				нСтрока.Период = Период;
				Добавлен6 = Истина;
			КонецЕсли;
			
			МассивДобавления = Новый Массив;
			Если Не Добавлен1 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 1, "Количество плановых работ за месяц", "План"));
			КонецЕсли;
			
			Если Не Добавлен2 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 2, "Количество завершенных работ за месяц", "Факт"));
			КонецЕсли;
			
			Если Не Добавлен3 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 3, "Просроченные некритические работы за месяц", "План"));
			КонецЕсли;
			
			Если Не Добавлен4 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 4, "Просроченные критические работы за месяц", "План"));
			КонецЕсли;
			
			Если Не Добавлен5 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 5, "Всего просроченных работ за месяц", "План"));
			КонецЕсли;
			
			Если Не Добавлен7 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 7, "Просроченные в прошлых месяцах, завершенные в текущем месяце", "Факт"));
			КонецЕсли;
			
			Если Не Добавлен8 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 8, "Просроченные с прошлых месяцов, незавершенные в текущем", "План"));
			КонецЕсли;
			
			Если Не Добавлен9 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 9, "Внеплановые работы (выполненные)", "Факт"));
			КонецЕсли;
			
			Если Не Добавлен10 Тогда
				МассивДобавления.Добавить(Новый Структура("ПоказательПорядок, ПоказательЗаголовок, ПланФакт", 10, "Плановые работы, выполненные раньше срока", "Факт"));
			КонецЕсли;
			
			Если МассивДобавления.Количество() Тогда
					
				Для Каждого СтруктураДобавления Из МассивДобавления Цикл
					нСтрока = ТаблицаДанных.Добавить();
					//ЗаполнитьЗначенияСвойств(нСтрока,СтрокаТаблицы); 
					нСтрока.Судно = СтрокаСуда.Судно;
					нСтрока.ДатаНачалаПлан = ДатаНачала;
					нСтрока.ДатаОкончанияПлан = ДатаНачала;
					нСтрока.ДатаНачалаФакт = ДатаОкончания;
					нСтрока.ДатаОкончанияФакт = ДатаОкончания;
					ЗаполнитьЗначенияСвойств(нСтрока,СтруктураДобавления); 
					нСтрока.Значение = 0;
					нСтрока.Период = Период;
				КонецЦикла;
				
				
			КонецЕсли;
				
			//конец цикла
			Период = ДобавитьМесяц(Период,1);
		КонецЦикла;
	КонецЦикла;

	Возврат ТаблицаДанных;
	
КонецФункции

ЭтоФоновоеЗадание = Ложь;