
Функция СформироватьТабДок(Документ, Секция) Экспорт
	
	Таб  =  новый ТабличныйДокумент;
	
	// Получаем данные отчета
	//-----------------------
	ТЗ = ПолучитьДанныеПоНС(Документ, Секция);
	
	// Выводим шапку
	//--------------
	Макет = ПолучитьМакет("ПутевойЖурналНС");
	
	Таб.Очистить();
	Таб.ОбластьПечати			= Неопределено;
	Таб.ЧерноБелаяПечать		= Ложь;
	Таб.АвтоМасштаб				= Истина;
	Таб.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	Таб.ОтображатьСетку			= Ложь;
	Таб.ОтображатьЗаголовки 	= Ложь;
	Таб.ОтображатьГруппировки	= Истина;
	Таб.ТолькоПросмотр			= Истина;
	
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусПринадлежностьСуднаКБТОФСрезПоследних.БТОФ КАК БТОФ
	|ИЗ
	//|	РегистрСведений.рарусПринадлежностьСуднаКБТОФ.СрезПоследних(&Период,  Судно = &Судно) КАК рарусПринадлежностьСуднаКБТОФСрезПоследних";
	|	РегистрСведений.рарусПринадлежностьСуднаКБТОФ.СрезПоследних(,  Судно = &Судно) КАК рарусПринадлежностьСуднаКБТОФСрезПоследних";
	Запрос.УстановитьПараметр("Судно", Секция);
	Запрос.УстановитьПараметр("Период", новый Граница(Документ.Дата,  ВидГраницы.Включая));
	Выборка	= Запрос.Выполнить().Выбрать();
	БТОФ	=  "";
	Если Выборка.Следующий() Тогда
		БТОФ = Выборка.БТОФ;
	КонецЕсли;
	
	Судно = Документ.Судно;
	
	Если ТипЗнч(Секция) = Тип("СправочникСсылка.рарусПрочиеСуда") Тогда
		МощностьДвигателя = 0;
	Иначе
		МощностьДвигателя = Секция.МощностьДвигателя;
		Если НЕ ЗначениеЗаполнено(МощностьДвигателя) Тогда
			МощностьДвигателя = Секция.Проект.МощностьДвигателя;
		КонецЕсли;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Шапка");
	// ++ rarus Чернавин Г.К 18.06.2020 № 22279
	//Область.Параметры.Номер				= Документ.Номер;
	Область.Параметры.Номер = Документы.vftРейс.НомерБезПрефикса(Документ.Номер);
	// -- rarus Чернавин Г.К 18.06.2020
	Область.Параметры.Судно				= Секция;
	Область.Параметры.НаименованиеРейса = рарусОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеНаименованияРейса(Документ);
	Область.Параметры.Дата				= Формат(Документ.Дата, "ДЛФ = DD");
	Область.Параметры.Приписка			= БТОФ;
	Таб.Вывести(Область);
	
	// Выводим строки
	//---------------
	Для Каждого СтрТЗ Из ТЗ Цикл
		
		Область = Макет.ПолучитьОбласть("Строка");
		Область.Параметры.НомерСтрокиДокумента	 =  СтрТЗ.НомерСтрокиДокумента;
		Область.Параметры.Пункты				 =  СтрТЗ.Пункты;
		Область.Параметры.Приход				 =  СтрТЗ.Приход;
		Область.Параметры.Отход					 =  СтрТЗ.Отход;
		Область.Параметры.Примечание			 =  СтрТЗ.Примечание;
		Область.Параметры.Груз					 =  СтрТЗ.Груз;
		Область.Параметры.ПричинаСтоянки		 =  СтрТЗ.ПричинаСтоянки;
		Область.Параметры.Принявший				 =  СтрТЗ.Принявший;
		Область.Параметры.Передавший			 =  СтрТЗ.Передавший;
		Область.Параметры.Следует				 =  СтрТЗ.Следует;
		
		Для А = 4 по 13 Цикл
			Область.Параметры["Время"  +  А] = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(СтрТЗ["Время"  +  А]);
		КонецЦикла;
		
		Для А = 15 по 18 Цикл
			Область.Параметры["Время"  +  А] = Формат(СтрТЗ["Время"  +  А], "ЧГ = 0");
		КонецЦикла;
		
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Выводим итоги
	//--------------
	СтрТЗ = ТЗ.Добавить();
	СтрТЗ.ГруженыйРейс = Истина;
	
	СтрТЗ = ТЗ.Добавить();
	СтрТЗ.ГруженыйРейс = Ложь;
	
	ТЗ.Свернуть("ГруженыйРейс", "Время4, Время5, Время6, Время7, Время8, Время9, Время10, Время11, Время12, Время13, Время14, Время15, Время16, Время17, Время18");
	ТЗ.Сортировать("ГруженыйРейс");
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Область = Макет.ПолучитьОбласть("Итого");
		Область.Параметры.Пункты = ?(СтрТЗ.ГруженыйРейс, "Итого за груженый рейс", "Итого за порожний рейс");
		
		Для А = 4 по 13 Цикл
			Область.Параметры["Время"  +  А] = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(СтрТЗ["Время"  +  А]);
		КонецЦикла;
		
		Для А = 15 по 18 Цикл
			Область.Параметры["Время"  +  А] = Формат(СтрТЗ["Время"  +  А], "ЧГ = 0");
		КонецЦикла;
		
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Выводим общий итог
	//-------------------
	ТЗ.ЗаполнитьЗначения(Истина, "ГруженыйРейс");
	ТЗ.Свернуть("ГруженыйРейс", "Время4, Время5, Время6, Время7, Время8, Время9, Время10, Время11, Время12, Время13, Время14, Время15, Время16, Время17, Время18");
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Область = Макет.ПолучитьОбласть("Итого");
		Область.Параметры.Пункты = "Итого за круговой рейс";
		
		Для А = 4 по 13 Цикл
			Область.Параметры["Время"  +  А] = рарусОбщегоНазначенияКлиентСервер.ПересчитатьВремя_ЗП_Формат(СтрТЗ["Время"  +  А]);
		КонецЦикла;
		
		Для А = 15 по 18 Цикл
			Область.Параметры["Время"  +  А] = Формат(СтрТЗ["Время"  +  А], "ЧГ = 0");
		КонецЦикла;
		
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Создадим группировку колонок
	//-----------------------------
	Область = Таб.Область(, Таб.ШиринаТаблицы, , Таб.ШиринаТаблицы);
	Область.Сгруппировать("Примечание", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	
	Область = Таб.Область(, Таб.ШиринаТаблицы-3, , Таб.ШиринаТаблицы-2);
	Область.Сгруппировать("Теплоход", РасположениеЗаголовкаГруппировкиТабличногоДокумента.Начало);
	
	// Корректировка ширины колонок
	//-----------------------------
	Для А = 15 по 18 Цикл
		Если ТЗ.Итог("Время"  +  А) = 0 Тогда
			Таб.Область(, А, А).ШиринаКолонки = 4;
		КонецЕсли;
	КонецЦикла;
	
	Таб.ВерхнийКолонтитул.НачальнаяСтраница = 1;
	Таб.ВерхнийКолонтитул.ТекстСправа		= "Стр.[&НомерСтраницы] из [&СтраницВсего]";
	Таб.ВерхнийКолонтитул.Выводить			= Истина;
	
	Таб.НижнийКолонтитул.НачальнаяСтраница	= 1;
	Таб.НижнийКолонтитул.ТекстСправа		= "Отчет сформирован [&Дата] [&Время]";
	Таб.НижнийКолонтитул.Выводить			= Истина;
	
	Возврат Таб
	
КонецФункции

Функция ПолучитьДанныеПоНС(Документ,  Секция) Экспорт
	
	// Таблица для данных отчета
	//--------------------------
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("НомерСтрокиДокумента");
	ТЗ.Колонки.Добавить("Пункты");
	ТЗ.Колонки.Добавить("Приход");
	ТЗ.Колонки.Добавить("Отход");
	ТЗ.Колонки.Добавить("ГруженыйРейс");
	ТЗ.Колонки.Добавить("Примечание");
	ТЗ.Колонки.Добавить("Груз");
	ТЗ.Колонки.Добавить("ПричинаСтоянки");
	ТЗ.Колонки.Добавить("Передавший");
	ТЗ.Колонки.Добавить("Принявший");
	ТЗ.Колонки.Добавить("Следует");
	
	Для А = 4 по 18 Цикл
		ТЗ.Колонки.Добавить("Время" + А, Новый ОписаниеТипов("Число"));
	КонецЦикла;
	
	// Определим баржу для отчета
	//---------------------------
	Баржа = Новый Структура;
	Баржа.Вставить("Ссылка", Секция);
	Баржа.Вставить("СтрокаОжиданияБуксираП", Неопределено);
	Баржа.Вставить("СтрокаОжиданияБуксираБ", Неопределено);
	
	// Перебираем строки ТЧ "Пункты"
	//------------------------------
	Для Каждого СтрП Из Документ.Пункты Цикл
		
		// Найдем в ТЧ "Баржи" баржу для отчета
		//-------------------------------------
		Врем = Документ.Баржи.НайтиСтроки(Новый Структура("ИД, БаржаПриход", СтрП.ИД, Баржа.Ссылка));
		Если Врем.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрБ = Врем[0];
		
		// Если секция была оставлена на рейде,  сохраним ссылки на СтрБ и СтрП (строки начала ожидания)
		//---------------------------------------------------------------------------------------------
		Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ОжиданиеБуксира Тогда
			Баржа.СтрокаОжиданияБуксираП = СтрП;
			Баржа.СтрокаОжиданияБуксираБ = СтрБ;
			Продолжить;
		КонецЕсли;
		
		// Добавляем строку ТЗ для текущей строки "Пункты"
		//------------------------------------------------
		ЗаполнитьСтрокуПутевогоЖурналаНС(Документ,  ТЗ.Добавить(), Баржа, СтрП, СтрБ);
	КонецЦикла;
	
	// Если остались необработанные строки
	//------------------------------------
	Если Баржа.СтрокаОжиданияБуксираБ <> Неопределено Тогда
		СтрП = Баржа.СтрокаОжиданияБуксираП;
		СтрБ = Баржа.СтрокаОжиданияБуксираБ;
		Баржа.СтрокаОжиданияБуксираП = Неопределено;
		Баржа.СтрокаОжиданияБуксираБ = Неопределено;
		ЗаполнитьСтрокуПутевогоЖурналаНС(Документ,  ТЗ.Добавить(), Баржа, СтрП, СтрБ);
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Процедура ЗаполнитьСтрокуПутевогоЖурналаНС(Документ,  СтрТЗ,  Баржа,  СтрП,  СтрБ)
	
	Судно = Документ.Судно;
	
	ФлагОжиданияБуксира = Баржа.СтрокаОжиданияБуксираБ <> Неопределено;
	
	// Получим данные для расчета
	//---------------------------
	Если ФлагОжиданияБуксира Тогда
		// Данные получаем из данных двух строк: строк начала ожидания и текущих
		//----------------------------------------------------------------------
		Приход = Макс(Баржа.СтрокаОжиданияБуксираБ.ДатаПриемаСекции, Баржа.СтрокаОжиданияБуксираП.Приход);
	    Отход = рарусОбщегоНазначенияКлиентСервер.Меньшее(СтрБ.ДатаПередачиСекции, СтрП.Отход);
	Иначе
		// Данные получаем из текущих строк СтрП и СтрБ
		//---------------------------------------------
		Приход = Макс(СтрБ.ДатаПриемаСекции, СтрП.Приход);
	    Отход = рарусОбщегоНазначенияКлиентСервер.Меньшее(СтрБ.ДатаПередачиСекции, СтрП.Отход);
	КонецЕсли;
	
	// Заполняем СтрТЗ
	//----------------
	СтрТЗ.НомерСтрокиДокумента	= "НомерСтрокиДокумента_УВ_" + Формат(СтрП.НомерСтроки, "ЧН = ; ЧГ = 0");
	СтрТЗ.Пункты				= рарусОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеПункта(СтрП);
	СтрТЗ.Приход				= Приход;
	СтрТЗ.Отход					= Отход;
	СтрТЗ.ГруженыйРейс			= СтрП.ГруженыйРейс;
	СтрТЗ.Примечание			= ОбъединитьЗначенияИзСтрок(Баржа.СтрокаОжиданияБуксираП, СтрП, "Примечание", ". " + Символы.ПС);
	СтрТЗ.Груз					= ОбъединитьЗначенияИзСтрок(Баржа.СтрокаОжиданияБуксираБ, СтрБ, "Груз", ",  ");
	СтрТЗ.ПричинаСтоянки		= ОбъединитьЗначенияИзСтрок(Баржа.СтрокаОжиданияБуксираП, СтрП, "ПричинаСтоянки", ",  ");
	
	// Определим,  какая из строк при ожидании буксира будет основной для получения данных
	//-----------------------------------------------------------------------------------
	Если ЗначениеЗаполнено(СтрБ.НачалоОперации) или ЗначениеЗаполнено(СтрБ.НачалоОперации2) Тогда
		ОснСтрП = СтрП;
		ОснСтрБ = СтрБ;
	ИначеЕсли ФлагОжиданияБуксира и (ЗначениеЗаполнено(Баржа.СтрокаОжиданияБуксираБ.НачалоОперации) или ЗначениеЗаполнено(Баржа.СтрокаОжиданияБуксираБ.НачалоОперации2)) Тогда
		ОснСтрП = Баржа.СтрокаОжиданияБуксираП;
		ОснСтрБ = Баржа.СтрокаОжиданияБуксираБ;
	Иначе
		ОснСтрП = СтрП;
		ОснСтрБ = СтрБ;
	КонецЕсли;
	
	// Расчет времени ожидания грузовых работ и времени ожидания накопления состава
	//-----------------------------------------------------------------------------
	Если ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) Тогда
		СтрТЗ.Время7 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.ДатаПодачиНотиса), ОснСтрБ.НачалоОперации);
		СтрТЗ.Время8 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(ОснСтрБ.ОкончаниеОперации, Отход);
	ИначеЕсли ЗначениеЗаполнено(ОснСтрБ.НачалоОперации2) Тогда
		СтрТЗ.Время7 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.ДатаПодачиНотиса), ОснСтрБ.НачалоОперации2);
		СтрТЗ.Время8 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(ОснСтрБ.ОкончаниеОперации2, Отход);
	КонецЕсли;
	
	// Заполняем данные,  связанные с причиной стоянки
	//-----------------------------------------------
	Если ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Шлюзование Тогда
		СтрТЗ.Время9 = ОснСтрП.ВремяСтоянки;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.МетеорологическиеПричины Тогда
		СтрТЗ.Время11 = ОснСтрП.ВремяСтоянки;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка Тогда
		СтрТЗ.Время16 = ОснСтрБ.ВесГруза;
		// Учтем случай,  когда паузка производилась в текущую секцию
		//----------------------------------------------------------
		ДанныеПаузки = ПолучитьДанныеПаузки(ОснСтрП.ПричинаСтоянки, Документ.Баржи.Выгрузить(Новый Структура("ИД", ОснСтрП.ИД), "Груз, ВесГруза, СудноПринявшее, ПаузкаНачальныйВесГруза"));
		СтрДП = ДанныеПаузки.Найти(Баржа.Ссылка, "Баржа");
		Если СтрДП <> Неопределено Тогда
			СтрТЗ.Время17 = СтрДП.ПаузкаКонечныйВесГруза;
			СтрТЗ.Груз = СтрДП.Груз;
		КонецЕсли;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		СтрТЗ.Время17 = ОснСтрБ.ВесГруза;
		// Учтем случай,  когда догрузка производилась из текущей секции
		//-------------------------------------------------------------
		ДанныеПаузки = ПолучитьДанныеПаузки(ОснСтрП.ПричинаСтоянки, Документ.Баржи.Выгрузить(Новый Структура("ИД", ОснСтрП.ИД), "Груз, ВесГруза, СудноПринявшее, ПаузкаНачальныйВесГруза"));
		СтрДП = ДанныеПаузки.Найти(Баржа.Ссылка, "Баржа");
		Если СтрДП <> Неопределено Тогда
			СтрТЗ.Время16 = СтрДП.ПаузкаКонечныйВесГруза;
			СтрТЗ.Груз = СтрДП.Груз;
		КонецЕсли;
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Погрузка и ОснСтрБ.ВесГруза <> 0 и ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) Тогда
		СтрТЗ.Время15 = ОснСтрБ.ВесГруза;
		СтрТЗ.Время5  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации));
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Выгрузка и ОснСтрБ.ВесГруза <> 0 и ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) Тогда
		СтрТЗ.Время18 = ОснСтрБ.ВесГруза;
		СтрТЗ.Время6  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации));
		
	ИначеЕсли ОснСтрП.ПричинаСтоянки = Справочники.vftТиповыеОперации.Перевалка Тогда
		Если ЗначениеЗаполнено(ОснСтрБ.НачалоОперации) и ОснСтрБ.ВесГруза <> 0 Тогда	// Это погрузка
			СтрТЗ.Время15 = ОснСтрБ.ВесГруза;
			СтрТЗ.Время5  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации));
		ИначеЕсли ЗначениеЗаполнено(ОснСтрБ.НачалоОперации2) Тогда					// Это выгрузка,  но вес не указывается
			СтрТЗ.Время6  = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Макс(Приход, ОснСтрБ.НачалоОперации2), рарусОбщегоНазначенияКлиентСервер.Меньшее(Отход, ОснСтрБ.ОкончаниеОперации2));
		КонецЕсли;
	КонецЕсли;
	
	// Данные по ходовому времени
	//---------------------------
	Если ФлагОжиданияБуксира Тогда
		// Данные получаем из строк начала ожидания
		//-----------------------------------------
		СтрТЗ.Время4 = Баржа.СтрокаОжиданияБуксираП.ХодовоеВремя;
	Иначе
		// Данные берем из текущих СтрБ и СтрП
		//------------------------------------
		Если не (СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием или СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача) Тогда
			СтрТЗ.Время4 = СтрП.ХодовоеВремя;
		КонецЕсли;
	КонецЕсли;
	
	// Данные по общему стояночному времени
	//-------------------------------------
	СтрТЗ.Время13 = рарусОбщегоНазначенияКлиентСервер.РазницаДат(Приход, Отход);
	СтрТЗ.Время12 = СтрТЗ.Время13 + СтрТЗ.Время4;
	СтрТЗ.Время10 = СтрТЗ.Время13-СтрТЗ.Время5-СтрТЗ.Время6-СтрТЗ.Время7-СтрТЗ.Время8-СтрТЗ.Время9-СтрТЗ.Время11;
	
	// Данные по принявшим / передавшим судам
	//---------------------------------------
	Если ФлагОжиданияБуксира Тогда
		Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
			СтрТЗ.Принявший = 	СтрБ.СудноПринявшее;
			СтрТЗ.Передавший = 	Судно;
		Иначе
			СтрТЗ.Следует = Судно;
		КонецЕсли;
	Иначе
		Если СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Прием Тогда
			СтрТЗ.Принявший		= Судно;
			СтрТЗ.Передавший	= СтрБ.СудноПередавшее;
		ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.Передача Тогда
			СтрТЗ.Принявший		= СтрБ.СудноПринявшее;
			СтрТЗ.Передавший	= Судно;
		ИначеЕсли СтрБ.БаржаОперация = Перечисления.рарусБаржиОперации.ПриемПередача Тогда
			СтрТЗ.Передавший	= СтрБ.СудноПередавшее;
			СтрТЗ.Принявший		= СтрБ.СудноПринявшее;
		Иначе
			СтрТЗ.Следует		= Судно;
		КонецЕсли;
	КонецЕсли;
	
	// Сбросим значения
	//-----------------
	Баржа.СтрокаОжиданияБуксираБ = Неопределено;
	Баржа.СтрокаОжиданияБуксираП = Неопределено;
	
КонецПроцедуры

Функция ПолучитьДанныеПаузки(ТекПричинаСтоянки, ТЗ) Экспорт
	
	Перем ДанныеПаузки;
	Перем СтрТЗ, СтрДП;
	
	СписокТиповБаржа = Новый Массив;
    СписокТиповБаржа.Добавить("СправочникСсылка.vftСуда");
    СписокТиповБаржа.Добавить("СправочникСсылка.рарусПрочиеСуда");
	
	ДанныеПаузки = Новый ТаблицаЗначений;
	ДанныеПаузки.Колонки.Добавить("Баржа", 					Новый ОписаниеТипов(СписокТиповБаржа));
	ДанныеПаузки.Колонки.Добавить("Груз", 					Новый ОписаниеТипов("СправочникСсылка.vftГрузы"));
	ДанныеПаузки.Колонки.Добавить("ПаузкаНачальныйВесГруза", рарусОбщегоНазначенияКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 3));
	ДанныеПаузки.Колонки.Добавить("ПаузкаКонечныйВесГруза",  рарусОбщегоНазначенияКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 3));
	
	Если ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаВыгрузка или
		 ТекПричинаСтоянки = Справочники.vftТиповыеОперации.ПаузкаДогрузка Тогда
		Для Каждого СтрТЗ из ТЗ Цикл
			Если НЕ ЗначениеЗаполнено(СтрТЗ.СудноПринявшее) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрДП = ДанныеПаузки.Найти(СтрТЗ.СудноПринявшее, "Баржа");
			Если СтрДП = Неопределено Тогда
				СтрДП = ДанныеПаузки.Добавить();
				СтрДП.Баржа = СтрТЗ.СудноПринявшее;
				СтрДП.Груз = СтрТЗ.Груз;
			КонецЕсли;
			СтрДП.ПаузкаНачальныйВесГруза = Макс(СтрДП.ПаузкаНачальныйВесГруза, СтрТЗ.ПаузкаНачальныйВесГруза);
			СтрДП.ПаузкаКонечныйВесГруза = СтрДП.ПаузкаКонечныйВесГруза + СтрТЗ.ВесГруза;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ДанныеПаузки;
	
КонецФункции

Функция ОбъединитьЗначенияИзСтрок(Стр1, Стр2, ИмяРеквизита, Разделитель)
	
	Перем Значение1, Значение2;
	
	Если Стр1 = Неопределено Тогда
		Возврат Стр2[ИмяРеквизита];
	КонецЕсли;
	
	Значение1 = Стр1[ИмяРеквизита];
	Значение2 = Стр2[ИмяРеквизита];
	
	Если ЗначениеЗаполнено(Значение1) и ЗначениеЗаполнено(Значение2) Тогда
		Если Значение1 = Значение2 Тогда
			Возврат Значение1;
		Иначе
			Возврат "" + Значение1 + Разделитель + Значение2;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Значение1) Тогда
		Возврат Значение1;
	ИначеЕсли ЗначениеЗаполнено(Значение2) Тогда
		Возврат Значение2;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции
