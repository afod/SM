
&НаСервере
Процедура СформироватьНаСервере()
	
	// Таблица для данных отчета
	//--------------------------
	ТЗ=Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Судно");
	ТЗ.Колонки.Добавить("Рейс");
	ТЗ.Колонки.Добавить("ПортОтправления");
	ТЗ.Колонки.Добавить("ПортПогрузки");
	ТЗ.Колонки.Добавить("ПортВыгрузки");
	ТЗ.Колонки.Добавить("Груз");
	Для А = 1 по 4 Цикл
		ТЗ.Колонки.Добавить("БС"+А, рарусОбщегоНазначенияКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТЗ.Колонки.Добавить("СС"+А, рарусОбщегоНазначенияКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТЗ.Колонки.Добавить("БК"+А, рарусОбщегоНазначенияКлиентСервер.ПолучитьОписаниеТиповЧисла(10,0));
		ТЗ.Колонки.Добавить("СК"+А, рарусОбщегоНазначенияКлиентСервер.ПолучитьОписаниеТиповЧисла(10,0));
	КонецЦикла;
	
	// Получаем данные отчета:
	// 1. Отбираем рейсы по дате начала прохождения
	// 2. Отбираем рейсы, которые попали в указанный период, у которых нет записей о прохождении
	//------------------------------------------------------------------------------------------
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("НачДата"					, Отчет.НачДата);
	Запрос.УстановитьПараметр("КонДата"					, КонецДня(Отчет.КонДата));
	Запрос.УстановитьПараметр("ПортОтправления"			, Отчет.ПортОтправления);
	Запрос.УстановитьПараметр("ПортПогрузки"			, Отчет.ПортПогрузки);
	Запрос.УстановитьПараметр("ПортВыгрузки"			, Отчет.ПортВыгрузки);
	Запрос.УстановитьПараметр("ПортОтправленияЗаполнено", ЗначениеЗаполнено(Отчет.ПортОтправления));
	Запрос.УстановитьПараметр("ПортПогрузкиЗаполнено"	, ЗначениеЗаполнено(Отчет.ПортПогрузки));
	Запрос.УстановитьПараметр("ПортВыгрузкиЗаполнено"	, ЗначениеЗаполнено(Отчет.ПортВыгрузки));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Док.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтДокументыБезСОЛП
	|ИЗ
	|	Документ.vftРейс КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.vftРейс.ПрохождениеУчастковСОЛП КАК ПрохождениеСОЛП
	|		ПО (Док.Ссылка = ПрохождениеСОЛП.Ссылка)
	|ГДЕ
	|	(Док.Дата МЕЖДУ &НачДата И &КонДата
	|			ИЛИ Док.ДатаОкончание МЕЖДУ &НачДата И &КонДата)
	|	И ПрохождениеСОЛП.Ссылка ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтДокументыБезСОЛП.Ссылка КАК Ссылка,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА vftРейсПунктыСледования.ТипПункта = ЗНАЧЕНИЕ(Перечисление.рарусТипыПунктов.ПортОтправления)
	|					И vftРейсПунктыСледования.Пункт <> ЗНАЧЕНИЕ(Справочник.vftПунктыСледования.ПустаяСсылка)
	|				ТОГДА vftРейсПунктыСледования.НомерСтроки
	|			ИНАЧЕ 999999
	|		КОНЕЦ) КАК НомерСтрокиПортОтправления,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА vftРейсПунктыСледования.ТипПункта = ЗНАЧЕНИЕ(Перечисление.рарусТипыПунктов.ПортПогрузки)
	|					И vftРейсПунктыСледования.Пункт <> ЗНАЧЕНИЕ(Справочник.vftПунктыСледования.ПустаяСсылка)
	|				ТОГДА vftРейсПунктыСледования.НомерСтроки
	|			ИНАЧЕ 999999
	|		КОНЕЦ) КАК НомерСтрокиПортПогрузки,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА vftРейсПунктыСледования.ТипПункта = ЗНАЧЕНИЕ(Перечисление.рарусТипыПунктов.ПортВыгрузки)
	|					И vftРейсПунктыСледования.Пункт <> ЗНАЧЕНИЕ(Справочник.vftПунктыСледования.ПустаяСсылка)
	|				ТОГДА vftРейсПунктыСледования.НомерСтроки
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК НомерСтрокиПортВыгрузки
	|ПОМЕСТИТЬ ВтНомераСтрокПунктов
	|ИЗ
	|	ВтДокументыБезСОЛП КАК ВтДокументыБезСОЛП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.vftРейс.ПунктыСледования КАК vftРейсПунктыСледования
	|		ПО (vftРейсПунктыСледования.Ссылка = ВтДокументыБезСОЛП.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтДокументыБезСОЛП.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтНомераСтрокПунктов.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(vftРейсПунктыСледованияПортОтправления.Пункт, ЗНАЧЕНИЕ(Справочник.vftПунктыСледования.ПустаяСсылка)) КАК ПортОтправления,
	|	ЕСТЬNULL(vftРейсПунктыСледованияПортПогрузки.Пункт, ЗНАЧЕНИЕ(Справочник.vftПунктыСледования.ПустаяСсылка)) КАК ПортПогрузки,
	|	ЕСТЬNULL(vftРейсПунктыСледованияПортВыгрузки.Пункт, ЗНАЧЕНИЕ(Справочник.vftПунктыСледования.ПустаяСсылка)) КАК ПортВыгрузки
	|ПОМЕСТИТЬ ВтДокументыБезСОЛПсПортами
	|ИЗ
	|	ВтНомераСтрокПунктов КАК ВтНомераСтрокПунктов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.vftРейс.ПунктыСледования КАК vftРейсПунктыСледованияПортОтправления
	|		ПО ВтНомераСтрокПунктов.Ссылка = vftРейсПунктыСледованияПортОтправления.Ссылка
	|			И ВтНомераСтрокПунктов.НомерСтрокиПортОтправления = vftРейсПунктыСледованияПортОтправления.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.vftРейс.ПунктыСледования КАК vftРейсПунктыСледованияПортПогрузки
	|		ПО ВтНомераСтрокПунктов.Ссылка = vftРейсПунктыСледованияПортПогрузки.Ссылка
	|			И ВтНомераСтрокПунктов.НомерСтрокиПортПогрузки = vftРейсПунктыСледованияПортПогрузки.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.vftРейс.ПунктыСледования КАК vftРейсПунктыСледованияПортВыгрузки
	|		ПО ВтНомераСтрокПунктов.Ссылка = vftРейсПунктыСледованияПортВыгрузки.Ссылка
	|			И ВтНомераСтрокПунктов.НомерСтрокиПортВыгрузки = vftРейсПунктыСледованияПортВыгрузки.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	рарусПрохождениеУчастковСОЛП.Судно КАК Судно,
	|	рарусПрохождениеУчастковСОЛП.Регистратор КАК Рейс,
	|	рарусПрохождениеУчастковСОЛП.ПортОтправления КАК ПортОтправления,
	|	рарусПрохождениеУчастковСОЛП.ПортПогрузки КАК ПортПогрузки,
	|	рарусПрохождениеУчастковСОЛП.ПортВыгрузки КАК ПортВыгрузки,
	|	рарусПрохождениеУчастковСОЛП.Регистратор.ОбщееНаименованиеГруза КАК Груз,
	|	ВЫБОР
	|		КОГДА рарусПрохождениеУчастковСОЛП.Участок = ЗНАЧЕНИЕ(справочник.рарусУчасткиСОЛП.РостовНаДону)
	|			ТОГДА 1
	|		КОГДА рарусПрохождениеУчастковСОЛП.Участок = ЗНАЧЕНИЕ(справочник.рарусУчасткиСОЛП.Азов)
	|			ТОГДА 2
	|		КОГДА рарусПрохождениеУчастковСОЛП.Участок = ЗНАЧЕНИЕ(справочник.рарусУчасткиСОЛП.КерчьЕникальскийКанал)
	|				И рарусПрохождениеУчастковСОЛП.ВариантПрохожденияКЕК = ЗНАЧЕНИЕ(Перечисление.рарусВариантыПрохожденияКЕК.ТСП)
	|			ТОГДА 3
	|		КОГДА рарусПрохождениеУчастковСОЛП.Участок = ЗНАЧЕНИЕ(справочник.рарусУчасткиСОЛП.КерчьЕникальскийКанал)
	|				И рарусПрохождениеУчастковСОЛП.ВариантПрохожденияКЕК = ЗНАЧЕНИЕ(Перечисление.рарусВариантыПрохожденияКЕК.КЕК)
	|			ТОГДА 4
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Участок,
	|	рарусПрохождениеУчастковСОЛП.НачДата КАК НачалоПрохождения,
	|	рарусПрохождениеУчастковСОЛП.СОЛП КАК СОЛП
	|ПОМЕСТИТЬ Данные
	|ИЗ
	|	РегистрСведений.рарусПрохождениеУчастковСОЛП КАК рарусПрохождениеУчастковСОЛП
	|ГДЕ
	|	рарусПрохождениеУчастковСОЛП.НачДата МЕЖДУ &НачДата И &КонДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	vftРейс.Судно,
	|	Док.Ссылка,
	|	Док.ПортОтправления,
	|	Док.ПортПогрузки,
	|	Док.ПортВыгрузки,
	|	vftРейс.ОбщееНаименованиеГруза,
	|	0,
	|	ДАТАВРЕМЯ(1, 1, 1),
	|	NULL
	|ИЗ
	|	ВтДокументыБезСОЛПсПортами КАК Док
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.vftРейс КАК vftРейс
	|		ПО Док.Ссылка = vftРейс.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Данные.Судно КАК Судно,
	|	Данные.Рейс КАК Рейс,
	|	Данные.ПортОтправления КАК ПортОтправления,
	|	Данные.ПортПогрузки КАК ПортПогрузки,
	|	Данные.ПортВыгрузки КАК ПортВыгрузки,
	|	Данные.Груз КАК Груз,
	|	Данные.Участок КАК Участок,
	|	Данные.НачалоПрохождения КАК НачалоПрохождения,
	|	Данные.СОЛП КАК СОЛП
	|ИЗ
	|	Данные КАК Данные
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ПортОтправленияЗаполнено
	|				ТОГДА Данные.ПортОтправления = &ПортОтправления
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПортПогрузкиЗаполнено
	|				ТОГДА Данные.ПортПогрузки = &ПортПогрузки
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &ПортВыгрузкиЗаполнено
	|				ТОГДА Данные.ПортВыгрузки = &ПортВыгрузки
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Судно,
	|	Данные.Рейс
	|АВТОУПОРЯДОЧИВАНИЕ";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Участок = 0 Тогда
			// Поиск рейса
			//------------
			Если ТЗ.Найти(Выборка.Рейс,"Рейс")=Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ТЗ.Добавить(),Выборка,"Судно, Рейс, ПортОтправления, ПортПогрузки, ПортВыгрузки, Груз");
			КонецЕсли;
		Иначе
			Если Выборка.СОЛП Тогда
				ПолеДаты = "СС" + Выборка.Участок;
				ПолеКол  = "СК" + Выборка.Участок;
			Иначе
				ПолеДаты = "БС" + Выборка.Участок;
				ПолеКол  = "БК" + Выборка.Участок;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Рейс, " + ПолеДаты, Выборка.Рейс, Дата(1,1,1));
			РезультатПоиска = ТЗ.НайтиСтроки(СтруктураПоиска);
			
			Если РезультатПоиска.Количество() = 0 Тогда
				СтрТЗ	= ТЗ.Добавить();
				ЗаполнитьЗначенияСвойств(СтрТЗ,Выборка,"Судно, Рейс, ПортОтправления, ПортПогрузки, ПортВыгрузки, Груз");
			Иначе
				СтрТЗ	= РезультатПоиска[0];
			КонецЕсли;
			
			СтрТЗ[ПолеДаты]	= Выборка.НачалоПрохождения;
			СтрТЗ[ПолеКол]	= 1;
		КонецЕсли;
	КонецЦикла;
	
	// Выводим заголовок отчета
	//-------------------------
	мОтчет	= РеквизитФормыВЗначение("Отчет");
	Макет	= мОтчет.ПолучитьМакет("Макет"); 
	
	Таб.Очистить();
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	Таб.Вывести(Область);
	
	// Выводим условия отчета
	//-----------------------
	Область = Макет.ПолучитьОбласть("Условие");
	Область.Параметры.Стр = "Период: " + ПредставлениеПериода(Отчет.НачДата, КонецДня(Отчет.КонДата), "ФП = Истина");
	Таб.Вывести(Область);
	
	Если ЗначениеЗаполнено(Отчет.ПортОтправления) Тогда
		Область.Параметры.Стр = "Порт отправления: " + Отчет.ПортОтправления;
		Таб.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ПортПогрузки) Тогда
		Область.Параметры.Стр = "Порт погрузки: " + Отчет.ПортПогрузки;
		Таб.Вывести(Область);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отчет.ПортВыгрузки) Тогда
		Область.Параметры.Стр = "Порт выгрузки: " + Отчет.ПортВыгрузки;
		Таб.Вывести(Область);
	КонецЕсли;
	
	// Выводим шапку отчета
	//---------------------
	Область = Макет.ПолучитьОбласть("Шапка");
	Таб.Вывести(Область);
	
	// Выводим строки отчета
	//----------------------
	Фон		= Истина;
	ТекРейс = Неопределено;
	Счетчик = 0;
	
	Для Каждого СтрТЗ из ТЗ Цикл
		Если ТекРейс <> СтрТЗ.Рейс Тогда
			ТекРейс = СтрТЗ.Рейс;
			Фон = не Фон;
		КонецЕсли;
		
		Счетчик = Счетчик+1;
		
		Область = Макет.ПолучитьОбласть(?(Фон, "С1", "С2"));
		Область.Параметры.Заполнить(СтрТЗ);
		Область.Параметры.Счетчик	= Счетчик;
		// ++ rarus Чернавин Г.К 18.06.2020
		НомерРейса = Документы.vftРейс.НомерБезПрефикса(СтрТЗ.Рейс.Номер);
		Область.Параметры.РейсП		= "Рейс №" + НомерРейса + " от " + Формат(СтрТЗ.Рейс.Дата, "ДФ = dd.MM.yyyy");
		// -- rarus Чернавин Г.К 18.06.2020
		Таб.Вывести(Область);
	КонецЦикла;
	
	// Выводим итоги
	//--------------
	ТЗ.ЗаполнитьЗначения(Неопределено,"Судно");
	ТЗ.Свернуть("Судно", "БК1, СК1, БК2, СК2, БК3, СК3, БК4, СК4");
	
	Область = Макет.ПолучитьОбласть("Итого");
	Область.Параметры.Заполнить(ТЗ[0]);
	Таб.Вывести(Область);
	
	Таб.АвтоМасштаб				= Истина;
	Таб.ОриентацияСтраницы		= ОриентацияСтраницы.Ландшафт;
	Таб.ОтображатьСетку			= Ложь;
	Таб.ОтображатьЗаголовки		= Ложь;
	Таб.ТолькоПросмотр			= Истина;
	Таб.ОтображатьГруппировки	= Ложь;
	
	ЭтаФорма.ТекущийЭлемент = Элементы.Таб;

КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	// Проверка условий
	//-----------------
	Если Отчет.НачДата = Дата(1,1,1) Тогда
		Оповещение = Новый ОписаниеОповещения();
		ПоказатьПредупреждение(Оповещение, "Не указана нач. дата!", 30);
		Возврат;
	ИначеЕсли Отчет.КонДата < Отчет.НачДата Тогда
		Оповещение = Новый ОписаниеОповещения();
		ПоказатьПредупреждение(Оповещение, "Конечная дата меньше начальной!", 30);
		Возврат;
	КонецЕсли;
	
	СформироватьНаСервере();
КонецПроцедуры

&НаКлиенте                     
Процедура ПриОткрытии(Отказ)
	Если Отчет.НачДата = Дата(1,1,1) Тогда
		Отчет.НачДата = НачалоГода(ТекущаяДата());
		Отчет.КонДата = КонецГода(Отчет.НачДата);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбПериод(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Новый СтандартныйПериод(Отчет.НачДата, ?(Отчет.КонДата = Дата(1,1,1), Отчет.КонДата, КонецДня(Отчет.КонДата)));
	Диалог.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если Период <> Неопределено Тогда 
		Отчет.НачДата = Период.ДатаНачала;
		Отчет.КонДата = Период.ДатаОкончания;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПортНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура;
	Форма = ОткрытьФорму("Справочник.vftПунктыСледования.ФормаВыбора", Отбор ,Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	Форма.Список,
	"Тип",
	ПредопределенноеЗначение("Справочник.рарусТипыПунктовСледования.Порт"),
	ВидСравненияКомпоновкиДанных.Равно
	,, 
	Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	
КонецПроцедуры

&НаКлиенте
Процедура ПортАвтоПодбор(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПортОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораПункт(Текст);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеВыбораПункт(Текст)
	
	СтандартнаяОбработка=Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("СтрокаПоиска","%"+Текст+"%");
	Запрос.Текст="ВЫБРАТЬ
	             |	Пункты.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.vftПунктыСледования КАК Пункты
	             |ГДЕ
	             |	Пункты.Наименование ПОДОБНО &СтрокаПоиска
	             |	И Пункты.Тип = ЗНАЧЕНИЕ(Справочник.рарусТипыПунктовСледования.Порт)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	Ссылка
	             |АВТОУПОРЯДОЧИВАНИЕ";
		
	Выборка=Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеВыбора.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции
