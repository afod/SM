#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.ФормироватьСразу = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   Форма - ФормаКлиентскогоПриложения - Форма отчета.
//   Отказ - Передается из параметров обработчика "как есть".
//   СтандартнаяОбработка - Передается из параметров обработчика "как есть".
//
// См. также:
//   "ФормаКлиентскогоПриложения.ПриСозданииНаСервере" в синтакс-помощнике.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка) Экспорт
	
	КомпоновщикНастроекФормы = ЭтаФорма.Отчет.КомпоновщикНастроек;
	Параметры = ЭтаФорма.Параметры;
	
	Если Параметры.Свойство("ПараметрКоманды") Тогда
		
		ЭтаФорма.ФормаПараметры.Отбор.Вставить("Судно", Параметры.ПараметрКоманды.Владелец);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТабличныйДокументРезультат = СформироватьОтчет();
	
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.Вывести(ТабличныйДокументРезультат);
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьОтчет()
	
	НастройкиОтчета = ЭтотОбъект.КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ЭтотОбъект.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПараметрыОтчета =  МакетКомпоновки.ЗначенияПараметров;	
	Судно   =  ПараметрыОтчета.Судно.Значение;
		
	ТабличныйДокументРезультат = Новый ТабличныйДокумент;

	Макет =  ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок     = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ОбластьШапка         = Макет.ПолучитьОбласть("ШапкаОтчета");
	ОбластьШапкаСтроки   = Макет.ПолучитьОбласть("ШапкаСтроки");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТч");
	ОбластьГруппировка   = Макет.ПолучитьОбласть("Группировка");
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	&Судно КАК Судно,
	               |	vftСуда.IMO КАК IMO,
	               |	&ТекущаяДата КАК ДатаДляПараметров
	               |ИЗ
	               |	Справочник.vftСуда КАК vftСуда
	               |ГДЕ
	               |	vftСуда.Ссылка = &Судно
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СвидетельстваСудов.Ссылка КАК Ссылка,
	               |	СвидетельстваСудов.Владелец КАК Владелец,
	               |	СвидетельстваСудов.Владелец КАК Судно,
	               |	СвидетельстваСудов.ВидДокумента КАК ВидДокумента,
	               |	СвидетельстваСудов.ДатаВыдачи КАК ДатаВыдачи,
	               |	СвидетельстваСудов.СрокДействия КАК СрокДействия,
	               |	СвидетельстваСудов.ПодтвердитьДо КАК ПодтвердитьДо,
	               |	СвидетельстваСудов.ОригиналДубликат КАК ДокументНаСудне,
	               |	СвидетельстваСудов.ВидДокумента.ГруппаСудов КАК ГруппаСудов,
	               |	ВЫБОР
	               |		КОГДА НЕ СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	               |			ТОГДА ВЫБОР
	               |					КОГДА СвидетельстваСудов.СлужебныйПризнак
	               |						ТОГДА ЛОЖЬ
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА &ТекущаяДата > СвидетельстваСудов.СрокДействия
	               |					ТОГДА ЛОЖЬ
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ДокументДействует,
	               |	СвидетельстваСудов.Примечение КАК Примичание,
	               |	рарусПлановыеСрокиОсвидетельствованийРМРС.ДатаНачала КАК ДатаНачала,
	               |	рарусПлановыеСрокиОсвидетельствованийРМРС.ДатаОкончания КАК ДатаОкончания,
	               |	СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия КАК ВидДокументаИмеетСрокДействия
	               |ИЗ
	               |	Справочник.рарусСвидетельстваСудов КАК СвидетельстваСудов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			рарусПлановыеСрокиОсвидетельствованийРМРС.Судно КАК Судно,
	               |			рарусПлановыеСрокиОсвидетельствованийРМРС.ВидДокумента КАК ВидДокумента,
	               |			МИНИМУМ(рарусПлановыеСрокиОсвидетельствованийРМРС.ДатаОкончания) КАК ДатаОкончания
	               |		ИЗ
	               |			РегистрСведений.рарусПлановыеСрокиОсвидетельствованийРМРС КАК рарусПлановыеСрокиОсвидетельствованийРМРС
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			рарусПлановыеСрокиОсвидетельствованийРМРС.Судно,
	               |			рарусПлановыеСрокиОсвидетельствованийРМРС.ВидДокумента) КАК ВложенныйЗапрос
	               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.рарусПлановыеСрокиОсвидетельствованийРМРС КАК рарусПлановыеСрокиОсвидетельствованийРМРС
	               |			ПО ВложенныйЗапрос.Судно = рарусПлановыеСрокиОсвидетельствованийРМРС.Судно
	               |				И ВложенныйЗапрос.ВидДокумента = рарусПлановыеСрокиОсвидетельствованийРМРС.ВидДокумента
	               |				И ВложенныйЗапрос.ДатаОкончания = рарусПлановыеСрокиОсвидетельствованийРМРС.ДатаОкончания
	               |		ПО СвидетельстваСудов.Владелец = ВложенныйЗапрос.Судно
	               |			И СвидетельстваСудов.ВидДокумента = ВложенныйЗапрос.ВидДокумента
	               |ГДЕ
	               |	НЕ СвидетельстваСудов.ПометкаУдаления
	               |	И НЕ СвидетельстваСудов.ВАрхиве
	               |	И СвидетельстваСудов.Владелец = &Судно
	               |ИТОГИ ПО
	               |	ГруппаСудов ИЕРАРХИЯ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Состав.Пользователь КАК Пользователь
	               |ПОМЕСТИТЬ втПользователь
	               |ИЗ
	               |	Справочник.ГруппыПользователей.Состав КАК Состав
	               |ГДЕ
	               |	Состав.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.Капитан)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоответствиеПользователяФизическомуЛицуСрезПоследних.ФизическоеЛицо КАК Капитан
	               |ИЗ
	               |	РегистрСведений.рарусСоответствиеПользователяФизическомуЛицу.СрезПоследних(
	               |			,
	               |			Пользователь В
	               |				(ВЫБРАТЬ
	               |					втПользователь.Пользователь КАК Пользователь
	               |				ИЗ
	               |					втПользователь КАК втПользователь)) КАК СоответствиеПользователяФизическомуЛицуСрезПоследних";
	
	Запрос.УстановитьПараметр("Судно" ,Судно);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураРезультатОтчета = Новый Структура("РезультатПоШапке, РезультатПоТабличнойЧасти, РезультатПоКапитану", 
	                                          ПакетРезультатовЗапроса[0],ПакетРезультатовЗапроса[1],ПакетРезультатовЗапроса[3]);
	
	// Заполним шапку отчета		
	РезультатПоШапке = СтруктураРезультатОтчета.РезультатПоШапке.Выбрать();
	
	ТабличныйДокументРезультат.Вывести(ОбластьЗаголовок);
	
	ТабличныйДокументРезультат.НачатьАвтоГруппировкуСтрок();
		
	РезультатПоКапитану = СтруктураРезультатОтчета.РезультатПоКапитану.Выбрать();
	РезультатПоКапитану.Следующий();

	Пока РезультатПоШапке.Следующий() Цикл
		
		ОбластьШапка.Параметры.Заполнить(РезультатПоШапке);
		
		ОбластьШапка.Параметры.МесяцТекущи = Формат(РезультатПоШапке.ДатаДляПараметров, "ДФ=ММММ");
		ОбластьШапка.Параметры.ГодТекущий = Формат(РезультатПоШапке.ДатаДляПараметров, "ДФ=yyyy");
		ОбластьШапка.Параметры.Капитан = РезультатПоКапитану.Капитан;

		ТабличныйДокументРезультат.Вывести(ОбластьШапка);
		
	КонецЦикла;
		
	РезультатПоТабличнойЧасти =  СтруктураРезультатОтчета.РезультатПоТабличнойЧасти.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТабличныйДокументРезультат.Вывести(ОбластьШапкаСтроки);
	
	ПредыдущийУровень = 1;
	ГруппаПредСт = Неопределено;
	Пока РезультатПоТабличнойЧасти.Следующий() Цикл
		
		РодительЭлемента = РезультатПоТабличнойЧасти.ГруппаСудов.Родитель; 
		
		Если Не ЗначениеЗаполнено(РодительЭлемента) Тогда
			ГлавныйРодитель = РезультатПоТабличнойЧасти.ГруппаСудов;
		КонецЕсли;
				
		Если ЗначениеЗаполнено(РодительЭлемента) Тогда			
			Если ГруппаПредСт = РодительЭлемента Тогда
				УровеньГруппировки = УровеньГруппировки +1; 					
			КонецЕсли;			
		Иначе		
			УровеньГруппировки = 1;
			ПредыдущийУровень = УровеньГруппировки +1; 
		КонецЕсли;
					
		ГруппаПредСт  = РезультатПоТабличнойЧасти.ГруппаСудов;
			
		ОбластьГруппировка.Параметры.Заполнить(РезультатПоТабличнойЧасти);
		ТабличныйДокументРезультат.Вывести(ОбластьГруппировка, УровеньГруппировки,,Истина);
		
		УровеньГруппировкиСвидетельств = УровеньГруппировки + 1; 
		
		ВыборкаДетальная = РезультатПоТабличнойЧасти.Выбрать();

		Пока ВыборкаДетальная.Следующий() Цикл
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(ВыборкаДетальная);	
			ТабличныйДокументРезультат.Вывести(ОбластьСтрокаТаблицы, УровеньГруппировкиСвидетельств,,Истина);	
			
		КонецЦикла;
					
	КонецЦикла;
	ТабличныйДокументРезультат.ЗакончитьАвтоГруппировкуСтрок();
	
	Возврат ТабличныйДокументРезультат;	
	
КонецФункции

Функция ПолучитьРодителя(СправочникСсылка)
		
	Пока НЕ СправочникСсылка.Родитель.Пустая() Цикл
		Родитель = СправочникСсылка.Родитель;
		СправочникСсылка = 	Родитель;
	КонецЦикла;
	
	Возврат СправочникСсылка;

КонецФункции
	
#КонецОбласти

#КонецЕсли