//#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
//	
//#Область ОбработчикиСобытий
//Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
//	
//	СтандартнаяОбработка = Ложь;
//	
//	Идентификатор = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ИерархияТип")).ИдентификаторПользовательскойНастройки;
//	СтрокаПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Идентификатор);
//	
//	Если СтрокаПараметр <> Неопределено И ЗначениеЗаполнено(СтрокаПараметр.Значение) Тогда
//		ТекИерархия = СтрокаПараметр.Значение;
//	Иначе
//		ТекИерархия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
//			"НастройкиТОиР",
//			"ОсновнаяСтруктураИерархии",
//			Справочники.торо_СтруктурыОР.ПустаяСсылка());
//			
//		Если СтрокаПараметр <> Неопределено Тогда
//			СтрокаПараметр.Значение = ТекИерархия;
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	торо_ОтчетыСервер.УстановитьЗапросыНаборовДанныхИерархииОР(СхемаКомпоновкиДанных, ТекИерархия, "ДатаКон", "ДанныеПоПростоям");

//	Если ТекИерархия.СтроитсяАвтоматически Тогда
//		торо_ОтчетыКлиентСервер.УстановитьТипИерархическойГруппировкиВНастройках(КомпоновщикНастроек, "ОбъектИерархии", ТипГруппировкиКомпоновкиДанных.Иерархия);
//	Иначе
//		торо_ОтчетыКлиентСервер.УстановитьТипИерархическойГруппировкиВНастройках(КомпоновщикНастроек, "ОбъектИерархии", ТипГруппировкиКомпоновкиДанных.ТолькоИерархия);
//	КонецЕсли;
//	
//	НастройкиОсновнойСхемы = КомпоновщикНастроек.ПолучитьНастройки();
//	
//	ДанныеПоПростоям = ДанныеПоПростоям(НастройкиОсновнойСхемы);
//	ТабРезультата = ДобавитьКолонкуОбъектИерархии(ДанныеПоПростоям, ТекИерархия);
//	
//	ВнешниеНаборыДанных = Новый Структура;
//	ВнешниеНаборыДанных.Вставить("ДанныеПоПростоям", ТабРезультата);
//	
//	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
//	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОсновнойСхемы, ДанныеРасшифровки);	
//	
//	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
//	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
//	
//	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
//	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);	
//	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
//	
//КонецПроцедуры
//#КонецОбласти

//#Область СлужебныеПроцедурыИФункции

//Функция ДанныеПоПростоям(НастройкиОсновнойСхемы)
//	
//	МаксДата = Дата("39991231235959");
//	// сюда закинем список ор а потом и список графиков
//	МВТ = Новый МенеджерВременныхТаблиц;
//	ПериодОтчета = НастройкиОсновнойСхемы.ПараметрыДанных.Элементы.Найти("ПериодОтчета");
//	Если ПериодОтчета.Использование Тогда
//		ДатаНач = ПериодОтчета.Значение.ДатаНачала;
//		ДатаКон = ?(ПериодОтчета.Значение.ДатаОкончания = Дата("00010101"),МаксДата,ПериодОтчета.Значение.ДатаОкончания);
//	Иначе
//		ДатаНач = Дата("00010101");
//		ДатаКон = МаксДата;
//	КонецЕсли;
//	Если КонецДня(ДатаКон) = ДатаКон И Не ДатаКон = МаксДата Тогда
//		ДатаКонДляОтчета = ДатаКон+1;
//	Иначе
//		ДатаКонДляОтчета = ДатаКон;
//	КонецЕсли;
//	
//	// получаем список графиков
//	МассивГрафиков = Новый Массив;
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МВТ;
//	
//	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//	               |	торо_ВремяПростояОборудования.ОбъектРемонта КАК ОбъектРемонта,
//	               |	ВЫБОР
//	               |		КОГДА торо_ВремяПростояОборудования.Период < &ДатаНач
//	               |			ТОГДА &датаНач
//	               |		ИНАЧЕ торо_ВремяПростояОборудования.Период
//	               |	КОНЕЦ КАК ДатаНачала,
//	               |	ВЫБОР
//	               |		КОГДА торо_ВремяПростояОборудования.ДатаЗапуска > &ДатаКон
//	               |			ТОГДА &ДатаКон
//	               |		ИНАЧЕ торо_ВремяПростояОборудования.ДатаЗапуска
//	               |	КОНЕЦ КАК ДатаОкончания,
//	               |	ВЫБОР
//	               |		КОГДА торо_ВремяПростояОборудования.Период >= &ДатаНач
//	               |				И торо_ВремяПростояОборудования.ДатаЗапуска <= &ДатаКон
//	               |			ТОГДА торо_ВремяПростояОборудования.ВремяПростоя
//	               |		ИНАЧЕ 0
//	               |	КОНЕЦ КАК ВремяПростоя,
//	               |	торо_ВремяПростояОборудования.Регистратор КАК Регистратор,
//	               |	торо_ВремяПростояОборудования.Период КАК ДатаНачалаПоРегистру,
//	               |	торо_ВремяПростояОборудования.ДатаЗапуска КАК ДатаОкончанияПоРегистру,
//	               |	торо_ВремяПростояОборудования.ПричинаПростоя КАК ПричинаПростоя
//	               |ПОМЕСТИТЬ ТаблицаОРСДублями
//	               |ИЗ
//	               |	РегистрНакопления.впВремяПростояОборудования КАК торо_ВремяПростояОборудования
//	               |ГДЕ
//	               |	торо_ВремяПростояОборудования.ДатаЗапуска > &ДатаНач
//	               |	И торо_ВремяПростояОборудования.Период < &ДатаКон
//				   |    И торо_ВремяПростояОборудования.ДатаЗапуска < &ДатаКон
//				   |    
//	               |
//	               |ОБЪЕДИНИТЬ
//	               |
//	               |ВЫБРАТЬ
//	               |	торо_ТекущееСостояниеОРСрезПоследних.ОбъектРемонта,
//	               |	ВЫБОР
//	               |		КОГДА торо_ТекущееСостояниеОРСрезПоследних.Период < &ДатаНач
//	               |			ТОГДА &ДатаНач
//	               |		ИНАЧЕ торо_ТекущееСостояниеОРСрезПоследних.Период
//	               |	КОНЕЦ,
//	               |	&ДатаКон,
//	               |	0,
//	               |	торо_ТекущееСостояниеОРСрезПоследних.Регистратор,
//	               |	торо_ТекущееСостояниеОРСрезПоследних.Период,
//	               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
//	               |	торо_ТекущееСостояниеОРСрезПоследних.ПричинаПростоя
//	               |ИЗ
//	               |	РегистрСведений.впТекущееСостояниеОР.СрезПоследних(&ДатаКон, ) КАК торо_ТекущееСостояниеОРСрезПоследних
//	               |ГДЕ
//	               |	торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой)
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	               |	ТаблицаОРСДублями.ОбъектРемонта КАК ОбъектРемонта,
//	               |	ТаблицаОРСДублями.ДатаНачала КАК ДатаНачала,
//	               |	ТаблицаОРСДублями.ДатаОкончания КАК ДатаОкончания,
//	               |	ТаблицаОРСДублями.ВремяПростоя КАК ВремяПростоя,
//	               |	ТаблицаОРСДублями.Регистратор КАК Регистратор,
//				   //|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
//	               |	ТаблицаОРСДублями.ПричинаПростоя КАК ПричинаПростоя,
//	               |	ТаблицаОРСДублями.ДатаНачалаПоРегистру КАК ДатаНачалаПоРегистру,
//	               |	ТаблицаОРСДублями.ДатаОкончанияПоРегистру КАК ДатаОкончанияПоРегистру
//	               |ПОМЕСТИТЬ ТаблицаОР
//	               |ИЗ
//	               |	ТаблицаОРСДублями КАК ТаблицаОРСДублями
//				   //|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
//				   //|		ПО ТаблицаОРСДублями.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
//	               |;
//	               |
//	               |////////////////////////////////////////////////////////////////////////////////
//	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
//	               |	ТаблицаОР.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
//	               |ИЗ
//	               |	ТаблицаОР КАК ТаблицаОР";

//	
//	Запрос.УстановитьПараметр("ДатаКон",ДатаКонДляОтчета);
//	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
//	Выборка = Запрос.Выполнить().Выбрать();
//	Пока Выборка.Следующий() Цикл
//		МассивГрафиков.Добавить(Выборка.ПлановыйГрафикРаботы);
//	КонецЦикла;
//	
//	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МВТ,МассивГрафиков,ДатаНач,ДатаКон);
//	
//	// Получаем итоговую таблицу
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = МВТ;
//	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	              |	ВТРасписанияРаботы.ГрафикРаботы КАК ГрафикРаботы,
//	              |	ВТРасписанияРаботы.ДатаГрафика КАК ДатаГрафика,
//	              |	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА)) КАК ВремяНачала,
//	              |	ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ДатаГрафика, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ВремяОкончания
//	              |ПОМЕСТИТЬ ВТРасписаниеРаботыПолныеДаты
//	              |ИЗ
//	              |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
//	              |;
//	              |
//	              |////////////////////////////////////////////////////////////////////////////////
//	              |ВЫБРАТЬ
//	              |	ТаблицаОР.ОбъектРемонта КАК ОбъектРемонта,
//	              |	СУММА(ВЫБОР
//	              |			КОГДА ВТРасписаниеРаботыПолныеДаты.ДатаГрафика <> НАЧАЛОПЕРИОДА(ТаблицаОР.ДатаНачала, ДЕНЬ)
//	              |					И ВТРасписаниеРаботыПолныеДаты.ДатаГрафика <> НАЧАЛОПЕРИОДА(ТаблицаОР.ДатаОкончания, ДЕНЬ)
//	              |				ТОГДА РАЗНОСТЬДАТ(ВТРасписаниеРаботыПолныеДаты.ВремяНачала, ВТРасписаниеРаботыПолныеДаты.ВремяОкончания, СЕКУНДА)
//	              |			ИНАЧЕ ВЫБОР
//	              |					КОГДА ТаблицаОР.ДатаНачала > ВТРасписаниеРаботыПолныеДаты.ВремяОкончания
//	              |							ИЛИ ТаблицаОР.ДатаОкончания < ВТРасписаниеРаботыПолныеДаты.ВремяНачала
//	              |						ТОГДА 0
//	              |					КОГДА ТаблицаОР.ДатаНачала > ВТРасписаниеРаботыПолныеДаты.ВремяНачала
//	              |						ТОГДА ВЫБОР
//	              |								КОГДА ТаблицаОР.ДатаОкончания > ВТРасписаниеРаботыПолныеДаты.ВремяОкончания
//	              |									ТОГДА РАЗНОСТЬДАТ(ТаблицаОР.ДатаНачала, ВТРасписаниеРаботыПолныеДаты.ВремяОкончания, СЕКУНДА)
//	              |								ИНАЧЕ РАЗНОСТЬДАТ(ТаблицаОР.ДатаНачала, ТаблицаОР.ДатаОкончания, СЕКУНДА)
//	              |							КОНЕЦ
//	              |					ИНАЧЕ ВЫБОР
//	              |							КОГДА ТаблицаОР.ДатаОкончания > ВТРасписаниеРаботыПолныеДаты.ВремяОкончания
//	              |								ТОГДА РАЗНОСТЬДАТ(ВТРасписаниеРаботыПолныеДаты.ВремяНачала, ВТРасписаниеРаботыПолныеДаты.ВремяОкончания, СЕКУНДА)
//	              |							ИНАЧЕ РАЗНОСТЬДАТ(ВТРасписаниеРаботыПолныеДаты.ВремяНачала, ТаблицаОР.ДатаОкончания, СЕКУНДА)
//	              |						КОНЕЦ
//	              |				КОНЕЦ
//	              |		КОНЕЦ) КАК ВремяПростоя,
//	              |	ТаблицаОР.ДатаНачала КАК ДатаНачала,
//	              |	ТаблицаОР.ДатаОкончания КАК ДатаОкончания,
//	              |	ТаблицаОР.Регистратор КАК Регистратор,
//	              |	ТаблицаОР.ПричинаПростоя КАК ПричинаПростоя,
//	              |	ТаблицаОР.ДатаНачалаПоРегистру КАК ДатаНачалаПоРегистру,
//	              |	ТаблицаОР.ДатаОкончанияПоРегистру КАК ДатаОкончанияПоРегистру
//	              |ПОМЕСТИТЬ ТабСВременемПростоя
//	              |ИЗ
//	              |	ТаблицаОР КАК ТаблицаОР
//	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписаниеРаботыПолныеДаты КАК ВТРасписаниеРаботыПолныеДаты
//	              |		ПО ТаблицаОР.ПлановыйГрафикРаботы = ВТРасписаниеРаботыПолныеДаты.ГрафикРаботы
//	              |			И (ВТРасписаниеРаботыПолныеДаты.ДатаГрафика >= НАЧАЛОПЕРИОДА(ТаблицаОР.ДатаНачала, ДЕНЬ))
//	              |			И (ВТРасписаниеРаботыПолныеДаты.ДатаГрафика <= ВЫБОР
//	              |				КОГДА &ДатаКон = ДАТАВРЕМЯ(3999, 12, 31, 23, 59, 59)
//	              |					ТОГДА &ТекущаяДата
//	              |				ИНАЧЕ НАЧАЛОПЕРИОДА(ТаблицаОР.ДатаОкончания, ДЕНЬ)
//	              |			КОНЕЦ)
//	              |			И (ВТРасписаниеРаботыПолныеДаты.ВремяНачала < ТаблицаОР.ДатаОкончания)
//	              |			И (ТаблицаОР.ВремяПростоя = 0)
//	              |
//	              |СГРУППИРОВАТЬ ПО
//	              |	ТаблицаОР.ОбъектРемонта,
//	              |	ТаблицаОР.ДатаНачала,
//	              |	ТаблицаОР.ДатаОкончания,
//	              |	ТаблицаОР.Регистратор,
//	              |	ТаблицаОР.ПричинаПростоя,
//	              |	ТаблицаОР.ДатаНачалаПоРегистру,
//	              |	ТаблицаОР.ДатаОкончанияПоРегистру
//	              |
//	              |ОБЪЕДИНИТЬ ВСЕ
//	              |
//	              |ВЫБРАТЬ
//	              |	ТаблицаОР.ОбъектРемонта,
//	              |	ТаблицаОР.ВремяПростоя,
//	              |	ТаблицаОР.ДатаНачала,
//	              |	ТаблицаОР.ДатаОкончания,
//	              |	ТаблицаОР.Регистратор,
//	              |	ТаблицаОР.ПричинаПростоя,
//	              |	ТаблицаОР.ДатаНачалаПоРегистру,
//	              |	ТаблицаОР.ДатаОкончанияПоРегистру
//	              |ИЗ
//	              |	ТаблицаОР КАК ТаблицаОР
//	              |ГДЕ
//	              |	ТаблицаОР.ВремяПростоя > 0
//	              |;
//	              |
//	              |////////////////////////////////////////////////////////////////////////////////
//	              |ВЫБРАТЬ
//	              |	ТабСВременемПростоя.ОбъектРемонта КАК ОбъектРемонта,
//	              |	ТабСВременемПростоя.ВремяПростоя КАК ВремяПростоя,
//	              |	ТабСВременемПростоя.ДатаНачала КАК ДатаНачала,
//	              |	ТабСВременемПростоя.ДатаОкончания КАК ДатаОкончания,
//	              |	ТабСВременемПростоя.Регистратор КАК Регистратор,
//	              |	ТабСВременемПростоя.ПричинаПростоя КАК ПричинаПростоя,
//	              |	ТабСВременемПростоя.ДатаНачалаПоРегистру КАК ДатаНачалаПоРегистру,
//	              |	ТабСВременемПростоя.ДатаОкончанияПоРегистру КАК ДатаОкончанияПоРегистру,
//	              |	МАКСИМУМ(торо_ТекущееСостояниеОР.Период) КАК Период
//	              |ПОМЕСТИТЬ ВидЭксплуатацииНаДату
//	              |ИЗ
//	              |	ТабСВременемПростоя КАК ТабСВременемПростоя
//	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
//	              |		ПО ТабСВременемПростоя.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
//	              |			И ТабСВременемПростоя.ДатаНачалаПоРегистру >= торо_ТекущееСостояниеОР.Период
//	              |
//				  |СГРУППИРОВАТЬ ПО
//				  |	ТабСВременемПростоя.ОбъектРемонта,
//				  |	ТабСВременемПростоя.ВремяПростоя,
//				  |	ТабСВременемПростоя.ДатаНачала,
//				  |	ТабСВременемПростоя.ДатаОкончания,
//				  |	ТабСВременемПростоя.Регистратор,
//				  |	ТабСВременемПростоя.ПричинаПростоя,
//				  |	ТабСВременемПростоя.ДатаНачалаПоРегистру,
//				  |	ТабСВременемПростоя.ДатаОкончанияПоРегистру
//	              |;
//	              |
//	              |////////////////////////////////////////////////////////////////////////////////
//	              |ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	              |	ВидЭксплуатацииНаДату.ОбъектРемонта КАК ОбъектРемонта,
//	              |	ВидЭксплуатацииНаДату.ОбъектРемонта КАК ОР,
//	              |	ВидЭксплуатацииНаДату.ВремяПростоя КАК Секунды,
//	              |	ВидЭксплуатацииНаДату.ДатаНачала КАК ДатаНачала,
//	              |	ВидЭксплуатацииНаДату.ДатаОкончания КАК ДатаОкончания,
//	              |	ВидЭксплуатацииНаДату.Регистратор КАК Регистратор,
//	              |	ВидЭксплуатацииНаДату.ПричинаПростоя КАК ПричинаПростоя,
//	              |	ВидЭксплуатацииНаДату.ДатаНачалаПоРегистру КАК ДатаОстанова,
//	              |	ВидЭксплуатацииНаДату.ДатаОкончанияПоРегистру КАК ДатаЗапуска,
//	              |	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК СтатусОборудования,
//	              |	торо_ТекущееСостояниеОР.Примечание КАК Примечание
//	              |ИЗ
//	              |	ВидЭксплуатацииНаДату КАК ВидЭксплуатацииНаДату
//	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
//	              |		ПО ВидЭксплуатацииНаДату.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
//	              |			И ВидЭксплуатацииНаДату.Период = торо_ТекущееСостояниеОР.Период
//	              |
//	              |УПОРЯДОЧИТЬ ПО
//	              |	ДатаОстанова";

//	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
//	
//	Запрос.УстановитьПараметр("ДатаКон",ДатаКонДляОтчета);
//	Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
//	
//	Результат = Запрос.Выполнить().Выгрузить();
//	
//	Возврат Результат;
//	
//КонецФункции

//Функция ДобавитьКолонкуОбъектИерархии(ДанныеПоПростоям, ТекИерархия)

//	Запрос = Новый Запрос;
//	
//	Если ТекИерархия.СтроитсяАвтоматически Тогда
//				
//		Запрос.Текст =
//		"ВЫБРАТЬ
//		|	ВТ_Данные.ОбъектРемонта,
//		|	ВТ_Данные.ОР,
//		|	ВТ_Данные.Секунды,
//		|	ВТ_Данные.ДатаНачала,
//		|	ВТ_Данные.ДатаОкончания,
//		|	ВТ_Данные.Регистратор,
//		|	ВТ_Данные.ПричинаПростоя,
//		|	ВТ_Данные.ДатаОстанова,
//		|	ВТ_Данные.ДатаЗапуска,
//		|	ВТ_Данные.СтатусОборудования,
//		|	ВТ_Данные.Примечание
//		|ПОМЕСТИТЬ ВТ_ДанныеПредв
//		|ИЗ
//		|	&ВТ_Данные КАК ВТ_Данные
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Данные.ОбъектРемонта,
//		|	ВТ_Данные.ОР,
//		|	ВТ_Данные.Секунды,
//		|	ВТ_Данные.ДатаНачала,
//		|	ВТ_Данные.ДатаОкончания,
//		|	ВТ_Данные.Регистратор,
//		|	ВТ_Данные.ПричинаПростоя,
//		|	ВТ_Данные.ДатаОстанова,
//		|	ВТ_Данные.ДатаЗапуска,
//		|	ВТ_Данные.СтатусОборудования,
//		|	ВТ_Данные.Примечание,
//		|	ВЫРАЗИТЬ(ВТ_Данные.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта)." + ТекИерархия.РеквизитОР + " КАК ОбъектИерархии
//		|ИЗ
//		|	ВТ_ДанныеПредв КАК ВТ_Данные";
//		
//	Иначе

//		Запрос.Текст = 
//		"ВЫБРАТЬ
//		|	ВТ_Данные.ОбъектРемонта,
//		|	ВТ_Данные.ОР,
//		|	ВТ_Данные.Секунды,
//		|	ВТ_Данные.ДатаНачала,
//		|	ВТ_Данные.ДатаОкончания,
//		|	ВТ_Данные.Регистратор,
//		|	ВТ_Данные.ПричинаПростоя,
//		|	ВТ_Данные.ДатаОстанова,
//		|	ВТ_Данные.ДатаЗапуска,
//		|	ВТ_Данные.СтатусОборудования,
//		|	ВТ_Данные.Примечание
//		|ПОМЕСТИТЬ ВТ_ДанныеПредв
//		|ИЗ
//		|	&ВТ_Данные КАК ВТ_Данные
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ
//		|	ВТ_Данные.ОбъектРемонта,
//		|	ВТ_Данные.ОР,
//		|	ВТ_Данные.Секунды,
//		|	ВТ_Данные.ДатаНачала,
//		|	ВТ_Данные.ДатаОкончания,
//		|	ВТ_Данные.Регистратор,
//		|	ВТ_Данные.ПричинаПростоя,
//		|	ВТ_Данные.ДатаОстанова,
//		|	ВТ_Данные.ДатаЗапуска,
//		|	ВТ_Данные.СтатусОборудования,
//		|	ВТ_Данные.Примечание,
//		|	ВТ_Данные.ОбъектРемонта КАК ОбъектИерархии
//		|ИЗ
//		|	ВТ_ДанныеПредв КАК ВТ_Данные";
//		
//	КонецЕсли;
//	
//	Запрос.УстановитьПараметр("ВТ_Данные", ДанныеПоПростоям);
//	Результат = Запрос.Выполнить().Выгрузить();
//	
//	Возврат Результат;
//	
//КонецФункции

//#КонецОбласти

//#КонецЕсли