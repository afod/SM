#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	Представление = "Доклад о несоответствии "+Данные.Код;
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область Печать

Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ") Тогда
		
		КомандаПечати = КомандыПечати.Добавить();	
		КомандаПечати.Идентификатор = "РешениеПоДокладуСУБ";
		КомандаПечати.Представление = НСтр("ru = 'Решение по докладу';
		|en = 'Ship order'");	
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		КомандаПечати = КомандыПечати.Добавить();	
		КомандаПечати.Идентификатор = "ДонесениеОбУстраненииНесоответствия";
		КомандаПечати.Представление = НСтр("ru = 'Донесение об устранении';
		|en = 'Decision on the report'");	
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		КомандаПечати = КомандыПечати.Добавить();	
		КомандаПечати.Идентификатор = "ДокладОНесоответствииСУБ";
		КомандаПечати.Представление = НСтр("ru = 'Доклад о несоответствии';
		|en = 'Decision on the report'");	
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		
		// ДокладОНесоответствии (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "рарусСУБКлиент.ПечатьДокладаОНесоответствииСУБWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДокладОНесоответствииСУБMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Доклад о несоответствии (Microsoft Word)';
		|en = 'Safety management system analysis (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		
		// ДокладОНесоответствии (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "рарусСУБКлиент.ПечатьДокладаОНесоответствииСУБWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "РешениеПоДокладуСУБMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Решение по докладу (Microsoft Word)';
		|en = 'Safety management system analysis (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		
		// ДокладОНесоответствии (Microsoft Word)
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.Обработчик = "рарусСУБКлиент.ПечатьДокладаОНесоответствииСУБWord";
		КомандаПечати.МенеджерПечати = "";
		КомандаПечати.Идентификатор = "ДонесениеОбУстраненииСУБMicrosoftWord";
		КомандаПечати.Представление = НСтр("ru = 'Донесение об устранении (Microsoft Word)';
		|en = 'Safety management system analysis (Microsoft Word)'");
		КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
		КомандаПечати.ТребуетсяРасширениеРаботыСФайлами = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДокладОНесоответствии") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм,
		"ДокладОНесоответствии", НСтр("ru = 'Доклад о несоответствии'"),
		ПечатьСообщения(МассивОбъектов, ОбъектыПечати), ,
		"ПФ_MXL_ДокладОНесоответствии");
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РешениеПоДокладуСУБ") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм, 
		"РешениеПоДокладуСУБ", 
		НСтр("ru = 'Решение по докладу';
		|en = 'Decision on the report'"), 
		ПечатнаяФормаРешенияПоДокладуСУБ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДонесениеОбУстраненииНесоответствия") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм, 
		"ДонесениеОбУстраненииНесоответствия", 
		НСтр("ru = 'Донесение об устранении замечании';
		|en = 'Decision on the report'"), 
		ПечатнаяФормаДонесениеОбУстраненииНесоответствия(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДокладОНесоответствииСУБ") Тогда
		
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
		КоллекцияПечатныхФорм, 
		"ДокладОНесоответствииСУБ", 
		НСтр("ru = 'Доклад о несоответствии';
		|en = 'Decision on the report'"), 
		ПечатнаяФормаДокладОНесоответствииСУБ(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	
	КонецЕсли;
				
КонецПроцедуры

Функция ПечатьСообщения(МассивОбъектов, ОбъектыПечати,ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_ДокладОНесоответствии");
	
	ОбластьНесоответствиеШапка 		= Макет.ПолучитьОбласть("ШапкаНесоответствие");
	ОбластьНесоответствиеСтрока 	= Макет.ПолучитьОбласть("СтрокаНесоответствие");
	ОбластьНесоответствиеПодвал 	= Макет.ПолучитьОбласть("ПодвалНесоответствие");
	
	ОбластьРешениеШапка 		= Макет.ПолучитьОбласть("ШапкаРешение");
	ОбластьРешениеСтрока 		= Макет.ПолучитьОбласть("СтрокаРешение");
		
	ОбластьДонесениеШапка 	= Макет.ПолучитьОбласть("ШапкаДонесение");
	ОбластьДонесениеСтрока 	= Макет.ПолучитьОбласть("СтрокаДонесение");
	ОбластьДонесениеПодвал 	= Макет.ПолучитьОбласть("ПодвалДонесение");
	
	ДокументыСообщения = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыДокладОНесоответствии(МассивОбъектов);
	
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Для каждого Документ из ДокументыСообщения Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТДНесоответствие 	= Новый ТабличныйДокумент;
		ТДРешение 			= Новый ТабличныйДокумент;
		ТДДонесение 		= Новый ТабличныйДокумент;
		
		//Заполняем несоответствие
		ОбластьНесоответствиеШапка.Параметры.Заполнить(Документ.Шапка);
		ТДНесоответствие.Вывести(ОбластьНесоответствиеШапка);
		
		Для Каждого Несоответствие из Документ.Несоответствия Цикл
			ОбластьНесоответствиеСтрока.Параметры.Заполнить(Несоответствие);
			ТДНесоответствие.Вывести(ОбластьНесоответствиеСтрока); 			
		КонецЦикла;
		
		ОбластьНесоответствиеПодвал.Параметры.Заполнить(Документ.Шапка);
		ТДНесоответствие.Вывести(ОбластьНесоответствиеПодвал);

		//Заполняем решение
		ОбластьРешениеШапка.Параметры.Заполнить(Документ.Шапка);
		ТДРешение.Вывести(ОбластьРешениеШапка);
		
		Для Каждого Несоответствие из Документ.Несоответствия Цикл
			ОбластьРешениеСтрока.Параметры.Заполнить(Несоответствие);
			ТДРешение.Вывести(ОбластьРешениеСтрока); 			
		КонецЦикла;

		//Заполняем донесение
		ОбластьДонесениеШапка.Параметры.Заполнить(Документ.Шапка);
		ТДДонесение.Вывести(ОбластьДонесениеШапка);
		
		Для Каждого Несоответствие из Документ.Несоответствия Цикл
			ОбластьДонесениеСтрока.Параметры.Заполнить(Несоответствие);
			ТДДонесение.Вывести(ОбластьДонесениеСтрока); 			
		КонецЦикла;
		
		ОбластьДонесениеПодвал.Параметры.Заполнить(Документ.Шапка);
		ТДДонесение.Вывести(ОбластьДонесениеПодвал);

		ТабличныйДокумент.Вывести(ТДНесоответствие);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(ТДРешение);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(ТДДонесение);
		
		Если ВставлятьРазрывВКонцеМакета Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Шапка.Ссылка);	
		
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСообщения_4_1_1(МассивОбъектов, ОбъектыПечати,ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_ДокладОНесоответствии");
	
	ОбластьНесоответствиеШапка 		= Макет.ПолучитьОбласть("ШапкаНесоответствие");
	ОбластьНесоответствиеСтрока 	= Макет.ПолучитьОбласть("СтрокаНесоответствие");
	ОбластьНесоответствиеПодвал 	= Макет.ПолучитьОбласть("ПодвалНесоответствие");
	
	ОбластьРешениеШапка 		= Макет.ПолучитьОбласть("ШапкаРешение");
	ОбластьРешениеСтрока 		= Макет.ПолучитьОбласть("СтрокаРешение");
		
	ОбластьДонесениеШапка 	= Макет.ПолучитьОбласть("ШапкаДонесение");
	ОбластьДонесениеСтрока 	= Макет.ПолучитьОбласть("СтрокаДонесение");
	ОбластьДонесениеПодвал 	= Макет.ПолучитьОбласть("ПодвалДонесение");
	
	ДокументыСообщения = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыДокладОНесоответствии(МассивОбъектов);
	
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Для каждого Документ из ДокументыСообщения Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТДНесоответствие 	= Новый ТабличныйДокумент;
		ТДРешение 			= Новый ТабличныйДокумент;
		ТДДонесение 		= Новый ТабличныйДокумент;
		
		//Заполняем несоответствие
		ОбластьНесоответствиеШапка.Параметры.Заполнить(Документ.Шапка);
		ТДНесоответствие.Вывести(ОбластьНесоответствиеШапка);
		
		Для Каждого Несоответствие из Документ.Несоответствия Цикл
			ОбластьНесоответствиеСтрока.Параметры.Заполнить(Несоответствие);
			ТДНесоответствие.Вывести(ОбластьНесоответствиеСтрока); 			
		КонецЦикла;
		
		ОбластьНесоответствиеПодвал.Параметры.Заполнить(Документ.Шапка);
		ТДНесоответствие.Вывести(ОбластьНесоответствиеПодвал);

		ТабличныйДокумент.Вывести(ТДНесоответствие);
		
		Если ВставлятьРазрывВКонцеМакета Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Шапка.Ссылка);	
		
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСообщения_4_1_2(МассивОбъектов, ОбъектыПечати,ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_ДокладОНесоответствии");
	
	ОбластьНесоответствиеШапка 		= Макет.ПолучитьОбласть("ШапкаНесоответствие");
	ОбластьНесоответствиеСтрока 	= Макет.ПолучитьОбласть("СтрокаНесоответствие");
	ОбластьНесоответствиеПодвал 	= Макет.ПолучитьОбласть("ПодвалНесоответствие");
	
	ОбластьРешениеШапка 		= Макет.ПолучитьОбласть("ШапкаРешение");
	ОбластьРешениеСтрока 		= Макет.ПолучитьОбласть("СтрокаРешение");
		
	ОбластьДонесениеШапка 	= Макет.ПолучитьОбласть("ШапкаДонесение");
	ОбластьДонесениеСтрока 	= Макет.ПолучитьОбласть("СтрокаДонесение");
	ОбластьДонесениеПодвал 	= Макет.ПолучитьОбласть("ПодвалДонесение");
	
	ДокументыСообщения = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыДокладОНесоответствии(МассивОбъектов);
	
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Для каждого Документ из ДокументыСообщения Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТДНесоответствие 	= Новый ТабличныйДокумент;
		ТДРешение 			= Новый ТабличныйДокумент;
		ТДДонесение 		= Новый ТабличныйДокумент;
		
		//Заполняем решение
		ОбластьРешениеШапка.Параметры.Заполнить(Документ.Шапка);
		ТДРешение.Вывести(ОбластьРешениеШапка);
		
		Для Каждого Несоответствие из Документ.Несоответствия Цикл
			ОбластьРешениеСтрока.Параметры.Заполнить(Несоответствие);
			ТДРешение.Вывести(ОбластьРешениеСтрока); 			
		КонецЦикла;

		ТабличныйДокумент.Вывести(ТДРешение);
		
		Если ВставлятьРазрывВКонцеМакета Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Шапка.Ссылка);	
		
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатьСообщения_4_1_3(МассивОбъектов, ОбъектыПечати,ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_ДокладОНесоответствии");
	
	ОбластьНесоответствиеШапка 		= Макет.ПолучитьОбласть("ШапкаНесоответствие");
	ОбластьНесоответствиеСтрока 	= Макет.ПолучитьОбласть("СтрокаНесоответствие");
	ОбластьНесоответствиеПодвал 	= Макет.ПолучитьОбласть("ПодвалНесоответствие");
	
	ОбластьРешениеШапка 		= Макет.ПолучитьОбласть("ШапкаРешение");
	ОбластьРешениеСтрока 		= Макет.ПолучитьОбласть("СтрокаРешение");
		
	ОбластьДонесениеШапка 	= Макет.ПолучитьОбласть("ШапкаДонесение");
	ОбластьДонесениеСтрока 	= Макет.ПолучитьОбласть("СтрокаДонесение");
	ОбластьДонесениеПодвал 	= Макет.ПолучитьОбласть("ПодвалДонесение");
	
	ДокументыСообщения = vftОбщиеПроцедурыДокументовСервер.ПолучитьРеквизитыДокладОНесоответствии(МассивОбъектов);
	
	ТабличныйДокумент = новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Для каждого Документ из ДокументыСообщения Цикл
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТДНесоответствие 	= Новый ТабличныйДокумент;
		ТДРешение 			= Новый ТабличныйДокумент;
		ТДДонесение 		= Новый ТабличныйДокумент;
		
		//Заполняем донесение
		ОбластьДонесениеШапка.Параметры.Заполнить(Документ.Шапка);
		ТДДонесение.Вывести(ОбластьДонесениеШапка);
		
		Для Каждого Несоответствие из Документ.Несоответствия Цикл
			ОбластьДонесениеСтрока.Параметры.Заполнить(Несоответствие);
			ТДДонесение.Вывести(ОбластьДонесениеСтрока); 			
		КонецЦикла;
		
		ОбластьДонесениеПодвал.Параметры.Заполнить(Документ.Шапка);
		ТДДонесение.Вывести(ОбластьДонесениеПодвал);

		ТабличныйДокумент.Вывести(ТДДонесение);
		
		Если ВставлятьРазрывВКонцеМакета Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Документ.Шапка.Ссылка);	
		
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// ++ rarus ilshill 12.02.2021
//
// переработанные печатные формы. Используются при испошльзовании функционала СУБ
Функция ПечатнаяФормаРешенияПоДокладуСУБ(МассивОбъектов, ОбъектыПечати, ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_РешениеПоДокладуСУБ");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапкаДокумента    = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаТаблицы     = Макет.ПолучитьОбласть("Тело");			
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ДанныеДляПечатнойФормы = ПолучитьДанныеДляПечатныхФорм(Документ);	
		
		РезультатПоШапке = ДанныеДляПечатнойФормы.РезультатПоШапке.Выгрузить();
		
		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Судно",   РезультатПоШапке[0].Судно);
		СтруктураШапки.Вставить("Код",     РезультатПоШапке[0].Код);
		СтруктураШапки.Вставить("Дата",    Формат(РезультатПоШапке[0].Дата, "ДФ=dd.MM.yyyy"));
	 
		ОбластьШапкаДокумента.Параметры.Заполнить(СтруктураШапки);
		ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
		
		РезультатПоЗамечаниям = ДанныеДляПечатнойФормы.РезультатПоЗамечаниям.Выгрузить();
		
		Для Каждого СтрокаТч Из РезультатПоЗамечаниям Цикл	
			
			КорректирующиеДействия = "";
			ИтогСтрПоКорДействиям = "";
			
			Для Каждого Подразделение Из СтрокаТч.Ссылка.ЗоныОтветственности Цикл
				
				ПодразделениеОтветственноеЗаУстранениеНесоответствия =  Строка(Подразделение.ЗанаОтветственности) 
				                    + "; " + ПодразделениеОтветственноеЗаУстранениеНесоответствия;
						  					  						                                        
				КорректирующиеДействия = Строка(Подразделение.КорректирующиеДействия) 
				             + Символы.ПС  + КорректирующиеДействия;
			 КонецЦикла;  
						 
			СтрокаРазделитель = "; " ;	
			
			АнкетированиеКлиентСервер.УдалитьПоследниеСимволыИзСтроки(ПодразделениеОтветственноеЗаУстранениеНесоответствия,СтрокаРазделитель);
			 
			
			СтрокаПодразделение = ПодразделениеОтветственноеЗаУстранениеНесоответствия + ".";
			
			ДобавлятьСтрокуКорДействий = СтрНайти(КорректирующиеДействия, СтрокаТч.КорректирующиеДействия);
			
			Если ДобавлятьСтрокуКорДействий = 0 Тогда
				
				ИтогСтрПоКорДействиям = КорректирующиеДействия  + СтрокаТч.КорректирующиеДействия;
								
			Иначе
				ИтогСтрПоКорДействиям = КорректирующиеДействия;
				
			КонецЕсли;
			
			ИтогСтрПоКорДействиям = СтрЗаменить(ИтогСтрПоКорДействиям, Символы.НПП, " "); 
								
			СтруктураСтрокиТч = Новый Структура;                                         
			СтруктураСтрокиТч.Вставить("Код",                                                   СтрокаТч.Код);
			СтруктураСтрокиТч.Вставить("ОписаниеНесоответствия",                                СтрокаТч.ОписаниеЗамечания);	
			СтруктураСтрокиТч.Вставить("КорректирующиеДействия",                                СокрЛП(ИтогСтрПоКорДействиям));
			СтруктураСтрокиТч.Вставить("ПредписанныеСрокиУстранения",                           СтрокаТч.КодУстраненияЗамечанияНаименование);
			СтруктураСтрокиТч.Вставить("ПланируемыеСтрокиУстранения",                           Формат(СтрокаТч.ПланируемыеСрокиУстраненияКорДействия, "ДФ=dd.MM.yy; ДП=' '"));
			СтруктураСтрокиТч.Вставить("ПодразделениеОтветственноеЗаУстранениеНесоответствия",  СтрокаПодразделение);
			СтруктураСтрокиТч.Вставить("Должность",                                             СтрокаТч.ДолжностьОтветственныйРешение);	
			СтруктураСтрокиТч.Вставить("ФИО",                                                   СтрокаТч.ФИООтветственныйРешений);	
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураСтрокиТч);                                       
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы); 
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПечатнаяФормаДонесениеОбУстраненииНесоответствия(МассивОбъектов, ОбъектыПечати, ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_ДонесениеОбУстраненииНесоответствия");
	
	///
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаТаблицы  = Макет.ПолучитьОбласть("Тело");
	ОбластьПодвалПодпись  = Макет.ПолучитьОбласть("ПодвалПодпись");
	ОбластьПодвал         = Макет.ПолучитьОбласть("Подвал");
		
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ДанныеДляПечатнойФормы = ПолучитьДанныеДляПечатныхФорм(Документ);	
		
		РезультатПоШапке = ДанныеДляПечатнойФормы.РезультатПоШапке.Выгрузить();
		
		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Судно",   РезультатПоШапке[0].Судно);
		СтруктураШапки.Вставить("Код",     РезультатПоШапке[0].Код);
		СтруктураШапки.Вставить("Капитан", РезультатПоШапке[0].Капитан);	
	 
		ОбластьШапкаДокумента.Параметры.Заполнить(СтруктураШапки);
		ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
		
		РезультатПоЗамечаниям = ДанныеДляПечатнойФормы.РезультатПоЗамечаниям.Выгрузить();
		
		Для Каждого СтрокаТч Из РезультатПоЗамечаниям Цикл		
			
			СтруктураСтрокиТч = Новый Структура;
			СтруктураСтрокиТч.Вставить("Код",                  СтрокаТч.Код);
			СтруктураСтрокиТч.Вставить("ПринятыеДействия",     СтрокаТч.ДействияПринятыеДляУстранения);	
			СтруктураСтрокиТч.Вставить("ДатаУстранения",       Формат(СтрокаТч.ДатаУстранения, "ДФ=dd.MM.yy; ДП=-"));
			СтруктураСтрокиТч.Вставить("ДопКомментарий",       СтрокаТч.ДополнительныйКомментарийДонесение);
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураСтрокиТч);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы); 
			
		КонецЦикла;
		
		СтруктураПодвалПодпись =  Новый Структура;
		СтруктураПодвалПодпись.Вставить("Капитан" ,РезультатПоШапке[0].Капитан);
		ОбластьПодвалПодпись.Параметры.Заполнить(СтруктураПодвалПодпись);

		ТабличныйДокумент.Вывести(ОбластьПодвалПодпись); 
		
		Для Каждого СтрокаТч Из РезультатПоЗамечаниям Цикл
			СтруктураПодвал =  Новый Структура;
			СтруктураПодвал.Вставить("Код" ,СтрокаТч.Код);
			СтруктураПодвал.Вставить("ФИО" ,СтрокаТч.ФиоОтветственногоЗаЗакрытиеЗамечания);		
		    ОбластьПодвал.Параметры.Заполнить(СтруктураПодвал);
			ТабличныйДокумент.Вывести(ОбластьПодвал); 
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	 //

КонецФункции

Функция ПечатнаяФормаДокладОНесоответствииСУБ(МассивОбъектов, ОбъектыПечати, ВставлятьРазрывВКонцеМакета = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_MXL_ДокладОНесоответствииСУБ");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапкаДокумента    = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаТаблицы     = Макет.ПолучитьОбласть("Тело");			
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ДанныеДляПечатнойФормы = ПолучитьДанныеДляПечатныхФорм(Документ);	
		
		РезультатПоШапке = ДанныеДляПечатнойФормы.РезультатПоШапке.Выгрузить();
		
		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Судно",   РезультатПоШапке[0].Судно);
		СтруктураШапки.Вставить("Капитан", РезультатПоШапке[0].Капитан);
		СтруктураШапки.Вставить("Код",     РезультатПоШапке[0].Код);
		СтруктураШапки.Вставить("Дата",    Формат(РезультатПоШапке[0].Дата,"ДФ=dd.MM.yyyy"));
		
		
		ОбластьШапкаДокумента.Параметры.Заполнить(СтруктураШапки);
		ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
		
		РезультатПоЗамечаниям = ДанныеДляПечатнойФормы.РезультатПоЗамечаниям.Выгрузить();
		
		Для Каждого СтрокаТч Из РезультатПоЗамечаниям Цикл	
			//	
			КорректирующиеДействия = "";
			ИтогСтрПоКорДействиям = "";
			
			Для Каждого Подразделение Из СтрокаТч.Ссылка.ЗоныОтветственности Цикл
								
				КорректирующиеДействия = Строка(Подразделение.КорректирующиеДействия) 
				                                      + Символы.ПС  + КорректирующиеДействия;
			КонецЦикла;  
			
			СтрокаРазделитель = "; " ;	
			
			ДобавлятьСтрокуКорДействий = СтрНайти(КорректирующиеДействия, СтрокаТч.КорректирующиеДействия);
			
			Если ДобавлятьСтрокуКорДействий = 0 Тогда
				
				ИтогСтрПоКорДействиям = КорректирующиеДействия  + СтрокаТч.КорректирующиеДействия;
				
			Иначе
				ИтогСтрПоКорДействиям = КорректирующиеДействия;
				
			КонецЕсли;
			
			ИтогСтрПоКорДействиям = СтрЗаменить(ИтогСтрПоКорДействиям, Символы.НПП, " ");
			//	
				
			СтруктураСтрокиТч = Новый Структура;
			СтруктураСтрокиТч.Вставить("Код",                        СтрокаТч.Код);                                 
			СтруктураСтрокиТч.Вставить("ОписаниеНесоответствия",     СтрокаТч.ОписаниеЗамечания);                  
			СтруктураСтрокиТч.Вставить("ПричинаНесоответствия",      СтрокаТч.ПричинаЗамечания);
			СтруктураСтрокиТч.Вставить("Замечания",                  СтрокаТч.КодЗамечаний);
			СтруктураСтрокиТч.Вставить("Устранения",                 СтрокаТч.КодУстраненияЗамечания);
			СтруктураСтрокиТч.Вставить("КорректирующиеДействия",     ИтогСтрПоКорДействиям);
			СтруктураСтрокиТч.Вставить("ВыполнитьДоПД",                Формат(СтрокаТч.ПланируемыеСрокиВыполнения,"ДФ=dd.MM.yyyy; ДП=' '"));
			СтруктураСтрокиТч.Вставить("ОтветственноеЛицо",          СтрокаТч.ФИООтветственныйРешений);
			СтруктураСтрокиТч.Вставить("ДатаВыполнения",             Формат(СтрокаТч.ПланируемыеСрокиУстраненияКорДействия, "ДФ=dd.MM.yyyy; ДП=' '"));
			СтруктураСтрокиТч.Вставить("ПредупреждающиеДествия",     СтрокаТч.ПредупреждающиеДействия);
			//СтруктураСтрокиТч.Вставить("ВыполнитьДоПД",              Формат(СтрокаТч.ОписаниеЗамечания, "ДФ=dd.MM.yyyy; ДП=' '"));
			СтруктураСтрокиТч.Вставить("ОтветственноеЛицоПД",        СтрокаТч.ОписаниеЗамечания);
			СтруктураСтрокиТч.Вставить("ВыполнитьДо",                СтрокаТч.КодУстраненияЗамечанияНаименование);
			СтруктураСтрокиТч.Вставить("ДатаВыполненияПД",           Формат(СтрокаТч.ДатаВыполненияПредупреждДействия,"ДФ=dd.MM.yyyy; ДП=' '"));
			СтруктураСтрокиТч.Вставить("ОтветственноеЛицоПД",        СтрокаТч.ФИООтветственныйПредупреждающиеДействия);
			СтруктураСтрокиТч.Вставить("Капитан",                    РезультатПоШапке[0].Капитан);
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураСтрокиТч);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы); 
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	

КонецФункции

Функция СформироватьПечатнуюФормуДонесениеОбУстранении(МассивОбъектов, ОбъектыПечати, ВставлятьРазрывВКонцеМакета = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.рарусДокладыНесоответствия.ПФ_DOC_ДонесениеОбУстраненииСУБ");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ПолеСлева = 5;
	ТабличныйДокумент.ПолеСправа = 5;
	ТабличныйДокумент.РазмерКолонтитулаСверху = 0;
	ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ОбластьШапкаДокумента = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаТаблицы  = Макет.ПолучитьОбласть("Тело");
	ОбластьПодвал         = Макет.ПолучитьОбласть("ПодвалПодпись");
	
	Для Каждого Документ Из МассивОбъектов Цикл
		
		ДанныеДляПечатнойФормы = ПолучитьДанныеДляПечатныхФорм(Документ);	
		
		РезультатПоШапке = ДанныеДляПечатнойФормы.РезультатПоШапке.Выгрузить();
		
		СтруктураШапки = Новый Структура;
		СтруктураШапки.Вставить("Судно",   РезультатПоШапке[0].Судно);
		СтруктураШапки.Вставить("Код",     РезультатПоШапке[0].Код);
		СтруктураШапки.Вставить("Капитан", РезультатПоШапке[0].Капитан);	
	 
		ОбластьШапкаДокумента.Параметры.Заполнить(СтруктураШапки);
		ТабличныйДокумент.Вывести(ОбластьШапкаДокумента);
		
		РезультатПоЗамечаниям = ДанныеДляПечатнойФормы.РезультатПоЗамечаниям.Выгрузить();
		
		Для Каждого СтрокаТч Из РезультатПоЗамечаниям Цикл		
			
			СтруктураСтрокиТч = Новый Структура;
			СтруктураСтрокиТч.Вставить("Код",                  СтрокаТч.Код);
			СтруктураСтрокиТч.Вставить("ПринятыеДействия",     СтрокаТч.ДействияПринятыеДляУстранения);	
			СтруктураСтрокиТч.Вставить("ДатаУстранения",       Формат(СтрокаТч.ДатаУстранения, "ДФ=dd.MM.yy; ДП=-"));
			СтруктураСтрокиТч.Вставить("ДопКомментарий",       СтрокаТч.ДополнительныйКомментарийДонесение);
			
			ОбластьСтрокаТаблицы.Параметры.Заполнить(СтруктураСтрокиТч);
			ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы); 
			
		КонецЦикла;
		
		СтруктураПодвал =  Новый Структура;
		СтруктураПодвал.Вставить("Капитан",РезультатПоШапке[0].Капитан);
		ОбластьПодвал.Параметры.Заполнить(СтруктураПодвал);
		ТабличныйДокумент.Вывести(ОбластьПодвал); 
			
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьДанныеДляПечатныхФорм(Документ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	vftДокладыОНесоответствии.Ссылка КАК Ссылка,
	               |	vftДокладыОНесоответствии.ВерсияДанных КАК ВерсияДанных,
	               |	vftДокладыОНесоответствии.ПометкаУдаления КАК ПометкаУдаления,
	               |	vftДокладыОНесоответствии.Код КАК Код,
	               |	vftДокладыОНесоответствии.ФИОКапитана КАК Капитан,
	               |	vftДокладыОНесоответствии.Статус КАК Статус,
	               |	vftДокладыОНесоответствии.Судно КАК Судно,
	               |	vftДокладыОНесоответствии.ДатаЗакрытияДоклада КАК ДатаЗакрытияДоклада,
	               |	vftДокладыОНесоответствии.Дата КАК Дата,
	               |	vftДокладыОНесоответствии.Предопределенный КАК Предопределенный,
	               |	vftДокладыОНесоответствии.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	               |	vftДокладыОНесоответствии.Представление КАК Представление
	               |ИЗ
	               |	Справочник.vftДокладыОНесоответствии КАК vftДокладыОНесоответствии
	               |ГДЕ
	               |	vftДокладыОНесоответствии.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	vftНесоответствия.ОписаниеНесоответствия КАК ОписаниеЗамечания,
	               |	vftНесоответствия.ПричинаНесоответствия КАК ПричинаЗамечания,
	               |	vftНесоответствия.КорректирующиеДействия КАК КорректирующиеДействия,
	               |	vftНесоответствия.ПланируемыеСрокиВыполнения КАК ВыполнитьДоПредупреждДействия,
	               |	vftНесоответствия.ДатаВыполнения КАК ДатаВыполненияПредупреждДействия,
	               |	vftНесоответствия.ФИООтветственныйРешение КАК ФИООтветственныйРешений,
	               |	vftНесоответствия.ПланируемыеСрокиУстранения КАК ПланируемыеСрокиУстраненияКорДействия,
	               |	vftНесоответствия.ПредписанныеСрокиУстранения КАК ПредписанныеСрокиУстраненияКорДействия,
	               |	vftНесоответствия.ФИООтветственныйПредупреждающиеДействия КАК ФИООтветственныйПредупреждающиеДействия,
	               |	vftНесоответствия.ПредупреждающиеДействия КАК ПредупреждающиеДействия,
	               |	vftНесоответствия.КодУстраненияЗамечания.КодНесоответствия КАК КодУстраненияЗамечания,
	               |	vftНесоответствия.КодЗамечаний.КодЗамечания КАК КодЗамечаний,
	               |	vftНесоответствия.Код КАК Код,
	               |	vftНесоответствия.ОтветственныйЗаПредупреждающиеДействия КАК ОтветственноеПодразделение,
	               |	vftНесоответствия.ДолжностьОтветственныйПредупреждающиеДействия КАК ДолжностьОтветственногоЗаПредупреждающиеДействия,
	               |	vftНесоответствия.ДействияПринятыеДляУстранения КАК ДействияПринятыеДляУстранения,
	               |	vftНесоответствия.ДатаУстранения КАК ДатаУстранения,
	               |	vftНесоответствия.Дата КАК ДатаЗамечания,
	               |	vftНесоответствия.ФиоОтветственногоЗаЗакрытиеЗамечания КАК ФиоОтветственногоЗаЗакрытиеЗамечания,
	               |	vftНесоответствия.ДополнительныйКомментарийДонесение КАК ДополнительныйКомментарийДонесение,
	               |	vftНесоответствия.ДолжностьОтветственныйРешение КАК ДолжностьОтветственныйРешение,
	               |	vftНесоответствия.КодЗамечаний.Ссылка КАК КодЗамечанийНаименование,
	               |	vftНесоответствия.Ссылка КАК Ссылка,
	               |	vftНесоответствия.КодУстраненияЗамечания.Наименование КАК КодУстраненияЗамечанияНаименование,
	               |	vftНесоответствия.ПланируемыеСрокиВыполнения КАК ПланируемыеСрокиВыполнения
	               |ИЗ
	               |	Справочник.vftНесоответствия КАК vftНесоответствия
	               |ГДЕ
	               |	vftНесоответствия.ВладелецЗамечания = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	
	ПакетРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("РезультатПоШапке", ПакетРезультатовЗапроса[0]);
	СтруктураДанныхДляПечати.Вставить("РезультатПоЗамечаниям", ПакетРезультатовЗапроса[1]);
	
	Возврат СтруктураДанныхДляПечати;
		
КонецФункции

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	Возврат Новый Структура("Данные,Макеты",
				ПолучитьДанныеОбъектаПоМакетам(МассивДокументов[0].Ссылка, МассивИменМакетов),
				ПолучитьМакетыИОписанияСекций(МассивИменМакетов));
КонецФункции

Функция ПолучитьДанныеОбъектаПоМакетам(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	
	СтруктураРезультатов =  ПолучитьДанныеДляПечатныхФорм(МассивДокументов);
	
	РезультатПоШапке = СтруктураРезультатов.РезультатПоШапке.Выгрузить();
	/// 	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("Код",         РезультатПоШапке[0].Код);
	ДанныеОбъекта.Вставить("Дата",        Формат(РезультатПоШапке[0].Дата, "ДФ=dd.MM.yy"));
	ДанныеОбъекта.Вставить("Судно",       РезультатПоШапке[0].Судно);
	ДанныеОбъекта.Вставить("ФИОКапитана", РезультатПоШапке[0].Капитан);
	ДанныеОбъекта.Вставить("ИнспектирующийОрган", " ");
	ДанныеОбъекта.Вставить("Инспектор",   РезультатПоШапке[0].Капитан);
	ДанныеОбъекта.Вставить("МестоИнспекции", " ");
	ДанныеОбъекта.Вставить("ДатаИнспекции", " ");
	
	///	
	Замечания = СтруктураРезультатов.РезультатПоЗамечаниям.Выгрузить();
	
	ДанныеОбъекта.Вставить("Замечания",Новый Массив);
	
	Для Каждого Строка Из Замечания Цикл		
		///
		КорректирующиеДействия = "";
		ИтогСтрПоКорДействиям = "";
		
		Для Каждого Подразделение Из Строка.Ссылка.ЗоныОтветственности Цикл
			
			ПодразделениеОтветственноеЗаУстранениеНесоответствия =  Строка(Подразделение.ЗанаОтветственности) 
			                                            + "; " + ПодразделениеОтветственноеЗаУстранениеНесоответствия;
			
			КорректирующиеДействия = Строка(Подразделение.КорректирующиеДействия) 
			                                          + Символы.ПС  + КорректирующиеДействия;
		КонецЦикла;  
		
		СтрокаРазделитель = "; " ;	
		
		АнкетированиеКлиентСервер.УдалитьПоследниеСимволыИзСтроки(ПодразделениеОтветственноеЗаУстранениеНесоответствия,СтрокаРазделитель);
				
		СтрокаПодразделение = ПодразделениеОтветственноеЗаУстранениеНесоответствия + ".";
		
		ДобавлятьСтрокуКорДействий = СтрНайти(КорректирующиеДействия, Строка.КорректирующиеДействия);
		
		Если ДобавлятьСтрокуКорДействий = 0 Тогда
			
			ИтогСтрПоКорДействиям = КорректирующиеДействия  + Строка.КорректирующиеДействия;
			
		Иначе
			ИтогСтрПоКорДействиям = КорректирующиеДействия;
			
		КонецЕсли;
		
		ИтогСтрПоКорДействиям = СтрЗаменить(ИтогСтрПоКорДействиям, Символы.НПП, " "); 
		///
			
		СтрокаТаблицы = Новый Структура;
		СтрокаТаблицы.Вставить("ОписаниеНесоответствия",                 Строка.ОписаниеЗамечания);
		СтрокаТаблицы.Вставить("ПричинаНесоответствия",                  Строка.ПричинаЗамечания);
		СтрокаТаблицы.Вставить("КодНесоответствия",                      Строка.Код);

		СтрокаТаблицы.Вставить("Кз",                                     Строка.КодЗамечаний);
		СтрокаТаблицы.Вставить("Ку",                                     Строка.КодУстраненияЗамечания);
	
		СтрокаТаблицы.Вставить("КорректирующиеДействия",                 ИтогСтрПоКорДействиям);
		СтрокаТаблицы.Вставить("ВыполнитьДо",                            Строка.КодУстраненияЗамечанияНаименование);
		СтрокаТаблицы.Вставить("ОтветЛицо",                              Строка.ФИООтветственныйПредупреждающиеДействия);
		СтрокаТаблицы.Вставить("ДатаВыполнения",                         Формат(Строка.ПланируемыеСрокиУстраненияКорДействия, "ДФ=dd.MM.yy"));
			
		СтрокаТаблицы.Вставить("ПредупреждающиеДействия",                Строка.ПредупреждающиеДействия);
		СтрокаТаблицы.Вставить("ВыполнитьДоПД",                          Формат(Строка.ВыполнитьДоПредупреждДействия, "ДФ=dd.MM.yy"));	                         
		СтрокаТаблицы.Вставить("ОтветЛицоПД",                            Строка.ФИООтветственныйРешений);
		СтрокаТаблицы.Вставить("ДатаВыполненияПД",                       Формат(Строка.ДатаВыполненияПредупреждДействия, "ДФ=dd.MM.yy"));
		
		СтрокаТаблицы.Вставить("Капитан", РезультатПоШапке[0].Капитан);
		СтрокаТаблицы.Вставить("НазначенноеЛицо", " ");		
		//
		СтрокаТаблицы.Вставить("ПодразделениеПД",                        СтрокаПодразделение);
		СтрокаТаблицы.Вставить("ДолжностьПД",                            Строка.ДолжностьОтветственногоЗаПредупреждающиеДействия);	
		//	
		//
		СтрокаТаблицы.Вставить("ДействияПринятыеДляУстраненияЗамечания", Строка.ДействияПринятыеДляУстранения);
		СтрокаТаблицы.Вставить("ДатаУстранения",                         Формат(Строка.ДатаУстранения,"ДФ=dd.MM.yy"));	
		СтрокаТаблицы.Вставить("ДатаЗамечания",                          Формат(Строка.ДатаЗамечания, "ДФ=dd.MM.yy"));
		СтрокаТаблицы.Вставить("ОтветЗМ",                                Строка.ФиоОтветственногоЗаЗакрытиеЗамечания);
		СтрокаТаблицы.Вставить("КодНс",                                  Строка.Код); 		
		СтрокаТаблицы.Вставить("ДопКом",                                 Строка.ДополнительныйКомментарийДонесение); 		
		//
		
		СтрокаТаблицы.Вставить("ВыполнитьДоКорД",                        Формат(Строка.ПланируемыеСрокиВыполнения, "ДФ=dd.MM.yy")); 
		
		ДанныеОбъекта.Замечания.Добавить(СтрокаТаблицы);
		
	КонецЦикла;
	
	ДанныеОбъекта.Вставить("КапитанП",                               РезультатПоШапке[0].Капитан);
	
	ДанныеПоВсемОбъектам.Вставить(МассивДокументов, ДанныеОбъекта);
	
	Возврат ДанныеПоВсемОбъектам;

КонецФункции

Функция ПолучитьМакетыИОписанияСекций(знач МассивИменМакетов) Экспорт
	
	ОписаниеСекций = Новый Структура;
	ДвоичныеДанныеМакетов = Новый Структура;
	
	Для Каждого ИмяМакета Из МассивИменМакетов Цикл
		
		Макет = Неопределено;
		ОписаниеСекцийМакета = Неопределено;
		
		Если ИмяМакета = "ПФ_DOC_ДокладОНесоответствииСУБ" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластей();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_DOC_ДокладОНесоответствииСУБ");
		ИначеЕсли ИмяМакета = "ПФ_DOC_РешениеПоДокладуСУБ" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластей();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_DOC_РешениеПоДокладуСУБ");		
		ИначеЕсли ИмяМакета = "ПФ_DOC_ДонесениеОбУстраненииСУБ" Тогда
			ОписаниеСекцийМакета = ПолучитьОписаниеОбластейПоДонесению();
			Макет = УправлениеПечатью.МакетПечатнойФормы("Справочник.vftДокладыОНесоответствии.ПФ_DOC_ДонесениеОбУстраненииСУБ");		
		КонецЕсли;
		
		Если ОписаниеСекцийМакета <> Неопределено И Макет <> Неопределено Тогда
			
			ОписаниеСекций.Вставить(ИмяМакета, ОписаниеСекцийМакета);
			ДвоичныеДанныеМакетов.Вставить(ИмяМакета, Макет);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("ОписаниеСекций,ДвоичныеДанныеМакетов",
	                         ОписаниеСекций,ДвоичныеДанныеМакетов);

КонецФункции

Функция ПолучитьОписаниеОбластей()
	
	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул", "ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "НижнийКолонтитул",  "НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаДоклада",			   "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Несоответствие",	   "СтрокаТаблицы");
			
	Возврат Секции;
 
КонецФункции

Функция ПолучитьОписаниеОбластейПоДонесению()
	
	Секции = Новый Структура;
	
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ВерхнийКолонтитул", "ВерхнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "НижнийКолонтитул",  "НижнийКолонтитул");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "ШапкаДоклада",			   "Общая");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Несоответствие",	   "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Дополнительно",	   "СтрокаТаблицы");
	УправлениеПечатью.ДобавитьОписаниеОбласти(Секции, "Подпись",	       "Общая");

	Возврат Секции;   
КонецФункции
// ++ rarus ilshill 12.02.2021

#КонецОбласти

// ++ ilshill 13.01.2020 № 26493
#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		//rarus_AfoD 27.08.2021 < 
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Ключ") И ТипЗнч(Параметры.Ключ) = Тип("СправочникСсылка.vftДокладыОНесоответствии") Тогда
			
			ПараметрыОпции = Новый Структура;
			ПараметрыОпции.Вставить("Судно", Параметры.Ключ.Судно);
			ПараметрыОпции.Вставить("Период", Параметры.Ключ.Дата);
			ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ", ПараметрыОпции);
			
		Иначе
			
			ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");
		
		КонецЕсли; 
		//rarus_AfoD 27.08.2021 > 
		
		Если ИспользоватьФункционалСУБ Тогда 
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Справочник.vftДокладыОНесоответствии.Форма.ФормаЭлементаСУБ";		
			
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
			
		Если ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ") Тогда 
			
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "ФормаСпискаСУБ";
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Судно");
	Результат.Добавить("ОтветКомпании");
	Результат.Добавить("Ответственный");
	Результат.Добавить("ФИОИнспектора");
	Результат.Добавить("ИнспектирующийОрган");
	Результат.Добавить("МестоИнспекции");
	Результат.Добавить("ДатаИнспекции");
	Результат.Добавить("Дата");
	Результат.Добавить("СрокУстранения");
	Результат.Добавить("НомерДоклада");
	Результат.Добавить("ДатаВыполнения");
	Результат.Добавить("ФИОКапитана");
	Результат.Добавить("ГруппаТело");
	Результат.Добавить("Список; Создать,Скопировать");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПолучитьТаблицуЗначенийЗамечаний(Ссылка) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Замечания.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.vftНесоответствия КАК Замечания
	               |ГДЕ
	               |	Замечания.ВладелецЗамечания = &ВладелецЗамечания
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Замечания.Код";
	Запрос.УстановитьПараметр("ВладелецЗамечания", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область РегистрацияОбмена

Процедура ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО) Экспорт
	
	рарусОбменСУБСервер.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);
	
КонецПроцедуры	

Процедура ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели) Экспорт

КонецПроцедуры

#КонецОбласти

// -- ilshill 13.01.2020 № 26493
#КонецЕсли