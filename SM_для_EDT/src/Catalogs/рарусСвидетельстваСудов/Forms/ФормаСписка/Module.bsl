#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьТекстЗапросаСписка();

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	 //СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	 //Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	//СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГруппыДокументовСудовПриИзменении(Элемент)

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ГруппаСудов",  ГруппаСудов, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ГруппаСудов));

КонецПроцедуры

&НаКлиенте
Процедура ВидДокументаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВидДокумента",  ВидДокумента, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ВидДокумента));

КонецПроцедуры

&НаКлиенте
Процедура ОтборВладелецПриИзменении(Элемент)
	
	 ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Владелец",  Владелец, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Владелец));

	
КонецПроцедуры

&НаКлиенте
Процедура ОтборЗонаОтветственностиПриИзменении(Элемент)
	
	  ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ЗонаОтветственности",  ЗонаОтветственности, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ЗонаОтветственности));

КонецПроцедуры

&НаКлиенте
Процедура ОтборВАрхивеПриИзменении(Элемент)
	
	//ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "ВАрхиве",  ВАрхиве, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(ВАрхиве));

	  УстановитьТекстЗапросаСписка();
	  
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТекущемуДокументуПриИзменении(Элемент)
	
	 	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Ссылка",  Ссылка, ВидСравненияКомпоновкиДанных.Равно,, ЗначениеЗаполнено(Ссылка));

	КонецПроцедуры
	
&НаКлиенте
Процедура ОтборОтсутствующиеДокументыПриИзменении(Элемент)
	
	УстановитьТекстЗапросаСписка();

КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПриАктивизацииСтрокиНаСервере()
	
КонецФункции

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	СписокПриАктивизацииСтрокиНаСервере();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	                                                              
	УсловноеОформление.Элементы.Очистить();

	//////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	// ++ rarus yukuzi 17.09.2021   //
	//ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаДляОформления");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ОтборЭлемента.ПравоеЗначение = 3;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//Старый вариант - "количество дней не заполнено" и "осталось менее 3 месяцев до срока действия"
	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокМенее3Месяцев");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЗаполненоКоличествоДнейУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	//Новый вариант -  "прошел срок до уведомления"
	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПрошелСрокДоУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	// -- rarus yukuzi 17.09.2021

		
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаДляОформления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВАрхиве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Бессрочно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Служебный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
			
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Голубой);
	/////
		
	/////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	
	// ++ rarus yukuzi 16.09.2021   //
	//ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаДляОформления");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ОтборЭлемента.ПравоеЗначение = 1;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//Старый вариант - "количество дней не заполнено" и "осталось менее 1 месяца до срока действия"
	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокМенееМесяца");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЗаполненоКоличествоДнейУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	//Новый вариант - "прошел срок до уведомления" и "осталось менее 1 месяца до срока действия"
	ГруппаОтбора4 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПрошелСрокДоУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокМенееМесяца");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	// -- rarus yukuzi 16.09.2021


		
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаДляОформления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВАрхиве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Бессрочно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Служебный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Оранжевый);
	/////
		
	/////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата();
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ДатаДляОформления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВАрхиве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Бессрочно");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Служебный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	// ++ rarus yukuzi 30.09.2021   //
	//ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокДействия");
	//ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	//ОтборЭлемента.ПравоеЗначение = ТекущаяДата();
	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	//Старый вариант - "количество дней не заполнено" и "срок действия уже истек (меньше текущей даты)"

	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата();

	ОтборЭлемента = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ЗаполненоКоличествоДнейУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	//Новый вариант - "прошел срок до уведомления" и "срока действия уже истек (меньше текущей даты)"
	
	ГруппаОтбора4 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора4.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПрошелСрокДоУведомления");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора4.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.СрокДействия");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ОтборЭлемента.ПравоеЗначение = ТекущаяДата();


	// -- rarus yukuzi 30.09.2021


	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Красный);
	///
	
	
	/////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Список.Имя);
	
	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ВАрхиве");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.Служебный");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.СветлоСерый);
	///
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстЗапросаСписка()
	
	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	
	ИспользоватьОтборПоГрупеСудов = ЗначениеЗаполнено(ГрСудов); 
	// ++ rarus yukuzi 17.09.2021   //
	ТекстЗапроса= Справочники.рарусСвидетельстваСудов.ТекстЗапросаСписка();
	//ТекстЗапроса = "
	//|ВЫБРАТЬ
	//|	СвидетельстваСудов.Ссылка КАК Ссылка,
	//|	СвидетельстваСудов.ПометкаУдаления КАК ПометкаУдаления,
	//|	СвидетельстваСудов.Владелец КАК Владелец,
	//|	СвидетельстваСудов.Код КАК Код,
	//|	СвидетельстваСудов.Наименование КАК Наименование,
	//|	СвидетельстваСудов.Сертификат КАК Сертификат,
	//|	СвидетельстваСудов.ВидДокумента КАК ВидДокумента,
	//|	СвидетельстваСудов.ТипОсвидетельствования КАК ТипОсвидетельствования,
	//|	СвидетельстваСудов.ДатаВыдачи КАК Дата,
	//|	ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)) КАК СрокДействия,
	//|	СвидетельстваСудов.ПодтвердитьДо КАК ПодтвердитьДо,
	//|	СвидетельстваСудов.Организация КАК Организация,
	//|	СвидетельстваСудов.Значения КАК Значения,
	//|	СвидетельстваСудов.Ежегодный КАК Ежегодный,
	//|	СвидетельстваСудов.Примечение КАК Примечение,
	//|	СвидетельстваСудов.ВАрхиве КАК ВАрхиве,
	//|	СвидетельстваСудов.ОригиналДубликат КАК ОригиналДубликат,
	//|	ЕСТЬNULL(СвидетельстваСудов.Оборудование, ЗНАЧЕНИЕ(Справочник.впОбъектыРемонта.ПустаяСсылка)) КАК Оборудование,
	//|	СвидетельстваСудов.НомерДокумента КАК НомерДокумента,
	//|	СвидетельстваСудов.Комментарий КАК Комментарий,
	//|	СвидетельстваСудов.Предопределенный КАК Предопределенный,
	//|	СвидетельстваСудов.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
	//|	СвидетельстваСудов.ВидДокумента.ГруппаСудов КАК ГруппаСудов,
	//|	СвидетельстваСудов.ВидДокумента.КодФормы КАК КодФормы,
	//|	СвидетельстваСудов.ВидДокумента.ЗонаОтветственности КАК ЗонаОтветственности,
	//|	СвидетельстваСудов.ВидДокумента.Комментарий КАК Описание,
	//|	ВЫБОР
	//|		КОГДА СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	//|			ТОГДА -РАЗНОСТЬДАТ(ЕСТЬNULL(СвидетельстваСудов.СрокДействия, ДАТАВРЕМЯ(1, 1, 1)), &ТекущаяДата, МЕСЯЦ)
	//|		ИНАЧЕ ЛОЖЬ
	//|	КОНЕЦ КАК ДатаДляОформления,
	//|	ВЫБОР
	//|		КОГДА НаличиеФайлов.ЕстьФайлы ЕСТЬ NULL
	//|			ТОГДА 0
	//|		КОГДА НаличиеФайлов.ЕстьФайлы
	//|			ТОГДА 1
	//|		ИНАЧЕ 0
	//|	КОНЕЦ КАК ЕстьФайлы,
	//|	Не СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия КАК Бессрочно,
	//|	СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия КАК УчитыватьСрокДействия,
	////rarus_AfoD 27.04.2021 < 
	//|	СвидетельстваСудов.СлужебныйПризнак КАК Служебный
	////rarus_AfoD 27.04.2021 > 
	//|ИЗ
	//|	Справочник.рарусСвидетельстваСудов КАК СвидетельстваСудов
	//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	//|		ПО СвидетельстваСудов.Ссылка = НаличиеФайлов.ОбъектСФайлами
	//|ГДЕ
	//|	&УсловиеОтбора
	//|";
	// -- rarus yukuzi 17.09.2021
	
	УсловиеОтбора = "";
	Если ИспользоватьОтборПоГрупеСудов Тогда
		УсловиеОтбора = УсловиеОтбора + 
		"СвидетельстваСудов.Владелец В (ВЫБРАТЬ vftГруппыСудовСуда.Судно КАК Судно
		| ИЗ
		|	Справочник.vftГруппыСудов.Суда КАК vftГруппыСудовСуда
		| ГДЕ
		|vftГруппыСудовСуда.Ссылка = &ВходитВГруппу)";
	КонецЕсли;	
	Если НЕ ВАрхиве Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда		
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;	
		УсловиеОтбора = УсловиеОтбора + "НЕ СвидетельстваСудов.ВАрхиве";				
	КонецЕсли;	
	Если ОтсутствующиеДокументы Тогда
		Если ЗначениеЗаполнено(УсловиеОтбора) Тогда		
			УсловиеОтбора = УсловиеОтбора + " И ";
		КонецЕсли;		
		УсловиеОтбора = УсловиеОтбора + "СвидетельстваСудов.СлужебныйПризнак = Истина"; 
	КонецЕсли;
	Если ЗначениеЗаполнено(УсловиеОтбора) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", УсловиеОтбора);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&УсловиеОтбора", "ИСТИНА");
	КонецЕсли;
	
	СвойстваСписка.ТекстЗапроса = ТекстЗапроса; 
	
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Если ИспользоватьОтборПоГрупеСудов Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВходитВГруппу",ГрСудов);
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ТекущаяДата",ТекущаяДата());
	
	УстановитьУсловноеОформление();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПродлитьНаСервере(ДанныеСтроки)
				
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СвидетельстваСудов.ВидДокумента КАК ВидДокумента,
	|	СвидетельстваСудов.Организация КАК Организация,
	|	СвидетельстваСудов.Владелец КАК Владелец,
	|	СвидетельстваСудов.Наименование КАК Наименование,
	|	СвидетельстваСудов.Оборудование КАК Оборудование
	|ИЗ
	|	Справочник.рарусСвидетельстваСудов КАК СвидетельстваСудов
	|ГДЕ
	|	СвидетельстваСудов.Ссылка = &Ссылка
	|	И СвидетельстваСудов.ВидДокумента.ИмеетСрокДействия
	|";
	Запрос.УстановитьПараметр("Ссылка",ДанныеСтроки);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Выборка.Следующий();
			
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ВидДокумента", Выборка.ВидДокумента);
		ПараметрыОтбора.Вставить("Владелец",     Выборка.Владелец);
		ПараметрыОтбора.Вставить("Наименование", Выборка.Наименование);
		ПараметрыОтбора.Вставить("Организация",  Выборка.Организация);
		ПараметрыОтбора.Вставить("Оборудование", Выборка.Оборудование);
		
	Иначе 
		
		ПараметрыОтбора = Неопределено;	
				
	КонецЕсли;
	
	Возврат ПараметрыОтбора;

КонецФункции

&НаКлиенте
Процедура Продлить(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда		
		Возврат;		
	КонецЕсли;
	
	Результат = ПродлитьНаСервере(ТекущиеДанные.Ссылка);
	
	Если Не Результат = Неопределено Тогда
		
		ДополнительныеПараметры = Новый Структура("ВладецДокумент",ТекущиеДанные.Ссылка);
		
		
		ОткрытьФорму("Справочник.рарусСвидетельстваСудов.ФормаОбъекта"
		                                            ,Новый Структура("ЗначенияЗаполнения, ДополнительныеПараметры",Результат, ДополнительныеПараметры),,,,
		                                            ,Новый ОписаниеОповещения("ПродлитьЗавершение",ЭтотОбъект,ТекущиеДанные));
	Иначе
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не имеет ограничения по сроку действия. Продление его невозможно.';
		                                                                      |en = 'The document has no expiration date. It cannot be extended'"));	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрСудовПриИзменении(Элемент)
	
	УстановитьТекстЗапросаСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродлитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		ИзменитьОбъектВладелец(ДополнительныеПараметры.Ссылка);
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьОбъектВладелец(СсылкаНаОбъект)
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось заблокировать %Документ%. %ОписаниеОшибки%';
		|en = 'Failed to lock %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       СсылкаНаОбъект);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СсылкаНаОбъект);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	Объект =  СсылкаНаОбъект.ПолучитьОбъект();
	Объект.ВАрхиве = Истина; 
	
	Попытка
		
		Объект.Записать();
		
	Исключение
		
		ТекстОшибки = НСтр("ru = 'Не удалось записать %Документ%. %ОписаниеОшибки%';
		|en = 'Failed to save %Документ%. %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Документ%",       СсылкаНаОбъект);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, СсылкаНаОбъект);
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки

	 
КонецПроцедуры

#КонецОбласти
