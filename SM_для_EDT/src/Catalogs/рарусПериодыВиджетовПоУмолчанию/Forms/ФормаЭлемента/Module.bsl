
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Владелец) Тогда
		ОбщегоНазначения.СообщитьПользователю("Период необходимо создавать из формы Виджета",,,,Отказ);
	КонецЕсли;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ВиджетИмеетПоказатели(Объект.Владелец) Тогда
		Элементы.ПериодыРасчетаПоказателей.Видимость = Истина;
		Элементы.ГруппаПоказателиПростогоВиджета.Видимость = Ложь;
	ИначеЕсли Объект.ПериодыРасчетаПоказателей.Количество() Тогда
		Строка0 = Объект.ПериодыРасчетаПоказателей[0];
		СдвигДаты = Строка0.СдвигДаты;
		ВидПериода = Строка0.ВидПериода;
	КонецЕсли;
	// СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВиджетИмеетПоказатели(Виджет)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	рарусПоказателиВиджетов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.рарусПоказателиВиджетов КАК рарусПоказателиВиджетов
		|ГДЕ
		|	рарусПоказателиВиджетов.Владелец = &Виджет";
	
	Запрос.УстановитьПараметр("Виджет", Виджет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ВиджетИмеетПоказатели(Объект.Владелец) Тогда
		Если Объект.ПериодыРасчетаПоказателей.Количество() Тогда
			СтрокаПростыхПоказателей = Объект.ПериодыРасчетаПоказателей[0];
		Иначе
			СтрокаПростыхПоказателей = Объект.ПериодыРасчетаПоказателей.Добавить();
		КонецЕсли;
		СтрокаПростыхПоказателей.СдвигДаты = СдвигДаты;
		СтрокаПростыхПоказателей.ВидПериода = ВидПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ПериодаВиджета",, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодыРасчетаПоказателейПоказательПриИзменении(Элемент)
	
	СтрокаПоказателя = Элементы.ПериодыРасчетаПоказателей.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаПоказателя.Показатель) Тогда
		СтрокаПоказателя.УчитыватьПериод = ЗначениеРеквизитаОбъекта(СтрокаПоказателя.Показатель, "УчитыватьПериод");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, Реквизит)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, Реквизит);
КонецФункции

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	//	МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтаФорма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры
// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда) Экспорт
    ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды() Экспорт
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

