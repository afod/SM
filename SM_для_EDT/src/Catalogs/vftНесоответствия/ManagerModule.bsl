
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Представление = "Замечания "+ Данные.Код;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#Область Печать

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		
		//rarus_AfoD 27.08.2021 < 
		Если ТипЗнч(Параметры) = Тип("Структура") И Параметры.Свойство("Ключ") И ТипЗнч(Параметры.Ключ) = Тип("СправочникСсылка.vftНесоответствия") Тогда
			
			ПараметрыОпции = Новый Структура;
			ПараметрыОпции.Вставить("Судно", Параметры.Ключ.Судно);
			ПараметрыОпции.Вставить("Период", Параметры.Ключ.Дата);
			ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ", ПараметрыОпции);
			
		Иначе
			
			ИспользоватьФункционалСУБ = ПолучитьФункциональнуюОпцию("рарусИспользоватьФункционалСУБ");
		
		КонецЕсли; 
		//rarus_AfoD 27.08.2021 > 
		
		Если ИспользоватьФункционалСУБ Тогда 
					
			СтандартнаяОбработка = Ложь;
			ВыбраннаяФорма = "Справочник.vftНесоответствия.Форма.ФормаЭлементаСУБ";		
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// См. ЗапретРедактированияРеквизитовОбъектовПереопределяемый.ПриОпределенииОбъектовСЗаблокированнымиРеквизитами.
Функция ПолучитьБлокируемыеРеквизитыОбъекта() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("Судно");
	Результат.Добавить("ОписаниеНесоответствия");
	Результат.Добавить("ПричинаНесоответствия");
	Результат.Добавить("КорректирующиеДействия");
	Результат.Добавить("КодНесоответствия");
	Результат.Добавить("СсылкаНаДокумент");
	Результат.Добавить("ДополнительныйКомментарийНесоответствие");
	Результат.Добавить("ТребуетсяРешениеКомпании");
	Результат.Добавить("КраткоеОписаниеНесоответствия");
	Результат.Добавить("СодержаниеКорректирующийхДействий");
	Результат.Добавить("ПредписанныеСрокиУстранения");
	Результат.Добавить("ПланируемыеСрокиУстранения");
	Результат.Добавить("ДолжностьОтветственныйРешение");
	Результат.Добавить("ФИООтветственныйРешение");
	//Результат.Добавить("ДействияПринятыеДляУстранения");
	//Результат.Добавить("ДатаУстранения");
	//Результат.Добавить("ДополнительныйКомментарийДонесение");
	Результат.Добавить("Дата");
	Результат.Добавить("ДатаДонесенияОбУстранении");
	Результат.Добавить("НомерДонесения");	
	Результат.Добавить("ТребуютсяПредупреждающиеДействия");	
	Результат.Добавить("МерыПоПредотвращениюПовторенияНесоответствия");
	Результат.Добавить("ПредписанныеСрокиПредупреждающихДействий");
	Результат.Добавить("ПланируемыеСрокиВыполнения");
	Результат.Добавить("ДолжностьОтветственныйПредупреждающиеДействия");
	Результат.Добавить("ТипЗамечания");
	Результат.Добавить("ОтветственныеПодразделения");
	Результат.Добавить("ОтветственныеПодразделенияЗаПредупреждающиеДействия");	
	//Результат.Добавить("РешениеКомпанииПереключатель");
	Результат.Добавить("ТребуютсяПредупреждающиеДействия");	
	Результат.Добавить("КодЗамечаний");
	Результат.Добавить("КодУстраненияЗамечания");
	Результат.Добавить("ВладелецЗамечания");
	Результат.Добавить("ПредупреждающиеДействия");
	Результат.Добавить("ДокументыПоЗамечанию; ДокументыПоЗамечаниюДобавить");
	
	Возврат Результат;
	
КонецФункции

#Область РегистрацияОбмена

Процедура ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО) Экспорт
	
	рарусОбменСУБСервер.ПередОбработкой(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, ПРО);
	
КонецПроцедуры	

Процедура ПослеОбработки(ИмяПланаОбмена, Отказ, Объект, Объектметаданных, Выгрузка, Получатели) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Прочее

Функция ПроверитьВхождениеКонтролирующегоОрганаВГруппуРМРС(Объект) Экспорт
		
	Если ТипЗнч(Объект.ВладелецЗамечания) <> Тип("ДокументСсылка.рарусМероприятиеСУБ") Тогда 
		Возврат Ложь;
	КонецЕсли;	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусСправочникСсылок.Значение КАК Значение
	|ПОМЕСТИТЬ втОтбор
	|ИЗ
	|	Справочник.рарусСправочникСсылок КАК рарусСправочникСсылок
	|ГДЕ
	|	рарусСправочникСсылок.Ссылка = ЗНАЧЕНИЕ(Справочник.рарусСправочникСсылок.РМРС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА
	|ИЗ
	|	Документ.рарусМероприятиеСУБ КАК рарусМероприятиеСУБ
	|ГДЕ
	|	рарусМероприятиеСУБ.Ссылка = &Ссылка
	|	И рарусМероприятиеСУБ.КонтролирующийОрган В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				втОтбор.Значение КАК Значение
	|			ИЗ
	|				втОтбор КАК втОтбор)";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ВладелецЗамечания);
	
	Результат =  Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗначениеРеквзитовПоверкиПоВидуМероприятийСУБ(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка) <> Тип("ДокументСсылка.рарусМероприятиеСУБ") тогда
		Возврат Ложь;			
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	рарусВидыМероприятийСУБ.ИспользуютсяКодыЗамечанийИСроковУстранения КАК ИспользуютсяКоды
	|ИЗ
	|	Документ.рарусМероприятиеСУБ КАК рарусМероприятиеСУБ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.рарусВидыМероприятийСУБ КАК рарусВидыМероприятийСУБ
	|		ПО рарусМероприятиеСУБ.ВидМероприятия = рарусВидыМероприятийСУБ.Ссылка
	|ГДЕ
	|	рарусМероприятиеСУБ.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		ИспользуютсяКоды = Ложь;
	Иначе	
		Выборка = Результат.Выбрать();
		Выборка.Следующий();		
		ИспользуютсяКоды = Выборка.ИспользуютсяКоды;	
	КонецЕсли;	
	
	Возврат ИспользуютсяКоды;	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли