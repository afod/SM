
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	vftОбщегоНазначения.НастроитьВидФормыСписка(ЭтаФорма, Истина, "Список", Метаданные.Справочники.vftПунктыСледования);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//НастройкаФорм.НастроитьВидФормыСписка(ЭтаФорма,Истина,"СправочникСписок");
	//
	//// Реквизиты "ТолькоПорты" и "НомерПорта" могут устанавливаться при вызове формы выбора
	////-------------------------------------------------------------------------------------
	//Если ТолькоПорты Тогда
	//	Если НомерПорта=1 Тогда
	//		СправочникСписок.Отбор.ЭтоПорт1.Установить(Истина);
	//		ЭлементыФормы.СправочникСписок.НастройкаОтбора.ЭтоПорт1.Доступность=Ложь;
	//		УстановленныеОтборыПриОткрытии.ЭтоПорт1=Истина;
	//		
	//	ИначеЕсли НомерПорта=2 Тогда
	//		СправочникСписок.Отбор.ЭтоПорт2.Установить(Истина);
	//		ЭлементыФормы.СправочникСписок.НастройкаОтбора.ЭтоПорт2.Доступность=Ложь;
	//		УстановленныеОтборыПриОткрытии.ЭтоПорт2=Истина;
	//		
	//	ИначеЕсли НомерПорта=3 Тогда
	//		СправочникСписок.Отбор.ЭтоПорт3.Установить(Истина);
	//		ЭлементыФормы.СправочникСписок.НастройкаОтбора.ЭтоПорт3.Доступность=Ложь;
	//		УстановленныеОтборыПриОткрытии.ЭтоПорт3=Истина;
	//		
	//	Иначе
	//		СправочникСписок.Отбор.ЭтоПорт.Установить(Истина);
	//		ЭлементыФормы.СправочникСписок.НастройкаОтбора.ЭтоПорт.Доступность=Ложь;
	//		УстановленныеОтборыПриОткрытии.ЭтоПорт=Истина;
	//	КонецЕсли;
	//КонецЕсли;
	//
	//// Этот отбор используется, если форма вызывается из табличного поля компоновки (см. отчет "РейсыДанныеПоРейсам")
	////---------------------------------------------------------------------------------------------------------------
	//Если ТипЗнч(ЭтаФорма.ВладелецФормы)=Тип("ТабличноеПоле") Тогда
	//	КолонкаСписка=ЭтаФорма.ВладелецФормы.Колонки.Найти("Значение");
	//	Если КолонкаСписка<>Неопределено Тогда
	//		Если КолонкаСписка.ЭлементУправления.СписокВыбора.Количество()>0 Тогда
	//			СправочникСписок.Отбор.Ссылка.ВидСравнения=ВидСравнения.ВСписке;
	//			СправочникСписок.Отбор.Ссылка.Значение=КолонкаСписка.ЭлементУправления.СписокВыбора;
	//			СправочникСписок.Отбор.Ссылка.Использование=Истина;
	//			УстановленныеОтборыПриОткрытии.Ссылка=Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	ПереключательПоискаПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ПереключательПоискаПриИзменении(Элемент = Неопределено)
	
	СтрокаПоиска="";
	СброситьВсеОтборы();
	
	Если ПереключательПоиска = 0 Тогда
		УстановитьСортировкуПоКолонке("Наименование");
	Иначе
		УстановитьСортировкуПоКолонке("РасстояниеПоАтласу");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСортировкуПоКолонке(НаименованиеКолонки)
	
	ЭлементыПользовательскихНастроек = Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	Для Каждого Элемент Из ЭлементыПользовательскихНастроек Цикл
		Если ТипЗнч(Элемент) = ТипЗнч(Список.КомпоновщикНастроек.Настройки.Порядок) Тогда
			Элемент.Элементы.Очистить();
			УсловиеСортировки = Элемент.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			УсловиеСортировки.Поле = Новый ПолеКомпоновкиДанных(НаименованиеКолонки);
			УсловиеСортировки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
			УсловиеСортировки.Использование = Истина;
		КонецЕсли;    
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсеОтборы()
	
	МассивОтборовКУдалению = новый Массив;
	
	Для Каждого Элемент из Список.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование") Тогда
			МассивОтборовКУдалению.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЭлментМассива Из МассивОтборовКУдалению Цикл
		Список.Отбор.Элементы.Удалить(ЭлментМассива);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		ПереключательПоискаПриИзменении();
		Возврат;
	КонецЕсли;
	
	СброситьВсеОтборы();
	
	Если ПереключательПоиска = 0 Тогда
		// Поиск по наименованию
		//----------------------
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Наименование");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлементОтбора.Использование = Истина;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.ПравоеЗначение = СокрЛП(СтрокаПоиска);
	Иначе
		// Поиск по расстоянию
		//--------------------
		Попытка
			РасстояниеПоиска = Число(СокрЛП(СтрокаПоиска));
		Исключение
			РасстояниеПоиска = 0;
		КонецПопытки;
		
		Пункт = ПолучитьПунктПоРасстоянию(РасстояниеПоиска);
		Элементы.Список.ТекущаяСтрока = Пункт;
	 КонецЕсли;
 КонецПроцедуры
 
&НаСервере
Функция ПолучитьПунктПоРасстоянию(РасстояниеПоиска)
	
	//Необходимо для того чтобы отбор по расстоянию работал только по Пунткам отобранным в дин списке
	ТЗ_Из_ДинамическогоСписка = Получить_ТЗ_Из_ДинамическогоСписка();
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗ_Из_ДинамическогоСписка",ТЗ_Из_ДинамическогоСписка);
	Запрос.УстановитьПараметр("РасстояниеПоиска",РасстояниеПоиска);
	Запрос.Текст="ВЫБРАТЬ
	|	ТЗ_Из_ДинамическогоСписка.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВтТЗ_Из_ДинамическогоСписка
	|ИЗ
	|	&ТЗ_Из_ДинамическогоСписка КАК ТЗ_Из_ДинамическогоСписка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пункты.Ссылка КАК Ссылка,
	|	Пункты.РасстояниеПоАтласу - &РасстояниеПоиска КАК Разница
	|ПОМЕСТИТЬ ПоискВниз
	|ИЗ
	|	Справочник.vftПунктыСледования КАК Пункты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТЗ_Из_ДинамическогоСписка КАК ВтТЗ_Из_ДинамическогоСписка
	|		ПО Пункты.Ссылка = ВтТЗ_Из_ДинамическогоСписка.Ссылка
	|ГДЕ
	|	Пункты.РасстояниеПоАтласу <= &РасстояниеПоиска
	|	И &ФильтрПунктов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пункты.РасстояниеПоАтласу УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пункты.Ссылка КАК Ссылка,
	|	Пункты.РасстояниеПоАтласу - &РасстояниеПоиска КАК Разница
	|ПОМЕСТИТЬ ПоискВверх
	|ИЗ
	|	Справочник.vftПунктыСледования КАК Пункты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтТЗ_Из_ДинамическогоСписка КАК ВтТЗ_Из_ДинамическогоСписка
	|		ПО Пункты.Ссылка = ВтТЗ_Из_ДинамическогоСписка.Ссылка
	|ГДЕ
	|	Пункты.РасстояниеПоАтласу >= &РасстояниеПоиска
	|	И &ФильтрПунктов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пункты.РасстояниеПоАтласу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Поиск.Ссылка КАК Ссылка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПоискВниз.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА ПоискВниз.Разница < 0
	|				ТОГДА -ПоискВниз.Разница
	|			ИНАЧЕ ПоискВниз.Разница
	|		КОНЕЦ КАК Разница
	|	ИЗ
	|		ПоискВниз КАК ПоискВниз
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПоискВверх.Ссылка,
	|		ВЫБОР
	|			КОГДА ПоискВверх.Разница < 0
	|				ТОГДА -ПоискВверх.Разница
	|			ИНАЧЕ ПоискВверх.Разница
	|		КОНЕЦ
	|	ИЗ
	|		ПоискВверх КАК ПоискВверх) КАК Поиск
	|
	|УПОРЯДОЧИТЬ ПО
	|	Поиск.Разница";
	
	СтрокаФильтра = "";
	Запрос.Текст=СтрЗаменить(Запрос.Текст,"И &ФильтрПунктов",СтрокаФильтра);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция Получить_ТЗ_Из_ДинамическогоСписка()
 
	Схема = Элементы.Список.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.Список.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
 
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ТЗ = Новый ТаблицаЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ); 
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТЗ;
 
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаПоиска = Элемент.ТекстРедактирования;
	СтрокаПоискаПриИзменении(Элемент);
	
КонецПроцедуры

